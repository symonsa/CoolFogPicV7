

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Feb 04 15:03:14 2025

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    86                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    87  0000                     
    88                           ; Version 2.05
    89                           ; Generated 20/12/2018 GMT
    90                           ; 
    91                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    92                           ; All rights reserved.
    93                           ; 
    94                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    95                           ; 
    96                           ; Redistribution and use in source and binary forms, with or without modification, are
    97                           ; permitted provided that the following conditions are met:
    98                           ; 
    99                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   100                           ;        conditions and the following disclaimer.
   101                           ; 
   102                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   103                           ;        of conditions and the following disclaimer in the documentation and/or other
   104                           ;        materials provided with the distribution.
   105                           ; 
   106                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   107                           ;        software without specific prior written permission.
   108                           ; 
   109                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   110                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   111                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   112                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   113                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   114                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   115                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   116                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   117                           ; 
   118                           ; 
   119                           ; Code-generator required, PIC18F4550 Definitions
   120                           ; 
   121                           ; SFR Addresses
   122  0000                     
   123                           	psect	eeprom_data
   124  F00000  30 31 00 00 00 00 00 00 	db	48,49,0,0,0,0,0,0	;# 
   125  0000                     
   126                           	psect	idataBANK1
   127  001908                     __pidataBANK1:
   128                           	opt callstack 0
   129                           
   130                           ;initializer for _PumpStateMappings
   131  001908  96                 	db	low STR_1
   132  001909  7F                 	db	high STR_1
   133  00190A  59                 	db	low STR_2
   134  00190B  7F                 	db	high STR_2
   135  00190C  E7                 	db	low STR_3
   136  00190D  7E                 	db	high STR_3
   137  00190E  FF                 	db	low STR_4
   138  00190F  7E                 	db	high STR_4
   139  001910  AB                 	db	low STR_5
   140  001911  7E                 	db	high STR_5
   141  001912  38                 	db	low STR_6
   142  001913  7F                 	db	high STR_6
   143  001914  87                 	db	low STR_7
   144  001915  7F                 	db	high STR_7
   145                           
   146                           ;initializer for main@F3632
   147  001916  30                 	db	48
   148  001917  30                 	db	48
   149  001918  30                 	db	48
   150  001919  30                 	db	48
   151  00191A  30                 	db	48
   152  00191B  30                 	db	48
   153  00191C  30                 	db	48
   154  00191D  30                 	db	48
   155  00191E  30                 	db	48
   156  00191F  00                 	db	0
   157                           
   158                           ;initializer for stoa@F1144
   159  001920  28                 	db	40
   160  001921  6E                 	db	110
   161  001922  75                 	db	117
   162  001923  6C                 	db	108
   163  001924  6C                 	db	108
   164  001925  29                 	db	41
   165  001926  00                 	db	0
   166  0000                     _RCREG	set	4014
   167  0000                     _TXREG	set	4013
   168  0000                     _SPBRG	set	4015
   169  0000                     _TXSTA	set	4012
   170  0000                     _RCSTA	set	4011
   171  0000                     _TRISBbits	set	3987
   172  0000                     _TRISAbits	set	3986
   173  0000                     _PORTD	set	3971
   174  0000                     _TRISD	set	3989
   175  0000                     _TRISB	set	3987
   176  0000                     _TRISA	set	3986
   177  0000                     _PORTB	set	3969
   178  0000                     _PORTA	set	3968
   179  0000                     _ADCON1	set	4033
   180  0000                     _PORTBbits	set	3969
   181  0000                     _PORTAbits	set	3968
   182  0000                     _TMR0IF	set	32658
   183  0000                     _TMR0IE	set	32661
   184  0000                     _TXEN	set	32101
   185  0000                     _OERR	set	32089
   186  0000                     _TXIF	set	31988
   187  0000                     _RCIF	set	31989
   188  0000                     _TRMT	set	32097
   189  0000                     _PEIE	set	32662
   190  0000                     _RCIE	set	31981
   191  0000                     _TXIE	set	31980
   192  0000                     _CREN	set	32092
   193  0000                     _TX9	set	32102
   194  0000                     _SPEN	set	32095
   195  0000                     _SYNC	set	32100
   196  0000                     _TRISC7	set	31911
   197  0000                     _TRISC6	set	31910
   198  0000                     _GIE	set	32663
   199  0000                     _IRCF0	set	32412
   200  0000                     _IRCF1	set	32413
   201  0000                     _IRCF2	set	32414
   202  0000                     _RBPU	set	32655
   203  0000                     _PCFG3	set	32267
   204  0000                     _T0CS	set	32429
   205                           
   206                           	psect	mediumconst
   207  007EAA                     __pmediumconst:
   208                           	opt callstack 0
   209  007EAA  00                 	db	0
   210  007EAB                     STR_5:
   211  007EAB  73                 	db	115	;'s'
   212  007EAC  74                 	db	116	;'t'
   213  007EAD  61                 	db	97	;'a'
   214  007EAE  72                 	db	114	;'r'
   215  007EAF  74                 	db	116	;'t'
   216  007EB0  70                 	db	112	;'p'
   217  007EB1  75                 	db	117	;'u'
   218  007EB2  6D                 	db	109	;'m'
   219  007EB3  70                 	db	112	;'p'
   220  007EB4  53                 	db	83	;'S'
   221  007EB5  65                 	db	101	;'e'
   222  007EB6  63                 	db	99	;'c'
   223  007EB7  6F                 	db	111	;'o'
   224  007EB8  6E                 	db	110	;'n'
   225  007EB9  64                 	db	100	;'d'
   226  007EBA  4C                 	db	76	;'L'
   227  007EBB  57                 	db	87	;'W'
   228  007EBC  50                 	db	80	;'P'
   229  007EBD  43                 	db	67	;'C'
   230  007EBE  68                 	db	104	;'h'
   231  007EBF  65                 	db	101	;'e'
   232  007EC0  63                 	db	99	;'c'
   233  007EC1  6B                 	db	107	;'k'
   234  007EC2  53                 	db	83	;'S'
   235  007EC3  74                 	db	116	;'t'
   236  007EC4  61                 	db	97	;'a'
   237  007EC5  74                 	db	116	;'t'
   238  007EC6  65                 	db	101	;'e'
   239  007EC7  0A                 	db	10
   240  007EC8  0D                 	db	13
   241  007EC9  00                 	db	0
   242  007ECA  61                 	db	97	;'a'
   243  007ECB  62                 	db	98	;'b'
   244  007ECC  63                 	db	99	;'c'
   245  007ECD  64                 	db	100	;'d'
   246  007ECE  65                 	db	101	;'e'
   247  007ECF  66                 	db	102	;'f'
   248  007ED0  67                 	db	103	;'g'
   249  007ED1  68                 	db	104	;'h'
   250  007ED2  69                 	db	105	;'i'
   251  007ED3  6A                 	db	106	;'j'
   252  007ED4  6B                 	db	107	;'k'
   253  007ED5  6C                 	db	108	;'l'
   254  007ED6  6D                 	db	109	;'m'
   255  007ED7  6E                 	db	110	;'n'
   256  007ED8  6F                 	db	111	;'o'
   257  007ED9  70                 	db	112	;'p'
   258  007EDA  71                 	db	113	;'q'
   259  007EDB  72                 	db	114	;'r'
   260  007EDC  73                 	db	115	;'s'
   261  007EDD  74                 	db	116	;'t'
   262  007EDE  75                 	db	117	;'u'
   263  007EDF  76                 	db	118	;'v'
   264  007EE0  77                 	db	119	;'w'
   265  007EE1  78                 	db	120	;'x'
   266  007EE2  79                 	db	121	;'y'
   267  007EE3  7A                 	db	122	;'z'
   268  007EE4  0A                 	db	10
   269  007EE5  0D                 	db	13
   270  007EE6  00                 	db	0
   271  007EE7                     STR_3:
   272  007EE7  73                 	db	115	;'s'
   273  007EE8  74                 	db	116	;'t'
   274  007EE9  61                 	db	97	;'a'
   275  007EEA  72                 	db	114	;'r'
   276  007EEB  74                 	db	116	;'t'
   277  007EEC  70                 	db	112	;'p'
   278  007EED  75                 	db	117	;'u'
   279  007EEE  6D                 	db	109	;'m'
   280  007EEF  70                 	db	112	;'p'
   281  007EF0  49                 	db	73	;'I'
   282  007EF1  6E                 	db	110	;'n'
   283  007EF2  69                 	db	105	;'i'
   284  007EF3  74                 	db	116	;'t'
   285  007EF4  69                 	db	105	;'i'
   286  007EF5  61                 	db	97	;'a'
   287  007EF6  6C                 	db	108	;'l'
   288  007EF7  53                 	db	83	;'S'
   289  007EF8  74                 	db	116	;'t'
   290  007EF9  61                 	db	97	;'a'
   291  007EFA  74                 	db	116	;'t'
   292  007EFB  65                 	db	101	;'e'
   293  007EFC  0A                 	db	10
   294  007EFD  0D                 	db	13
   295  007EFE  00                 	db	0
   296  007EFF                     STR_4:
   297  007EFF  73                 	db	115	;'s'
   298  007F00  74                 	db	116	;'t'
   299  007F01  61                 	db	97	;'a'
   300  007F02  72                 	db	114	;'r'
   301  007F03  74                 	db	116	;'t'
   302  007F04  70                 	db	112	;'p'
   303  007F05  75                 	db	117	;'u'
   304  007F06  6D                 	db	109	;'m'
   305  007F07  70                 	db	112	;'p'
   306  007F08  57                 	db	87	;'W'
   307  007F09  61                 	db	97	;'a'
   308  007F0A  69                 	db	105	;'i'
   309  007F0B  74                 	db	116	;'t'
   310  007F0C  53                 	db	83	;'S'
   311  007F0D  74                 	db	116	;'t'
   312  007F0E  61                 	db	97	;'a'
   313  007F0F  74                 	db	116	;'t'
   314  007F10  65                 	db	101	;'e'
   315  007F11  0A                 	db	10
   316  007F12  0D                 	db	13
   317  007F13  00                 	db	0
   318  007F14  70                 	db	112	;'p'
   319  007F15  75                 	db	117	;'u'
   320  007F16  6D                 	db	109	;'m'
   321  007F17  70                 	db	112	;'p'
   322  007F18  4F                 	db	79	;'O'
   323  007F19  76                 	db	118	;'v'
   324  007F1A  65                 	db	101	;'e'
   325  007F1B  72                 	db	114	;'r'
   326  007F1C  6C                 	db	108	;'l'
   327  007F1D  6F                 	db	111	;'o'
   328  007F1E  61                 	db	97	;'a'
   329  007F1F  64                 	db	100	;'d'
   330  007F20  42                 	db	66	;'B'
   331  007F21  69                 	db	105	;'i'
   332  007F22  74                 	db	116	;'t'
   333  007F23  0A                 	db	10
   334  007F24  0D                 	db	13
   335  007F25  00                 	db	0
   336  007F26  64                 	db	100	;'d'
   337  007F27  75                 	db	117	;'u'
   338  007F28  6D                 	db	109	;'m'
   339  007F29  70                 	db	112	;'p'
   340  007F2A  53                 	db	83	;'S'
   341  007F2B  6F                 	db	111	;'o'
   342  007F2C  6C                 	db	108	;'l'
   343  007F2D  65                 	db	101	;'e'
   344  007F2E  6E                 	db	110	;'n'
   345  007F2F  6F                 	db	111	;'o'
   346  007F30  69                 	db	105	;'i'
   347  007F31  64                 	db	100	;'d'
   348  007F32  42                 	db	66	;'B'
   349  007F33  69                 	db	105	;'i'
   350  007F34  74                 	db	116	;'t'
   351  007F35  0A                 	db	10
   352  007F36  0D                 	db	13
   353  007F37  00                 	db	0
   354  007F38                     STR_6:
   355  007F38  73                 	db	115	;'s'
   356  007F39  74                 	db	116	;'t'
   357  007F3A  61                 	db	97	;'a'
   358  007F3B  72                 	db	114	;'r'
   359  007F3C  74                 	db	116	;'t'
   360  007F3D  6D                 	db	109	;'m'
   361  007F3E  61                 	db	97	;'a'
   362  007F3F  69                 	db	105	;'i'
   363  007F40  6E                 	db	110	;'n'
   364  007F41  53                 	db	83	;'S'
   365  007F42  74                 	db	116	;'t'
   366  007F43  61                 	db	97	;'a'
   367  007F44  74                 	db	116	;'t'
   368  007F45  65                 	db	101	;'e'
   369  007F46  0A                 	db	10
   370  007F47  0D                 	db	13
   371  007F48  00                 	db	0
   372  007F49                     STR_20:
   373  007F49  73                 	db	115	;'s'
   374  007F4A  65                 	db	101	;'e'
   375  007F4B  72                 	db	114	;'r'
   376  007F4C  69                 	db	105	;'i'
   377  007F4D  61                 	db	97	;'a'
   378  007F4E  6C                 	db	108	;'l'
   379  007F4F  20                 	db	32
   380  007F50  6F                 	db	111	;'o'
   381  007F51  76                 	db	118	;'v'
   382  007F52  65                 	db	101	;'e'
   383  007F53  72                 	db	114	;'r'
   384  007F54  66                 	db	102	;'f'
   385  007F55  6C                 	db	108	;'l'
   386  007F56  6F                 	db	111	;'o'
   387  007F57  77                 	db	119	;'w'
   388  007F58  00                 	db	0
   389  007F59                     STR_2:
   390  007F59  73                 	db	115	;'s'
   391  007F5A  68                 	db	104	;'h'
   392  007F5B  75                 	db	117	;'u'
   393  007F5C  74                 	db	116	;'t'
   394  007F5D  64                 	db	100	;'d'
   395  007F5E  6F                 	db	111	;'o'
   396  007F5F  77                 	db	119	;'w'
   397  007F60  6E                 	db	110	;'n'
   398  007F61  53                 	db	83	;'S'
   399  007F62  74                 	db	116	;'t'
   400  007F63  61                 	db	97	;'a'
   401  007F64  74                 	db	116	;'t'
   402  007F65  65                 	db	101	;'e'
   403  007F66  0A                 	db	10
   404  007F67  0D                 	db	13
   405  007F68  00                 	db	0
   406  007F69                     STR_22:
   407  007F69  4D                 	db	77	;'M'
   408  007F6A  65                 	db	101	;'e'
   409  007F6B  73                 	db	115	;'s'
   410  007F6C  73                 	db	115	;'s'
   411  007F6D  61                 	db	97	;'a'
   412  007F6E  67                 	db	103	;'g'
   413  007F6F  65                 	db	101	;'e'
   414  007F70  25                 	db	37
   415  007F71  73                 	db	115	;'s'
   416  007F72  20                 	db	32
   417  007F73  25                 	db	37
   418  007F74  64                 	db	100	;'d'
   419  007F75  0D                 	db	13
   420  007F76  0A                 	db	10
   421  007F77  00                 	db	0
   422  007F78                     STR_18:
   423  007F78  77                 	db	119	;'w'
   424  007F79  61                 	db	97	;'a'
   425  007F7A  69                 	db	105	;'i'
   426  007F7B  74                 	db	116	;'t'
   427  007F7C  69                 	db	105	;'i'
   428  007F7D  6E                 	db	110	;'n'
   429  007F7E  67                 	db	103	;'g'
   430  007F7F  78                 	db	120	;'x'
   431  007F80  78                 	db	120	;'x'
   432  007F81  78                 	db	120	;'x'
   433  007F82  78                 	db	120	;'x'
   434  007F83  20                 	db	32
   435  007F84  0A                 	db	10
   436  007F85  0D                 	db	13
   437  007F86  00                 	db	0
   438  007F87                     STR_7:
   439  007F87  70                 	db	112	;'p'
   440  007F88  75                 	db	117	;'u'
   441  007F89  6D                 	db	109	;'m'
   442  007F8A  70                 	db	112	;'p'
   443  007F8B  72                 	db	114	;'r'
   444  007F8C  75                 	db	117	;'u'
   445  007F8D  6E                 	db	110	;'n'
   446  007F8E  53                 	db	83	;'S'
   447  007F8F  74                 	db	116	;'t'
   448  007F90  61                 	db	97	;'a'
   449  007F91  74                 	db	116	;'t'
   450  007F92  65                 	db	101	;'e'
   451  007F93  0A                 	db	10
   452  007F94  0D                 	db	13
   453  007F95  00                 	db	0
   454  007F96                     STR_1:
   455  007F96  73                 	db	115	;'s'
   456  007F97  74                 	db	116	;'t'
   457  007F98  61                 	db	97	;'a'
   458  007F99  6E                 	db	110	;'n'
   459  007F9A  64                 	db	100	;'d'
   460  007F9B  62                 	db	98	;'b'
   461  007F9C  79                 	db	121	;'y'
   462  007F9D  53                 	db	83	;'S'
   463  007F9E  74                 	db	116	;'t'
   464  007F9F  61                 	db	97	;'a'
   465  007FA0  74                 	db	116	;'t'
   466  007FA1  65                 	db	101	;'e'
   467  007FA2  0A                 	db	10
   468  007FA3  0D                 	db	13
   469  007FA4  00                 	db	0
   470  007FA5                     STR_8:
   471  007FA5  62                 	db	98	;'b'
   472  007FA6  6F                 	db	111	;'o'
   473  007FA7  6F                 	db	111	;'o'
   474  007FA8  73                 	db	115	;'s'
   475  007FA9  74                 	db	116	;'t'
   476  007FAA  50                 	db	80	;'P'
   477  007FAB  75                 	db	117	;'u'
   478  007FAC  6D                 	db	109	;'m'
   479  007FAD  70                 	db	112	;'p'
   480  007FAE  42                 	db	66	;'B'
   481  007FAF  69                 	db	105	;'i'
   482  007FB0  74                 	db	116	;'t'
   483  007FB1  0A                 	db	10
   484  007FB2  0D                 	db	13
   485  007FB3  00                 	db	0
   486  007FB4  6D                 	db	109	;'m'
   487  007FB5  61                 	db	97	;'a'
   488  007FB6  69                 	db	105	;'i'
   489  007FB7  6E                 	db	110	;'n'
   490  007FB8  50                 	db	80	;'P'
   491  007FB9  75                 	db	117	;'u'
   492  007FBA  6D                 	db	109	;'m'
   493  007FBB  70                 	db	112	;'p'
   494  007FBC  42                 	db	66	;'B'
   495  007FBD  69                 	db	105	;'i'
   496  007FBE  74                 	db	116	;'t'
   497  007FBF  0A                 	db	10
   498  007FC0  0D                 	db	13
   499  007FC1  00                 	db	0
   500  007FC2  6C                 	db	108	;'l'
   501  007FC3  77                 	db	119	;'w'
   502  007FC4  6C                 	db	108	;'l'
   503  007FC5  5F                 	db	95	;'_'
   504  007FC6  66                 	db	102	;'f'
   505  007FC7  61                 	db	97	;'a'
   506  007FC8  75                 	db	117	;'u'
   507  007FC9  6C                 	db	108	;'l'
   508  007FCA  74                 	db	116	;'t'
   509  007FCB  0A                 	db	10
   510  007FCC  0D                 	db	13
   511  007FCD  00                 	db	0
   512  007FCE  6C                 	db	108	;'l'
   513  007FCF  66                 	db	102	;'f'
   514  007FD0  70                 	db	112	;'p'
   515  007FD1  5F                 	db	95	;'_'
   516  007FD2  66                 	db	102	;'f'
   517  007FD3  61                 	db	97	;'a'
   518  007FD4  75                 	db	117	;'u'
   519  007FD5  6C                 	db	108	;'l'
   520  007FD6  74                 	db	116	;'t'
   521  007FD7  0A                 	db	10
   522  007FD8  0D                 	db	13
   523  007FD9  00                 	db	0
   524  007FDA  6C                 	db	108	;'l'
   525  007FDB  77                 	db	119	;'w'
   526  007FDC  70                 	db	112	;'p'
   527  007FDD  5F                 	db	95	;'_'
   528  007FDE  66                 	db	102	;'f'
   529  007FDF  61                 	db	97	;'a'
   530  007FE0  75                 	db	117	;'u'
   531  007FE1  6C                 	db	108	;'l'
   532  007FE2  74                 	db	116	;'t'
   533  007FE3  0A                 	db	10
   534  007FE4  0D                 	db	13
   535  007FE5  00                 	db	0
   536  007FE6  70                 	db	112	;'p'
   537  007FE7  6F                 	db	111	;'o'
   538  007FE8  5F                 	db	95	;'_'
   539  007FE9  66                 	db	102	;'f'
   540  007FEA  61                 	db	97	;'a'
   541  007FEB  75                 	db	117	;'u'
   542  007FEC  6C                 	db	108	;'l'
   543  007FED  74                 	db	116	;'t'
   544  007FEE  0A                 	db	10
   545  007FEF  0D                 	db	13
   546  007FF0  00                 	db	0
   547  007FF1  77                 	db	119	;'w'
   548  007FF2  70                 	db	112	;'p'
   549  007FF3  4F                 	db	79	;'O'
   550  007FF4  6B                 	db	107	;'k'
   551  007FF5  42                 	db	66	;'B'
   552  007FF6  69                 	db	105	;'i'
   553  007FF7  74                 	db	116	;'t'
   554  007FF8  0A                 	db	10
   555  007FF9  0D                 	db	13
   556  007FFA  00                 	db	0
   557  007FFB                     STR_21:
   558  007FFB  25                 	db	37
   559  007FFC  63                 	db	99	;'c'
   560  007FFD  00                 	db	0
   561  0000                     
   562                           ; #config settings
   563  007FFE  00                 	db	0	; dummy byte at the end
   564  0000                     
   565                           	psect	cinit
   566  001230                     __pcinit:
   567                           	opt callstack 0
   568  001230                     start_initialization:
   569                           	opt callstack 0
   570  001230                     __initialization:
   571                           	opt callstack 0
   572                           
   573                           ; Initialize objects allocated to BANK1 (31 bytes)
   574                           ; load TBLPTR registers with __pidataBANK1
   575  001230  0E08               	movlw	low __pidataBANK1
   576  001232  6EF6               	movwf	tblptrl,c
   577  001234  0E19               	movlw	high __pidataBANK1
   578  001236  6EF7               	movwf	tblptrh,c
   579  001238  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   580  00123A  6EF8               	movwf	tblptru,c
   581  00123C  EE01  F02A         	lfsr	0,__pdataBANK1
   582  001240  EE10 F01F          	lfsr	1,31
   583  001244                     copy_data0:
   584  001244  0009               	tblrd		*+
   585  001246  CFF5 FFEE          	movff	tablat,postinc0
   586  00124A  50E5               	movf	postdec1,w,c
   587  00124C  50E1               	movf	fsr1l,w,c
   588  00124E  E1FA               	bnz	copy_data0
   589                           
   590                           ; Clear objects allocated to BIGRAM (520 bytes)
   591  001250  EE01  F057         	lfsr	0,__pbssBIGRAM
   592  001254  EE12 F008          	lfsr	1,520
   593  001258                     clear_0:
   594  001258  6AEE               	clrf	postinc0,c
   595  00125A  50E5               	movf	postdec1,w,c
   596  00125C  50E1               	movf	fsr1l,w,c
   597  00125E  E1FC               	bnz	clear_0
   598  001260  50E2               	movf	fsr1h,w,c
   599  001262  E1FA               	bnz	clear_0
   600                           
   601                           ; Clear objects allocated to BANK1 (42 bytes)
   602  001264  EE01  F000         	lfsr	0,__pbssBANK1
   603  001268  0E2A               	movlw	42
   604  00126A                     clear_1:
   605  00126A  6AEE               	clrf	postinc0,c
   606  00126C  06E8               	decf	wreg,f,c
   607  00126E  E1FD               	bnz	clear_1
   608                           
   609                           ; Clear objects allocated to BANK0 (86 bytes)
   610  001270  EE00  F060         	lfsr	0,__pbssBANK0
   611  001274  0E56               	movlw	86
   612  001276                     clear_2:
   613  001276  6AEE               	clrf	postinc0,c
   614  001278  06E8               	decf	wreg,f,c
   615  00127A  E1FD               	bnz	clear_2
   616                           
   617                           ; Clear objects allocated to COMRAM (13 bytes)
   618  00127C  EE00  F03F         	lfsr	0,__pbssCOMRAM
   619  001280  0E0D               	movlw	13
   620  001282                     clear_3:
   621  001282  6AEE               	clrf	postinc0,c
   622  001284  06E8               	decf	wreg,f,c
   623  001286  E1FD               	bnz	clear_3
   624  001288                     end_of_initialization:
   625                           	opt callstack 0
   626  001288                     __end_of__initialization:
   627                           	opt callstack 0
   628  001288  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   629  00128A  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   630  00128C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   631  00128E  6EF8               	movwf	tblptru,c
   632  001290  0100               	movlb	0
   633  001292  EF30  F003         	goto	_main	;jump to C main() function
   634                           
   635                           	psect	bssCOMRAM
   636  00003F                     __pbssCOMRAM:
   637                           	opt callstack 0
   638  00003F                     _width:
   639                           	opt callstack 0
   640  00003F                     	ds	2
   641  000041                     _prec:
   642                           	opt callstack 0
   643  000041                     	ds	2
   644  000043                     _flags:
   645                           	opt callstack 0
   646  000043                     	ds	2
   647  000045                     _zones:
   648                           	opt callstack 0
   649  000045                     	ds	2
   650  000047                     _fault_flags:
   651                           	opt callstack 0
   652  000047                     	ds	2
   653  000049                     _timer_count:
   654                           	opt callstack 0
   655  000049                     	ds	1
   656  00004A                     _inIdleDumpHour:
   657                           	opt callstack 0
   658  00004A                     	ds	1
   659  00004B                     _state:
   660                           	opt callstack 0
   661  00004B                     	ds	1
   662                           
   663                           	psect	bssBANK0
   664  000060                     __pbssBANK0:
   665                           	opt callstack 0
   666  000060                     _timer_events:
   667                           	opt callstack 0
   668  000060                     	ds	72
   669  0000A8                     _nout:
   670                           	opt callstack 0
   671  0000A8                     	ds	2
   672  0000AA                     receiveMessage@len:
   673                           	opt callstack 0
   674  0000AA                     	ds	2
   675  0000AC                     _outputMessage:
   676                           	opt callstack 0
   677  0000AC                     	ds	10
   678                           
   679                           	psect	bssBANK1
   680  000100                     __pbssBANK1:
   681                           	opt callstack 0
   682  000100                     _dbuf:
   683                           	opt callstack 0
   684  000100                     	ds	32
   685  000120                     receiveMessage@message:
   686                           	opt callstack 0
   687  000120                     	ds	10
   688                           
   689                           	psect	dataBANK1
   690  00012A                     __pdataBANK1:
   691                           	opt callstack 0
   692  00012A                     _PumpStateMappings:
   693                           	opt callstack 0
   694  00012A                     	ds	14
   695  000138                     main@F3632:
   696                           	opt callstack 0
   697  000138                     	ds	10
   698  000142                     stoa@F1144:
   699                           	opt callstack 0
   700  000142                     	ds	7
   701                           
   702                           	psect	bssBIGRAM
   703  000157                     __pbssBIGRAM:
   704                           	opt callstack 0
   705  000157                     _inbound:
   706                           	opt callstack 0
   707  000157                     	ds	260
   708  00025B                     _outbound:
   709                           	opt callstack 0
   710  00025B                     	ds	260
   711                           
   712                           	psect	cstackBANK1
   713  000149                     __pcstackBANK1:
   714                           	opt callstack 0
   715  000149                     main@sendGetMessageBuffer:
   716                           	opt callstack 0
   717                           
   718                           ; 10 bytes @ 0x0
   719  000149                     	ds	10
   720  000153                     main@message:
   721                           	opt callstack 0
   722                           
   723                           ; 2 bytes @ 0xA
   724  000153                     	ds	2
   725  000155                     main@msg_counter:
   726                           	opt callstack 0
   727                           
   728                           ; 2 bytes @ 0xC
   729  000155                     	ds	2
   730                           
   731                           	psect	cstackBANK0
   732  0000B6                     __pcstackBANK0:
   733                           	opt callstack 0
   734  0000B6                     ?_dtoa:
   735                           	opt callstack 0
   736  0000B6                     dtoa@fp:
   737                           	opt callstack 0
   738                           
   739                           ; 2 bytes @ 0x0
   740  0000B6                     	ds	2
   741  0000B8                     dtoa@d:
   742                           	opt callstack 0
   743                           
   744                           ; 8 bytes @ 0x2
   745  0000B8                     	ds	8
   746  0000C0                     _dtoa$1815:
   747                           	opt callstack 0
   748                           
   749                           ; 2 bytes @ 0xA
   750  0000C0                     	ds	2
   751  0000C2                     dtoa@p:
   752                           	opt callstack 0
   753                           
   754                           ; 2 bytes @ 0xC
   755  0000C2                     	ds	2
   756  0000C4                     dtoa@w:
   757                           	opt callstack 0
   758                           
   759                           ; 2 bytes @ 0xE
   760  0000C4                     	ds	2
   761  0000C6                     dtoa@s:
   762                           	opt callstack 0
   763                           
   764                           ; 2 bytes @ 0x10
   765  0000C6                     	ds	2
   766  0000C8                     dtoa@n:
   767                           	opt callstack 0
   768                           
   769                           ; 8 bytes @ 0x12
   770  0000C8                     	ds	8
   771  0000D0                     dtoa@i:
   772                           	opt callstack 0
   773                           
   774                           ; 2 bytes @ 0x1A
   775  0000D0                     	ds	2
   776  0000D2                     ?_vfpfcnvrt:
   777                           	opt callstack 0
   778  0000D2                     vfpfcnvrt@fp:
   779                           	opt callstack 0
   780                           
   781                           ; 2 bytes @ 0x1C
   782  0000D2                     	ds	2
   783  0000D4                     vfpfcnvrt@fmt:
   784                           	opt callstack 0
   785                           
   786                           ; 2 bytes @ 0x1E
   787  0000D4                     	ds	2
   788  0000D6                     vfpfcnvrt@ap:
   789                           	opt callstack 0
   790                           
   791                           ; 2 bytes @ 0x20
   792  0000D6                     	ds	2
   793  0000D8                     ??_vfpfcnvrt:
   794                           
   795                           ; 1 bytes @ 0x22
   796  0000D8                     	ds	2
   797  0000DA                     vfpfcnvrt@ll:
   798                           	opt callstack 0
   799                           
   800                           ; 8 bytes @ 0x24
   801  0000DA                     	ds	8
   802  0000E2                     vfpfcnvrt@cp:
   803                           	opt callstack 0
   804                           
   805                           ; 2 bytes @ 0x2C
   806  0000E2                     	ds	2
   807  0000E4                     vfpfcnvrt@vp:
   808                           	opt callstack 0
   809                           
   810                           ; 2 bytes @ 0x2E
   811  0000E4                     	ds	2
   812  0000E6                     vfpfcnvrt@c:
   813                           	opt callstack 0
   814                           
   815                           ; 1 bytes @ 0x30
   816  0000E6                     	ds	1
   817  0000E7                     ?_vfprintf:
   818                           	opt callstack 0
   819  0000E7                     vfprintf@fp:
   820                           	opt callstack 0
   821                           
   822                           ; 2 bytes @ 0x31
   823  0000E7                     	ds	2
   824  0000E9                     vfprintf@fmt:
   825                           	opt callstack 0
   826                           
   827                           ; 2 bytes @ 0x33
   828  0000E9                     	ds	2
   829  0000EB                     vfprintf@ap:
   830                           	opt callstack 0
   831                           
   832                           ; 2 bytes @ 0x35
   833  0000EB                     	ds	2
   834  0000ED                     vfprintf@cfmt:
   835                           	opt callstack 0
   836                           
   837                           ; 2 bytes @ 0x37
   838  0000ED                     	ds	2
   839  0000EF                     ?_printf:
   840                           	opt callstack 0
   841  0000EF                     printf@fmt:
   842                           	opt callstack 0
   843                           
   844                           ; 2 bytes @ 0x39
   845  0000EF                     	ds	8
   846  0000F7                     printf@ap:
   847                           	opt callstack 0
   848                           
   849                           ; 2 bytes @ 0x41
   850  0000F7                     	ds	2
   851  0000F9                     ?_receiveMessage:
   852                           	opt callstack 0
   853                           
   854                           ; 2 bytes @ 0x43
   855  0000F9                     	ds	2
   856  0000FB                     receiveMessage@c:
   857                           	opt callstack 0
   858                           
   859                           ; 1 bytes @ 0x45
   860  0000FB                     	ds	1
   861  0000FC                     ??_main:
   862                           
   863                           ; 1 bytes @ 0x46
   864  0000FC                     	ds	2
   865                           
   866                           	psect	cstackCOMRAM
   867  000001                     __pcstackCOMRAM:
   868                           	opt callstack 0
   869  000001                     not_full@buff:
   870                           	opt callstack 0
   871  000001                     i2push@buff:
   872                           	opt callstack 0
   873  000001                     i2pop@buff:
   874                           	opt callstack 0
   875  000001                     i2has_data@buff:
   876                           	opt callstack 0
   877                           
   878                           ; 2 bytes @ 0x0
   879  000001                     	ds	2
   880  000003                     ??i2_pop:
   881  000003                     i2push@d:
   882                           	opt callstack 0
   883                           
   884                           ; 1 bytes @ 0x2
   885  000003                     	ds	1
   886  000004                     ??i2_push:
   887                           
   888                           ; 1 bytes @ 0x3
   889  000004                     	ds	1
   890  000005                     i2pop@d:
   891                           	opt callstack 0
   892                           
   893                           ; 1 bytes @ 0x4
   894  000005                     	ds	3
   895  000008                     i2putch@c:
   896                           	opt callstack 0
   897                           
   898                           ; 1 bytes @ 0x7
   899  000008                     	ds	1
   900  000009                     puts@str:
   901                           	opt callstack 0
   902                           
   903                           ; 2 bytes @ 0x8
   904  000009                     	ds	2
   905  00000B                     puts@c:
   906                           	opt callstack 0
   907                           
   908                           ; 2 bytes @ 0xA
   909  00000B                     	ds	2
   910  00000D                     usart_interrupt@a:
   911                           	opt callstack 0
   912                           
   913                           ; 1 bytes @ 0xC
   914  00000D                     	ds	1
   915  00000E                     ??_event_timer_isr:
   916                           
   917                           ; 1 bytes @ 0xD
   918  00000E                     	ds	6
   919  000014                     ??_EventLowWaterPressureDebounceCallBack:
   920  000014                     ?_strlen:
   921                           	opt callstack 0
   922  000014                     ?___aodiv:
   923                           	opt callstack 0
   924  000014                     ?___aomod:
   925                           	opt callstack 0
   926  000014                     xtochar@x:
   927                           	opt callstack 0
   928  000014                     chartox@c:
   929                           	opt callstack 0
   930  000014                     clear_callback@callback:
   931                           	opt callstack 0
   932  000014                     push@buff:
   933                           	opt callstack 0
   934  000014                     pop@buff:
   935                           	opt callstack 0
   936  000014                     has_data@buff:
   937                           	opt callstack 0
   938  000014                     enable_callback@time_delay:
   939                           	opt callstack 0
   940  000014                     strlen@s:
   941                           	opt callstack 0
   942  000014                     ___aodiv@dividend:
   943                           	opt callstack 0
   944  000014                     ___aomod@dividend:
   945                           	opt callstack 0
   946                           
   947                           ; 8 bytes @ 0x13
   948  000014                     	ds	1
   949  000015                     ??_EventLowWaterPressureCallBack:
   950  000015                     setBaseMessage@msgAddress:
   951                           	opt callstack 0
   952                           
   953                           ; 1 bytes @ 0x14
   954  000015                     	ds	1
   955  000016                     ??_pop:
   956  000016                     ??_setBaseMessage:
   957  000016                     push@d:
   958                           	opt callstack 0
   959  000016                     enable_callback@callback:
   960                           	opt callstack 0
   961  000016                     strlen@a:
   962                           	opt callstack 0
   963                           
   964                           ; 2 bytes @ 0x15
   965  000016                     	ds	1
   966  000017                     ??_push:
   967  000017                     ??_EventFaultStateLEDCallBack:
   968  000017                     ??_monitor_water_pressure:
   969  000017                     
   970                           ; 1 bytes @ 0x16
   971  000017                     	ds	1
   972  000018                     pop@d:
   973                           	opt callstack 0
   974  000018                     _EventFaultStateLEDCallBack$217:
   975                           	opt callstack 0
   976                           
   977                           ; 2 bytes @ 0x17
   978  000018                     	ds	1
   979  000019                     setBaseMessage@messageType:
   980                           	opt callstack 0
   981                           
   982                           ; 1 bytes @ 0x18
   983  000019                     	ds	1
   984  00001A                     setBaseMessage@v:
   985                           	opt callstack 0
   986  00001A                     _EventFaultStateLEDCallBack$218:
   987                           	opt callstack 0
   988                           
   989                           ; 2 bytes @ 0x19
   990  00001A                     	ds	1
   991  00001B                     putch@c:
   992                           	opt callstack 0
   993                           
   994                           ; 1 bytes @ 0x1A
   995  00001B                     	ds	1
   996  00001C                     _EventFaultStateLEDCallBack$219:
   997                           	opt callstack 0
   998  00001C                     output_message@message:
   999                           	opt callstack 0
  1000  00001C                     fputc@c:
  1001                           	opt callstack 0
  1002  00001C                     ___aodiv@divisor:
  1003                           	opt callstack 0
  1004  00001C                     ___aomod@divisor:
  1005                           	opt callstack 0
  1006                           
  1007                           ; 8 bytes @ 0x1B
  1008  00001C                     	ds	2
  1009  00001E                     output_message@i:
  1010                           	opt callstack 0
  1011  00001E                     fputc@fp:
  1012                           	opt callstack 0
  1013                           
  1014                           ; 2 bytes @ 0x1D
  1015  00001E                     	ds	2
  1016  000020                     ??_fputc:
  1017  000020                     process_event_timer@i:
  1018                           	opt callstack 0
  1019  000020                     process_set_zones_message@inmessage:
  1020                           	opt callstack 0
  1021  000020                     process_get_status_message@inmessage:
  1022                           	opt callstack 0
  1023  000020                     process_set_address_message@inmessage:
  1024                           	opt callstack 0
  1025  000020                     process_reset_pump@inmessage:
  1026                           	opt callstack 0
  1027                           
  1028                           ; 2 bytes @ 0x1F
  1029  000020                     	ds	2
  1030  000022                     ??_process_set_zones_message:
  1031  000022                     
  1032                           ; 1 bytes @ 0x21
  1033  000022                     	ds	2
  1034  000024                     ___aodiv@counter:
  1035                           	opt callstack 0
  1036  000024                     ___aomod@counter:
  1037                           	opt callstack 0
  1038                           
  1039                           ; 1 bytes @ 0x23
  1040  000024                     	ds	1
  1041  000025                     ?_stoa:
  1042                           	opt callstack 0
  1043  000025                     ___aodiv@sign:
  1044                           	opt callstack 0
  1045  000025                     ___aomod@sign:
  1046                           	opt callstack 0
  1047  000025                     process_message@inmessage:
  1048                           	opt callstack 0
  1049  000025                     stoa@fp:
  1050                           	opt callstack 0
  1051  000025                     fputs@s:
  1052                           	opt callstack 0
  1053                           
  1054                           ; 2 bytes @ 0x24
  1055  000025                     	ds	1
  1056  000026                     ?_abs:
  1057                           	opt callstack 0
  1058  000026                     abs@a:
  1059                           	opt callstack 0
  1060  000026                     ___aodiv@quotient:
  1061                           	opt callstack 0
  1062                           
  1063                           ; 8 bytes @ 0x25
  1064  000026                     	ds	1
  1065  000027                     ??_process_message:
  1066  000027                     stoa@s:
  1067                           	opt callstack 0
  1068  000027                     fputs@fp:
  1069                           	opt callstack 0
  1070                           
  1071                           ; 2 bytes @ 0x26
  1072  000027                     	ds	1
  1073  000028                     ??_abs:
  1074                           
  1075                           ; 1 bytes @ 0x27
  1076  000028                     	ds	1
  1077  000029                     ??_stoa:
  1078  000029                     process_message@msgType:
  1079                           	opt callstack 0
  1080  000029                     fputs@c:
  1081                           	opt callstack 0
  1082                           
  1083                           ; 1 bytes @ 0x28
  1084  000029                     	ds	1
  1085  00002A                     fputs@i:
  1086                           	opt callstack 0
  1087  00002A                     stoa@nuls:
  1088                           	opt callstack 0
  1089                           
  1090                           ; 7 bytes @ 0x29
  1091  00002A                     	ds	2
  1092  00002C                     ?_pad:
  1093                           	opt callstack 0
  1094  00002C                     pad@fp:
  1095                           	opt callstack 0
  1096                           
  1097                           ; 2 bytes @ 0x2B
  1098  00002C                     	ds	2
  1099  00002E                     pad@buf:
  1100                           	opt callstack 0
  1101                           
  1102                           ; 2 bytes @ 0x2D
  1103  00002E                     	ds	2
  1104  000030                     pad@p:
  1105                           	opt callstack 0
  1106                           
  1107                           ; 2 bytes @ 0x2F
  1108  000030                     	ds	1
  1109  000031                     stoa@i:
  1110                           	opt callstack 0
  1111                           
  1112                           ; 2 bytes @ 0x30
  1113  000031                     	ds	1
  1114  000032                     ??_pad:
  1115                           
  1116                           ; 1 bytes @ 0x31
  1117  000032                     	ds	1
  1118  000033                     pad@i:
  1119                           	opt callstack 0
  1120  000033                     stoa@w:
  1121                           	opt callstack 0
  1122                           
  1123                           ; 2 bytes @ 0x32
  1124  000033                     	ds	2
  1125  000035                     pad@w:
  1126                           	opt callstack 0
  1127  000035                     stoa@cp:
  1128                           	opt callstack 0
  1129                           
  1130                           ; 2 bytes @ 0x34
  1131  000035                     	ds	2
  1132  000037                     ??_dtoa:
  1133  000037                     ?_ctoa:
  1134                           	opt callstack 0
  1135  000037                     ctoa@fp:
  1136                           	opt callstack 0
  1137  000037                     stoa@p:
  1138                           	opt callstack 0
  1139                           
  1140                           ; 2 bytes @ 0x36
  1141  000037                     	ds	2
  1142  000039                     ctoa@c:
  1143                           	opt callstack 0
  1144  000039                     stoa@l:
  1145                           	opt callstack 0
  1146                           
  1147                           ; 2 bytes @ 0x38
  1148  000039                     	ds	1
  1149  00003A                     ctoa@w:
  1150                           	opt callstack 0
  1151                           
  1152                           ; 2 bytes @ 0x39
  1153  00003A                     	ds	5
  1154  00003F                     
  1155                           ; 1 bytes @ 0x3E
  1156 ;;
  1157 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1158 ;;
  1159 ;; *************** function _main *****************
  1160 ;; Defined at:
  1161 ;;		line 258 in file "pump_control.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  sendGetMessa   10    0[BANK1 ] unsigned char [10]
  1166 ;;  msg_counter     2   12[BANK1 ] unsigned int 
  1167 ;;  message         2   10[BANK1 ] PTR unsigned char 
  1168 ;;		 -> receiveMessage@message(10), NULL(0), 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1178 ;;      Params:         0       0       0       0       0       0       0       0       0
  1179 ;;      Locals:         0       0      14       0       0       0       0       0       0
  1180 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1181 ;;      Totals:         0       2      14       0       0       0       0       0       0
  1182 ;;Total ram usage:       16 bytes
  1183 ;; Hardware stack levels required when called:   15
  1184 ;; This function calls:
  1185 ;;		_checkIfShoudReset
  1186 ;;		_clear_callback
  1187 ;;		_enable_callback
  1188 ;;		_init
  1189 ;;		_init_event_timer
  1190 ;;		_monitor_water_pressure
  1191 ;;		_printFaultState
  1192 ;;		_printPumpState
  1193 ;;		_printf
  1194 ;;		_process_event_timer
  1195 ;;		_process_get_status_message
  1196 ;;		_process_message
  1197 ;;		_pump_run
  1198 ;;		_receiveMessage
  1199 ;;		_ser_int
  1200 ;;		_serial_process_loop
  1201 ;;		_shutdown
  1202 ;;		_standby
  1203 ;;		_start_main
  1204 ;;		_start_pump
  1205 ;;		_toggleLeds
  1206 ;; This function is called by:
  1207 ;;		Startup code after reset
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text0
  1212  000660                     __ptext0:
  1213                           	opt callstack 0
  1214  000660                     _main:
  1215                           	opt callstack 16
  1216                           
  1217                           ;pump_control.c: 259:     char *message;;pump_control.c: 260:     char sendGetMessageBuf
      +                          fer[10] = {'0', '0', '0', '0', '0', '0', '0', '0', '0'};
  1218                           
  1219                           ;incstack = 0
  1220  000660  EE21  F038         	lfsr	2,main@F3632
  1221  000664  EE11  F049         	lfsr	1,main@sendGetMessageBuffer
  1222  000668  0E09               	movlw	9
  1223  00066A                     u5001:
  1224  00066A  CFDB FFE3          	movff	plusw2,plusw1
  1225  00066E  06E8               	decf	wreg,f,c
  1226  000670  E2FC               	bc	u5001
  1227                           
  1228                           ;pump_control.c: 261:     init();
  1229  000672  EC36  F008         	call	_init	;wreg free
  1230                           
  1231                           ;pump_control.c: 262:     init_event_timer();
  1232  000676  ECAB  F009         	call	_init_event_timer	;wreg free
  1233                           
  1234                           ;pump_control.c: 263:     ser_int();
  1235  00067A  EC3D  F00C         	call	_ser_int	;wreg free
  1236                           
  1237                           ;pump_control.c: 264:     printf("waitingxxxx \n\r");
  1238  00067E  0E78               	movlw	low STR_18
  1239  000680  0100               	movlb	0	; () banked
  1240  000682  6FEF               	movwf	printf@fmt& (0+255),b
  1241  000684  0E7F               	movlw	high STR_18
  1242  000686  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  1243  000688  EC16  F00C         	call	_printf	;wreg free
  1244                           
  1245                           ;pump_control.c: 281:     unsigned int msg_counter = 0;
  1246  00068C  0E00               	movlw	0
  1247  00068E  0101               	movlb	1	; () banked
  1248  000690  6F56               	movwf	(main@msg_counter+1)& (0+255),b
  1249  000692  0E00               	movlw	0
  1250  000694  6F55               	movwf	main@msg_counter& (0+255),b
  1251  000696                     l5258:
  1252                           
  1253                           ;pump_control.c: 283:         toggleLeds();
  1254  000696  EC21  F00D         	call	_toggleLeds	;wreg free
  1255                           
  1256                           ;pump_control.c: 285:         process_event_timer();
  1257  00069A  ECBB  F005         	call	_process_event_timer	;wreg free
  1258                           
  1259                           ;pump_control.c: 287:         if ((message = receiveMessage())) {
  1260  00069E  EC54  F005         	call	_receiveMessage	;wreg free
  1261  0006A2  C0F9  F153         	movff	?_receiveMessage,main@message
  1262  0006A6  C0FA  F154         	movff	?_receiveMessage+1,main@message+1
  1263  0006AA  0101               	movlb	1	; () banked
  1264  0006AC  5153               	movf	main@message& (0+255),w,b
  1265  0006AE  1154               	iorwf	(main@message+1)& (0+255),w,b
  1266  0006B0  B4D8               	btfsc	status,2,c
  1267  0006B2  D006               	goto	l5266
  1268                           
  1269                           ; BSR set to: 1
  1270                           ;pump_control.c: 289:             process_message(message);
  1271  0006B4  C153  F025         	movff	main@message,process_message@inmessage
  1272  0006B8  C154  F026         	movff	main@message+1,process_message@inmessage+1
  1273  0006BC  EC16  F006         	call	_process_message	;wreg free
  1274  0006C0                     l5266:
  1275                           
  1276                           ;pump_control.c: 292:         serial_process_loop();
  1277  0006C0  ECBF  F00C         	call	_serial_process_loop	;wreg free
  1278                           
  1279                           ;pump_control.c: 294:         msg_counter++;
  1280  0006C4  0101               	movlb	1	; () banked
  1281  0006C6  4B55               	infsnz	main@msg_counter& (0+255),f,b
  1282  0006C8  2B56               	incf	(main@msg_counter+1)& (0+255),f,b
  1283                           
  1284                           ; BSR set to: 1
  1285                           ;pump_control.c: 295:         if (msg_counter >= (1 << 10)) {
  1286  0006CA  0E04               	movlw	4
  1287  0006CC  5D56               	subwf	(main@msg_counter+1)& (0+255),w,b
  1288  0006CE  A0D8               	btfss	status,0,c
  1289  0006D0  D00F               	goto	l5280
  1290                           
  1291                           ; BSR set to: 1
  1292                           ;pump_control.c: 296:             printPumpState();
  1293  0006D2  EC23  F00D         	call	_printPumpState	;wreg free
  1294                           
  1295                           ;pump_control.c: 297:             printFaultState();
  1296  0006D6  EC24  F00D         	call	_printFaultState	;wreg free
  1297                           
  1298                           ;pump_control.c: 298:             process_get_status_message(sendGetMessageBuffer);
  1299  0006DA  0E49               	movlw	low main@sendGetMessageBuffer
  1300  0006DC  6E20               	movwf	process_get_status_message@inmessage,c
  1301  0006DE  0E01               	movlw	high main@sendGetMessageBuffer
  1302  0006E0  6E21               	movwf	process_get_status_message@inmessage+1,c
  1303  0006E2  EC62  F00C         	call	_process_get_status_message	;wreg free
  1304                           
  1305                           ;pump_control.c: 300:             msg_counter = 0;
  1306  0006E6  0E00               	movlw	0
  1307  0006E8  0101               	movlb	1	; () banked
  1308  0006EA  6F56               	movwf	(main@msg_counter+1)& (0+255),b
  1309  0006EC  0E00               	movlw	0
  1310  0006EE  6F55               	movwf	main@msg_counter& (0+255),b
  1311  0006F0                     l5280:
  1312                           
  1313                           ; BSR set to: 1
  1314                           ;pump_control.c: 305:         checkIfShoudReset();
  1315  0006F0  EC74  F00C         	call	_checkIfShoudReset	;wreg free
  1316                           
  1317                           ;pump_control.c: 306:         monitor_water_pressure();
  1318  0006F4  EC3F  F00B         	call	_monitor_water_pressure	;wreg free
  1319                           
  1320                           ;pump_control.c: 307:         if (!( !PORTBbits.RB4)) {
  1321  0006F8  A881               	btfss	3969,4,c	;volatile
  1322  0006FA  D013               	goto	l5304
  1323                           
  1324                           ;pump_control.c: 308:             clear_callback(EventPODebounce);
  1325  0006FC  0E08               	movlw	8
  1326  0006FE  ECCC  F00C         	call	_clear_callback
  1327  000702  D00F               	goto	l5304
  1328  000704                     l5288:
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;pump_control.c: 312:                 standby();
  1332  000704  ECDA  F009         	call	_standby	;wreg free
  1333                           
  1334                           ;pump_control.c: 313:                 break;
  1335  000708  D02A               	goto	l5306
  1336  00070A                     l5290:
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;pump_control.c: 315:                 shutdown();
  1340  00070A  ECA3  F00C         	call	_shutdown	;wreg free
  1341                           
  1342                           ;pump_control.c: 316:                 break;
  1343  00070E  D027               	goto	l5306
  1344  000710                     l5292:
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;pump_control.c: 318:                 start_pump();
  1348  000710  EC6F  F006         	call	_start_pump	;wreg free
  1349                           
  1350                           ;pump_control.c: 319:                 break;
  1351  000714  D024               	goto	l5306
  1352  000716                     l5298:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;pump_control.c: 327:                 start_main();
  1356  000716  ECE7  F00A         	call	_start_main	;wreg free
  1357                           
  1358                           ;pump_control.c: 328:                 break;
  1359  00071A  D021               	goto	l5306
  1360  00071C                     l5300:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;pump_control.c: 330:                 pump_run();
  1364  00071C  ECBF  F00B         	call	_pump_run	;wreg free
  1365                           
  1366                           ;pump_control.c: 331:                 break;
  1367  000720  D01E               	goto	l5306
  1368  000722                     l5304:
  1369  000722  504B               	movf	_state,w,c
  1370  000724  0100               	movlb	0	; () banked
  1371  000726  6FFC               	movwf	??_main& (0+255),b
  1372  000728  6BFD               	clrf	(??_main+1)& (0+255),b
  1373                           
  1374                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1375                           ; Switch size 1, requested type "simple"
  1376                           ; Number of cases is 1, Range of values is 0 to 0
  1377                           ; switch strategies available:
  1378                           ; Name         Instructions Cycles
  1379                           ; simple_byte            4     3 (average)
  1380                           ;	Chosen strategy is simple_byte
  1381  00072A  51FD               	movf	(??_main+1)& (0+255),w,b
  1382  00072C  0A00               	xorlw	0	; case 0
  1383  00072E  A4D8               	btfss	status,2,c
  1384  000730  D016               	goto	l5306
  1385                           
  1386                           ; BSR set to: 0
  1387                           ; Switch size 1, requested type "simple"
  1388                           ; Number of cases is 7, Range of values is 0 to 6
  1389                           ; switch strategies available:
  1390                           ; Name         Instructions Cycles
  1391                           ; simple_byte           22    12 (average)
  1392                           ;	Chosen strategy is simple_byte
  1393  000732  51FC               	movf	??_main& (0+255),w,b
  1394  000734  0A00               	xorlw	0	; case 0
  1395  000736  B4D8               	btfsc	status,2,c
  1396  000738  D7E5               	goto	l5288
  1397  00073A  0A01               	xorlw	1	; case 1
  1398  00073C  B4D8               	btfsc	status,2,c
  1399  00073E  D7E5               	goto	l5290
  1400  000740  0A03               	xorlw	3	; case 2
  1401  000742  B4D8               	btfsc	status,2,c
  1402  000744  D7E5               	goto	l5292
  1403  000746  0A01               	xorlw	1	; case 3
  1404  000748  B4D8               	btfsc	status,2,c
  1405  00074A  D7E2               	goto	l5292
  1406  00074C  0A07               	xorlw	7	; case 4
  1407  00074E  B4D8               	btfsc	status,2,c
  1408  000750  D7DF               	goto	l5292
  1409  000752  0A01               	xorlw	1	; case 5
  1410  000754  B4D8               	btfsc	status,2,c
  1411  000756  D7DF               	goto	l5298
  1412  000758  0A03               	xorlw	3	; case 6
  1413  00075A  B4D8               	btfsc	status,2,c
  1414  00075C  D7DF               	goto	l5300
  1415  00075E                     l5306:
  1416                           
  1417                           ;pump_control.c: 334:         if (state == standbyState) {
  1418  00075E  504B               	movf	_state,w,c
  1419  000760  A4D8               	btfss	status,2,c
  1420  000762  D00F               	goto	l5316
  1421                           
  1422                           ;pump_control.c: 335:             if (!timer_events[EventIdleTimeout].active) {
  1423  000764  0100               	movlb	0	; () banked
  1424  000766  B18A               	btfsc	(_timer_events+42)& (0+255),0,b	;volatile
  1425  000768  D796               	goto	l5258
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;pump_control.c: 336:                 timer_events[EventIdleTimeout].flag_bit = 0;
  1429  00076A  938A               	bcf	(_timer_events+42)& (0+255),1,b	;volatile
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;pump_control.c: 337:                 timer_events[EventIdleTimeout].flag_data = 0;
  1433  00076C  0E00               	movlw	0
  1434  00076E  6F8D               	movwf	(_timer_events+45)& (0+255),b	;volatile
  1435  000770  0E00               	movlw	0
  1436  000772  6F8C               	movwf	(_timer_events+44)& (0+255),b	;volatile
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;pump_control.c: 338:                 enable_callback(EventIdleTimeout, (0x7fff));
  1440  000774  0E7F               	movlw	127
  1441  000776  6E15               	movwf	enable_callback@time_delay+1,c
  1442  000778  6814               	setf	enable_callback@time_delay,c
  1443  00077A  0E05               	movlw	5
  1444  00077C  ECA3  F00A         	call	_enable_callback
  1445  000780  D78A               	goto	l5258
  1446  000782                     l5316:
  1447                           
  1448                           ;pump_control.c: 342:             clear_callback(EventIdleTimeout);
  1449  000782  0E05               	movlw	5
  1450  000784  ECCC  F00C         	call	_clear_callback
  1451  000788  D786               	goto	l5258
  1452  00078A                     __end_of_main:
  1453                           	opt callstack 0
  1454                           
  1455 ;; *************** function _toggleLeds *****************
  1456 ;; Defined at:
  1457 ;;		line 252 in file "pump_control.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;		None
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;		None
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      void 
  1464 ;; Registers used:
  1465 ;;		status,2, status,0
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1471 ;;      Params:         0       0       0       0       0       0       0       0       0
  1472 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1474 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1475 ;;Total ram usage:        0 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:    5
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_main
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text1
  1486  001A42                     __ptext1:
  1487                           	opt callstack 0
  1488  001A42                     _toggleLeds:
  1489                           	opt callstack 25
  1490                           
  1491                           ;pump_control.c: 253:     PORTD++;
  1492                           
  1493                           ;incstack = 0
  1494  001A42  2A83               	incf	3971,f,c	;volatile
  1495  001A44  0012               	return		;funcret
  1496  001A46                     __end_of_toggleLeds:
  1497                           	opt callstack 0
  1498                           
  1499 ;; *************** function _start_pump *****************
  1500 ;; Defined at:
  1501 ;;		line 3 in file "start_pump_state.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      void 
  1508 ;; Registers used:
  1509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1515 ;;      Params:         0       0       0       0       0       0       0       0       0
  1516 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1517 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1518 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1519 ;;Total ram usage:        0 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; Hardware stack levels required when called:    7
  1522 ;; This function calls:
  1523 ;;		_clear_callback
  1524 ;;		_clear_callback_for_shutdown
  1525 ;;		_enable_callback
  1526 ;; This function is called by:
  1527 ;;		_main
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           	psect	text2
  1532  000CDE                     __ptext2:
  1533                           	opt callstack 0
  1534  000CDE                     _start_pump:
  1535                           	opt callstack 23
  1536                           
  1537                           ;start_pump_state.c: 8:   if (( PORTAbits.RA4)) {
  1538                           
  1539                           ;incstack = 0
  1540  000CDE  A880               	btfss	3968,4,c	;volatile
  1541  000CE0  D009               	goto	l5170
  1542                           
  1543                           ;start_pump_state.c: 9:     fault_flags.lwl_fault = 1;
  1544  000CE2  8047               	bsf	_fault_flags,0,c
  1545                           
  1546                           ;start_pump_state.c: 10:     enable_callback (EventLowWaterLevel, (30*(8000000/256/4/256
      +                          )));
  1547  000CE4  0E03               	movlw	3
  1548  000CE6  6E15               	movwf	enable_callback@time_delay+1,c
  1549  000CE8  0E84               	movlw	132
  1550  000CEA  6E14               	movwf	enable_callback@time_delay,c
  1551  000CEC  0E00               	movlw	0
  1552  000CEE  ECA3  F00A         	call	_enable_callback
  1553  000CF2  0012               	return	
  1554  000CF4                     l5170:
  1555                           
  1556                           ;start_pump_state.c: 16:   if (state != startpumpWaitState) {
  1557  000CF4  0E03               	movlw	3
  1558  000CF6  184B               	xorwf	_state,w,c
  1559  000CF8  B4D8               	btfsc	status,2,c
  1560  000CFA  D002               	goto	l632
  1561                           
  1562                           ;start_pump_state.c: 17:     { PORTBbits.RB5 = (1); fault_flags.boostPumpBit = (1);};
  1563  000CFC  8A81               	bsf	3969,5,c	;volatile
  1564  000CFE  8C47               	bsf	_fault_flags,6,c
  1565  000D00                     l632:
  1566                           
  1567                           ;start_pump_state.c: 20:   if (!( (!PORTBbits.RB3) || (zones != 0) )) {
  1568  000D00  A681               	btfss	3969,3,c	;volatile
  1569  000D02  D009               	goto	l633
  1570  000D04  5045               	movf	_zones,w,c
  1571  000D06  1046               	iorwf	_zones+1,w,c
  1572  000D08  A4D8               	btfss	status,2,c
  1573  000D0A  D005               	goto	l633
  1574                           
  1575                           ;start_pump_state.c: 23:     state = shutdownState;
  1576  000D0C  0E01               	movlw	1
  1577  000D0E  6E4B               	movwf	_state,c
  1578                           
  1579                           ;start_pump_state.c: 24:      clear_callback_for_shutdown();
  1580  000D10  ECD7  F00B         	call	_clear_callback_for_shutdown	;wreg free
  1581  000D14  0012               	return	
  1582  000D16                     l633:
  1583                           
  1584                           ;start_pump_state.c: 41:     if (!fault_flags.wpOkBit) {
  1585  000D16  B847               	btfsc	_fault_flags,4,c
  1586  000D18  D034               	goto	l5214
  1587                           
  1588                           ;start_pump_state.c: 42:       if (state == startpumpInitialState) {
  1589  000D1A  0E02               	movlw	2
  1590  000D1C  184B               	xorwf	_state,w,c
  1591  000D1E  A4D8               	btfss	status,2,c
  1592  000D20  D00C               	goto	l5194
  1593                           
  1594                           ;start_pump_state.c: 46:  timer_events[EventLowWaterPressure].flag_bit = 0;
  1595  000D22  0100               	movlb	0	; () banked
  1596  000D24  936A               	bcf	(_timer_events+10)& (0+255),1,b	;volatile
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;start_pump_state.c: 47:  timer_events[EventLowWaterPressure].next_state = startpumpWait
      +                          State;
  1600  000D26  0E03               	movlw	3
  1601  000D28  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;start_pump_state.c: 48:  enable_callback (EventLowWaterPressure, (30*(8000000/256/4/256
      +                          )));
  1605  000D2A  0E03               	movlw	3
  1606  000D2C  6E15               	movwf	enable_callback@time_delay+1,c
  1607  000D2E  0E84               	movlw	132
  1608  000D30  6E14               	movwf	enable_callback@time_delay,c
  1609  000D32  0E01               	movlw	1
  1610  000D34  ECA3  F00A         	call	_enable_callback
  1611  000D38  0012               	return	
  1612  000D3A                     l5194:
  1613                           
  1614                           ;start_pump_state.c: 52:       if (state == startpumpWaitState) {
  1615  000D3A  0E03               	movlw	3
  1616  000D3C  184B               	xorwf	_state,w,c
  1617  000D3E  A4D8               	btfss	status,2,c
  1618  000D40  D00E               	goto	l5204
  1619                           
  1620                           ;start_pump_state.c: 56:  { PORTBbits.RB5 = (0); fault_flags.boostPumpBit = (0);};
  1621  000D42  9A81               	bcf	3969,5,c	;volatile
  1622  000D44  9C47               	bcf	_fault_flags,6,c
  1623                           
  1624                           ;start_pump_state.c: 58:  timer_events[EventLowWaterPressure].flag_bit = 0;
  1625  000D46  0100               	movlb	0	; () banked
  1626  000D48  936A               	bcf	(_timer_events+10)& (0+255),1,b	;volatile
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;start_pump_state.c: 59:  timer_events[EventLowWaterPressure].next_state = startpumpSeco
      +                          ndLWPCheckState;
  1630  000D4A  0E04               	movlw	4
  1631  000D4C  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;start_pump_state.c: 60:  enable_callback (EventLowWaterPressure, (30*(8000000/256/4/256
      +                          )));
  1635  000D4E  0E03               	movlw	3
  1636  000D50  6E15               	movwf	enable_callback@time_delay+1,c
  1637  000D52  0E84               	movlw	132
  1638  000D54  6E14               	movwf	enable_callback@time_delay,c
  1639  000D56  0E01               	movlw	1
  1640  000D58  ECA3  F00A         	call	_enable_callback
  1641  000D5C  0012               	return	
  1642  000D5E                     l5204:
  1643                           
  1644                           ;start_pump_state.c: 64:       if (state == startpumpSecondLWPCheckState) {
  1645  000D5E  0E04               	movlw	4
  1646  000D60  184B               	xorwf	_state,w,c
  1647  000D62  A4D8               	btfss	status,2,c
  1648  000D64  D011               	goto	l5216
  1649                           
  1650                           ;start_pump_state.c: 68:  { PORTBbits.RB5 = (1); fault_flags.boostPumpBit = (1);};
  1651  000D66  8A81               	bsf	3969,5,c	;volatile
  1652  000D68  8C47               	bsf	_fault_flags,6,c
  1653                           
  1654                           ;start_pump_state.c: 70:  timer_events[EventLowWaterPressure].flag_bit = 1;
  1655  000D6A  0100               	movlb	0	; () banked
  1656  000D6C  836A               	bsf	(_timer_events+10)& (0+255),1,b	;volatile
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;start_pump_state.c: 71:  timer_events[EventLowWaterPressure].next_state = shutdownState
      +                          ;
  1660  000D6E  0E01               	movlw	1
  1661  000D70  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;start_pump_state.c: 72:  enable_callback (EventLowWaterPressure, (30*(8000000/256/4/256
      +                          )));
  1665  000D72  0E03               	movlw	3
  1666  000D74  6E15               	movwf	enable_callback@time_delay+1,c
  1667  000D76  0E84               	movlw	132
  1668  000D78  6E14               	movwf	enable_callback@time_delay,c
  1669  000D7A  0E01               	movlw	1
  1670  000D7C  ECA3  F00A         	call	_enable_callback
  1671  000D80  0012               	return	
  1672  000D82                     l5214:
  1673                           
  1674                           ;start_pump_state.c: 79:       clear_callback (EventLowWaterPressure);
  1675  000D82  0E01               	movlw	1
  1676  000D84  ECCC  F00C         	call	_clear_callback
  1677  000D88                     l5216:
  1678                           
  1679                           ;start_pump_state.c: 83:     state = startmainState;
  1680  000D88  0E05               	movlw	5
  1681  000D8A  6E4B               	movwf	_state,c
  1682  000D8C  0012               	return		;funcret
  1683  000D8E                     __end_of_start_pump:
  1684                           	opt callstack 0
  1685                           
  1686 ;; *************** function _start_main *****************
  1687 ;; Defined at:
  1688 ;;		line 4 in file "start_main.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1702 ;;      Params:         0       0       0       0       0       0       0       0       0
  1703 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1704 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1705 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    7
  1709 ;; This function calls:
  1710 ;;		_clear_callback
  1711 ;;		_enable_callback
  1712 ;;		_monitor_pump_run
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text3
  1719  0015CE                     __ptext3:
  1720                           	opt callstack 0
  1721  0015CE                     _start_main:
  1722                           	opt callstack 23
  1723                           
  1724                           ;start_main.c: 12:     { PORTBbits.RB5 = (1); fault_flags.boostPumpBit = (1);};
  1725                           
  1726                           ;incstack = 0
  1727  0015CE  8A81               	bsf	3969,5,c	;volatile
  1728  0015D0  8C47               	bsf	_fault_flags,6,c
  1729                           
  1730                           ;start_main.c: 13:     { PORTAbits.RA1 = (1); fault_flags.mainPumpBit = (1);};
  1731  0015D2  8280               	bsf	3968,1,c	;volatile
  1732  0015D4  8A47               	bsf	_fault_flags,5,c
  1733                           
  1734                           ;start_main.c: 14:     monitor_pump_run();
  1735  0015D6  ECC7  F006         	call	_monitor_pump_run	;wreg free
  1736                           
  1737                           ;start_main.c: 16:     if (!( PORTAbits.RA5)) {
  1738  0015DA  BA80               	btfsc	3968,5,c	;volatile
  1739  0015DC  D006               	goto	l606
  1740                           
  1741                           ;start_main.c: 17:         clear_callback(EventLowFogPressure);
  1742  0015DE  0E03               	movlw	3
  1743  0015E0  ECCC  F00C         	call	_clear_callback
  1744                           
  1745                           ;start_main.c: 18:         state = pumprunState;
  1746  0015E4  0E06               	movlw	6
  1747  0015E6  6E4B               	movwf	_state,c
  1748                           
  1749                           ;start_main.c: 19:     } else {
  1750  0015E8  0012               	return	
  1751  0015EA                     l606:
  1752                           
  1753                           ;start_main.c: 20:         if (!timer_events[EventLowFogPressure].active) {
  1754  0015EA  0100               	movlb	0	; () banked
  1755  0015EC  B17A               	btfsc	(_timer_events+26)& (0+255),0,b	;volatile
  1756  0015EE  0012               	return	
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;start_main.c: 21:             timer_events[EventLowFogPressure].flag_bit = 0;
  1760  0015F0  937A               	bcf	(_timer_events+26)& (0+255),1,b	;volatile
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;start_main.c: 22:             timer_events[EventLowFogPressure].flag_data = (3*(8000000
      +                          /256/4/256));
  1764  0015F2  0E00               	movlw	0
  1765  0015F4  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  1766  0015F6  0E5A               	movlw	90
  1767  0015F8  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;start_main.c: 23:             enable_callback(EventLowFogPressure, (30*(8000000/256/4/2
      +                          56)));
  1771  0015FA  0E03               	movlw	3
  1772  0015FC  6E15               	movwf	enable_callback@time_delay+1,c
  1773  0015FE  0E84               	movlw	132
  1774  001600  6E14               	movwf	enable_callback@time_delay,c
  1775  001602  0E03               	movlw	3
  1776  001604  ECA3  F00A         	call	_enable_callback
  1777  001608  0012               	return		;funcret
  1778  00160A                     __end_of_start_main:
  1779                           	opt callstack 0
  1780                           
  1781 ;; *************** function _standby *****************
  1782 ;; Defined at:
  1783 ;;		line 3 in file "standby_state.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    6
  1804 ;; This function calls:
  1805 ;;		_clear_callback
  1806 ;;		_enable_callback
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text4
  1813  0013B4                     __ptext4:
  1814                           	opt callstack 0
  1815  0013B4                     _standby:
  1816                           	opt callstack 24
  1817                           
  1818                           ;standby_state.c: 24:   if (!( PORTAbits.RA4)) {
  1819                           
  1820                           ;incstack = 0
  1821  0013B4  B880               	btfsc	3968,4,c	;volatile
  1822  0013B6  D005               	goto	l581
  1823                           
  1824                           ;standby_state.c: 27:     clear_callback (EventLowWaterLevel);
  1825  0013B8  0E00               	movlw	0
  1826  0013BA  ECCC  F00C         	call	_clear_callback
  1827                           
  1828                           ;standby_state.c: 28:     fault_flags.lwl_fault = 0;
  1829  0013BE  9047               	bcf	_fault_flags,0,c
  1830                           
  1831                           ;standby_state.c: 29:   }
  1832  0013C0  D008               	goto	l5132
  1833  0013C2                     l581:
  1834                           
  1835                           ;standby_state.c: 31:     fault_flags.lwl_fault = 1;
  1836  0013C2  8047               	bsf	_fault_flags,0,c
  1837                           
  1838                           ;standby_state.c: 32:     enable_callback (EventLowWaterLevel, (30*(8000000/256/4/256)))
      +                          ;
  1839  0013C4  0E03               	movlw	3
  1840  0013C6  6E15               	movwf	enable_callback@time_delay+1,c
  1841  0013C8  0E84               	movlw	132
  1842  0013CA  6E14               	movwf	enable_callback@time_delay,c
  1843  0013CC  0E00               	movlw	0
  1844  0013CE  ECA3  F00A         	call	_enable_callback
  1845  0013D2                     l5132:
  1846                           
  1847                           ;standby_state.c: 37:   { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);};
  1848  0013D2  9280               	bcf	3968,1,c	;volatile
  1849  0013D4  9A47               	bcf	_fault_flags,5,c
  1850                           
  1851                           ;standby_state.c: 39:   { PORTBbits.RB5 = (0); fault_flags.boostPumpBit = (0);};
  1852  0013D6  9A81               	bcf	3969,5,c	;volatile
  1853  0013D8  9C47               	bcf	_fault_flags,6,c
  1854                           
  1855                           ;standby_state.c: 40:   if (!inIdleDumpHour){
  1856  0013DA  504A               	movf	_inIdleDumpHour,w,c
  1857  0013DC  A4D8               	btfss	status,2,c
  1858  0013DE  D002               	goto	l583
  1859                           
  1860                           ;standby_state.c: 41:      { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  1861  0013E0  9480               	bcf	3968,2,c	;volatile
  1862  0013E2  9048               	bcf	_fault_flags+1,0,c
  1863  0013E4                     l583:
  1864                           
  1865                           ;standby_state.c: 48:   if (( (!PORTBbits.RB3) || (zones != 0) )
  1866  0013E4  A681               	btfss	3969,3,c	;volatile
  1867  0013E6  D004               	goto	u4830
  1868  0013E8  5045               	movf	_zones,w,c
  1869  0013EA  1046               	iorwf	_zones+1,w,c
  1870  0013EC  B4D8               	btfsc	status,2,c
  1871  0013EE  0012               	return	
  1872  0013F0                     u4830:
  1873  0013F0  B047               	btfsc	_fault_flags,0,c
  1874  0013F2  0012               	return	
  1875  0013F4  B247               	btfsc	_fault_flags,1,c
  1876  0013F6  0012               	return	
  1877  0013F8  B447               	btfsc	_fault_flags,2,c
  1878  0013FA  0012               	return	
  1879  0013FC  B647               	btfsc	_fault_flags,3,c
  1880  0013FE  0012               	return	
  1881                           
  1882                           ;standby_state.c: 52:       && !fault_flags.po_fault) {;standby_state.c: 54:     state =
      +                           startpumpInitialState;
  1883  001400  0E02               	movlw	2
  1884  001402  6E4B               	movwf	_state,c
  1885                           
  1886                           ;standby_state.c: 55:     inIdleDumpHour = 0;
  1887  001404  0E00               	movlw	0
  1888  001406  6E4A               	movwf	_inIdleDumpHour,c
  1889                           
  1890                           ;standby_state.c: 56:      { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  1891  001408  9480               	bcf	3968,2,c	;volatile
  1892  00140A  9048               	bcf	_fault_flags+1,0,c
  1893  00140C  0012               	return		;funcret
  1894  00140E                     __end_of_standby:
  1895                           	opt callstack 0
  1896                           
  1897 ;; *************** function _shutdown *****************
  1898 ;; Defined at:
  1899 ;;		line 4 in file "shutdown_state.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1913 ;;      Params:         0       0       0       0       0       0       0       0       0
  1914 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1915 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1916 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1917 ;;Total ram usage:        0 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    6
  1920 ;; This function calls:
  1921 ;;		_enable_callback
  1922 ;; This function is called by:
  1923 ;;		_main
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text5
  1928  001946                     __ptext5:
  1929                           	opt callstack 0
  1930  001946                     _shutdown:
  1931                           	opt callstack 24
  1932                           
  1933                           ;shutdown_state.c: 14:   { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);};
  1934                           
  1935                           ;incstack = 0
  1936  001946  9280               	bcf	3968,1,c	;volatile
  1937  001948  9A47               	bcf	_fault_flags,5,c
  1938                           
  1939                           ;shutdown_state.c: 15:   { PORTBbits.RB5 = (0); fault_flags.boostPumpBit = (0);};
  1940  00194A  9A81               	bcf	3969,5,c	;volatile
  1941  00194C  9C47               	bcf	_fault_flags,6,c
  1942                           
  1943                           ;shutdown_state.c: 16:   { PORTAbits.RA2 = (1); fault_flags.dumpSolenoidBit = (1);};
  1944  00194E  8480               	bsf	3968,2,c	;volatile
  1945  001950  8048               	bsf	_fault_flags+1,0,c
  1946                           
  1947                           ;shutdown_state.c: 20:   enable_callback (EventDumpSolenoid, (2*(8000000/256/4/256)));
  1948  001952  0E00               	movlw	0
  1949  001954  6E15               	movwf	enable_callback@time_delay+1,c
  1950  001956  0E3C               	movlw	60
  1951  001958  6E14               	movwf	enable_callback@time_delay,c
  1952  00195A  0E06               	movlw	6
  1953  00195C  ECA3  F00A         	call	_enable_callback
  1954  001960  0012               	return		;funcret
  1955  001962                     __end_of_shutdown:
  1956                           	opt callstack 0
  1957                           
  1958 ;; *************** function _serial_process_loop *****************
  1959 ;; Defined at:
  1960 ;;		line 106 in file "serial.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      void 
  1967 ;; Registers used:
  1968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1974 ;;      Params:         0       0       0       0       0       0       0       0       0
  1975 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1976 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1977 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1978 ;;Total ram usage:        0 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    6
  1981 ;; This function calls:
  1982 ;;		_has_data
  1983 ;; This function is called by:
  1984 ;;		_main
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text6
  1989  00197E                     __ptext6:
  1990                           	opt callstack 0
  1991  00197E                     _serial_process_loop:
  1992                           	opt callstack 24
  1993                           
  1994                           ;serial.c: 108:     if (TRMT && has_data(&outbound)) {
  1995                           
  1996                           ;incstack = 0
  1997  00197E  A2AC               	btfss	4012,1,c	;volatile
  1998  001980  0012               	return	
  1999  001982  0E5B               	movlw	low _outbound
  2000  001984  6E14               	movwf	has_data@buff,c
  2001  001986  0E02               	movlw	high _outbound
  2002  001988  6E15               	movwf	has_data@buff+1,c
  2003  00198A  ECFF  F00C         	call	_has_data	;wreg free
  2004  00198E  0900               	iorlw	0
  2005  001990  B4D8               	btfsc	status,2,c
  2006  001992  0012               	return	
  2007                           
  2008                           ;serial.c: 110:         TXIE = 1;
  2009  001994  889D               	bsf	3997,4,c	;volatile
  2010  001996  0012               	return		;funcret
  2011  001998                     __end_of_serial_process_loop:
  2012                           	opt callstack 0
  2013                           
  2014 ;; *************** function _receiveMessage *****************
  2015 ;; Defined at:
  2016 ;;		line 222 in file "serial.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  c               1   69[BANK0 ] unsigned char 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  2   67[BANK0 ] PTR unsigned char 
  2023 ;; Registers used:
  2024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2030 ;;      Params:         0       2       0       0       0       0       0       0       0
  2031 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2033 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2034 ;;Total ram usage:        3 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:   14
  2037 ;; This function calls:
  2038 ;;		_has_data
  2039 ;;		_pop
  2040 ;;		_printf
  2041 ;; This function is called by:
  2042 ;;		_main
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text7
  2047  000AA8                     __ptext7:
  2048                           	opt callstack 0
  2049  000AA8                     _receiveMessage:
  2050                           	opt callstack 16
  2051                           
  2052                           ;serial.c: 224:   static char message[10];;serial.c: 225:   char c;;serial.c: 226:   sta
      +                          tic int len = 0;;serial.c: 228:   if (!has_data(&inbound)) {
  2053                           
  2054                           ;incstack = 0
  2055  000AA8  0E57               	movlw	low _inbound
  2056  000AAA  6E14               	movwf	has_data@buff,c
  2057  000AAC  0E01               	movlw	high _inbound
  2058  000AAE  6E15               	movwf	has_data@buff+1,c
  2059  000AB0  ECFF  F00C         	call	_has_data	;wreg free
  2060  000AB4  0900               	iorlw	0
  2061  000AB6  A4D8               	btfss	status,2,c
  2062  000AB8  D006               	goto	l5048
  2063  000ABA                     u4700:
  2064                           
  2065                           ;serial.c: 229:       return 0;
  2066  000ABA  0E00               	movlw	0
  2067  000ABC  0100               	movlb	0	; () banked
  2068  000ABE  6FF9               	movwf	?_receiveMessage& (0+255),b
  2069  000AC0  0E00               	movlw	0
  2070  000AC2  6FFA               	movwf	(?_receiveMessage+1)& (0+255),b
  2071  000AC4  0012               	return	
  2072  000AC6                     l5048:
  2073                           
  2074                           ;serial.c: 232:   c = pop(&inbound);
  2075  000AC6  0E57               	movlw	low _inbound
  2076  000AC8  6E14               	movwf	pop@buff,c
  2077  000ACA  0E01               	movlw	high _inbound
  2078  000ACC  6E15               	movwf	pop@buff+1,c
  2079  000ACE  EC62  F007         	call	_pop	;wreg free
  2080  000AD2  0100               	movlb	0	; () banked
  2081  000AD4  6FFB               	movwf	receiveMessage@c& (0+255),b
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;serial.c: 234:   if (0 == c) {
  2085  000AD6  51FB               	movf	receiveMessage@c& (0+255),w,b
  2086  000AD8  B4D8               	btfsc	status,2,c
  2087  000ADA  D7EF               	goto	u4700
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;serial.c: 239:   if ((0 == len) && (c != '{')) {
  2091  000ADC  51AA               	movf	receiveMessage@len& (0+255),w,b
  2092  000ADE  11AB               	iorwf	(receiveMessage@len+1)& (0+255),w,b
  2093  000AE0  A4D8               	btfss	status,2,c
  2094  000AE2  D004               	goto	l5064
  2095                           
  2096                           ; BSR set to: 0
  2097  000AE4  0E7B               	movlw	123
  2098  000AE6  19FB               	xorwf	receiveMessage@c& (0+255),w,b
  2099  000AE8  A4D8               	btfss	status,2,c
  2100  000AEA  D7E7               	goto	u4700
  2101  000AEC                     l5064:
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;serial.c: 244:   message[len] = c;
  2105  000AEC  0E20               	movlw	low receiveMessage@message
  2106  000AEE  25AA               	addwf	receiveMessage@len& (0+255),w,b
  2107  000AF0  6ED9               	movwf	fsr2l,c
  2108  000AF2  0E01               	movlw	high receiveMessage@message
  2109  000AF4  21AB               	addwfc	(receiveMessage@len+1)& (0+255),w,b
  2110  000AF6  6EDA               	movwf	fsr2h,c
  2111  000AF8  C0FB  FFDF         	movff	receiveMessage@c,indf2
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;serial.c: 245:   printf("%c",c);
  2115  000AFC  0EFB               	movlw	low STR_21
  2116  000AFE  6FEF               	movwf	printf@fmt& (0+255),b
  2117  000B00  0E7F               	movlw	high STR_21
  2118  000B02  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  2119  000B04  C0FB  F0F1         	movff	receiveMessage@c,?_printf+2
  2120  000B08  6BF2               	clrf	(?_printf+3)& (0+255),b
  2121  000B0A  EC16  F00C         	call	_printf	;wreg free
  2122                           
  2123                           ;serial.c: 246:   len++;
  2124  000B0E  0100               	movlb	0	; () banked
  2125  000B10  4BAA               	infsnz	receiveMessage@len& (0+255),f,b
  2126  000B12  2BAB               	incf	(receiveMessage@len+1)& (0+255),f,b
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;serial.c: 247:   if (len >= 10) {
  2130  000B14  BFAB               	btfsc	(receiveMessage@len+1)& (0+255),7,b
  2131  000B16  D00B               	goto	l5078
  2132  000B18  51AB               	movf	(receiveMessage@len+1)& (0+255),w,b
  2133  000B1A  E104               	bnz	u4740
  2134  000B1C  0E0A               	movlw	10
  2135  000B1E  5DAA               	subwf	receiveMessage@len& (0+255),w,b
  2136  000B20  A0D8               	btfss	status,0,c
  2137  000B22  D005               	goto	l5078
  2138  000B24                     u4740:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;serial.c: 249:     len = 0;
  2142  000B24  0E00               	movlw	0
  2143  000B26  6FAB               	movwf	(receiveMessage@len+1)& (0+255),b
  2144  000B28  0E00               	movlw	0
  2145  000B2A  6FAA               	movwf	receiveMessage@len& (0+255),b
  2146  000B2C  D7C6               	goto	u4700
  2147  000B2E                     l5078:
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;serial.c: 252:   if ('}' == c) {
  2151  000B2E  0E7D               	movlw	125
  2152  000B30  19FB               	xorwf	receiveMessage@c& (0+255),w,b
  2153  000B32  A4D8               	btfss	status,2,c
  2154  000B34  D7C2               	goto	u4700
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;serial.c: 253:     message[len] = 0;
  2158  000B36  0E20               	movlw	low receiveMessage@message
  2159  000B38  25AA               	addwf	receiveMessage@len& (0+255),w,b
  2160  000B3A  6ED9               	movwf	fsr2l,c
  2161  000B3C  0E01               	movlw	high receiveMessage@message
  2162  000B3E  21AB               	addwfc	(receiveMessage@len+1)& (0+255),w,b
  2163  000B40  6EDA               	movwf	fsr2h,c
  2164  000B42  0E00               	movlw	0
  2165  000B44  6EDF               	movwf	indf2,c
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;serial.c: 254:     printf("Message%s %d\r\n",message,len);
  2169  000B46  0E69               	movlw	low STR_22
  2170  000B48  6FEF               	movwf	printf@fmt& (0+255),b
  2171  000B4A  0E7F               	movlw	high STR_22
  2172  000B4C  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  2173  000B4E  0E20               	movlw	low receiveMessage@message
  2174  000B50  6FF1               	movwf	(?_printf+2)& (0+255),b
  2175  000B52  0E01               	movlw	high receiveMessage@message
  2176  000B54  6FF2               	movwf	(?_printf+3)& (0+255),b
  2177  000B56  C0AA  F0F3         	movff	receiveMessage@len,?_printf+4
  2178  000B5A  C0AB  F0F4         	movff	receiveMessage@len+1,?_printf+5
  2179  000B5E  EC16  F00C         	call	_printf	;wreg free
  2180                           
  2181                           ;serial.c: 255:     len = 0;
  2182  000B62  0E00               	movlw	0
  2183  000B64  0100               	movlb	0	; () banked
  2184  000B66  6FAB               	movwf	(receiveMessage@len+1)& (0+255),b
  2185  000B68  0E00               	movlw	0
  2186  000B6A  6FAA               	movwf	receiveMessage@len& (0+255),b
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;serial.c: 257:     return message;
  2190  000B6C  0E20               	movlw	low receiveMessage@message
  2191  000B6E  6FF9               	movwf	?_receiveMessage& (0+255),b
  2192  000B70  0E01               	movlw	high receiveMessage@message
  2193  000B72  6FFA               	movwf	(?_receiveMessage+1)& (0+255),b
  2194                           
  2195                           ; BSR set to: 0
  2196  000B74  0012               	return		;funcret
  2197  000B76                     __end_of_receiveMessage:
  2198                           	opt callstack 0
  2199                           
  2200 ;; *************** function _pop *****************
  2201 ;; Defined at:
  2202 ;;		line 27 in file "serial_buffer.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  buff            2   19[COMRAM] PTR struct .
  2205 ;;		 -> inbound(260), outbound(260), 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  d               1   23[COMRAM] unsigned char 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      unsigned char 
  2210 ;; Registers used:
  2211 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2217 ;;      Params:         2       0       0       0       0       0       0       0       0
  2218 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2219 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2220 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2221 ;;Total ram usage:        5 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    5
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_receiveMessage
  2228 ;;		_sendChars
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text8
  2233  000EC4                     __ptext8:
  2234                           	opt callstack 0
  2235  000EC4                     _pop:
  2236                           	opt callstack 24
  2237                           
  2238                           ;serial_buffer.c: 28:     unsigned char d;;serial_buffer.c: 32:     if (buff->length == 
      +                          0) {
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;incstack = 0
  2242  000EC4  EE21 F002          	lfsr	2,258
  2243  000EC8  5014               	movf	pop@buff,w,c
  2244  000ECA  26D9               	addwf	fsr2l,f,c
  2245  000ECC  5015               	movf	pop@buff+1,w,c
  2246  000ECE  22DA               	addwfc	fsr2h,f,c
  2247  000ED0  50DE               	movf	postinc2,w,c
  2248  000ED2  10DE               	iorwf	postinc2,w,c
  2249  000ED4  A4D8               	btfss	status,2,c
  2250  000ED6  D002               	goto	l484
  2251                           
  2252                           ;serial_buffer.c: 34:         return 0;
  2253  000ED8  0E00               	movlw	0
  2254  000EDA  0012               	return	
  2255  000EDC                     l484:
  2256                           
  2257                           ;serial_buffer.c: 37:     GIE = 0;
  2258  000EDC  9EF2               	bcf	4082,7,c	;volatile
  2259                           
  2260                           ;serial_buffer.c: 38:     d = buff->data[buff->start];
  2261  000EDE  EE21 F000          	lfsr	2,256
  2262  000EE2  5014               	movf	pop@buff,w,c
  2263  000EE4  26D9               	addwf	fsr2l,f,c
  2264  000EE6  5015               	movf	pop@buff+1,w,c
  2265  000EE8  22DA               	addwfc	fsr2h,f,c
  2266  000EEA  CFDE F016          	movff	postinc2,??_pop
  2267  000EEE  CFDD F017          	movff	postdec2,??_pop+1
  2268  000EF2  5016               	movf	??_pop,w,c
  2269  000EF4  2414               	addwf	pop@buff,w,c
  2270  000EF6  6ED9               	movwf	fsr2l,c
  2271  000EF8  5017               	movf	??_pop+1,w,c
  2272  000EFA  2015               	addwfc	pop@buff+1,w,c
  2273  000EFC  6EDA               	movwf	fsr2h,c
  2274  000EFE  50DF               	movf	indf2,w,c
  2275  000F00  6E18               	movwf	pop@d,c
  2276                           
  2277                           ;serial_buffer.c: 39:     buff->length--;
  2278  000F02  EE21 F002          	lfsr	2,258
  2279  000F06  5014               	movf	pop@buff,w,c
  2280  000F08  26D9               	addwf	fsr2l,f,c
  2281  000F0A  5015               	movf	pop@buff+1,w,c
  2282  000F0C  22DA               	addwfc	fsr2h,f,c
  2283  000F0E  06DE               	decf	postinc2,f,c
  2284  000F10  0E00               	movlw	0
  2285  000F12  5ADD               	subwfb	postdec2,f,c
  2286                           
  2287                           ;serial_buffer.c: 40:     buff->start = (buff->start + 1) % 256;
  2288  000F14  EE21 F000          	lfsr	2,256
  2289  000F18  5014               	movf	pop@buff,w,c
  2290  000F1A  26D9               	addwf	fsr2l,f,c
  2291  000F1C  5015               	movf	pop@buff+1,w,c
  2292  000F1E  22DA               	addwfc	fsr2h,f,c
  2293  000F20  CFDE F016          	movff	postinc2,??_pop
  2294  000F24  CFDD F017          	movff	postdec2,??_pop+1
  2295  000F28  0E01               	movlw	1
  2296  000F2A  2616               	addwf	??_pop,f,c
  2297  000F2C  0E00               	movlw	0
  2298  000F2E  2217               	addwfc	??_pop+1,f,c
  2299  000F30  0EFF               	movlw	255
  2300  000F32  1616               	andwf	??_pop,f,c
  2301  000F34  0E00               	movlw	0
  2302  000F36  1617               	andwf	??_pop+1,f,c
  2303  000F38  EE21 F000          	lfsr	2,256
  2304  000F3C  5014               	movf	pop@buff,w,c
  2305  000F3E  26D9               	addwf	fsr2l,f,c
  2306  000F40  5015               	movf	pop@buff+1,w,c
  2307  000F42  22DA               	addwfc	fsr2h,f,c
  2308  000F44  C016  FFDE         	movff	??_pop,postinc2
  2309  000F48  C017  FFDD         	movff	??_pop+1,postdec2
  2310                           
  2311                           ;serial_buffer.c: 41:     GIE = 1;
  2312  000F4C  8EF2               	bsf	4082,7,c	;volatile
  2313                           
  2314                           ;serial_buffer.c: 43:     return d;
  2315  000F4E  5018               	movf	pop@d,w,c
  2316  000F50  0012               	return		;funcret
  2317  000F52                     __end_of_pop:
  2318                           	opt callstack 0
  2319                           
  2320 ;; *************** function _has_data *****************
  2321 ;; Defined at:
  2322 ;;		line 51 in file "serial_buffer.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  buff            2   19[COMRAM] PTR struct .
  2325 ;;		 -> inbound(260), outbound(260), 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      unsigned char 
  2330 ;; Registers used:
  2331 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2337 ;;      Params:         2       0       0       0       0       0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2340 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2341 ;;Total ram usage:        2 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    5
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_serial_process_loop
  2348 ;;		_receiveMessage
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text9
  2353  0019FE                     __ptext9:
  2354                           	opt callstack 0
  2355  0019FE                     _has_data:
  2356                           	opt callstack 24
  2357                           
  2358                           ;serial_buffer.c: 52:     return buff->length;
  2359                           
  2360                           ;incstack = 0
  2361  0019FE  EE21 F002          	lfsr	2,258
  2362  001A02  5014               	movf	has_data@buff,w,c
  2363  001A04  26D9               	addwf	fsr2l,f,c
  2364  001A06  5015               	movf	has_data@buff+1,w,c
  2365  001A08  22DA               	addwfc	fsr2h,f,c
  2366  001A0A  50DF               	movf	indf2,w,c
  2367  001A0C  0012               	return		;funcret
  2368  001A0E                     __end_of_has_data:
  2369                           	opt callstack 0
  2370                           
  2371 ;; *************** function _pump_run *****************
  2372 ;; Defined at:
  2373 ;;		line 4 in file "pump_run.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;		None
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;		None
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      void 
  2380 ;; Registers used:
  2381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2387 ;;      Params:         0       0       0       0       0       0       0       0       0
  2388 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2390 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2391 ;;Total ram usage:        0 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    7
  2394 ;; This function calls:
  2395 ;;		_clear_callback
  2396 ;;		_enable_callback
  2397 ;;		_monitor_pump_run
  2398 ;; This function is called by:
  2399 ;;		_main
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           	psect	text10
  2404  00177E                     __ptext10:
  2405                           	opt callstack 0
  2406  00177E                     _pump_run:
  2407                           	opt callstack 23
  2408                           
  2409                           ;pump_run.c: 15:    monitor_pump_run();
  2410                           
  2411                           ;incstack = 0
  2412  00177E  ECC7  F006         	call	_monitor_pump_run	;wreg free
  2413                           
  2414                           ;pump_run.c: 17:  if (!( PORTAbits.RA5)) {
  2415  001782  BA80               	btfsc	3968,5,c	;volatile
  2416  001784  D004               	goto	l295
  2417                           
  2418                           ;pump_run.c: 18:       clear_callback (EventLowFogPressure);
  2419  001786  0E03               	movlw	3
  2420  001788  ECCC  F00C         	call	_clear_callback
  2421                           
  2422                           ;pump_run.c: 19:   } else {
  2423  00178C  0012               	return	
  2424  00178E                     l295:
  2425                           
  2426                           ;pump_run.c: 20:     if (!timer_events[EventLowFogPressure].active) {
  2427  00178E  0100               	movlb	0	; () banked
  2428  001790  B17A               	btfsc	(_timer_events+26)& (0+255),0,b	;volatile
  2429  001792  0012               	return	
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;pump_run.c: 21:       timer_events[EventLowFogPressure].flag_bit = 1;
  2433  001794  837A               	bsf	(_timer_events+26)& (0+255),1,b	;volatile
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;pump_run.c: 22:       timer_events[EventLowFogPressure].flag_data = (15*(8000000/256/4/
      +                          256));
  2437  001796  0E01               	movlw	1
  2438  001798  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  2439  00179A  0EC2               	movlw	194
  2440  00179C  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;pump_run.c: 23:       enable_callback (EventLowFogPressure, (15*(8000000/256/4/256)));
  2444  00179E  0E01               	movlw	1
  2445  0017A0  6E15               	movwf	enable_callback@time_delay+1,c
  2446  0017A2  0EC2               	movlw	194
  2447  0017A4  6E14               	movwf	enable_callback@time_delay,c
  2448  0017A6  0E03               	movlw	3
  2449  0017A8  ECA3  F00A         	call	_enable_callback
  2450  0017AC  0012               	return		;funcret
  2451  0017AE                     __end_of_pump_run:
  2452                           	opt callstack 0
  2453                           
  2454 ;; *************** function _monitor_pump_run *****************
  2455 ;; Defined at:
  2456 ;;		line 38 in file "pump_run.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2473 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    6
  2477 ;; This function calls:
  2478 ;;		_clear_callback
  2479 ;;		_enable_callback
  2480 ;; This function is called by:
  2481 ;;		_pump_run
  2482 ;;		_start_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text11
  2487  000D8E                     __ptext11:
  2488                           	opt callstack 0
  2489  000D8E                     _monitor_pump_run:
  2490                           	opt callstack 23
  2491                           
  2492                           ;pump_run.c: 41:     if (( (!PORTBbits.RB3) || (zones != 0) )) {
  2493                           
  2494                           ;incstack = 0
  2495  000D8E  A681               	btfss	3969,3,c	;volatile
  2496  000D90  D004               	goto	u4460
  2497  000D92  5045               	movf	_zones,w,c
  2498  000D94  1046               	iorwf	_zones+1,w,c
  2499  000D96  B4D8               	btfsc	status,2,c
  2500  000D98  D004               	goto	l301
  2501  000D9A                     u4460:
  2502                           
  2503                           ;pump_run.c: 42:       clear_callback (EventRunSignalDebounce);
  2504  000D9A  0E07               	movlw	7
  2505  000D9C  ECCC  F00C         	call	_clear_callback
  2506                           
  2507                           ;pump_run.c: 44:   } else {
  2508  000DA0  D00D               	goto	l4884
  2509  000DA2                     l301:
  2510                           
  2511                           ;pump_run.c: 46:        if (!timer_events[EventRunSignalDebounce].active) {
  2512  000DA2  0100               	movlb	0	; () banked
  2513  000DA4  B19A               	btfsc	(_timer_events+58)& (0+255),0,b	;volatile
  2514  000DA6  D00A               	goto	l4884
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;pump_run.c: 47:       timer_events[EventRunSignalDebounce].flag_bit = 0;
  2518  000DA8  939A               	bcf	(_timer_events+58)& (0+255),1,b	;volatile
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;pump_run.c: 48:       timer_events[EventRunSignalDebounce].next_state = shutdownState;
  2522  000DAA  0E01               	movlw	1
  2523  000DAC  6F9B               	movwf	(_timer_events+59)& (0+255),b	;volatile
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;pump_run.c: 49:       enable_callback (EventRunSignalDebounce, ((8000000/256/4/256)/2))
      +                          ;
  2527  000DAE  0E00               	movlw	0
  2528  000DB0  6E15               	movwf	enable_callback@time_delay+1,c
  2529  000DB2  0E0F               	movlw	15
  2530  000DB4  6E14               	movwf	enable_callback@time_delay,c
  2531  000DB6  0E07               	movlw	7
  2532  000DB8  ECA3  F00A         	call	_enable_callback
  2533  000DBC                     l4884:
  2534                           
  2535                           ;pump_run.c: 55:   if (( !PORTBbits.RB4)) {
  2536  000DBC  B881               	btfsc	3969,4,c	;volatile
  2537  000DBE  D00D               	goto	l4894
  2538                           
  2539                           ;pump_run.c: 57:        if (!timer_events[EventPODebounce].active) {
  2540  000DC0  0100               	movlb	0	; () banked
  2541  000DC2  B1A2               	btfsc	(_timer_events+66)& (0+255),0,b	;volatile
  2542  000DC4  D00A               	goto	l4894
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;pump_run.c: 58:       timer_events[EventPODebounce].flag_bit = 0;
  2546  000DC6  93A2               	bcf	(_timer_events+66)& (0+255),1,b	;volatile
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;pump_run.c: 59:       timer_events[EventPODebounce].next_state = shutdownState;
  2550  000DC8  0E01               	movlw	1
  2551  000DCA  6FA3               	movwf	(_timer_events+67)& (0+255),b	;volatile
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;pump_run.c: 60:       enable_callback (EventPODebounce, ((8000000/256/4/256)/2));
  2555  000DCC  0E00               	movlw	0
  2556  000DCE  6E15               	movwf	enable_callback@time_delay+1,c
  2557  000DD0  0E0F               	movlw	15
  2558  000DD2  6E14               	movwf	enable_callback@time_delay,c
  2559  000DD4  0E08               	movlw	8
  2560  000DD6  ECA3  F00A         	call	_enable_callback
  2561  000DDA                     l4894:
  2562                           
  2563                           ;pump_run.c: 67:   if (!( PORTAbits.RA4)) {
  2564  000DDA  B880               	btfsc	3968,4,c	;volatile
  2565  000DDC  D005               	goto	l308
  2566                           
  2567                           ;pump_run.c: 68:        clear_callback (EventLowWaterLevel);
  2568  000DDE  0E00               	movlw	0
  2569  000DE0  ECCC  F00C         	call	_clear_callback
  2570                           
  2571                           ;pump_run.c: 69:       fault_flags.lwl_fault = 0;
  2572  000DE4  9047               	bcf	_fault_flags,0,c
  2573                           
  2574                           ;pump_run.c: 70:   } else {
  2575  000DE6  D00F               	goto	l4906
  2576  000DE8                     l308:
  2577                           
  2578                           ;pump_run.c: 71:     if (!timer_events[EventLowWaterLevel].active) {
  2579  000DE8  0100               	movlb	0	; () banked
  2580  000DEA  B162               	btfsc	(_timer_events+2)& (0+255),0,b	;volatile
  2581  000DEC  D00C               	goto	l4906
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;pump_run.c: 72:       timer_events[EventLowWaterLevel].flag_bit = 1;
  2585  000DEE  8362               	bsf	(_timer_events+2)& (0+255),1,b	;volatile
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;pump_run.c: 73:       timer_events[EventLowWaterLevel].flag_data = 0;
  2589  000DF0  0E00               	movlw	0
  2590  000DF2  6F65               	movwf	(_timer_events+5)& (0+255),b	;volatile
  2591  000DF4  0E00               	movlw	0
  2592  000DF6  6F64               	movwf	(_timer_events+4)& (0+255),b	;volatile
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;pump_run.c: 74:       enable_callback (EventLowWaterLevel, (3*(8000000/256/4/256)));
  2596  000DF8  0E00               	movlw	0
  2597  000DFA  6E15               	movwf	enable_callback@time_delay+1,c
  2598  000DFC  0E5A               	movlw	90
  2599  000DFE  6E14               	movwf	enable_callback@time_delay,c
  2600  000E00  0E00               	movlw	0
  2601  000E02  ECA3  F00A         	call	_enable_callback
  2602  000E06                     l4906:
  2603                           
  2604                           ;pump_run.c: 79:   if (fault_flags.wpOkBit) {
  2605  000E06  A847               	btfss	_fault_flags,4,c
  2606  000E08  D004               	goto	l311
  2607                           
  2608                           ;pump_run.c: 80:       clear_callback (EventLowWaterPressure);
  2609  000E0A  0E01               	movlw	1
  2610  000E0C  ECCC  F00C         	call	_clear_callback
  2611                           
  2612                           ;pump_run.c: 81:   }else {
  2613  000E10  0012               	return	
  2614  000E12                     l311:
  2615                           
  2616                           ;pump_run.c: 82:     if (!timer_events[EventLowWaterPressure].active) {
  2617  000E12  0100               	movlb	0	; () banked
  2618  000E14  B16A               	btfsc	(_timer_events+10)& (0+255),0,b	;volatile
  2619  000E16  0012               	return	
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;pump_run.c: 83:       timer_events[EventLowWaterPressure].flag_bit = 1;
  2623  000E18  836A               	bsf	(_timer_events+10)& (0+255),1,b	;volatile
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;pump_run.c: 84:       timer_events[EventLowWaterPressure].next_state = shutdownState;
  2627  000E1A  0E01               	movlw	1
  2628  000E1C  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;pump_run.c: 85:       enable_callback (EventLowWaterPressure, (3*(8000000/256/4/256)));
  2632  000E1E  0E00               	movlw	0
  2633  000E20  6E15               	movwf	enable_callback@time_delay+1,c
  2634  000E22  0E5A               	movlw	90
  2635  000E24  6E14               	movwf	enable_callback@time_delay,c
  2636  000E26  0E01               	movlw	1
  2637  000E28  ECA3  F00A         	call	_enable_callback
  2638  000E2C  0012               	return		;funcret
  2639  000E2E                     __end_of_monitor_pump_run:
  2640                           	opt callstack 0
  2641                           
  2642 ;; *************** function _process_message *****************
  2643 ;; Defined at:
  2644 ;;		line 102 in file "serial_message.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  inmessage       2   36[COMRAM] PTR unsigned char 
  2647 ;;		 -> receiveMessage@message(10), NULL(0), 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  address         1    0        unsigned char 
  2650 ;;  msgType         1   40[COMRAM] unsigned char 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2660 ;;      Params:         2       0       0       0       0       0       0       0       0
  2661 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2662 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2663 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2664 ;;Total ram usage:        6 bytes
  2665 ;; Hardware stack levels used:    1
  2666 ;; Hardware stack levels required when called:    9
  2667 ;; This function calls:
  2668 ;;		_process_get_status_message
  2669 ;;		_process_reset_pump
  2670 ;;		_process_set_address_message
  2671 ;;		_process_set_zones_message
  2672 ;; This function is called by:
  2673 ;;		_main
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text12
  2678  000C2C                     __ptext12:
  2679                           	opt callstack 0
  2680  000C2C                     _process_message:
  2681                           	opt callstack 21
  2682                           
  2683                           ;serial_message.c: 110:     if (inmessage[1] == '0' || inmessage[1] == address) {
  2684                           
  2685                           ;incstack = 0
  2686  000C2C  EE20 F001          	lfsr	2,1
  2687  000C30  5025               	movf	process_message@inmessage,w,c
  2688  000C32  26D9               	addwf	fsr2l,f,c
  2689  000C34  5026               	movf	process_message@inmessage+1,w,c
  2690  000C36  22DA               	addwfc	fsr2h,f,c
  2691  000C38  0E30               	movlw	48
  2692  000C3A  18DE               	xorwf	postinc2,w,c
  2693  000C3C  B4D8               	btfsc	status,2,c
  2694  000C3E  D009               	goto	u4770
  2695  000C40  EE20 F001          	lfsr	2,1
  2696  000C44  5025               	movf	process_message@inmessage,w,c
  2697  000C46  26D9               	addwf	fsr2l,f,c
  2698  000C48  5026               	movf	process_message@inmessage+1,w,c
  2699  000C4A  22DA               	addwfc	fsr2h,f,c
  2700  000C4C  50DF               	movf	indf2,w,c
  2701  000C4E  A4D8               	btfss	status,2,c
  2702  000C50  0012               	return	
  2703  000C52                     u4770:
  2704                           
  2705                           ;serial_message.c: 112:         msgType = inmessage[2];
  2706  000C52  EE20 F002          	lfsr	2,2
  2707  000C56  5025               	movf	process_message@inmessage,w,c
  2708  000C58  26D9               	addwf	fsr2l,f,c
  2709  000C5A  5026               	movf	process_message@inmessage+1,w,c
  2710  000C5C  22DA               	addwfc	fsr2h,f,c
  2711  000C5E  50DF               	movf	indf2,w,c
  2712  000C60  6E29               	movwf	process_message@msgType,c
  2713                           
  2714                           ;serial_message.c: 114:         switch(msgType){
  2715  000C62  D01C               	goto	l5112
  2716  000C64                     l5102:
  2717                           
  2718                           ;serial_message.c: 117:                 process_set_zones_message(inmessage);
  2719  000C64  C025  F020         	movff	process_message@inmessage,process_set_zones_message@inmessage
  2720  000C68  C026  F021         	movff	process_message@inmessage+1,process_set_zones_message@inmessage+1
  2721  000C6C  ECAC  F008         	call	_process_set_zones_message	;wreg free
  2722                           
  2723                           ;serial_message.c: 118:                 break;
  2724  000C70  0012               	return	
  2725  000C72                     l5104:
  2726                           
  2727                           ;serial_message.c: 122:                 process_get_status_message(inmessage);
  2728  000C72  C025  F020         	movff	process_message@inmessage,process_get_status_message@inmessage
  2729  000C76  C026  F021         	movff	process_message@inmessage+1,process_get_status_message@inmessage+1
  2730  000C7A  EC62  F00C         	call	_process_get_status_message	;wreg free
  2731                           
  2732                           ;serial_message.c: 123:                 break;
  2733  000C7E  0012               	return	
  2734  000C80                     l5106:
  2735                           
  2736                           ;serial_message.c: 127:                 process_set_address_message(inmessage);
  2737  000C80  C025  F020         	movff	process_message@inmessage,process_set_address_message@inmessage
  2738  000C84  C026  F021         	movff	process_message@inmessage+1,process_set_address_message@inmessage+1
  2739  000C88  EC50  F00C         	call	_process_set_address_message	;wreg free
  2740                           
  2741                           ;serial_message.c: 128:                 break;
  2742  000C8C  0012               	return	
  2743  000C8E                     l5108:
  2744                           
  2745                           ;serial_message.c: 139:                 process_reset_pump(inmessage);
  2746  000C8E  C025  F020         	movff	process_message@inmessage,process_reset_pump@inmessage
  2747  000C92  C026  F021         	movff	process_message@inmessage+1,process_reset_pump@inmessage+1
  2748  000C96  EC02  F00C         	call	_process_reset_pump	;wreg free
  2749                           
  2750                           ;serial_message.c: 140:                 break;
  2751  000C9A  0012               	return	
  2752  000C9C                     l5112:
  2753  000C9C  5029               	movf	process_message@msgType,w,c
  2754  000C9E  6E27               	movwf	??_process_message& (0+255),c
  2755  000CA0  6A28               	clrf	(??_process_message+1)& (0+255),c
  2756                           
  2757                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2758                           ; Switch size 1, requested type "simple"
  2759                           ; Number of cases is 1, Range of values is 0 to 0
  2760                           ; switch strategies available:
  2761                           ; Name         Instructions Cycles
  2762                           ; simple_byte            4     3 (average)
  2763                           ;	Chosen strategy is simple_byte
  2764  000CA2  5028               	movf	??_process_message+1,w,c
  2765  000CA4  0A00               	xorlw	0	; case 0
  2766  000CA6  A4D8               	btfss	status,2,c
  2767  000CA8  0012               	return	
  2768                           
  2769                           ; Switch size 1, requested type "simple"
  2770                           ; Number of cases is 8, Range of values is 65 to 115
  2771                           ; switch strategies available:
  2772                           ; Name         Instructions Cycles
  2773                           ; simple_byte           25    13 (average)
  2774                           ;	Chosen strategy is simple_byte
  2775  000CAA  5027               	movf	??_process_message,w,c
  2776  000CAC  0A41               	xorlw	65	; case 65
  2777  000CAE  B4D8               	btfsc	status,2,c
  2778  000CB0  D7E7               	goto	l5106
  2779  000CB2  0A06               	xorlw	6	; case 71
  2780  000CB4  B4D8               	btfsc	status,2,c
  2781  000CB6  D7DD               	goto	l5104
  2782  000CB8  0A0A               	xorlw	10	; case 77
  2783  000CBA  B4D8               	btfsc	status,2,c
  2784  000CBC  D7E8               	goto	l5108
  2785  000CBE  0A1E               	xorlw	30	; case 83
  2786  000CC0  B4D8               	btfsc	status,2,c
  2787  000CC2  D7D0               	goto	l5102
  2788  000CC4  0A32               	xorlw	50	; case 97
  2789  000CC6  B4D8               	btfsc	status,2,c
  2790  000CC8  D7DB               	goto	l5106
  2791  000CCA  0A06               	xorlw	6	; case 103
  2792  000CCC  B4D8               	btfsc	status,2,c
  2793  000CCE  D7D1               	goto	l5104
  2794  000CD0  0A0A               	xorlw	10	; case 109
  2795  000CD2  B4D8               	btfsc	status,2,c
  2796  000CD4  D7DC               	goto	l5108
  2797  000CD6  0A1E               	xorlw	30	; case 115
  2798  000CD8  A4D8               	btfss	status,2,c
  2799  000CDA  0012               	return	
  2800  000CDC  D7C3               	goto	l5102
  2801  000CDE                     __end_of_process_message:
  2802                           	opt callstack 0
  2803                           
  2804 ;; *************** function _process_set_zones_message *****************
  2805 ;; Defined at:
  2806 ;;		line 65 in file "serial_message.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2809 ;;		 -> receiveMessage@message(10), NULL(0), 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;		None
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         2       0       0       0       0       0       0       0       0
  2822 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2823 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2824 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2825 ;;Total ram usage:        5 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    8
  2828 ;; This function calls:
  2829 ;;		_output_message
  2830 ;;		_setBaseMessage
  2831 ;;		_xtochar
  2832 ;; This function is called by:
  2833 ;;		_process_message
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text13
  2838  001158                     __ptext13:
  2839                           	opt callstack 0
  2840  001158                     _process_set_zones_message:
  2841                           	opt callstack 21
  2842                           
  2843                           ;serial_message.c: 66:     zones = (xtochar(inmessage[3]) << 4) + xtochar(inmessage[4]);
  2844                           
  2845                           ;incstack = 0
  2846  001158  EE20 F004          	lfsr	2,4
  2847  00115C  5020               	movf	process_set_zones_message@inmessage,w,c
  2848  00115E  26D9               	addwf	fsr2l,f,c
  2849  001160  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2850  001162  22DA               	addwfc	fsr2h,f,c
  2851  001164  50DF               	movf	indf2,w,c
  2852  001166  EC05  F00B         	call	_xtochar
  2853  00116A  6E22               	movwf	??_process_set_zones_message& (0+255),c
  2854  00116C  EE20 F003          	lfsr	2,3
  2855  001170  5020               	movf	process_set_zones_message@inmessage,w,c
  2856  001172  26D9               	addwf	fsr2l,f,c
  2857  001174  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2858  001176  22DA               	addwfc	fsr2h,f,c
  2859  001178  50DF               	movf	indf2,w,c
  2860  00117A  EC05  F00B         	call	_xtochar
  2861  00117E  6E23               	movwf	(??_process_set_zones_message+1)& (0+255),c
  2862  001180  6A24               	clrf	(??_process_set_zones_message+2)& (0+255),c
  2863  001182  3A23               	swapf	??_process_set_zones_message+1,f,c
  2864  001184  3A24               	swapf	??_process_set_zones_message+2,f,c
  2865  001186  0EF0               	movlw	240
  2866  001188  1624               	andwf	??_process_set_zones_message+2,f,c
  2867  00118A  5023               	movf	??_process_set_zones_message+1,w,c
  2868  00118C  0B0F               	andlw	15
  2869  00118E  1224               	iorwf	??_process_set_zones_message+2,f,c
  2870  001190  0EF0               	movlw	240
  2871  001192  1623               	andwf	??_process_set_zones_message+1,f,c
  2872  001194  5022               	movf	??_process_set_zones_message,w,c
  2873  001196  2423               	addwf	??_process_set_zones_message+1,w,c
  2874  001198  6E45               	movwf	_zones,c
  2875  00119A  0E00               	movlw	0
  2876  00119C  2024               	addwfc	??_process_set_zones_message+2,w,c
  2877  00119E  6E46               	movwf	_zones+1,c
  2878                           
  2879                           ;serial_message.c: 67:     setBaseMessage('s', inmessage[1]);
  2880  0011A0  EE20 F001          	lfsr	2,1
  2881  0011A4  5020               	movf	process_set_zones_message@inmessage,w,c
  2882  0011A6  26D9               	addwf	fsr2l,f,c
  2883  0011A8  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2884  0011AA  22DA               	addwfc	fsr2h,f,c
  2885  0011AC  50DF               	movf	indf2,w,c
  2886  0011AE  6E15               	movwf	setBaseMessage@msgAddress,c
  2887  0011B0  0E73               	movlw	115
  2888  0011B2  ECF0  F007         	call	_setBaseMessage
  2889                           
  2890                           ;serial_message.c: 70:     output_message(outputMessage);
  2891  0011B6  0EAC               	movlw	low _outputMessage
  2892  0011B8  6E1C               	movwf	output_message@message,c
  2893  0011BA  0E00               	movlw	high _outputMessage
  2894  0011BC  6E1D               	movwf	output_message@message+1,c
  2895  0011BE  EC32  F00A         	call	_output_message	;wreg free
  2896  0011C2  0012               	return		;funcret
  2897  0011C4                     __end_of_process_set_zones_message:
  2898                           	opt callstack 0
  2899                           
  2900 ;; *************** function _xtochar *****************
  2901 ;; Defined at:
  2902 ;;		line 18 in file "serial_message.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  x               1    wreg     unsigned char 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  x               1   19[COMRAM] unsigned char 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      unsigned char 
  2909 ;; Registers used:
  2910 ;;		wreg, status,2, status,0
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2916 ;;      Params:         0       0       0       0       0       0       0       0       0
  2917 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2919 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2920 ;;Total ram usage:        1 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    5
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_process_set_zones_message
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text14
  2931  00160A                     __ptext14:
  2932                           	opt callstack 0
  2933  00160A                     _xtochar:
  2934                           	opt callstack 23
  2935                           
  2936                           ;incstack = 0
  2937                           ;xtochar@x stored from wreg
  2938  00160A  6E14               	movwf	xtochar@x,c
  2939                           
  2940                           ;serial_message.c: 19:     if ((x >= '0')
  2941  00160C  0E2F               	movlw	47
  2942  00160E  6414               	cpfsgt	xtochar@x,c
  2943  001610  D006               	goto	l4690
  2944  001612  0E3A               	movlw	58
  2945  001614  6014               	cpfslt	xtochar@x,c
  2946  001616  D003               	goto	l4690
  2947                           
  2948                           ;serial_message.c: 20:             && (x <= '9')) {;serial_message.c: 21:         return
      +                           (x - '0');
  2949  001618  5014               	movf	xtochar@x,w,c
  2950  00161A  0FD0               	addlw	208
  2951  00161C  0012               	return	
  2952  00161E                     l4690:
  2953  00161E  0E60               	movlw	96
  2954  001620  6414               	cpfsgt	xtochar@x,c
  2955  001622  D006               	goto	l4700
  2956  001624  0E67               	movlw	103
  2957  001626  6014               	cpfslt	xtochar@x,c
  2958  001628  D003               	goto	l4700
  2959                           
  2960                           ;serial_message.c: 23:             && (x <= 'f')) {;serial_message.c: 24:         return
      +                           (x) - 'a' + 10;
  2961  00162A  5014               	movf	xtochar@x,w,c
  2962  00162C  0FA9               	addlw	169
  2963  00162E  0012               	return	
  2964  001630                     l4700:
  2965  001630  0E40               	movlw	64
  2966  001632  6414               	cpfsgt	xtochar@x,c
  2967  001634  D006               	goto	l4708
  2968  001636  0E47               	movlw	71
  2969  001638  6014               	cpfslt	xtochar@x,c
  2970  00163A  D003               	goto	l4708
  2971                           
  2972                           ;serial_message.c: 27:             && (x <= 'F')) {;serial_message.c: 28:         return
      +                           (x) - 'F' + 10;
  2973  00163C  5014               	movf	xtochar@x,w,c
  2974  00163E  0FC4               	addlw	196
  2975  001640  0012               	return	
  2976  001642                     l4708:
  2977                           
  2978                           ;serial_message.c: 30:     return 0;
  2979  001642  0E00               	movlw	0
  2980  001644  0012               	return		;funcret
  2981  001646                     __end_of_xtochar:
  2982                           	opt callstack 0
  2983                           
  2984 ;; *************** function _process_set_address_message *****************
  2985 ;; Defined at:
  2986 ;;		line 86 in file "serial_message.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2989 ;;		 -> receiveMessage@message(10), NULL(0), 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  new_address     1    0        unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3001 ;;      Params:         2       0       0       0       0       0       0       0       0
  3002 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3004 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3005 ;;Total ram usage:        3 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    8
  3008 ;; This function calls:
  3009 ;;		_output_message
  3010 ;;		_setBaseMessage
  3011 ;; This function is called by:
  3012 ;;		_process_message
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text15
  3017  0018A0                     __ptext15:
  3018                           	opt callstack 0
  3019  0018A0                     _process_set_address_message:
  3020                           	opt callstack 21
  3021                           
  3022                           ;serial_message.c: 90:     setBaseMessage('a', inmessage[1]);
  3023                           
  3024                           ;incstack = 0
  3025  0018A0  EE20 F001          	lfsr	2,1
  3026  0018A4  5020               	movf	process_set_address_message@inmessage,w,c
  3027  0018A6  26D9               	addwf	fsr2l,f,c
  3028  0018A8  5021               	movf	process_set_address_message@inmessage+1,w,c
  3029  0018AA  22DA               	addwfc	fsr2h,f,c
  3030  0018AC  50DF               	movf	indf2,w,c
  3031  0018AE  6E15               	movwf	setBaseMessage@msgAddress,c
  3032  0018B0  0E61               	movlw	97
  3033  0018B2  ECF0  F007         	call	_setBaseMessage
  3034                           
  3035                           ;serial_message.c: 91:     output_message(outputMessage);
  3036  0018B6  0EAC               	movlw	low _outputMessage
  3037  0018B8  6E1C               	movwf	output_message@message,c
  3038  0018BA  0E00               	movlw	high _outputMessage
  3039  0018BC  6E1D               	movwf	output_message@message+1,c
  3040  0018BE  EC32  F00A         	call	_output_message	;wreg free
  3041  0018C2  0012               	return		;funcret
  3042  0018C4                     __end_of_process_set_address_message:
  3043                           	opt callstack 0
  3044                           
  3045 ;; *************** function _process_reset_pump *****************
  3046 ;; Defined at:
  3047 ;;		line 95 in file "serial_message.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  3050 ;;		 -> receiveMessage@message(10), NULL(0), 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3062 ;;      Params:         2       0       0       0       0       0       0       0       0
  3063 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3065 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3066 ;;Total ram usage:        2 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    8
  3069 ;; This function calls:
  3070 ;;		_output_message
  3071 ;;		_resetPump
  3072 ;;		_setBaseMessage
  3073 ;; This function is called by:
  3074 ;;		_process_message
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text16
  3079  001804                     __ptext16:
  3080                           	opt callstack 0
  3081  001804                     _process_reset_pump:
  3082                           	opt callstack 21
  3083                           
  3084                           ;serial_message.c: 96:     resetPump();
  3085                           
  3086                           ;incstack = 0
  3087  001804  EC1C  F00D         	call	_resetPump	;wreg free
  3088                           
  3089                           ;serial_message.c: 97:     setBaseMessage('m', inmessage[1]);
  3090  001808  EE20 F001          	lfsr	2,1
  3091  00180C  5020               	movf	process_reset_pump@inmessage,w,c
  3092  00180E  26D9               	addwf	fsr2l,f,c
  3093  001810  5021               	movf	process_reset_pump@inmessage+1,w,c
  3094  001812  22DA               	addwfc	fsr2h,f,c
  3095  001814  50DF               	movf	indf2,w,c
  3096  001816  6E15               	movwf	setBaseMessage@msgAddress,c
  3097  001818  0E6D               	movlw	109
  3098  00181A  ECF0  F007         	call	_setBaseMessage
  3099                           
  3100                           ;serial_message.c: 98:     output_message(outputMessage);
  3101  00181E  0EAC               	movlw	low _outputMessage
  3102  001820  6E1C               	movwf	output_message@message,c
  3103  001822  0E00               	movlw	high _outputMessage
  3104  001824  6E1D               	movwf	output_message@message+1,c
  3105  001826  EC32  F00A         	call	_output_message	;wreg free
  3106  00182A  0012               	return		;funcret
  3107  00182C                     __end_of_process_reset_pump:
  3108                           	opt callstack 0
  3109                           
  3110 ;; *************** function _process_get_status_message *****************
  3111 ;; Defined at:
  3112 ;;		line 75 in file "serial_message.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  3115 ;;		 -> receiveMessage@message(10), NULL(0), main@sendGetMessageBuffer(10), 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;		None
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3127 ;;      Params:         2       0       0       0       0       0       0       0       0
  3128 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3130 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3131 ;;Total ram usage:        2 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    8
  3134 ;; This function calls:
  3135 ;;		_output_message
  3136 ;;		_setBaseMessage
  3137 ;; This function is called by:
  3138 ;;		_main
  3139 ;;		_process_message
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text17
  3144  0018C4                     __ptext17:
  3145                           	opt callstack 0
  3146  0018C4                     _process_get_status_message:
  3147                           	opt callstack 21
  3148                           
  3149                           ;serial_message.c: 77:     setBaseMessage('g', inmessage[1]);
  3150                           
  3151                           ;incstack = 0
  3152  0018C4  EE20 F001          	lfsr	2,1
  3153  0018C8  5020               	movf	process_get_status_message@inmessage,w,c
  3154  0018CA  26D9               	addwf	fsr2l,f,c
  3155  0018CC  5021               	movf	process_get_status_message@inmessage+1,w,c
  3156  0018CE  22DA               	addwfc	fsr2h,f,c
  3157  0018D0  50DF               	movf	indf2,w,c
  3158  0018D2  6E15               	movwf	setBaseMessage@msgAddress,c
  3159  0018D4  0E67               	movlw	103
  3160  0018D6  ECF0  F007         	call	_setBaseMessage
  3161                           
  3162                           ;serial_message.c: 82:     output_message(outputMessage);
  3163  0018DA  0EAC               	movlw	low _outputMessage
  3164  0018DC  6E1C               	movwf	output_message@message,c
  3165  0018DE  0E00               	movlw	high _outputMessage
  3166  0018E0  6E1D               	movwf	output_message@message+1,c
  3167  0018E2  EC32  F00A         	call	_output_message	;wreg free
  3168  0018E6  0012               	return		;funcret
  3169  0018E8                     __end_of_process_get_status_message:
  3170                           	opt callstack 0
  3171                           
  3172 ;; *************** function _setBaseMessage *****************
  3173 ;; Defined at:
  3174 ;;		line 42 in file "serial_message.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  messageType     1    wreg     unsigned char 
  3177 ;;  msgAddress      1   20[COMRAM] unsigned char 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  messageType     1   24[COMRAM] unsigned char 
  3180 ;;  v               1   25[COMRAM] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3190 ;;      Params:         1       0       0       0       0       0       0       0       0
  3191 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3192 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3193 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3194 ;;Total ram usage:        6 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    6
  3197 ;; This function calls:
  3198 ;;		_chartox
  3199 ;; This function is called by:
  3200 ;;		_process_set_zones_message
  3201 ;;		_process_get_status_message
  3202 ;;		_process_set_address_message
  3203 ;;		_process_reset_pump
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text18
  3208  000FE0                     __ptext18:
  3209                           	opt callstack 0
  3210  000FE0                     _setBaseMessage:
  3211                           	opt callstack 22
  3212                           
  3213                           ;incstack = 0
  3214                           ;setBaseMessage@messageType stored from wreg
  3215  000FE0  6E19               	movwf	setBaseMessage@messageType,c
  3216                           
  3217                           ;serial_message.c: 43:     outputMessage[0] = '{';
  3218  000FE2  0E7B               	movlw	123
  3219  000FE4  0100               	movlb	0	; () banked
  3220  000FE6  6FAC               	movwf	_outputMessage& (0+255),b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;serial_message.c: 45:  outputMessage[1] = msgAddress;
  3224  000FE8  C015  F0AD         	movff	setBaseMessage@msgAddress,_outputMessage+1
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;serial_message.c: 46:  outputMessage[2] = messageType;
  3228  000FEC  C019  F0AE         	movff	setBaseMessage@messageType,_outputMessage+2
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;serial_message.c: 47:  outputMessage[3] = chartox(zones >>4);
  3232  000FF0  C045  F016         	movff	_zones,??_setBaseMessage
  3233  000FF4  C046  F017         	movff	_zones+1,??_setBaseMessage+1
  3234  000FF8  0E04               	movlw	4
  3235  000FFA  6E18               	movwf	(??_setBaseMessage+2)& (0+255),c
  3236  000FFC                     u4195:
  3237  000FFC  90D8               	bcf	status,0,c
  3238  000FFE  3217               	rrcf	??_setBaseMessage+1,f,c
  3239  001000  3216               	rrcf	??_setBaseMessage,f,c
  3240  001002  2E18               	decfsz	(??_setBaseMessage+2)& (0+255),f,c
  3241  001004  D7FB               	goto	u4195
  3242  001006  5016               	movf	??_setBaseMessage,w,c
  3243  001008  ECD8  F00C         	call	_chartox
  3244  00100C  0100               	movlb	0	; () banked
  3245  00100E  6FAF               	movwf	(_outputMessage+3)& (0+255),b
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;serial_message.c: 48:     outputMessage[4] = chartox((zones &15));
  3249  001010  5045               	movf	_zones,w,c
  3250  001012  0B0F               	andlw	15
  3251  001014  ECD8  F00C         	call	_chartox
  3252  001018  0100               	movlb	0	; () banked
  3253  00101A  6FB0               	movwf	(_outputMessage+4)& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;serial_message.c: 52:     char v = (fault_flags.value >> 8) &0xf;
  3257  00101C  5048               	movf	_fault_flags+1,w,c
  3258  00101E  0B0F               	andlw	15
  3259  001020  6E1A               	movwf	setBaseMessage@v,c
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;serial_message.c: 53:     outputMessage[5] = chartox(v);
  3263  001022  501A               	movf	setBaseMessage@v,w,c
  3264  001024  ECD8  F00C         	call	_chartox
  3265  001028  0100               	movlb	0	; () banked
  3266  00102A  6FB1               	movwf	(_outputMessage+5)& (0+255),b
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;serial_message.c: 55:     v = (fault_flags.value >> 4) &0xf;
  3270  00102C  C047  F016         	movff	_fault_flags,??_setBaseMessage
  3271  001030  C048  F017         	movff	_fault_flags+1,??_setBaseMessage+1
  3272  001034  0E04               	movlw	4
  3273  001036  6E18               	movwf	(??_setBaseMessage+2)& (0+255),c
  3274  001038                     u4205:
  3275  001038  90D8               	bcf	status,0,c
  3276  00103A  3217               	rrcf	??_setBaseMessage+1,f,c
  3277  00103C  3216               	rrcf	??_setBaseMessage,f,c
  3278  00103E  2E18               	decfsz	(??_setBaseMessage+2)& (0+255),f,c
  3279  001040  D7FB               	goto	u4205
  3280  001042  5016               	movf	??_setBaseMessage,w,c
  3281  001044  0B0F               	andlw	15
  3282  001046  6E1A               	movwf	setBaseMessage@v,c
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;serial_message.c: 56:     outputMessage[6] = chartox(v);
  3286  001048  501A               	movf	setBaseMessage@v,w,c
  3287  00104A  ECD8  F00C         	call	_chartox
  3288  00104E  0100               	movlb	0	; () banked
  3289  001050  6FB2               	movwf	(_outputMessage+6)& (0+255),b
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;serial_message.c: 58:     v = (fault_flags.value) &0xf;
  3293  001052  5047               	movf	_fault_flags,w,c
  3294  001054  0B0F               	andlw	15
  3295  001056  6E1A               	movwf	setBaseMessage@v,c
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;serial_message.c: 59:     outputMessage[7] = chartox(v);
  3299  001058  501A               	movf	setBaseMessage@v,w,c
  3300  00105A  ECD8  F00C         	call	_chartox
  3301  00105E  0100               	movlb	0	; () banked
  3302  001060  6FB3               	movwf	(_outputMessage+7)& (0+255),b
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;serial_message.c: 61:     outputMessage[8] = '}';
  3306  001062  0E7D               	movlw	125
  3307  001064  6FB4               	movwf	(_outputMessage+8)& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;serial_message.c: 62:     outputMessage[9] = 0;
  3311  001066  0E00               	movlw	0
  3312  001068  6FB5               	movwf	(_outputMessage+9)& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315  00106A  0012               	return		;funcret
  3316  00106C                     __end_of_setBaseMessage:
  3317                           	opt callstack 0
  3318                           
  3319 ;; *************** function _chartox *****************
  3320 ;; Defined at:
  3321 ;;		line 33 in file "serial_message.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  c               1    wreg     unsigned char 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  c               1   19[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      unsigned char 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3335 ;;      Params:         0       0       0       0       0       0       0       0       0
  3336 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3338 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3339 ;;Total ram usage:        1 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    5
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_setBaseMessage
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text19
  3350  0019B0                     __ptext19:
  3351                           	opt callstack 0
  3352  0019B0                     _chartox:
  3353                           	opt callstack 22
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;incstack = 0
  3357                           ;chartox@c stored from wreg
  3358  0019B0  6E14               	movwf	chartox@c,c
  3359                           
  3360                           ;serial_message.c: 34:     if (c > 9) {
  3361  0019B2  0E09               	movlw	9
  3362  0019B4  6414               	cpfsgt	chartox@c,c
  3363  0019B6  D003               	goto	l4588
  3364                           
  3365                           ;serial_message.c: 35:         return 'a' + (c - 10);
  3366  0019B8  5014               	movf	chartox@c,w,c
  3367  0019BA  0F57               	addlw	87
  3368  0019BC  0012               	return	
  3369  0019BE                     l4588:
  3370                           
  3371                           ;serial_message.c: 37:         return '0' + c;
  3372  0019BE  5014               	movf	chartox@c,w,c
  3373  0019C0  0F30               	addlw	48
  3374  0019C2  0012               	return		;funcret
  3375  0019C4                     __end_of_chartox:
  3376                           	opt callstack 0
  3377                           
  3378 ;; *************** function _output_message *****************
  3379 ;; Defined at:
  3380 ;;		line 269 in file "serial.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  message         2   27[COMRAM] PTR unsigned char 
  3383 ;;		 -> outputMessage(10), 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  i               2   29[COMRAM] int 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3395 ;;      Params:         2       0       0       0       0       0       0       0       0
  3396 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3398 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3399 ;;Total ram usage:        4 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    7
  3402 ;; This function calls:
  3403 ;;		_putch
  3404 ;; This function is called by:
  3405 ;;		_process_set_zones_message
  3406 ;;		_process_get_status_message
  3407 ;;		_process_set_address_message
  3408 ;;		_process_reset_pump
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text20
  3413  001464                     __ptext20:
  3414                           	opt callstack 0
  3415  001464                     _output_message:
  3416                           	opt callstack 21
  3417                           
  3418                           ;serial.c: 269: output_message (char *message);serial.c: 270: {;serial.c: 271:   if (((v
      +                          oid*)0) == message) {
  3419                           
  3420                           ;incstack = 0
  3421  001464  501C               	movf	output_message@message,w,c
  3422  001466  101D               	iorwf	output_message@message+1,w,c
  3423  001468  B4D8               	btfsc	status,2,c
  3424  00146A  0012               	return	
  3425                           
  3426                           ;serial.c: 275:   for (int i = 0; (i < 10) && (0 != message[i]); i++) {
  3427  00146C  0E00               	movlw	0
  3428  00146E  6E1F               	movwf	output_message@i+1,c
  3429  001470  0E00               	movlw	0
  3430  001472  6E1E               	movwf	output_message@i,c
  3431  001474  D00B               	goto	l4676
  3432  001476                     l4672:
  3433                           
  3434                           ;serial.c: 276:     putch (message[i]);
  3435  001476  501E               	movf	output_message@i,w,c
  3436  001478  241C               	addwf	output_message@message,w,c
  3437  00147A  6ED9               	movwf	fsr2l,c
  3438  00147C  501F               	movf	output_message@i+1,w,c
  3439  00147E  201D               	addwfc	output_message@message+1,w,c
  3440  001480  6EDA               	movwf	fsr2h,c
  3441  001482  50DF               	movf	indf2,w,c
  3442  001484  ECE2  F00C         	call	_putch
  3443                           
  3444                           ;serial.c: 277:   }
  3445  001488  4A1E               	infsnz	output_message@i,f,c
  3446  00148A  2A1F               	incf	output_message@i+1,f,c
  3447  00148C                     l4676:
  3448  00148C  BE1F               	btfsc	output_message@i+1,7,c
  3449  00148E  D006               	goto	u4110
  3450  001490  501F               	movf	output_message@i+1,w,c
  3451  001492  E10E               	bnz	l458
  3452  001494  0E0A               	movlw	10
  3453  001496  5C1E               	subwf	output_message@i,w,c
  3454  001498  B0D8               	btfsc	status,0,c
  3455  00149A  0012               	return	
  3456  00149C                     u4110:
  3457  00149C  501E               	movf	output_message@i,w,c
  3458  00149E  241C               	addwf	output_message@message,w,c
  3459  0014A0  6ED9               	movwf	fsr2l,c
  3460  0014A2  501F               	movf	output_message@i+1,w,c
  3461  0014A4  201D               	addwfc	output_message@message+1,w,c
  3462  0014A6  6EDA               	movwf	fsr2h,c
  3463  0014A8  50DF               	movf	indf2,w,c
  3464  0014AA  B4D8               	btfsc	status,2,c
  3465  0014AC  0012               	return	
  3466  0014AE  D7E3               	goto	l4672
  3467  0014B0                     l458:
  3468  0014B0  0012               	return		;funcret
  3469  0014B2                     __end_of_output_message:
  3470                           	opt callstack 0
  3471                           
  3472 ;; *************** function _process_event_timer *****************
  3473 ;; Defined at:
  3474 ;;		line 82 in file "timer_event.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  i               1   31[COMRAM] char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0
  3489 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3490 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3491 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3492 ;;Total ram usage:        3 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    8
  3495 ;; This function calls:
  3496 ;;		_EventDumpSolenoidCallBack
  3497 ;;		_EventFaultStateLEDCallBack
  3498 ;;		_EventIdleTimeoutCallBack
  3499 ;;		_EventLowFogPressureCallBack
  3500 ;;		_EventLowWaterLevelCallBack
  3501 ;;		_EventLowWaterPressureCallBack
  3502 ;;		_EventLowWaterPressureDebounceCallBack
  3503 ;;		_EventPODebounceCallBack
  3504 ;;		_EventRunSignalDebounceCallBack
  3505 ;; This function is called by:
  3506 ;;		_main
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text21
  3511  000B76                     __ptext21:
  3512                           	opt callstack 0
  3513  000B76                     _process_event_timer:
  3514                           	opt callstack 22
  3515                           
  3516                           ;timer_event.c: 83:     TMR0IE = 0;
  3517                           
  3518                           ;incstack = 0
  3519  000B76  9AF2               	bcf	4082,5,c	;volatile
  3520                           
  3521                           ;timer_event.c: 84:     while (timer_count > 0) {
  3522  000B78  D054               	goto	u4680
  3523  000B7A                     l5020:
  3524                           
  3525                           ;timer_event.c: 86:         timer_count--;
  3526  000B7A  0649               	decf	_timer_count,f,c	;volatile
  3527                           
  3528                           ;timer_event.c: 89:         for (signed char i = 0; i < EventTotalNumber; i++) {
  3529  000B7C  0E00               	movlw	0
  3530  000B7E  6E20               	movwf	process_event_timer@i,c
  3531  000B80                     l5028:
  3532                           
  3533                           ;timer_event.c: 90:             if (timer_events[i].active) {
  3534  000B80  5020               	movf	process_event_timer@i,w,c
  3535  000B82  0D08               	mullw	8
  3536  000B84  0E62               	movlw	low (_timer_events+2)
  3537  000B86  24F3               	addwf	prodl,w,c
  3538  000B88  6ED9               	movwf	fsr2l,c
  3539  000B8A  0E00               	movlw	high (_timer_events+2)
  3540  000B8C  20F4               	addwfc	prodh,w,c
  3541  000B8E  6EDA               	movwf	fsr2h,c
  3542  000B90  0100               	movlb	0	; () banked
  3543  000B92  A0DF               	btfss	indf2,0,c
  3544  000B94  D040               	goto	u4679
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;timer_event.c: 91:                 timer_events[i].time_left--;
  3548  000B96  5020               	movf	process_event_timer@i,w,c
  3549  000B98  0D08               	mullw	8
  3550  000B9A  0E60               	movlw	low _timer_events
  3551  000B9C  24F3               	addwf	prodl,w,c
  3552  000B9E  6ED9               	movwf	fsr2l,c
  3553  000BA0  0E00               	movlw	high _timer_events
  3554  000BA2  20F4               	addwfc	prodh,w,c
  3555  000BA4  6EDA               	movwf	fsr2h,c
  3556  000BA6  06DE               	decf	postinc2,f,c
  3557  000BA8  0E00               	movlw	0
  3558  000BAA  5ADD               	subwfb	postdec2,f,c
  3559                           
  3560                           ;timer_event.c: 93:                 if (timer_events[i].time_left == 0) {
  3561  000BAC  5020               	movf	process_event_timer@i,w,c
  3562  000BAE  0D08               	mullw	8
  3563  000BB0  0E60               	movlw	low _timer_events
  3564  000BB2  24F3               	addwf	prodl,w,c
  3565  000BB4  6ED9               	movwf	fsr2l,c
  3566  000BB6  0E00               	movlw	high _timer_events
  3567  000BB8  20F4               	addwfc	prodh,w,c
  3568  000BBA  6EDA               	movwf	fsr2h,c
  3569  000BBC  50DE               	movf	postinc2,w,c
  3570  000BBE  10DE               	iorwf	postinc2,w,c
  3571  000BC0  A4D8               	btfss	status,2,c
  3572  000BC2  D029               	goto	u4679
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;timer_event.c: 94:                     timer_events[i].active = 0;
  3576  000BC4  5020               	movf	process_event_timer@i,w,c
  3577  000BC6  0D08               	mullw	8
  3578  000BC8  0E62               	movlw	low (_timer_events+2)
  3579  000BCA  24F3               	addwf	prodl,w,c
  3580  000BCC  6ED9               	movwf	fsr2l,c
  3581  000BCE  0E00               	movlw	high (_timer_events+2)
  3582  000BD0  20F4               	addwfc	prodh,w,c
  3583  000BD2  6EDA               	movwf	fsr2h,c
  3584  000BD4  90DF               	bcf	indf2,0,c
  3585                           
  3586                           ;timer_event.c: 95:                     if (timer_events[i].callback) {
  3587  000BD6  5020               	movf	process_event_timer@i,w,c
  3588  000BD8  0D08               	mullw	8
  3589  000BDA  0E66               	movlw	low (_timer_events+6)
  3590  000BDC  24F3               	addwf	prodl,w,c
  3591  000BDE  6ED9               	movwf	fsr2l,c
  3592  000BE0  0E00               	movlw	high (_timer_events+6)
  3593  000BE2  20F4               	addwfc	prodh,w,c
  3594  000BE4  6EDA               	movwf	fsr2h,c
  3595  000BE6  50DE               	movf	postinc2,w,c
  3596  000BE8  10DE               	iorwf	postinc2,w,c
  3597  000BEA  B4D8               	btfsc	status,2,c
  3598  000BEC  D014               	goto	u4679
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;timer_event.c: 97:                         (*timer_events[i].callback) ();
  3602  000BEE  5020               	movf	process_event_timer@i,w,c
  3603  000BF0  0D08               	mullw	8
  3604  000BF2  0E66               	movlw	low (_timer_events+6)
  3605  000BF4  24F3               	addwf	prodl,w,c
  3606  000BF6  6ED9               	movwf	fsr2l,c
  3607  000BF8  0E00               	movlw	high (_timer_events+6)
  3608  000BFA  20F4               	addwfc	prodh,w,c
  3609  000BFC  6EDA               	movwf	fsr2h,c
  3610  000BFE  D801               	call	u4678
  3611  000C00  D00A               	goto	u4679
  3612  000C02                     u4678:
  3613  000C02  0005               	push	
  3614  000C04  6EFA               	movwf	pclath,c
  3615  000C06  50DE               	movf	postinc2,w,c
  3616  000C08  6EFD               	movwf	tosl,c
  3617  000C0A  50DE               	movf	postinc2,w,c
  3618  000C0C  6EFE               	movwf	tosh,c
  3619  000C0E  50F8               	movf	tblptru,w,c
  3620  000C10  6EFF               	movwf	tosu,c
  3621  000C12  50FA               	movf	pclath,w,c
  3622  000C14  0012               	return		;indir
  3623  000C16                     u4679:
  3624                           
  3625                           ;timer_event.c: 102:         }
  3626  000C16  2A20               	incf	process_event_timer@i,f,c
  3627  000C18  5020               	movf	process_event_timer@i,w,c
  3628  000C1A  0A80               	xorlw	128
  3629  000C1C  0F77               	addlw	-137
  3630  000C1E  A0D8               	btfss	status,0,c
  3631  000C20  D7AF               	goto	l5028
  3632  000C22                     u4680:
  3633                           
  3634                           ;timer_event.c: 84:     while (timer_count > 0) {
  3635  000C22  5049               	movf	_timer_count,w,c	;volatile
  3636  000C24  A4D8               	btfss	status,2,c
  3637  000C26  D7A9               	goto	l5020
  3638                           
  3639                           ;timer_event.c: 104:     TMR0IE = 1;
  3640  000C28  8AF2               	bsf	4082,5,c	;volatile
  3641  000C2A  0012               	return		;funcret
  3642  000C2C                     __end_of_process_event_timer:
  3643                           	opt callstack 0
  3644                           
  3645 ;; *************** function _EventPODebounceCallBack *****************
  3646 ;; Defined at:
  3647 ;;		line 3 in file "EventPODebounce.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;		None
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3661 ;;      Params:         0       0       0       0       0       0       0       0       0
  3662 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3664 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3665 ;;Total ram usage:        0 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    7
  3668 ;; This function calls:
  3669 ;;		_clear_callback_for_shutdown
  3670 ;; This function is called by:
  3671 ;;		_init_event_timer
  3672 ;;		_process_event_timer
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text22
  3677  0019EC                     __ptext22:
  3678                           	opt callstack 0
  3679  0019EC                     _EventPODebounceCallBack:
  3680                           	opt callstack 22
  3681                           
  3682                           ;EventPODebounce.c: 9:     state = timer_events[EventPODebounce].next_state;
  3683                           
  3684                           ;incstack = 0
  3685  0019EC  C0A3  F04B         	movff	_timer_events+67,_state	;volatile
  3686                           
  3687                           ;EventPODebounce.c: 10:     fault_flags.po_fault = 1;
  3688  0019F0  8647               	bsf	_fault_flags,3,c
  3689                           
  3690                           ;EventPODebounce.c: 11:     if (shutdownState == state) {
  3691  0019F2  044B               	decf	_state,w,c
  3692  0019F4  A4D8               	btfss	status,2,c
  3693  0019F6  0012               	return	
  3694                           
  3695                           ;EventPODebounce.c: 13:         clear_callback_for_shutdown();
  3696  0019F8  ECD7  F00B         	call	_clear_callback_for_shutdown	;wreg free
  3697  0019FC  0012               	return		;funcret
  3698  0019FE                     __end_of_EventPODebounceCallBack:
  3699                           	opt callstack 0
  3700                           
  3701 ;; *************** function _EventLowWaterPressureDebounceCallBack *****************
  3702 ;; Defined at:
  3703 ;;		line 32 in file "EventLowWaterPressure.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;		None
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;		None
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  1    wreg      void 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3717 ;;      Params:         0       0       0       0       0       0       0       0       0
  3718 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3719 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3720 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3721 ;;Total ram usage:        1 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    5
  3724 ;; This function calls:
  3725 ;;		Nothing
  3726 ;; This function is called by:
  3727 ;;		_init_event_timer
  3728 ;;		_process_event_timer
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text23
  3733  001928                     __ptext23:
  3734                           	opt callstack 0
  3735  001928                     _EventLowWaterPressureDebounceCallBack:
  3736                           	opt callstack 24
  3737                           
  3738                           ;EventLowWaterPressure.c: 44:     { PORTAbits.RA0 = (!( PORTBbits.RB2)); fault_flags.wpO
      +                          kBit = (!( PORTBbits.RB2));};
  3739                           
  3740                           ;incstack = 0
  3741  001928  B481               	btfsc	3969,2,c	;volatile
  3742  00192A  D003               	goto	u4410
  3743  00192C  6A14               	clrf	??_EventLowWaterPressureDebounceCallBack& (0+255),c
  3744  00192E  2A14               	incf	??_EventLowWaterPressureDebounceCallBack& (0+255),f,c
  3745  001930  D001               	goto	u4428
  3746  001932                     u4410:
  3747  001932  6A14               	clrf	??_EventLowWaterPressureDebounceCallBack& (0+255),c
  3748  001934                     u4428:
  3749  001934  5080               	movf	3968,w,c	;volatile
  3750  001936  1814               	xorwf	??_EventLowWaterPressureDebounceCallBack,w,c
  3751  001938  0BFE               	andlw	-2
  3752  00193A  1814               	xorwf	??_EventLowWaterPressureDebounceCallBack,w,c
  3753  00193C  6E80               	movwf	3968,c	;volatile
  3754  00193E  8847               	bsf	_fault_flags,4,c
  3755  001940  B481               	btfsc	3969,2,c	;volatile
  3756  001942  9847               	bcf	_fault_flags,4,c
  3757  001944  0012               	return		;funcret
  3758  001946                     __end_of_EventLowWaterPressureDebounceCallBack:
  3759                           	opt callstack 0
  3760                           
  3761 ;; *************** function _EventLowWaterPressureCallBack *****************
  3762 ;; Defined at:
  3763 ;;		line 4 in file "EventLowWaterPressure.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3777 ;;      Params:         0       0       0       0       0       0       0       0       0
  3778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3779 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3780 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3781 ;;Total ram usage:        1 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    7
  3784 ;; This function calls:
  3785 ;;		_clear_callback_for_shutdown
  3786 ;; This function is called by:
  3787 ;;		_init_event_timer
  3788 ;;		_process_event_timer
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text24
  3793  0016B6                     __ptext24:
  3794                           	opt callstack 0
  3795  0016B6                     _EventLowWaterPressureCallBack:
  3796                           	opt callstack 22
  3797                           
  3798                           ;EventLowWaterPressure.c: 16:     { PORTAbits.RA0 = (!( PORTBbits.RB2)); fault_flags.wpO
      +                          kBit = (!( PORTBbits.RB2));};
  3799                           
  3800                           ;incstack = 0
  3801  0016B6  B481               	btfsc	3969,2,c	;volatile
  3802  0016B8  D003               	goto	u4370
  3803  0016BA  6A15               	clrf	??_EventLowWaterPressureCallBack& (0+255),c
  3804  0016BC  2A15               	incf	??_EventLowWaterPressureCallBack& (0+255),f,c
  3805  0016BE  D001               	goto	u4388
  3806  0016C0                     u4370:
  3807  0016C0  6A15               	clrf	??_EventLowWaterPressureCallBack& (0+255),c
  3808  0016C2                     u4388:
  3809  0016C2  5080               	movf	3968,w,c	;volatile
  3810  0016C4  1815               	xorwf	??_EventLowWaterPressureCallBack,w,c
  3811  0016C6  0BFE               	andlw	-2
  3812  0016C8  1815               	xorwf	??_EventLowWaterPressureCallBack,w,c
  3813  0016CA  6E80               	movwf	3968,c	;volatile
  3814  0016CC  8847               	bsf	_fault_flags,4,c
  3815  0016CE  B481               	btfsc	3969,2,c	;volatile
  3816  0016D0  9847               	bcf	_fault_flags,4,c
  3817                           
  3818                           ;EventLowWaterPressure.c: 18:     if (timer_events[EventLowWaterPressure].flag_bit) {
  3819  0016D2  0100               	movlb	0	; () banked
  3820  0016D4  B36A               	btfsc	(_timer_events+10)& (0+255),1,b	;volatile
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;EventLowWaterPressure.c: 20:         fault_flags.lwp_fault = 1;
  3824  0016D6  8247               	bsf	_fault_flags,1,c
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;EventLowWaterPressure.c: 23:     state = timer_events[EventLowWaterPressure].next_state
      +                          ;
  3828                           
  3829                           ;EventLowWaterPressure.c: 22:     }
  3830  0016D8  C06B  F04B         	movff	_timer_events+11,_state	;volatile
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;EventLowWaterPressure.c: 24:  if (shutdownState == state) {
  3834  0016DC  044B               	decf	_state,w,c
  3835  0016DE  A4D8               	btfss	status,2,c
  3836  0016E0  0012               	return	
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;EventLowWaterPressure.c: 26:         clear_callback_for_shutdown();
  3840  0016E2  ECD7  F00B         	call	_clear_callback_for_shutdown	;wreg free
  3841  0016E6  0012               	return		;funcret
  3842  0016E8                     __end_of_EventLowWaterPressureCallBack:
  3843                           	opt callstack 0
  3844                           
  3845 ;; *************** function _EventLowWaterLevelCallBack *****************
  3846 ;; Defined at:
  3847 ;;		line 4 in file "EventLowWaterLevel.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;		None
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3861 ;;      Params:         0       0       0       0       0       0       0       0       0
  3862 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3863 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3864 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3865 ;;Total ram usage:        0 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    7
  3868 ;; This function calls:
  3869 ;;		_clear_callback_for_shutdown
  3870 ;;		_enable_callback
  3871 ;; This function is called by:
  3872 ;;		_init_event_timer
  3873 ;;		_process_event_timer
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text25
  3878  001854                     __ptext25:
  3879                           	opt callstack 0
  3880  001854                     _EventLowWaterLevelCallBack:
  3881                           	opt callstack 22
  3882                           
  3883                           ;EventLowWaterLevel.c: 10:     if (!fault_flags.lwl_fault) {
  3884                           
  3885                           ;incstack = 0
  3886  001854  B047               	btfsc	_fault_flags,0,c
  3887  001856  D009               	goto	l4830
  3888                           
  3889                           ;EventLowWaterLevel.c: 14:         fault_flags.lwl_fault = 1;
  3890  001858  8047               	bsf	_fault_flags,0,c
  3891                           
  3892                           ;EventLowWaterLevel.c: 15:         enable_callback(EventLowWaterLevel, (30*(8000000/256/
      +                          4/256)));
  3893  00185A  0E03               	movlw	3
  3894  00185C  6E15               	movwf	enable_callback@time_delay+1,c
  3895  00185E  0E84               	movlw	132
  3896  001860  6E14               	movwf	enable_callback@time_delay,c
  3897  001862  0E00               	movlw	0
  3898  001864  ECA3  F00A         	call	_enable_callback
  3899                           
  3900                           ;EventLowWaterLevel.c: 16:     } else {
  3901  001868  0012               	return	
  3902  00186A                     l4830:
  3903                           
  3904                           ;EventLowWaterLevel.c: 20:         if (state != standbyState) {
  3905  00186A  504B               	movf	_state,w,c
  3906  00186C  B4D8               	btfsc	status,2,c
  3907  00186E  0012               	return	
  3908                           
  3909                           ;EventLowWaterLevel.c: 21:             state = shutdownState;
  3910  001870  0E01               	movlw	1
  3911  001872  6E4B               	movwf	_state,c
  3912                           
  3913                           ;EventLowWaterLevel.c: 23:             clear_callback_for_shutdown();
  3914  001874  ECD7  F00B         	call	_clear_callback_for_shutdown	;wreg free
  3915  001878  0012               	return		;funcret
  3916  00187A                     __end_of_EventLowWaterLevelCallBack:
  3917                           	opt callstack 0
  3918                           
  3919 ;; *************** function _EventLowFogPressureCallBack *****************
  3920 ;; Defined at:
  3921 ;;		line 4 in file "EventLowFogPressure.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      void 
  3928 ;; Registers used:
  3929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3935 ;;      Params:         0       0       0       0       0       0       0       0       0
  3936 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3937 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3938 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3939 ;;Total ram usage:        0 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    7
  3942 ;; This function calls:
  3943 ;;		_clear_callback_for_shutdown
  3944 ;;		_enable_callback
  3945 ;; This function is called by:
  3946 ;;		_init_event_timer
  3947 ;;		_process_event_timer
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text26
  3952  0016E8                     __ptext26:
  3953                           	opt callstack 0
  3954  0016E8                     _EventLowFogPressureCallBack:
  3955                           	opt callstack 22
  3956                           
  3957                           ;EventLowFogPressure.c: 15:     if (timer_events[EventLowFogPressure].flag_data) {
  3958                           
  3959                           ;incstack = 0
  3960  0016E8  0100               	movlb	0	; () banked
  3961  0016EA  517C               	movf	(_timer_events+28)& (0+255),w,b	;volatile
  3962  0016EC  117D               	iorwf	(_timer_events+29)& (0+255),w,b	;volatile
  3963  0016EE  B4D8               	btfsc	status,2,c
  3964  0016F0  D00E               	goto	l67
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;EventLowFogPressure.c: 16:     enable_callback (EventLowFogPressure, timer_events[Event
      +                          LowFogPressure].flag_data);
  3968  0016F2  C07C  F014         	movff	_timer_events+28,enable_callback@time_delay	;volatile
  3969  0016F6  C07D  F015         	movff	_timer_events+29,enable_callback@time_delay+1	;volatile
  3970  0016FA  0E03               	movlw	3
  3971  0016FC  ECA3  F00A         	call	_enable_callback
  3972                           
  3973                           ;EventLowFogPressure.c: 17:         timer_events[EventLowFogPressure].flag_data = 0;
  3974  001700  0E00               	movlw	0
  3975  001702  0100               	movlb	0	; () banked
  3976  001704  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  3977  001706  0E00               	movlw	0
  3978  001708  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;EventLowFogPressure.c: 18:         timer_events[EventLowFogPressure].flag_bit = 1;
  3982  00170A  837A               	bsf	(_timer_events+26)& (0+255),1,b	;volatile
  3983                           
  3984                           ;EventLowFogPressure.c: 19:   }
  3985  00170C  0012               	return	
  3986  00170E                     l67:
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;EventLowFogPressure.c: 21:         fault_flags.lfp_fault = 1;
  3990  00170E  8447               	bsf	_fault_flags,2,c
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;EventLowFogPressure.c: 22:         state = shutdownState;
  3994  001710  0E01               	movlw	1
  3995  001712  6E4B               	movwf	_state,c
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;EventLowFogPressure.c: 23:         clear_callback_for_shutdown();
  3999  001714  ECD7  F00B         	call	_clear_callback_for_shutdown	;wreg free
  4000  001718  0012               	return		;funcret
  4001  00171A                     __end_of_EventLowFogPressureCallBack:
  4002                           	opt callstack 0
  4003                           
  4004 ;; *************** function _EventIdleTimeoutCallBack *****************
  4005 ;; Defined at:
  4006 ;;		line 5 in file "EventIdleTimeout.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4020 ;;      Params:         0       0       0       0       0       0       0       0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4023 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4024 ;;Total ram usage:        0 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    6
  4027 ;; This function calls:
  4028 ;;		_enable_callback
  4029 ;; This function is called by:
  4030 ;;		_init_event_timer
  4031 ;;		_process_event_timer
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text27
  4036  001500                     __ptext27:
  4037                           	opt callstack 0
  4038  001500                     _EventIdleTimeoutCallBack:
  4039                           	opt callstack 23
  4040                           
  4041                           ;EventIdleTimeout.c: 7:   if (!timer_events[EventIdleTimeout].flag_bit) {
  4042                           
  4043                           ;incstack = 0
  4044  001500  0100               	movlb	0	; () banked
  4045  001502  B38A               	btfsc	(_timer_events+42)& (0+255),1,b	;volatile
  4046  001504  D010               	goto	l52
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;EventIdleTimeout.c: 11:     { PORTAbits.RA2 = (1); fault_flags.dumpSolenoidBit = (1);};
  4050  001506  8480               	bsf	3968,2,c	;volatile
  4051  001508  8048               	bsf	_fault_flags+1,0,c
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;EventIdleTimeout.c: 12:     inIdleDumpHour = 1;
  4055  00150A  0E01               	movlw	1
  4056  00150C  6E4A               	movwf	_inIdleDumpHour,c
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;EventIdleTimeout.c: 17:     timer_events[EventIdleTimeout].flag_bit = 1;
  4060  00150E  838A               	bsf	(_timer_events+42)& (0+255),1,b	;volatile
  4061                           
  4062                           ;EventIdleTimeout.c: 18:     timer_events[EventIdleTimeout].flag_data = 0;
  4063  001510  0E00               	movlw	0
  4064  001512  6F8D               	movwf	(_timer_events+45)& (0+255),b	;volatile
  4065  001514  0E00               	movlw	0
  4066  001516  6F8C               	movwf	(_timer_events+44)& (0+255),b	;volatile
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;EventIdleTimeout.c: 19:     enable_callback (EventIdleTimeout, (0x7fff));
  4070  001518  0E7F               	movlw	127
  4071  00151A  6E15               	movwf	enable_callback@time_delay+1,c
  4072  00151C  6814               	setf	enable_callback@time_delay,c
  4073  00151E  0E05               	movlw	5
  4074  001520  ECA3  F00A         	call	_enable_callback
  4075                           
  4076                           ;EventIdleTimeout.c: 21:   }
  4077  001524  0012               	return	
  4078  001526                     l52:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;EventIdleTimeout.c: 26:     { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  4082  001526  9480               	bcf	3968,2,c	;volatile
  4083  001528  9048               	bcf	_fault_flags+1,0,c
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;EventIdleTimeout.c: 27:     inIdleDumpHour = 0;
  4087  00152A  0E00               	movlw	0
  4088  00152C  6E4A               	movwf	_inIdleDumpHour,c
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;EventIdleTimeout.c: 30:     timer_events[EventIdleTimeout].flag_bit = 1;
  4092  00152E  838A               	bsf	(_timer_events+42)& (0+255),1,b	;volatile
  4093                           
  4094                           ;EventIdleTimeout.c: 31:     timer_events[EventIdleTimeout].flag_data = 0;
  4095  001530  0E00               	movlw	0
  4096  001532  6F8D               	movwf	(_timer_events+45)& (0+255),b	;volatile
  4097  001534  0E00               	movlw	0
  4098  001536  6F8C               	movwf	(_timer_events+44)& (0+255),b	;volatile
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;EventIdleTimeout.c: 32:     enable_callback (EventIdleTimeout, (0x7fff));
  4102  001538  0E7F               	movlw	127
  4103  00153A  6E15               	movwf	enable_callback@time_delay+1,c
  4104  00153C  6814               	setf	enable_callback@time_delay,c
  4105  00153E  0E05               	movlw	5
  4106  001540  ECA3  F00A         	call	_enable_callback
  4107  001544  0012               	return		;funcret
  4108  001546                     __end_of_EventIdleTimeoutCallBack:
  4109                           	opt callstack 0
  4110                           
  4111 ;; *************** function _EventFaultStateLEDCallBack *****************
  4112 ;; Defined at:
  4113 ;;		line 3 in file "EventFaultStateLed.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;		None
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      void 
  4120 ;; Registers used:
  4121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4127 ;;      Params:         0       0       0       0       0       0       0       0       0
  4128 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4129 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4130 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4131 ;;Total ram usage:        7 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    6
  4134 ;; This function calls:
  4135 ;;		_enable_callback
  4136 ;; This function is called by:
  4137 ;;		_init_event_timer
  4138 ;;		_process_event_timer
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           	psect	text28
  4143  0009D6                     __ptext28:
  4144                           	opt callstack 0
  4145  0009D6                     _EventFaultStateLEDCallBack:
  4146                           	opt callstack 23
  4147                           
  4148                           ;EventFaultStateLed.c: 13:   if (!(fault_flags.lwl_fault
  4149                           
  4150                           ;incstack = 0
  4151  0009D6  A047               	btfss	_fault_flags,0,c
  4152  0009D8  B247               	btfsc	_fault_flags,1,c
  4153  0009DA  D012               	goto	l20
  4154  0009DC  A447               	btfss	_fault_flags,2,c
  4155  0009DE  B647               	btfsc	_fault_flags,3,c
  4156  0009E0  D00F               	goto	l20
  4157                           
  4158                           ;EventFaultStateLed.c: 16:     || fault_flags.po_fault )) {;EventFaultStateLed.c: 18:   
      +                            { PORTAbits.RA3 = (0);};
  4159  0009E2  9680               	bcf	3968,3,c	;volatile
  4160                           
  4161                           ;EventFaultStateLed.c: 19:     timer_events[EventFaultStateLED].flag_bit = 0;
  4162  0009E4  0100               	movlb	0	; () banked
  4163  0009E6  9382               	bcf	(_timer_events+34)& (0+255),1,b	;volatile
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;EventFaultStateLed.c: 20:     timer_events[EventFaultStateLED].flag_data = 0;
  4167  0009E8  0E00               	movlw	0
  4168  0009EA  6F85               	movwf	(_timer_events+37)& (0+255),b	;volatile
  4169  0009EC  0E00               	movlw	0
  4170  0009EE  6F84               	movwf	(_timer_events+36)& (0+255),b	;volatile
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;EventFaultStateLed.c: 21:     enable_callback (EventFaultStateLED, ((8000000/256/4/256)
      +                          /4));
  4174  0009F0  0E00               	movlw	0
  4175  0009F2  6E15               	movwf	enable_callback@time_delay+1,c
  4176  0009F4  0E07               	movlw	7
  4177  0009F6  6E14               	movwf	enable_callback@time_delay,c
  4178  0009F8  0E04               	movlw	4
  4179  0009FA  ECA3  F00A         	call	_enable_callback
  4180                           
  4181                           ;EventFaultStateLed.c: 22:   }
  4182  0009FE  0012               	return	
  4183  000A00                     l20:
  4184                           
  4185                           ;EventFaultStateLed.c: 29:     if (timer_events[EventFaultStateLED].flag_bit) {
  4186  000A00  0100               	movlb	0	; () banked
  4187  000A02  A382               	btfss	(_timer_events+34)& (0+255),1,b	;volatile
  4188  000A04  D040               	goto	l22
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;EventFaultStateLed.c: 31:       { PORTAbits.RA3 = (0);};
  4192  000A06  9680               	bcf	3968,3,c	;volatile
  4193                           
  4194                           ;EventFaultStateLed.c: 32:       timer_events[EventFaultStateLED].flag_bit = 0;
  4195  000A08  9382               	bcf	(_timer_events+34)& (0+255),1,b	;volatile
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;EventFaultStateLed.c: 34:       if (timer_events[EventFaultStateLED].flag_data) {
  4199  000A0A  5184               	movf	(_timer_events+36)& (0+255),w,b	;volatile
  4200  000A0C  1185               	iorwf	(_timer_events+37)& (0+255),w,b	;volatile
  4201  000A0E  B4D8               	btfsc	status,2,c
  4202  000A10  D008               	goto	l23
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;EventFaultStateLed.c: 36:  enable_callback (EventFaultStateLED, ((8000000/256/4/256)/4)
      +                          );
  4206  000A12  0E00               	movlw	0
  4207  000A14  6E15               	movwf	enable_callback@time_delay+1,c
  4208  000A16  0E07               	movlw	7
  4209  000A18  6E14               	movwf	enable_callback@time_delay,c
  4210  000A1A  0E04               	movlw	4
  4211  000A1C  ECA3  F00A         	call	_enable_callback
  4212                           
  4213                           ;EventFaultStateLed.c: 37:       }
  4214  000A20  0012               	return	
  4215  000A22                     l23:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;EventFaultStateLed.c: 43:  timer_events[EventFaultStateLED].flag_data =
  4219  000A22  B647               	btfsc	_fault_flags,3,c
  4220  000A24  D020               	goto	l4784
  4221                           
  4222                           ; BSR set to: 0
  4223  000A26  B447               	btfsc	_fault_flags,2,c
  4224  000A28  D015               	goto	l4780
  4225                           
  4226                           ; BSR set to: 0
  4227  000A2A  B247               	btfsc	_fault_flags,1,c
  4228  000A2C  D00A               	goto	l4776
  4229                           
  4230                           ; BSR set to: 0
  4231  000A2E  A047               	btfss	_fault_flags,0,c
  4232  000A30  D003               	goto	u4310
  4233  000A32  6A17               	clrf	??_EventFaultStateLEDCallBack& (0+255),c
  4234  000A34  2A17               	incf	??_EventFaultStateLEDCallBack& (0+255),f,c
  4235  000A36  D001               	goto	u4318
  4236  000A38                     u4310:
  4237  000A38  6A17               	clrf	??_EventFaultStateLEDCallBack& (0+255),c
  4238  000A3A                     u4318:
  4239  000A3A  5017               	movf	??_EventFaultStateLEDCallBack,w,c
  4240  000A3C  6E1C               	movwf	_EventFaultStateLEDCallBack$219,c
  4241  000A3E  6A1D               	clrf	_EventFaultStateLEDCallBack$219+1,c
  4242  000A40  D004               	goto	l4778
  4243  000A42                     l4776:
  4244                           
  4245                           ; BSR set to: 0
  4246  000A42  0E00               	movlw	0
  4247  000A44  6E1D               	movwf	_EventFaultStateLEDCallBack$219+1,c
  4248  000A46  0E02               	movlw	2
  4249  000A48  6E1C               	movwf	_EventFaultStateLEDCallBack$219,c
  4250  000A4A                     l4778:
  4251  000A4A  C01C  F01A         	movff	_EventFaultStateLEDCallBack$219,_EventFaultStateLEDCallBack$218
  4252  000A4E  C01D  F01B         	movff	_EventFaultStateLEDCallBack$219+1,_EventFaultStateLEDCallBack$218+1
  4253  000A52  D004               	goto	l4782
  4254  000A54                     l4780:
  4255                           
  4256                           ; BSR set to: 0
  4257  000A54  0E00               	movlw	0
  4258  000A56  6E1B               	movwf	_EventFaultStateLEDCallBack$218+1,c
  4259  000A58  0E03               	movlw	3
  4260  000A5A  6E1A               	movwf	_EventFaultStateLEDCallBack$218,c
  4261  000A5C                     l4782:
  4262  000A5C  C01A  F018         	movff	_EventFaultStateLEDCallBack$218,_EventFaultStateLEDCallBack$217
  4263  000A60  C01B  F019         	movff	_EventFaultStateLEDCallBack$218+1,_EventFaultStateLEDCallBack$217+1
  4264  000A64  D004               	goto	l4786
  4265  000A66                     l4784:
  4266                           
  4267                           ; BSR set to: 0
  4268  000A66  0E00               	movlw	0
  4269  000A68  6E19               	movwf	_EventFaultStateLEDCallBack$217+1,c
  4270  000A6A  0E04               	movlw	4
  4271  000A6C  6E18               	movwf	_EventFaultStateLEDCallBack$217,c
  4272  000A6E                     l4786:
  4273  000A6E  C018  F084         	movff	_EventFaultStateLEDCallBack$217,_timer_events+36	;volatile
  4274  000A72  C019  F085         	movff	_EventFaultStateLEDCallBack$217+1,_timer_events+37	;volatile
  4275                           
  4276                           ;EventFaultStateLed.c: 50:  enable_callback (EventFaultStateLED, ((8000000/256/4/256)*1)
      +                          );
  4277  000A76  0E00               	movlw	0
  4278  000A78  6E15               	movwf	enable_callback@time_delay+1,c
  4279  000A7A  0E1E               	movlw	30
  4280  000A7C  6E14               	movwf	enable_callback@time_delay,c
  4281  000A7E  0E04               	movlw	4
  4282  000A80  ECA3  F00A         	call	_enable_callback
  4283  000A84  0012               	return	
  4284  000A86                     l22:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;EventFaultStateLed.c: 55:       { PORTAbits.RA3 = (1);};
  4288  000A86  8680               	bsf	3968,3,c	;volatile
  4289                           
  4290                           ;EventFaultStateLed.c: 56:       timer_events[EventFaultStateLED].flag_bit = 1;
  4291  000A88  8382               	bsf	(_timer_events+34)& (0+255),1,b	;volatile
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;EventFaultStateLed.c: 57:       if (timer_events[EventFaultStateLED].flag_data) {
  4295  000A8A  5184               	movf	(_timer_events+36)& (0+255),w,b	;volatile
  4296  000A8C  1185               	iorwf	(_timer_events+37)& (0+255),w,b	;volatile
  4297  000A8E  B4D8               	btfsc	status,2,c
  4298  000A90  D003               	goto	l4794
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;EventFaultStateLed.c: 58:  timer_events[EventFaultStateLED].flag_data--;
  4302  000A92  0784               	decf	(_timer_events+36)& (0+255),f,b	;volatile
  4303  000A94  A0D8               	btfss	status,0,c
  4304  000A96  0785               	decf	(_timer_events+37)& (0+255),f,b	;volatile
  4305  000A98                     l4794:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;EventFaultStateLed.c: 60:       enable_callback (EventFaultStateLED, ((8000000/256/4/25
      +                          6)/4));
  4309  000A98  0E00               	movlw	0
  4310  000A9A  6E15               	movwf	enable_callback@time_delay+1,c
  4311  000A9C  0E07               	movlw	7
  4312  000A9E  6E14               	movwf	enable_callback@time_delay,c
  4313  000AA0  0E04               	movlw	4
  4314  000AA2  ECA3  F00A         	call	_enable_callback
  4315  000AA6  0012               	return		;funcret
  4316  000AA8                     __end_of_EventFaultStateLEDCallBack:
  4317                           	opt callstack 0
  4318                           
  4319 ;; *************** function _EventDumpSolenoidCallBack *****************
  4320 ;; Defined at:
  4321 ;;		line 3 in file "EventDumpsolenoid.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;		None
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      void 
  4328 ;; Registers used:
  4329 ;;		wreg, status,2
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4335 ;;      Params:         0       0       0       0       0       0       0       0       0
  4336 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4338 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4339 ;;Total ram usage:        0 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    5
  4342 ;; This function calls:
  4343 ;;		Nothing
  4344 ;; This function is called by:
  4345 ;;		_init_event_timer
  4346 ;;		_process_event_timer
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           	psect	text29
  4351  001A2E                     __ptext29:
  4352                           	opt callstack 0
  4353  001A2E                     _EventDumpSolenoidCallBack:
  4354                           	opt callstack 24
  4355                           
  4356                           ;EventDumpsolenoid.c: 5:   { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  4357                           
  4358                           ;incstack = 0
  4359  001A2E  9480               	bcf	3968,2,c	;volatile
  4360  001A30  9048               	bcf	_fault_flags+1,0,c
  4361                           
  4362                           ;EventDumpsolenoid.c: 7:   state = standbyState;
  4363  001A32  0E00               	movlw	0
  4364  001A34  6E4B               	movwf	_state,c
  4365  001A36  0012               	return		;funcret
  4366  001A38                     __end_of_EventDumpSolenoidCallBack:
  4367                           	opt callstack 0
  4368                           
  4369 ;; *************** function _EventRunSignalDebounceCallBack *****************
  4370 ;; Defined at:
  4371 ;;		line 4 in file "EventRunSignalDebounce.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4385 ;;      Params:         0       0       0       0       0       0       0       0       0
  4386 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4388 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4389 ;;Total ram usage:        0 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    7
  4392 ;; This function calls:
  4393 ;;		_clear_callback_for_shutdown
  4394 ;; This function is called by:
  4395 ;;		_init_event_timer
  4396 ;;		_process_event_timer
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           	psect	text30
  4401  001A0E                     __ptext30:
  4402                           	opt callstack 0
  4403  001A0E                     _EventRunSignalDebounceCallBack:
  4404                           	opt callstack 22
  4405                           
  4406                           ;EventRunSignalDebounce.c: 9:     state = timer_events[EventRunSignalDebounce].next_stat
      +                          e;
  4407                           
  4408                           ;incstack = 0
  4409  001A0E  C09B  F04B         	movff	_timer_events+59,_state	;volatile
  4410                           
  4411                           ;EventRunSignalDebounce.c: 10:     if (shutdownState == state) {
  4412  001A12  044B               	decf	_state,w,c
  4413  001A14  A4D8               	btfss	status,2,c
  4414  001A16  0012               	return	
  4415                           
  4416                           ;EventRunSignalDebounce.c: 12:         clear_callback_for_shutdown();
  4417  001A18  ECD7  F00B         	call	_clear_callback_for_shutdown	;wreg free
  4418  001A1C  0012               	return		;funcret
  4419  001A1E                     __end_of_EventRunSignalDebounceCallBack:
  4420                           	opt callstack 0
  4421                           
  4422 ;; *************** function _clear_callback_for_shutdown *****************
  4423 ;; Defined at:
  4424 ;;		line 30 in file "timer_event.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      void 
  4431 ;; Registers used:
  4432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0
  4439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4441 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4442 ;;Total ram usage:        0 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    6
  4445 ;; This function calls:
  4446 ;;		_clear_callback
  4447 ;; This function is called by:
  4448 ;;		_EventLowFogPressureCallBack
  4449 ;;		_EventLowWaterLevelCallBack
  4450 ;;		_EventLowWaterPressureCallBack
  4451 ;;		_EventPODebounceCallBack
  4452 ;;		_EventRunSignalDebounceCallBack
  4453 ;;		_start_pump
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text31
  4458  0017AE                     __ptext31:
  4459                           	opt callstack 0
  4460  0017AE                     _clear_callback_for_shutdown:
  4461                           	opt callstack 23
  4462                           
  4463                           ;timer_event.c: 31:     clear_callback(EventLowWaterLevel);
  4464                           
  4465                           ;incstack = 0
  4466  0017AE  0E00               	movlw	0
  4467  0017B0  ECCC  F00C         	call	_clear_callback
  4468                           
  4469                           ;timer_event.c: 32:     clear_callback(EventLowWaterPressure);
  4470  0017B4  0E01               	movlw	1
  4471  0017B6  ECCC  F00C         	call	_clear_callback
  4472                           
  4473                           ;timer_event.c: 33:     clear_callback(EventLowWaterPressureDebounce);
  4474  0017BA  0E02               	movlw	2
  4475  0017BC  ECCC  F00C         	call	_clear_callback
  4476                           
  4477                           ;timer_event.c: 34:     clear_callback(EventLowFogPressure);
  4478  0017C0  0E03               	movlw	3
  4479  0017C2  ECCC  F00C         	call	_clear_callback
  4480                           
  4481                           ;timer_event.c: 35:     clear_callback(EventDumpSolenoid);
  4482  0017C6  0E06               	movlw	6
  4483  0017C8  ECCC  F00C         	call	_clear_callback
  4484                           
  4485                           ;timer_event.c: 36:     clear_callback(EventPODebounce);
  4486  0017CC  0E08               	movlw	8
  4487  0017CE  ECCC  F00C         	call	_clear_callback
  4488                           
  4489                           ;timer_event.c: 37:     clear_callback(EventRunSignalDebounce);
  4490  0017D2  0E07               	movlw	7
  4491  0017D4  ECCC  F00C         	call	_clear_callback
  4492  0017D8  0012               	return		;funcret
  4493  0017DA                     __end_of_clear_callback_for_shutdown:
  4494                           	opt callstack 0
  4495                           
  4496 ;; *************** function _printPumpState *****************
  4497 ;; Defined at:
  4498 ;;		line 98 in file "pump_control.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;		None
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4512 ;;      Params:         0       0       0       0       0       0       0       0       0
  4513 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4515 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4516 ;;Total ram usage:        0 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:   14
  4519 ;; This function calls:
  4520 ;;		_printf
  4521 ;; This function is called by:
  4522 ;;		_main
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text32
  4527  001A46                     __ptext32:
  4528                           	opt callstack 0
  4529  001A46                     _printPumpState:
  4530                           	opt callstack 16
  4531                           
  4532                           ;pump_control.c: 99:     return;
  4533                           
  4534                           ;incstack = 0
  4535  001A46  0012               	return		;funcret
  4536  001A48                     __end_of_printPumpState:
  4537                           	opt callstack 0
  4538                           
  4539 ;; *************** function _printFaultState *****************
  4540 ;; Defined at:
  4541 ;;		line 103 in file "pump_control.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4555 ;;      Params:         0       0       0       0       0       0       0       0       0
  4556 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4558 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4559 ;;Total ram usage:        0 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:   14
  4562 ;; This function calls:
  4563 ;;		_printf
  4564 ;; This function is called by:
  4565 ;;		_main
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text33
  4570  001A48                     __ptext33:
  4571                           	opt callstack 0
  4572  001A48                     _printFaultState:
  4573                           	opt callstack 16
  4574                           
  4575                           ;pump_control.c: 104:     return;
  4576                           
  4577                           ;incstack = 0
  4578  001A48  0012               	return		;funcret
  4579  001A4A                     __end_of_printFaultState:
  4580                           	opt callstack 0
  4581                           
  4582 ;; *************** function _printf *****************
  4583 ;; Defined at:
  4584 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  fmt             2   57[BANK0 ] PTR const unsigned char 
  4587 ;;		 -> STR_22(15), STR_21(3), STR_18(15), STR_17(18), 
  4588 ;;		 -> STR_16(18), STR_15(15), STR_14(14), STR_13(10), 
  4589 ;;		 -> STR_12(11), STR_11(12), STR_10(12), STR_9(12), 
  4590 ;;		 -> STR_8(15), STR_7(15), STR_6(17), STR_5(31), 
  4591 ;;		 -> STR_4(21), STR_3(24), STR_2(16), STR_1(15), 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  ap              2   65[BANK0 ] PTR void [1]
  4594 ;;		 -> ?_printf(2), 
  4595 ;;  ret             2    0        int 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  2   57[BANK0 ] int 
  4598 ;; Registers used:
  4599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4605 ;;      Params:         0       6       0       0       0       0       0       0       0
  4606 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4608 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4609 ;;Total ram usage:       10 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:   13
  4612 ;; This function calls:
  4613 ;;		_vfprintf
  4614 ;; This function is called by:
  4615 ;;		_printPumpState
  4616 ;;		_printFaultState
  4617 ;;		_main
  4618 ;;		_receiveMessage
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text34
  4623  00182C                     __ptext34:
  4624                           	opt callstack 0
  4625  00182C                     _printf:
  4626                           	opt callstack 16
  4627                           
  4628                           ;incstack = 0
  4629  00182C  0EF1               	movlw	low (?_printf+2)
  4630  00182E  0100               	movlb	0	; () banked
  4631  001830  6FF7               	movwf	printf@ap& (0+255),b
  4632  001832  0E00               	movlw	high (?_printf+2)
  4633  001834  6FF8               	movwf	(printf@ap+1)& (0+255),b
  4634                           
  4635                           ; BSR set to: 0
  4636  001836  0E00               	movlw	0
  4637  001838  6FE7               	movwf	vfprintf@fp& (0+255),b
  4638  00183A  0E00               	movlw	0
  4639  00183C  6FE8               	movwf	(vfprintf@fp+1)& (0+255),b
  4640  00183E  C0EF  F0E9         	movff	printf@fmt,vfprintf@fmt
  4641  001842  C0F0  F0EA         	movff	printf@fmt+1,vfprintf@fmt+1
  4642  001846  0EF7               	movlw	low printf@ap
  4643  001848  6FEB               	movwf	vfprintf@ap& (0+255),b
  4644  00184A  0E00               	movlw	high printf@ap
  4645  00184C  6FEC               	movwf	(vfprintf@ap+1)& (0+255),b
  4646  00184E  EC07  F00A         	call	_vfprintf	;wreg free
  4647  001852  0012               	return		;funcret
  4648  001854                     __end_of_printf:
  4649                           	opt callstack 0
  4650                           
  4651 ;; *************** function _vfprintf *****************
  4652 ;; Defined at:
  4653 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;  fp              2   49[BANK0 ] PTR struct _IO_FILE
  4656 ;;		 -> NULL(0), 
  4657 ;;  fmt             2   51[BANK0 ] PTR const unsigned char 
  4658 ;;		 -> STR_22(15), STR_21(3), STR_18(15), STR_17(18), 
  4659 ;;		 -> STR_16(18), STR_15(15), STR_14(14), STR_13(10), 
  4660 ;;		 -> STR_12(11), STR_11(12), STR_10(12), STR_9(12), 
  4661 ;;		 -> STR_8(15), STR_7(15), STR_6(17), STR_5(31), 
  4662 ;;		 -> STR_4(21), STR_3(24), STR_2(16), STR_1(15), 
  4663 ;;  ap              2   53[BANK0 ] PTR PTR void 
  4664 ;;		 -> printf@ap(2), 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  cfmt            2   55[BANK0 ] PTR unsigned char 
  4667 ;;		 -> STR_22(15), STR_21(3), STR_18(15), STR_17(18), 
  4668 ;;		 -> STR_16(18), STR_15(15), STR_14(14), STR_13(10), 
  4669 ;;		 -> STR_12(11), STR_11(12), STR_10(12), STR_9(12), 
  4670 ;;		 -> STR_8(15), STR_7(15), STR_6(17), STR_5(31), 
  4671 ;;		 -> STR_4(21), STR_3(24), STR_2(16), STR_1(15), 
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  2   49[BANK0 ] int 
  4674 ;; Registers used:
  4675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4681 ;;      Params:         0       6       0       0       0       0       0       0       0
  4682 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4684 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4685 ;;Total ram usage:        8 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:   12
  4688 ;; This function calls:
  4689 ;;		_vfpfcnvrt
  4690 ;; This function is called by:
  4691 ;;		_printf
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text35
  4696  00140E                     __ptext35:
  4697                           	opt callstack 0
  4698  00140E                     _vfprintf:
  4699                           	opt callstack 16
  4700                           
  4701                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  4702                           
  4703                           ;incstack = 0
  4704  00140E  C0E9  F0ED         	movff	vfprintf@fmt,vfprintf@cfmt
  4705  001412  C0EA  F0EE         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4706                           
  4707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  4708  001416  0E00               	movlw	0
  4709  001418  0100               	movlb	0	; () banked
  4710  00141A  6FA9               	movwf	(_nout+1)& (0+255),b
  4711  00141C  0E00               	movlw	0
  4712  00141E  6FA8               	movwf	_nout& (0+255),b
  4713                           
  4714                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4715  001420  D013               	goto	l4744
  4716  001422                     l4742:
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  4720  001422  C0E7  F0D2         	movff	vfprintf@fp,vfpfcnvrt@fp
  4721  001426  C0E8  F0D3         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4722  00142A  0EED               	movlw	low vfprintf@cfmt
  4723  00142C  6FD4               	movwf	vfpfcnvrt@fmt& (0+255),b
  4724  00142E  0E00               	movlw	high vfprintf@cfmt
  4725  001430  6FD5               	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  4726  001432  C0EB  F0D6         	movff	vfprintf@ap,vfpfcnvrt@ap
  4727  001436  C0EC  F0D7         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4728  00143A  EC09  F000         	call	_vfpfcnvrt	;wreg free
  4729  00143E  0100               	movlb	0	; () banked
  4730  001440  51D2               	movf	?_vfpfcnvrt& (0+255),w,b
  4731  001442  27A8               	addwf	_nout& (0+255),f,b
  4732  001444  51D3               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
  4733  001446  23A9               	addwfc	(_nout+1)& (0+255),f,b
  4734  001448                     l4744:
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4738  001448  C0ED  FFF6         	movff	vfprintf@cfmt,tblptrl
  4739  00144C  C0EE  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4740  001450                     	if	0	;tblptru may be non-zero
  4741  001450                     	endif
  4742  001450                     	if	0	;tblptru may be non-zero
  4743  001450                     	endif
  4744  001450  0008               	tblrd		*
  4745  001452  50F5               	movf	tablat,w,c
  4746  001454  0900               	iorlw	0
  4747  001456  A4D8               	btfss	status,2,c
  4748  001458  D7E4               	goto	l4742
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  4752  00145A  C0A8  F0E7         	movff	_nout,?_vfprintf
  4753  00145E  C0A9  F0E8         	movff	_nout+1,?_vfprintf+1
  4754                           
  4755                           ; BSR set to: 0
  4756  001462  0012               	return		;funcret
  4757  001464                     __end_of_vfprintf:
  4758                           	opt callstack 0
  4759                           
  4760 ;; *************** function _vfpfcnvrt *****************
  4761 ;; Defined at:
  4762 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;  fp              2   28[BANK0 ] PTR struct _IO_FILE
  4765 ;;		 -> NULL(0), 
  4766 ;;  fmt             2   30[BANK0 ] PTR PTR unsigned char 
  4767 ;;		 -> vfprintf@cfmt(2), 
  4768 ;;  ap              2   32[BANK0 ] PTR PTR void 
  4769 ;;		 -> printf@ap(2), 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  ll              8   36[BANK0 ] long long 
  4772 ;;  llu             8    0        unsigned long long 
  4773 ;;  f               4    0        unsigned long long 
  4774 ;;  ct              3    0        unsigned char [3]
  4775 ;;  vp              2   46[BANK0 ] PTR void 
  4776 ;;		 -> ?_printf(2), receiveMessage@message(10), 
  4777 ;;  cp              2   44[BANK0 ] PTR unsigned char 
  4778 ;;		 -> ?_printf(2), receiveMessage@message(10), 
  4779 ;;  i               2    0        int 
  4780 ;;  done            2    0        int 
  4781 ;;  c               1   48[BANK0 ] unsigned char 
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  2   28[BANK0 ] int 
  4784 ;; Registers used:
  4785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4791 ;;      Params:         0       6       0       0       0       0       0       0       0
  4792 ;;      Locals:         0      13       0       0       0       0       0       0       0
  4793 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4794 ;;      Totals:         0      21       0       0       0       0       0       0       0
  4795 ;;Total ram usage:       21 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:   11
  4798 ;; This function calls:
  4799 ;;		_ctoa
  4800 ;;		_dtoa
  4801 ;;		_fputc
  4802 ;;		_stoa
  4803 ;; This function is called by:
  4804 ;;		_vfprintf
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text36
  4809  000012                     __ptext36:
  4810                           	opt callstack 0
  4811  000012                     _vfpfcnvrt:
  4812                           	opt callstack 16
  4813                           
  4814                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;incstack = 0
  4818  000012  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4819  000016  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4820  00001A  CFDE FFF6          	movff	postinc2,tblptrl
  4821  00001E  CFDD FFF7          	movff	postdec2,tblptrh
  4822  000022                     	if	0	;tblptru may be non-zero
  4823  000022                     	endif
  4824  000022                     	if	0	;tblptru may be non-zero
  4825  000022                     	endif
  4826  000022  0008               	tblrd		*
  4827  000024  50F5               	movf	tablat,w,c
  4828  000026  0A25               	xorlw	37
  4829  000028  A4D8               	btfss	status,2,c
  4830  00002A  D138               	goto	l4652
  4831                           
  4832                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  4833  00002C  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4834  000030  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4835  000034  2ADE               	incf	postinc2,f,c
  4836  000036  0E00               	movlw	0
  4837  000038  22DD               	addwfc	postdec2,f,c
  4838                           
  4839                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  4840  00003A  0E00               	movlw	0
  4841  00003C  6E40               	movwf	_width+1,c
  4842  00003E  0E00               	movlw	0
  4843  000040  6E3F               	movwf	_width,c
  4844  000042  C03F  F043         	movff	_width,_flags
  4845  000046  C040  F044         	movff	_width+1,_flags+1
  4846                           
  4847                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  4848  00004A  6841               	setf	_prec,c
  4849  00004C  6842               	setf	_prec+1,c
  4850                           
  4851                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  4852  00004E  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4853  000052  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4854  000056  CFDE FFF6          	movff	postinc2,tblptrl
  4855  00005A  CFDD FFF7          	movff	postdec2,tblptrh
  4856  00005E                     	if	0	;tblptru may be non-zero
  4857  00005E                     	endif
  4858  00005E                     	if	0	;tblptru may be non-zero
  4859  00005E                     	endif
  4860  00005E  0008               	tblrd		*
  4861  000060  50F5               	movf	tablat,w,c
  4862  000062  0A63               	xorlw	99
  4863  000064  A4D8               	btfss	status,2,c
  4864  000066  D027               	goto	l4608
  4865                           
  4866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  4867  000068  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4868  00006C  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4869  000070  2ADE               	incf	postinc2,f,c
  4870  000072  0E00               	movlw	0
  4871  000074  22DD               	addwfc	postdec2,f,c
  4872                           
  4873                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  4874  000076  C0D6  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4875  00007A  C0D7  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4876  00007E  CFDF F0D8          	movff	indf2,??_vfpfcnvrt
  4877  000082  0E02               	movlw	2
  4878  000084  26DE               	addwf	postinc2,f,c
  4879  000086  CFDF F0D9          	movff	indf2,??_vfpfcnvrt+1
  4880  00008A  0E00               	movlw	0
  4881  00008C  22DD               	addwfc	postdec2,f,c
  4882  00008E  C0D8  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4883  000092  C0D9  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4884  000096  50DF               	movf	indf2,w,c
  4885  000098  0100               	movlb	0	; () banked
  4886  00009A  6FE6               	movwf	vfpfcnvrt@c& (0+255),b
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  4890  00009C  C0D2  F037         	movff	vfpfcnvrt@fp,ctoa@fp
  4891  0000A0  C0D3  F038         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  4892  0000A4  C0E6  F039         	movff	vfpfcnvrt@c,ctoa@c
  4893  0000A8  EC59  F00A         	call	_ctoa	;wreg free
  4894  0000AC  C037  F0D2         	movff	?_ctoa,?_vfpfcnvrt
  4895  0000B0  C038  F0D3         	movff	?_ctoa+1,?_vfpfcnvrt+1
  4896  0000B4  0012               	return	
  4897  0000B6                     l4608:
  4898                           
  4899                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  4900  0000B6  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4901  0000BA  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4902  0000BE  CFDE FFF6          	movff	postinc2,tblptrl
  4903  0000C2  CFDD FFF7          	movff	postdec2,tblptrh
  4904  0000C6                     	if	0	;tblptru may be non-zero
  4905  0000C6                     	endif
  4906  0000C6                     	if	0	;tblptru may be non-zero
  4907  0000C6                     	endif
  4908  0000C6  0008               	tblrd		*
  4909  0000C8  50F5               	movf	tablat,w,c
  4910  0000CA  0A64               	xorlw	100
  4911  0000CC  B4D8               	btfsc	status,2,c
  4912  0000CE  D00D               	goto	u4060
  4913  0000D0  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4914  0000D4  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4915  0000D8  CFDE FFF6          	movff	postinc2,tblptrl
  4916  0000DC  CFDD FFF7          	movff	postdec2,tblptrh
  4917  0000E0                     	if	0	;tblptru may be non-zero
  4918  0000E0                     	endif
  4919  0000E0                     	if	0	;tblptru may be non-zero
  4920  0000E0                     	endif
  4921  0000E0  0008               	tblrd		*
  4922  0000E2  50F5               	movf	tablat,w,c
  4923  0000E4  0A69               	xorlw	105
  4924  0000E6  A4D8               	btfss	status,2,c
  4925  0000E8  D040               	goto	l4618
  4926  0000EA                     u4060:
  4927                           
  4928                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  4929  0000EA  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4930  0000EE  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4931  0000F2  2ADE               	incf	postinc2,f,c
  4932  0000F4  0E00               	movlw	0
  4933  0000F6  22DD               	addwfc	postdec2,f,c
  4934                           
  4935                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  4936  0000F8  C0D6  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4937  0000FC  C0D7  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4938  000100  CFDF F0D8          	movff	indf2,??_vfpfcnvrt
  4939  000104  0E02               	movlw	2
  4940  000106  26DE               	addwf	postinc2,f,c
  4941  000108  CFDF F0D9          	movff	indf2,??_vfpfcnvrt+1
  4942  00010C  0E00               	movlw	0
  4943  00010E  22DD               	addwfc	postdec2,f,c
  4944  000110  C0D8  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4945  000114  C0D9  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4946  000118  CFDE F0DA          	movff	postinc2,vfpfcnvrt@ll
  4947  00011C  CFDD F0DB          	movff	postdec2,vfpfcnvrt@ll+1
  4948  000120  0100               	movlb	0	; () banked
  4949  000122  0E00               	movlw	0
  4950  000124  BFDB               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  4951  000126  0EFF               	movlw	-1
  4952  000128  6FDC               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  4953  00012A  6FDD               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  4954  00012C  6FDE               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  4955  00012E  6FDF               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  4956  000130  6FE0               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  4957  000132  6FE1               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  4961  000134  C0D2  F0B6         	movff	vfpfcnvrt@fp,dtoa@fp
  4962  000138  C0D3  F0B7         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4963  00013C  C0DA  F0B8         	movff	vfpfcnvrt@ll,dtoa@d
  4964  000140  C0DB  F0B9         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  4965  000144  C0DC  F0BA         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  4966  000148  C0DD  F0BB         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  4967  00014C  C0DE  F0BC         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  4968  000150  C0DF  F0BD         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  4969  000154  C0E0  F0BE         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  4970  000158  C0E1  F0BF         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  4971  00015C  EC68  F001         	call	_dtoa	;wreg free
  4972  000160  C0B6  F0D2         	movff	?_dtoa,?_vfpfcnvrt
  4973  000164  C0B7  F0D3         	movff	?_dtoa+1,?_vfpfcnvrt+1
  4974  000168  0012               	return	
  4975  00016A                     l4618:
  4976                           
  4977                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1077:      
      +                             if (*fmt[0] == 'n') {
  4978  00016A  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4979  00016E  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4980  000172  CFDE FFF6          	movff	postinc2,tblptrl
  4981  000176  CFDD FFF7          	movff	postdec2,tblptrh
  4982  00017A                     	if	0	;tblptru may be non-zero
  4983  00017A                     	endif
  4984  00017A                     	if	0	;tblptru may be non-zero
  4985  00017A                     	endif
  4986  00017A  0008               	tblrd		*
  4987  00017C  50F5               	movf	tablat,w,c
  4988  00017E  0A6E               	xorlw	110
  4989  000180  A4D8               	btfss	status,2,c
  4990  000182  D029               	goto	l4628
  4991                           
  4992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1078:      
      +                                 ++*fmt;
  4993  000184  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4994  000188  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4995  00018C  2ADE               	incf	postinc2,f,c
  4996  00018E  0E00               	movlw	0
  4997  000190  22DD               	addwfc	postdec2,f,c
  4998                           
  4999                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1079:      
      +                                 vp = (void *)(*(int * *)__va_arg(*(int * **)ap, (int *)0));
  5000  000192  C0D6  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  5001  000196  C0D7  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  5002  00019A  CFDF F0D8          	movff	indf2,??_vfpfcnvrt
  5003  00019E  0E02               	movlw	2
  5004  0001A0  26DE               	addwf	postinc2,f,c
  5005  0001A2  CFDF F0D9          	movff	indf2,??_vfpfcnvrt+1
  5006  0001A6  0E00               	movlw	0
  5007  0001A8  22DD               	addwfc	postdec2,f,c
  5008  0001AA  C0D8  FFD9         	movff	??_vfpfcnvrt,fsr2l
  5009  0001AE  C0D9  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  5010  0001B2  CFDE F0E4          	movff	postinc2,vfpfcnvrt@vp
  5011  0001B6  CFDD F0E5          	movff	postdec2,vfpfcnvrt@vp+1
  5012                           
  5013                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1080:      
      +                                 *(int *)vp = nout;
  5014  0001BA  C0E4  FFD9         	movff	vfpfcnvrt@vp,fsr2l
  5015  0001BE  C0E5  FFDA         	movff	vfpfcnvrt@vp+1,fsr2h
  5016  0001C2  C0A8  FFDE         	movff	_nout,postinc2
  5017  0001C6  C0A9  FFDD         	movff	_nout+1,postdec2
  5018  0001CA                     l4624:
  5019                           
  5020                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1081:      
      +                                 return 0;
  5021  0001CA  0E00               	movlw	0
  5022  0001CC  0100               	movlb	0	; () banked
  5023  0001CE  6FD3               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  5024  0001D0  0E00               	movlw	0
  5025  0001D2  6FD2               	movwf	?_vfpfcnvrt& (0+255),b
  5026  0001D4  0012               	return	
  5027  0001D6                     l4628:
  5028                           
  5029                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
  5030  0001D6  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5031  0001DA  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5032  0001DE  CFDE FFF6          	movff	postinc2,tblptrl
  5033  0001E2  CFDD FFF7          	movff	postdec2,tblptrh
  5034  0001E6                     	if	0	;tblptru may be non-zero
  5035  0001E6                     	endif
  5036  0001E6                     	if	0	;tblptru may be non-zero
  5037  0001E6                     	endif
  5038  0001E6  0008               	tblrd		*
  5039  0001E8  50F5               	movf	tablat,w,c
  5040  0001EA  0A73               	xorlw	115
  5041  0001EC  A4D8               	btfss	status,2,c
  5042  0001EE  D02A               	goto	l4636
  5043                           
  5044                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
  5045  0001F0  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5046  0001F4  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5047  0001F8  2ADE               	incf	postinc2,f,c
  5048  0001FA  0E00               	movlw	0
  5049  0001FC  22DD               	addwfc	postdec2,f,c
  5050                           
  5051                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  5052  0001FE  C0D6  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  5053  000202  C0D7  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  5054  000206  CFDF F0D8          	movff	indf2,??_vfpfcnvrt
  5055  00020A  0E02               	movlw	2
  5056  00020C  26DE               	addwf	postinc2,f,c
  5057  00020E  CFDF F0D9          	movff	indf2,??_vfpfcnvrt+1
  5058  000212  0E00               	movlw	0
  5059  000214  22DD               	addwfc	postdec2,f,c
  5060  000216  C0D8  FFD9         	movff	??_vfpfcnvrt,fsr2l
  5061  00021A  C0D9  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  5062  00021E  CFDE F0E2          	movff	postinc2,vfpfcnvrt@cp
  5063  000222  CFDD F0E3          	movff	postdec2,vfpfcnvrt@cp+1
  5064                           
  5065                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
  5066  000226  C0D2  F025         	movff	vfpfcnvrt@fp,stoa@fp
  5067  00022A  C0D3  F026         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  5068  00022E  C0E2  F027         	movff	vfpfcnvrt@cp,stoa@s
  5069  000232  C0E3  F028         	movff	vfpfcnvrt@cp+1,stoa@s+1
  5070  000236  ECC5  F003         	call	_stoa	;wreg free
  5071  00023A  C025  F0D2         	movff	?_stoa,?_vfpfcnvrt
  5072  00023E  C026  F0D3         	movff	?_stoa+1,?_vfpfcnvrt+1
  5073  000242  0012               	return	
  5074  000244                     l4636:
  5075                           
  5076                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5077  000244  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5078  000248  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5079  00024C  CFDE FFF6          	movff	postinc2,tblptrl
  5080  000250  CFDD FFF7          	movff	postdec2,tblptrh
  5081  000254                     	if	0	;tblptru may be non-zero
  5082  000254                     	endif
  5083  000254                     	if	0	;tblptru may be non-zero
  5084  000254                     	endif
  5085  000254  0008               	tblrd		*
  5086  000256  50F5               	movf	tablat,w,c
  5087  000258  0A25               	xorlw	37
  5088  00025A  A4D8               	btfss	status,2,c
  5089  00025C  D017               	goto	l4646
  5090                           
  5091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5092  00025E  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5093  000262  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5094  000266  2ADE               	incf	postinc2,f,c
  5095  000268  0E00               	movlw	0
  5096  00026A  22DD               	addwfc	postdec2,f,c
  5097                           
  5098                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5099  00026C  0E00               	movlw	0
  5100  00026E  6E1D               	movwf	fputc@c+1,c
  5101  000270  0E25               	movlw	37
  5102  000272  6E1C               	movwf	fputc@c,c
  5103  000274  C0D2  F01E         	movff	vfpfcnvrt@fp,fputc@fp
  5104  000278  C0D3  F01F         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  5105  00027C  ECE2  F008         	call	_fputc	;wreg free
  5106  000280                     l4642:
  5107                           
  5108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5109  000280  0E00               	movlw	0
  5110  000282  0100               	movlb	0	; () banked
  5111  000284  6FD3               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  5112  000286  0E01               	movlw	1
  5113  000288  6FD2               	movwf	?_vfpfcnvrt& (0+255),b
  5114  00028A  0012               	return	
  5115  00028C                     l4646:
  5116                           
  5117                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5118  00028C  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5119  000290  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5120  000294  2ADE               	incf	postinc2,f,c
  5121  000296  0E00               	movlw	0
  5122  000298  22DD               	addwfc	postdec2,f,c
  5123  00029A  D797               	goto	l4624
  5124  00029C                     l4652:
  5125                           
  5126                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5127  00029C  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5128  0002A0  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5129  0002A4  CFDE FFF6          	movff	postinc2,tblptrl
  5130  0002A8  CFDD FFF7          	movff	postdec2,tblptrh
  5131  0002AC                     	if	0	;tblptru may be non-zero
  5132  0002AC                     	endif
  5133  0002AC                     	if	0	;tblptru may be non-zero
  5134  0002AC                     	endif
  5135  0002AC  0008               	tblrd		*
  5136  0002AE  50F5               	movf	tablat,w,c
  5137  0002B0  6E1C               	movwf	fputc@c,c
  5138  0002B2  6A1D               	clrf	fputc@c+1,c
  5139  0002B4  C0D2  F01E         	movff	vfpfcnvrt@fp,fputc@fp
  5140  0002B8  C0D3  F01F         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  5141  0002BC  ECE2  F008         	call	_fputc	;wreg free
  5142                           
  5143                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5144  0002C0  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5145  0002C4  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5146  0002C8  2ADE               	incf	postinc2,f,c
  5147  0002CA  0E00               	movlw	0
  5148  0002CC  22DD               	addwfc	postdec2,f,c
  5149  0002CE  D7D8               	goto	l4642
  5150  0002D0                     __end_of_vfpfcnvrt:
  5151                           	opt callstack 0
  5152                           
  5153 ;; *************** function _stoa *****************
  5154 ;; Defined at:
  5155 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
  5158 ;;		 -> NULL(0), 
  5159 ;;  s               2   38[COMRAM] PTR unsigned char 
  5160 ;;		 -> ?_printf(2), receiveMessage@message(10), 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  nuls            7   41[COMRAM] unsigned char [7]
  5163 ;;  l               2   56[COMRAM] int 
  5164 ;;  p               2   54[COMRAM] int 
  5165 ;;  cp              2   52[COMRAM] PTR unsigned char 
  5166 ;;		 -> ?_printf(2), stoa@nuls(7), receiveMessage@message(10), 
  5167 ;;  w               2   50[COMRAM] int 
  5168 ;;  i               2   48[COMRAM] int 
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  2   36[COMRAM] int 
  5171 ;; Registers used:
  5172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5178 ;;      Params:         4       0       0       0       0       0       0       0       0
  5179 ;;      Locals:        17       0       0       0       0       0       0       0       0
  5180 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5181 ;;      Totals:        22       0       0       0       0       0       0       0       0
  5182 ;;Total ram usage:       22 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    8
  5185 ;; This function calls:
  5186 ;;		_fputc
  5187 ;;		_strlen
  5188 ;; This function is called by:
  5189 ;;		_vfpfcnvrt
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text37
  5194  00078A                     __ptext37:
  5195                           	opt callstack 0
  5196  00078A                     _stoa:
  5197                           	opt callstack 18
  5198                           
  5199                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
  5200                           
  5201                           ;incstack = 0
  5202  00078A  EE21  F042         	lfsr	2,stoa@F1144
  5203  00078E  EE10  F02A         	lfsr	1,stoa@nuls
  5204  000792  0E06               	movlw	6
  5205  000794                     u3931:
  5206  000794  CFDB FFE3          	movff	plusw2,plusw1
  5207  000798  06E8               	decf	wreg,f,c
  5208  00079A  E2FC               	bc	u3931
  5209                           
  5210                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
  5211  00079C  C027  F035         	movff	stoa@s,stoa@cp
  5212  0007A0  C028  F036         	movff	stoa@s+1,stoa@cp+1
  5213                           
  5214                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
  5215  0007A4  5035               	movf	stoa@cp,w,c
  5216  0007A6  1036               	iorwf	stoa@cp+1,w,c
  5217  0007A8  A4D8               	btfss	status,2,c
  5218  0007AA  D004               	goto	l4450
  5219                           
  5220                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
  5221  0007AC  0E2A               	movlw	low stoa@nuls
  5222  0007AE  6E35               	movwf	stoa@cp,c
  5223  0007B0  0E00               	movlw	high stoa@nuls
  5224  0007B2  6E36               	movwf	stoa@cp+1,c
  5225  0007B4                     l4450:
  5226                           
  5227                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
  5228  0007B4  C035  F014         	movff	stoa@cp,strlen@s
  5229  0007B8  C036  F015         	movff	stoa@cp+1,strlen@s+1
  5230  0007BC  ECED  F00B         	call	_strlen	;wreg free
  5231  0007C0  C014  F039         	movff	?_strlen,stoa@l
  5232  0007C4  C015  F03A         	movff	?_strlen+1,stoa@l+1
  5233                           
  5234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
  5235  0007C8  C041  F037         	movff	_prec,stoa@p
  5236  0007CC  C042  F038         	movff	_prec+1,stoa@p+1
  5237                           
  5238                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
  5239  0007D0  BE38               	btfsc	stoa@p+1,7,c
  5240  0007D2  D00E               	goto	l773
  5241  0007D4  5039               	movf	stoa@l,w,c
  5242  0007D6  5C37               	subwf	stoa@p,w,c
  5243  0007D8  5038               	movf	stoa@p+1,w,c
  5244  0007DA  0A80               	xorlw	128
  5245  0007DC  6E29               	movwf	??_stoa& (0+255),c
  5246  0007DE  503A               	movf	stoa@l+1,w,c
  5247  0007E0  0A80               	xorlw	128
  5248  0007E2  5829               	subwfb	??_stoa& (0+255),w,c
  5249  0007E4  B0D8               	btfsc	status,0,c
  5250  0007E6  D004               	goto	l773
  5251  0007E8  C037  F039         	movff	stoa@p,stoa@l
  5252  0007EC  C038  F03A         	movff	stoa@p+1,stoa@l+1
  5253  0007F0                     l773:
  5254                           
  5255                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
  5256  0007F0  C039  F037         	movff	stoa@l,stoa@p
  5257  0007F4  C03A  F038         	movff	stoa@l+1,stoa@p+1
  5258                           
  5259                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
  5260  0007F8  C03F  F033         	movff	_width,stoa@w
  5261  0007FC  C040  F034         	movff	_width+1,stoa@w+1
  5262                           
  5263                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
  5264  000800  A043               	btfss	_flags,0,c
  5265  000802  D00D               	goto	l4464
  5266  000804  D016               	goto	u3980
  5267  000806                     l4460:
  5268                           
  5269                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
  5270  000806  0E00               	movlw	0
  5271  000808  6E1D               	movwf	fputc@c+1,c
  5272  00080A  0E20               	movlw	32
  5273  00080C  6E1C               	movwf	fputc@c,c
  5274  00080E  C025  F01E         	movff	stoa@fp,fputc@fp
  5275  000812  C026  F01F         	movff	stoa@fp+1,fputc@fp+1
  5276  000816  ECE2  F008         	call	_fputc	;wreg free
  5277                           
  5278                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
  5279  00081A  4A39               	infsnz	stoa@l,f,c
  5280  00081C  2A3A               	incf	stoa@l+1,f,c
  5281  00081E                     l4464:
  5282                           
  5283                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
  5284  00081E  5033               	movf	stoa@w,w,c
  5285  000820  5C39               	subwf	stoa@l,w,c
  5286  000822  503A               	movf	stoa@l+1,w,c
  5287  000824  0A80               	xorlw	128
  5288  000826  6E29               	movwf	??_stoa& (0+255),c
  5289  000828  5034               	movf	stoa@w+1,w,c
  5290  00082A  0A80               	xorlw	128
  5291  00082C  5829               	subwfb	??_stoa& (0+255),w,c
  5292  00082E  A0D8               	btfss	status,0,c
  5293  000830  D7EA               	goto	l4460
  5294  000832                     u3980:
  5295                           
  5296                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
  5297  000832  0E00               	movlw	0
  5298  000834  6E32               	movwf	stoa@i+1,c
  5299  000836  0E00               	movlw	0
  5300  000838  6E31               	movwf	stoa@i,c
  5301                           
  5302                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  5303  00083A  D013               	goto	l4474
  5304  00083C                     l4468:
  5305                           
  5306                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
  5307  00083C  C035  FFD9         	movff	stoa@cp,fsr2l
  5308  000840  C036  FFDA         	movff	stoa@cp+1,fsr2h
  5309  000844  50DF               	movf	indf2,w,c
  5310  000846  6E29               	movwf	??_stoa& (0+255),c
  5311  000848  5029               	movf	??_stoa,w,c
  5312  00084A  6E1C               	movwf	fputc@c,c
  5313  00084C  6A1D               	clrf	fputc@c+1,c
  5314  00084E  C025  F01E         	movff	stoa@fp,fputc@fp
  5315  000852  C026  F01F         	movff	stoa@fp+1,fputc@fp+1
  5316  000856  ECE2  F008         	call	_fputc	;wreg free
  5317                           
  5318                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
  5319  00085A  4A35               	infsnz	stoa@cp,f,c
  5320  00085C  2A36               	incf	stoa@cp+1,f,c
  5321                           
  5322                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
  5323  00085E  4A31               	infsnz	stoa@i,f,c
  5324  000860  2A32               	incf	stoa@i+1,f,c
  5325  000862                     l4474:
  5326                           
  5327                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  5328  000862  5037               	movf	stoa@p,w,c
  5329  000864  5C31               	subwf	stoa@i,w,c
  5330  000866  5032               	movf	stoa@i+1,w,c
  5331  000868  0A80               	xorlw	128
  5332  00086A  6E29               	movwf	??_stoa& (0+255),c
  5333  00086C  5038               	movf	stoa@p+1,w,c
  5334  00086E  0A80               	xorlw	128
  5335  000870  5829               	subwfb	??_stoa& (0+255),w,c
  5336  000872  A0D8               	btfss	status,0,c
  5337  000874  D7E3               	goto	l4468
  5338                           
  5339                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
  5340  000876  B043               	btfsc	_flags,0,c
  5341  000878  D00D               	goto	l4482
  5342  00087A  D016               	goto	u4010
  5343  00087C                     l4478:
  5344                           
  5345                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
  5346  00087C  0E00               	movlw	0
  5347  00087E  6E1D               	movwf	fputc@c+1,c
  5348  000880  0E20               	movlw	32
  5349  000882  6E1C               	movwf	fputc@c,c
  5350  000884  C025  F01E         	movff	stoa@fp,fputc@fp
  5351  000888  C026  F01F         	movff	stoa@fp+1,fputc@fp+1
  5352  00088C  ECE2  F008         	call	_fputc	;wreg free
  5353                           
  5354                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
  5355  000890  4A39               	infsnz	stoa@l,f,c
  5356  000892  2A3A               	incf	stoa@l+1,f,c
  5357  000894                     l4482:
  5358                           
  5359                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
  5360  000894  5033               	movf	stoa@w,w,c
  5361  000896  5C39               	subwf	stoa@l,w,c
  5362  000898  503A               	movf	stoa@l+1,w,c
  5363  00089A  0A80               	xorlw	128
  5364  00089C  6E29               	movwf	??_stoa& (0+255),c
  5365  00089E  5034               	movf	stoa@w+1,w,c
  5366  0008A0  0A80               	xorlw	128
  5367  0008A2  5829               	subwfb	??_stoa& (0+255),w,c
  5368  0008A4  A0D8               	btfss	status,0,c
  5369  0008A6  D7EA               	goto	l4478
  5370  0008A8                     u4010:
  5371                           
  5372                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
  5373                           
  5374                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 586:     }
  5375  0008A8  C039  F025         	movff	stoa@l,?_stoa
  5376  0008AC  C03A  F026         	movff	stoa@l+1,?_stoa+1
  5377  0008B0  0012               	return		;funcret
  5378  0008B2                     __end_of_stoa:
  5379                           	opt callstack 0
  5380                           
  5381 ;; *************** function _dtoa *****************
  5382 ;; Defined at:
  5383 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  5386 ;;		 -> NULL(0), 
  5387 ;;  d               8    2[BANK0 ] long long 
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;  n               8   18[BANK0 ] long long 
  5390 ;;  i               2   26[BANK0 ] int 
  5391 ;;  s               2   16[BANK0 ] int 
  5392 ;;  w               2   14[BANK0 ] int 
  5393 ;;  p               2   12[BANK0 ] int 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  2    0[BANK0 ] int 
  5396 ;; Registers used:
  5397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5403 ;;      Params:         0      10       0       0       0       0       0       0       0
  5404 ;;      Locals:         0      18       0       0       0       0       0       0       0
  5405 ;;      Temps:          8       0       0       0       0       0       0       0       0
  5406 ;;      Totals:         8      28       0       0       0       0       0       0       0
  5407 ;;Total ram usage:       36 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:   10
  5410 ;; This function calls:
  5411 ;;		___aodiv
  5412 ;;		___aomod
  5413 ;;		_abs
  5414 ;;		_pad
  5415 ;; This function is called by:
  5416 ;;		_vfpfcnvrt
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           	psect	text38
  5421  0002D0                     __ptext38:
  5422                           	opt callstack 0
  5423  0002D0                     _dtoa:
  5424                           	opt callstack 16
  5425                           
  5426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  5427                           
  5428                           ;incstack = 0
  5429  0002D0  C0B8  F0C8         	movff	dtoa@d,dtoa@n
  5430  0002D4  C0B9  F0C9         	movff	dtoa@d+1,dtoa@n+1
  5431  0002D8  C0BA  F0CA         	movff	dtoa@d+2,dtoa@n+2
  5432  0002DC  C0BB  F0CB         	movff	dtoa@d+3,dtoa@n+3
  5433  0002E0  C0BC  F0CC         	movff	dtoa@d+4,dtoa@n+4
  5434  0002E4  C0BD  F0CD         	movff	dtoa@d+5,dtoa@n+5
  5435  0002E8  C0BE  F0CE         	movff	dtoa@d+6,dtoa@n+6
  5436  0002EC  C0BF  F0CF         	movff	dtoa@d+7,dtoa@n+7
  5437                           
  5438                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  5439  0002F0  0100               	movlb	0	; () banked
  5440  0002F2  AFCF               	btfss	(dtoa@n+7)& (0+255),7,b
  5441  0002F4  D002               	goto	u3780
  5442  0002F6  0E01               	movlw	1
  5443  0002F8  D001               	goto	u3790
  5444  0002FA                     u3780:
  5445  0002FA  0E00               	movlw	0
  5446  0002FC                     u3790:
  5447  0002FC  6FC6               	movwf	dtoa@s& (0+255),b
  5448  0002FE  6BC7               	clrf	(dtoa@s+1)& (0+255),b
  5449                           
  5450                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  5451  000300  51C6               	movf	dtoa@s& (0+255),w,b
  5452  000302  11C7               	iorwf	(dtoa@s+1)& (0+255),w,b
  5453  000304  B4D8               	btfsc	status,2,c
  5454  000306  D010               	goto	l4386
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  5458  000308  1FCF               	comf	(dtoa@n+7)& (0+255),f,b
  5459  00030A  1FCE               	comf	(dtoa@n+6)& (0+255),f,b
  5460  00030C  1FCD               	comf	(dtoa@n+5)& (0+255),f,b
  5461  00030E  1FCC               	comf	(dtoa@n+4)& (0+255),f,b
  5462  000310  1FCB               	comf	(dtoa@n+3)& (0+255),f,b
  5463  000312  1FCA               	comf	(dtoa@n+2)& (0+255),f,b
  5464  000314  1FC9               	comf	(dtoa@n+1)& (0+255),f,b
  5465  000316  6DC8               	negf	dtoa@n& (0+255),b
  5466  000318  0E00               	movlw	0
  5467  00031A  23C9               	addwfc	(dtoa@n+1)& (0+255),f,b
  5468  00031C  23CA               	addwfc	(dtoa@n+2)& (0+255),f,b
  5469  00031E  23CB               	addwfc	(dtoa@n+3)& (0+255),f,b
  5470  000320  23CC               	addwfc	(dtoa@n+4)& (0+255),f,b
  5471  000322  23CD               	addwfc	(dtoa@n+5)& (0+255),f,b
  5472  000324  23CE               	addwfc	(dtoa@n+6)& (0+255),f,b
  5473  000326  23CF               	addwfc	(dtoa@n+7)& (0+255),f,b
  5474  000328                     l4386:
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  5478  000328  AE42               	btfss	_prec+1,7,c
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  5482  00032A  9243               	bcf	_flags,1,c
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  5486  00032C  BE42               	btfsc	_prec+1,7,c
  5487  00032E  D005               	goto	u3820
  5488  000330  5042               	movf	_prec+1,w,c
  5489  000332  E108               	bnz	l744
  5490  000334  0441               	decf	_prec,w,c
  5491  000336  B0D8               	btfsc	status,0,c
  5492  000338  D005               	goto	l744
  5493  00033A                     u3820:
  5494                           
  5495                           ; BSR set to: 0
  5496  00033A  0E00               	movlw	0
  5497  00033C  6FC3               	movwf	(dtoa@p+1)& (0+255),b
  5498  00033E  0E01               	movlw	1
  5499  000340  6FC2               	movwf	dtoa@p& (0+255),b
  5500  000342  D004               	goto	l746
  5501  000344                     l744:
  5502                           
  5503                           ; BSR set to: 0
  5504  000344  C041  F0C2         	movff	_prec,dtoa@p
  5505  000348  C042  F0C3         	movff	_prec+1,dtoa@p+1
  5506  00034C                     l746:
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  5510  00034C  C03F  F0C4         	movff	_width,dtoa@w
  5511  000350  C040  F0C5         	movff	_width+1,dtoa@w+1
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  5515  000354  51C6               	movf	dtoa@s& (0+255),w,b
  5516  000356  11C7               	iorwf	(dtoa@s+1)& (0+255),w,b
  5517  000358  A4D8               	btfss	status,2,c
  5518  00035A  D002               	goto	u3840
  5519                           
  5520                           ; BSR set to: 0
  5521  00035C  A443               	btfss	_flags,2,c
  5522  00035E  D003               	goto	l4400
  5523  000360                     u3840:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  5527  000360  07C4               	decf	dtoa@w& (0+255),f,b
  5528  000362  A0D8               	btfss	status,0,c
  5529  000364  07C5               	decf	(dtoa@w+1)& (0+255),f,b
  5530  000366                     l4400:
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  5534  000366  0E00               	movlw	0
  5535  000368  6FD1               	movwf	(dtoa@i+1)& (0+255),b
  5536  00036A  0E1F               	movlw	31
  5537  00036C  6FD0               	movwf	dtoa@i& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  5541  00036E  0E00               	movlw	0
  5542  000370  0101               	movlb	1	; () banked
  5543  000372  6F1F               	movwf	(_dbuf+31)& (0+255),b
  5544                           
  5545                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  5546  000374  D07D               	goto	l4414
  5547  000376                     l4404:
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  5551  000376  07D0               	decf	dtoa@i& (0+255),f,b
  5552  000378  A0D8               	btfss	status,0,c
  5553  00037A  07D1               	decf	(dtoa@i+1)& (0+255),f,b
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  5557  00037C  0E00               	movlw	low _dbuf
  5558  00037E  25D0               	addwf	dtoa@i& (0+255),w,b
  5559  000380  6ED9               	movwf	fsr2l,c
  5560  000382  0E01               	movlw	high _dbuf
  5561  000384  21D1               	addwfc	(dtoa@i+1)& (0+255),w,b
  5562  000386  6EDA               	movwf	fsr2h,c
  5563  000388  C0C8  F014         	movff	dtoa@n,___aomod@dividend
  5564  00038C  C0C9  F015         	movff	dtoa@n+1,___aomod@dividend+1
  5565  000390  C0CA  F016         	movff	dtoa@n+2,___aomod@dividend+2
  5566  000394  C0CB  F017         	movff	dtoa@n+3,___aomod@dividend+3
  5567  000398  C0CC  F018         	movff	dtoa@n+4,___aomod@dividend+4
  5568  00039C  C0CD  F019         	movff	dtoa@n+5,___aomod@dividend+5
  5569  0003A0  C0CE  F01A         	movff	dtoa@n+6,___aomod@dividend+6
  5570  0003A4  C0CF  F01B         	movff	dtoa@n+7,___aomod@dividend+7
  5571  0003A8  0E0A               	movlw	10
  5572  0003AA  6E1C               	movwf	___aomod@divisor,c
  5573  0003AC  0E00               	movlw	0
  5574  0003AE  6E1D               	movwf	___aomod@divisor+1,c
  5575  0003B0  0E00               	movlw	0
  5576  0003B2  6E1E               	movwf	___aomod@divisor+2,c
  5577  0003B4  0E00               	movlw	0
  5578  0003B6  6E1F               	movwf	___aomod@divisor+3,c
  5579  0003B8  0E00               	movlw	0
  5580  0003BA  6E20               	movwf	___aomod@divisor+4,c
  5581  0003BC  0E00               	movlw	0
  5582  0003BE  6E21               	movwf	___aomod@divisor+5,c
  5583  0003C0  0E00               	movlw	0
  5584  0003C2  6E22               	movwf	___aomod@divisor+6,c
  5585  0003C4  0E00               	movlw	0
  5586  0003C6  6E23               	movwf	___aomod@divisor+7,c
  5587  0003C8  EC59  F004         	call	___aomod	;wreg free
  5588  0003CC  C014  F037         	movff	?___aomod,??_dtoa
  5589  0003D0  C015  F038         	movff	?___aomod+1,??_dtoa+1
  5590  0003D4  C016  F039         	movff	?___aomod+2,??_dtoa+2
  5591  0003D8  C017  F03A         	movff	?___aomod+3,??_dtoa+3
  5592  0003DC  C018  F03B         	movff	?___aomod+4,??_dtoa+4
  5593  0003E0  C019  F03C         	movff	?___aomod+5,??_dtoa+5
  5594  0003E4  C01A  F03D         	movff	?___aomod+6,??_dtoa+6
  5595  0003E8  C01B  F03E         	movff	?___aomod+7,??_dtoa+7
  5596  0003EC  C037  F026         	movff	??_dtoa,abs@a
  5597  0003F0  C039  F027         	movff	??_dtoa+2,abs@a+1
  5598  0003F4  EC8D  F00B         	call	_abs	;wreg free
  5599  0003F8  5026               	movf	?_abs,w,c
  5600  0003FA  0F30               	addlw	48
  5601  0003FC  6EDF               	movwf	indf2,c
  5602                           
  5603                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  5604  0003FE  0100               	movlb	0	; () banked
  5605  000400  07C2               	decf	dtoa@p& (0+255),f,b
  5606  000402  A0D8               	btfss	status,0,c
  5607  000404  07C3               	decf	(dtoa@p+1)& (0+255),f,b
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  5611  000406  07C4               	decf	dtoa@w& (0+255),f,b
  5612  000408  A0D8               	btfss	status,0,c
  5613  00040A  07C5               	decf	(dtoa@w+1)& (0+255),f,b
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  5617  00040C  C0C8  F014         	movff	dtoa@n,___aodiv@dividend
  5618  000410  C0C9  F015         	movff	dtoa@n+1,___aodiv@dividend+1
  5619  000414  C0CA  F016         	movff	dtoa@n+2,___aodiv@dividend+2
  5620  000418  C0CB  F017         	movff	dtoa@n+3,___aodiv@dividend+3
  5621  00041C  C0CC  F018         	movff	dtoa@n+4,___aodiv@dividend+4
  5622  000420  C0CD  F019         	movff	dtoa@n+5,___aodiv@dividend+5
  5623  000424  C0CE  F01A         	movff	dtoa@n+6,___aodiv@dividend+6
  5624  000428  C0CF  F01B         	movff	dtoa@n+7,___aodiv@dividend+7
  5625  00042C  0E0A               	movlw	10
  5626  00042E  6E1C               	movwf	___aodiv@divisor,c
  5627  000430  0E00               	movlw	0
  5628  000432  6E1D               	movwf	___aodiv@divisor+1,c
  5629  000434  0E00               	movlw	0
  5630  000436  6E1E               	movwf	___aodiv@divisor+2,c
  5631  000438  0E00               	movlw	0
  5632  00043A  6E1F               	movwf	___aodiv@divisor+3,c
  5633  00043C  0E00               	movlw	0
  5634  00043E  6E20               	movwf	___aodiv@divisor+4,c
  5635  000440  0E00               	movlw	0
  5636  000442  6E21               	movwf	___aodiv@divisor+5,c
  5637  000444  0E00               	movlw	0
  5638  000446  6E22               	movwf	___aodiv@divisor+6,c
  5639  000448  0E00               	movlw	0
  5640  00044A  6E23               	movwf	___aodiv@divisor+7,c
  5641  00044C  EC8C  F002         	call	___aodiv	;wreg free
  5642  000450  C014  F0C8         	movff	?___aodiv,dtoa@n
  5643  000454  C015  F0C9         	movff	?___aodiv+1,dtoa@n+1
  5644  000458  C016  F0CA         	movff	?___aodiv+2,dtoa@n+2
  5645  00045C  C017  F0CB         	movff	?___aodiv+3,dtoa@n+3
  5646  000460  C018  F0CC         	movff	?___aodiv+4,dtoa@n+4
  5647  000464  C019  F0CD         	movff	?___aodiv+5,dtoa@n+5
  5648  000468  C01A  F0CE         	movff	?___aodiv+6,dtoa@n+6
  5649  00046C  C01B  F0CF         	movff	?___aodiv+7,dtoa@n+7
  5650  000470                     l4414:
  5651                           
  5652                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  5653  000470  0100               	movlb	0	; () banked
  5654  000472  BFD1               	btfsc	(dtoa@i+1)& (0+255),7,b
  5655  000474  D01F               	goto	u3890
  5656  000476  51D1               	movf	(dtoa@i+1)& (0+255),w,b
  5657  000478  E103               	bnz	u3850
  5658  00047A  05D0               	decf	dtoa@i& (0+255),w,b
  5659  00047C  A0D8               	btfss	status,0,c
  5660  00047E  D01A               	goto	u3890
  5661  000480                     u3850:
  5662                           
  5663                           ; BSR set to: 0
  5664  000480  51C8               	movf	dtoa@n& (0+255),w,b
  5665  000482  11C9               	iorwf	(dtoa@n+1)& (0+255),w,b
  5666  000484  11CA               	iorwf	(dtoa@n+2)& (0+255),w,b
  5667  000486  11CB               	iorwf	(dtoa@n+3)& (0+255),w,b
  5668  000488  11CC               	iorwf	(dtoa@n+4)& (0+255),w,b
  5669  00048A  11CD               	iorwf	(dtoa@n+5)& (0+255),w,b
  5670  00048C  11CE               	iorwf	(dtoa@n+6)& (0+255),w,b
  5671  00048E  11CF               	iorwf	(dtoa@n+7)& (0+255),w,b
  5672  000490  A4D8               	btfss	status,2,c
  5673  000492  D771               	goto	l4404
  5674                           
  5675                           ; BSR set to: 0
  5676  000494  BFC3               	btfsc	(dtoa@p+1)& (0+255),7,b
  5677  000496  D005               	goto	u3870
  5678  000498  51C3               	movf	(dtoa@p+1)& (0+255),w,b
  5679  00049A  E102               	bnz	u3871
  5680  00049C  05C2               	decf	dtoa@p& (0+255),w,b
  5681  00049E  B0D8               	btfsc	status,0,c
  5682  0004A0                     u3871:
  5683  0004A0  D76A               	goto	l4404
  5684  0004A2                     u3870:
  5685                           
  5686                           ; BSR set to: 0
  5687  0004A2  BFC5               	btfsc	(dtoa@w+1)& (0+255),7,b
  5688  0004A4  D007               	goto	u3890
  5689  0004A6  51C5               	movf	(dtoa@w+1)& (0+255),w,b
  5690  0004A8  E103               	bnz	u3880
  5691  0004AA  05C4               	decf	dtoa@w& (0+255),w,b
  5692  0004AC  A0D8               	btfss	status,0,c
  5693  0004AE  D002               	goto	u3890
  5694  0004B0                     u3880:
  5695                           
  5696                           ; BSR set to: 0
  5697  0004B0  B243               	btfsc	_flags,1,c
  5698  0004B2  D761               	goto	l4404
  5699  0004B4                     u3890:
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  5703  0004B4  51C6               	movf	dtoa@s& (0+255),w,b
  5704  0004B6  11C7               	iorwf	(dtoa@s+1)& (0+255),w,b
  5705  0004B8  A4D8               	btfss	status,2,c
  5706  0004BA  D002               	goto	u3910
  5707                           
  5708                           ; BSR set to: 0
  5709  0004BC  A443               	btfss	_flags,2,c
  5710  0004BE  D017               	goto	l4438
  5711  0004C0                     u3910:
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  5715  0004C0  07D0               	decf	dtoa@i& (0+255),f,b
  5716  0004C2  A0D8               	btfss	status,0,c
  5717  0004C4  07D1               	decf	(dtoa@i+1)& (0+255),f,b
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  5721  0004C6  51C6               	movf	dtoa@s& (0+255),w,b
  5722  0004C8  11C7               	iorwf	(dtoa@s+1)& (0+255),w,b
  5723  0004CA  A4D8               	btfss	status,2,c
  5724  0004CC  D004               	goto	l4434
  5725                           
  5726                           ; BSR set to: 0
  5727  0004CE  0E00               	movlw	0
  5728  0004D0  6FC1               	movwf	(_dtoa$1815+1)& (0+255),b
  5729  0004D2  0E2B               	movlw	43
  5730  0004D4  D003               	goto	L1
  5731  0004D6                     l4434:
  5732                           
  5733                           ; BSR set to: 0
  5734  0004D6  0E00               	movlw	0
  5735  0004D8  6FC1               	movwf	(_dtoa$1815+1)& (0+255),b
  5736  0004DA  0E2D               	movlw	45
  5737  0004DC                     L1:
  5738  0004DC  6FC0               	movwf	_dtoa$1815& (0+255),b
  5739                           
  5740                           ; BSR set to: 0
  5741  0004DE  0E00               	movlw	low _dbuf
  5742  0004E0  25D0               	addwf	dtoa@i& (0+255),w,b
  5743  0004E2  6ED9               	movwf	fsr2l,c
  5744  0004E4  0E01               	movlw	high _dbuf
  5745  0004E6  21D1               	addwfc	(dtoa@i+1)& (0+255),w,b
  5746  0004E8  6EDA               	movwf	fsr2h,c
  5747  0004EA  C0C0  FFDF         	movff	_dtoa$1815,indf2
  5748  0004EE                     l4438:
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  5752  0004EE  C0B6  F02C         	movff	dtoa@fp,pad@fp
  5753  0004F2  C0B7  F02D         	movff	dtoa@fp+1,pad@fp+1
  5754  0004F6  0E00               	movlw	low _dbuf
  5755  0004F8  25D0               	addwf	dtoa@i& (0+255),w,b
  5756  0004FA  6E2E               	movwf	pad@buf,c
  5757  0004FC  0E01               	movlw	high _dbuf
  5758  0004FE  21D1               	addwfc	(dtoa@i+1)& (0+255),w,b
  5759  000500  6E2F               	movwf	pad@buf+1,c
  5760  000502  C0C4  F030         	movff	dtoa@w,pad@p
  5761  000506  C0C5  F031         	movff	dtoa@w+1,pad@p+1
  5762  00050A  EC17  F007         	call	_pad	;wreg free
  5763  00050E  C02C  F0B6         	movff	?_pad,?_dtoa
  5764  000512  C02D  F0B7         	movff	?_pad+1,?_dtoa+1
  5765  000516  0012               	return		;funcret
  5766  000518                     __end_of_dtoa:
  5767                           	opt callstack 0
  5768                           
  5769 ;; *************** function _abs *****************
  5770 ;; Defined at:
  5771 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  a               2   37[COMRAM] int 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;		None
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  2   37[COMRAM] int 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2, status,0
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5785 ;;      Params:         2       0       0       0       0       0       0       0       0
  5786 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5787 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5788 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5789 ;;Total ram usage:        4 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    5
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_dtoa
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text39
  5800  00171A                     __ptext39:
  5801                           	opt callstack 0
  5802  00171A                     _abs:
  5803                           	opt callstack 20
  5804                           
  5805                           ;incstack = 0
  5806  00171A  BE27               	btfsc	abs@a+1,7,c
  5807  00171C  D005               	goto	u3620
  5808  00171E  5027               	movf	abs@a+1,w,c
  5809  001720  E110               	bnz	l1482
  5810  001722  0426               	decf	abs@a,w,c
  5811  001724  B0D8               	btfsc	status,0,c
  5812  001726  D00D               	goto	l1482
  5813  001728                     u3620:
  5814  001728  C026  F028         	movff	abs@a,??_abs
  5815  00172C  C027  F029         	movff	abs@a+1,??_abs+1
  5816  001730  1E28               	comf	??_abs,f,c
  5817  001732  1E29               	comf	??_abs+1,f,c
  5818  001734  4A28               	infsnz	??_abs,f,c
  5819  001736  2A29               	incf	??_abs+1,f,c
  5820  001738  C028  F026         	movff	??_abs,?_abs
  5821  00173C  C029  F027         	movff	??_abs+1,?_abs+1
  5822  001740  0012               	return	
  5823  001742                     l1482:
  5824  001742  C026  F026         	movff	abs@a,?_abs
  5825  001746  C027  F027         	movff	abs@a+1,?_abs+1
  5826  00174A  0012               	return		;funcret
  5827  00174C                     __end_of_abs:
  5828                           	opt callstack 0
  5829                           
  5830 ;; *************** function ___aomod *****************
  5831 ;; Defined at:
  5832 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;  dividend        8   19[COMRAM] long long 
  5835 ;;  divisor         8   27[COMRAM] long long 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  sign            1   36[COMRAM] unsigned char 
  5838 ;;  counter         1   35[COMRAM] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  8   19[COMRAM] long long 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5848 ;;      Params:        16       0       0       0       0       0       0       0       0
  5849 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5851 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5852 ;;Total ram usage:       18 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    5
  5855 ;; This function calls:
  5856 ;;		Nothing
  5857 ;; This function is called by:
  5858 ;;		_dtoa
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text40
  5863  0008B2                     __ptext40:
  5864                           	opt callstack 0
  5865  0008B2                     ___aomod:
  5866                           	opt callstack 20
  5867                           
  5868                           ;incstack = 0
  5869  0008B2  0E00               	movlw	0
  5870  0008B4  6E25               	movwf	___aomod@sign,c
  5871  0008B6  AE1B               	btfss	___aomod@dividend+7,7,c
  5872  0008B8  D012               	goto	l4312
  5873  0008BA  1E1B               	comf	___aomod@dividend+7,f,c
  5874  0008BC  1E1A               	comf	___aomod@dividend+6,f,c
  5875  0008BE  1E19               	comf	___aomod@dividend+5,f,c
  5876  0008C0  1E18               	comf	___aomod@dividend+4,f,c
  5877  0008C2  1E17               	comf	___aomod@dividend+3,f,c
  5878  0008C4  1E16               	comf	___aomod@dividend+2,f,c
  5879  0008C6  1E15               	comf	___aomod@dividend+1,f,c
  5880  0008C8  6C14               	negf	___aomod@dividend,c
  5881  0008CA  0E00               	movlw	0
  5882  0008CC  2215               	addwfc	___aomod@dividend+1,f,c
  5883  0008CE  2216               	addwfc	___aomod@dividend+2,f,c
  5884  0008D0  2217               	addwfc	___aomod@dividend+3,f,c
  5885  0008D2  2218               	addwfc	___aomod@dividend+4,f,c
  5886  0008D4  2219               	addwfc	___aomod@dividend+5,f,c
  5887  0008D6  221A               	addwfc	___aomod@dividend+6,f,c
  5888  0008D8  221B               	addwfc	___aomod@dividend+7,f,c
  5889  0008DA  0E01               	movlw	1
  5890  0008DC  6E25               	movwf	___aomod@sign,c
  5891  0008DE                     l4312:
  5892  0008DE  AE23               	btfss	___aomod@divisor+7,7,c
  5893  0008E0  D010               	goto	l4316
  5894  0008E2  1E23               	comf	___aomod@divisor+7,f,c
  5895  0008E4  1E22               	comf	___aomod@divisor+6,f,c
  5896  0008E6  1E21               	comf	___aomod@divisor+5,f,c
  5897  0008E8  1E20               	comf	___aomod@divisor+4,f,c
  5898  0008EA  1E1F               	comf	___aomod@divisor+3,f,c
  5899  0008EC  1E1E               	comf	___aomod@divisor+2,f,c
  5900  0008EE  1E1D               	comf	___aomod@divisor+1,f,c
  5901  0008F0  6C1C               	negf	___aomod@divisor,c
  5902  0008F2  0E00               	movlw	0
  5903  0008F4  221D               	addwfc	___aomod@divisor+1,f,c
  5904  0008F6  221E               	addwfc	___aomod@divisor+2,f,c
  5905  0008F8  221F               	addwfc	___aomod@divisor+3,f,c
  5906  0008FA  2220               	addwfc	___aomod@divisor+4,f,c
  5907  0008FC  2221               	addwfc	___aomod@divisor+5,f,c
  5908  0008FE  2222               	addwfc	___aomod@divisor+6,f,c
  5909  000900  2223               	addwfc	___aomod@divisor+7,f,c
  5910  000902                     l4316:
  5911  000902  501C               	movf	___aomod@divisor,w,c
  5912  000904  101D               	iorwf	___aomod@divisor+1,w,c
  5913  000906  101E               	iorwf	___aomod@divisor+2,w,c
  5914  000908  101F               	iorwf	___aomod@divisor+3,w,c
  5915  00090A  1020               	iorwf	___aomod@divisor+4,w,c
  5916  00090C  1021               	iorwf	___aomod@divisor+5,w,c
  5917  00090E  1022               	iorwf	___aomod@divisor+6,w,c
  5918  000910  1023               	iorwf	___aomod@divisor+7,w,c
  5919  000912  B4D8               	btfsc	status,2,c
  5920  000914  D03C               	goto	l4332
  5921  000916  0E01               	movlw	1
  5922  000918  6E24               	movwf	___aomod@counter,c
  5923  00091A  D00A               	goto	l4322
  5924  00091C                     l4320:
  5925  00091C  90D8               	bcf	status,0,c
  5926  00091E  361C               	rlcf	___aomod@divisor,f,c
  5927  000920  361D               	rlcf	___aomod@divisor+1,f,c
  5928  000922  361E               	rlcf	___aomod@divisor+2,f,c
  5929  000924  361F               	rlcf	___aomod@divisor+3,f,c
  5930  000926  3620               	rlcf	___aomod@divisor+4,f,c
  5931  000928  3621               	rlcf	___aomod@divisor+5,f,c
  5932  00092A  3622               	rlcf	___aomod@divisor+6,f,c
  5933  00092C  3623               	rlcf	___aomod@divisor+7,f,c
  5934  00092E  2A24               	incf	___aomod@counter,f,c
  5935  000930                     l4322:
  5936  000930  AE23               	btfss	___aomod@divisor+7,7,c
  5937  000932  D7F4               	goto	l4320
  5938  000934                     u3730:
  5939  000934  501C               	movf	___aomod@divisor,w,c
  5940  000936  5C14               	subwf	___aomod@dividend,w,c
  5941  000938  501D               	movf	___aomod@divisor+1,w,c
  5942  00093A  5815               	subwfb	___aomod@dividend+1,w,c
  5943  00093C  501E               	movf	___aomod@divisor+2,w,c
  5944  00093E  5816               	subwfb	___aomod@dividend+2,w,c
  5945  000940  501F               	movf	___aomod@divisor+3,w,c
  5946  000942  5817               	subwfb	___aomod@dividend+3,w,c
  5947  000944  5020               	movf	___aomod@divisor+4,w,c
  5948  000946  5818               	subwfb	___aomod@dividend+4,w,c
  5949  000948  5021               	movf	___aomod@divisor+5,w,c
  5950  00094A  5819               	subwfb	___aomod@dividend+5,w,c
  5951  00094C  5022               	movf	___aomod@divisor+6,w,c
  5952  00094E  581A               	subwfb	___aomod@dividend+6,w,c
  5953  000950  5023               	movf	___aomod@divisor+7,w,c
  5954  000952  581B               	subwfb	___aomod@dividend+7,w,c
  5955  000954  A0D8               	btfss	status,0,c
  5956  000956  D010               	goto	l4328
  5957  000958  501C               	movf	___aomod@divisor,w,c
  5958  00095A  5E14               	subwf	___aomod@dividend,f,c
  5959  00095C  501D               	movf	___aomod@divisor+1,w,c
  5960  00095E  5A15               	subwfb	___aomod@dividend+1,f,c
  5961  000960  501E               	movf	___aomod@divisor+2,w,c
  5962  000962  5A16               	subwfb	___aomod@dividend+2,f,c
  5963  000964  501F               	movf	___aomod@divisor+3,w,c
  5964  000966  5A17               	subwfb	___aomod@dividend+3,f,c
  5965  000968  5020               	movf	___aomod@divisor+4,w,c
  5966  00096A  5A18               	subwfb	___aomod@dividend+4,f,c
  5967  00096C  5021               	movf	___aomod@divisor+5,w,c
  5968  00096E  5A19               	subwfb	___aomod@dividend+5,f,c
  5969  000970  5022               	movf	___aomod@divisor+6,w,c
  5970  000972  5A1A               	subwfb	___aomod@dividend+6,f,c
  5971  000974  5023               	movf	___aomod@divisor+7,w,c
  5972  000976  5A1B               	subwfb	___aomod@dividend+7,f,c
  5973  000978                     l4328:
  5974  000978  90D8               	bcf	status,0,c
  5975  00097A  3223               	rrcf	___aomod@divisor+7,f,c
  5976  00097C  3222               	rrcf	___aomod@divisor+6,f,c
  5977  00097E  3221               	rrcf	___aomod@divisor+5,f,c
  5978  000980  3220               	rrcf	___aomod@divisor+4,f,c
  5979  000982  321F               	rrcf	___aomod@divisor+3,f,c
  5980  000984  321E               	rrcf	___aomod@divisor+2,f,c
  5981  000986  321D               	rrcf	___aomod@divisor+1,f,c
  5982  000988  321C               	rrcf	___aomod@divisor,f,c
  5983  00098A  2E24               	decfsz	___aomod@counter,f,c
  5984  00098C  D7D3               	goto	u3730
  5985  00098E                     l4332:
  5986  00098E  5025               	movf	___aomod@sign,w,c
  5987  000990  B4D8               	btfsc	status,2,c
  5988  000992  D010               	goto	l4336
  5989  000994  1E1B               	comf	___aomod@dividend+7,f,c
  5990  000996  1E1A               	comf	___aomod@dividend+6,f,c
  5991  000998  1E19               	comf	___aomod@dividend+5,f,c
  5992  00099A  1E18               	comf	___aomod@dividend+4,f,c
  5993  00099C  1E17               	comf	___aomod@dividend+3,f,c
  5994  00099E  1E16               	comf	___aomod@dividend+2,f,c
  5995  0009A0  1E15               	comf	___aomod@dividend+1,f,c
  5996  0009A2  6C14               	negf	___aomod@dividend,c
  5997  0009A4  0E00               	movlw	0
  5998  0009A6  2215               	addwfc	___aomod@dividend+1,f,c
  5999  0009A8  2216               	addwfc	___aomod@dividend+2,f,c
  6000  0009AA  2217               	addwfc	___aomod@dividend+3,f,c
  6001  0009AC  2218               	addwfc	___aomod@dividend+4,f,c
  6002  0009AE  2219               	addwfc	___aomod@dividend+5,f,c
  6003  0009B0  221A               	addwfc	___aomod@dividend+6,f,c
  6004  0009B2  221B               	addwfc	___aomod@dividend+7,f,c
  6005  0009B4                     l4336:
  6006  0009B4  C014  F014         	movff	___aomod@dividend,?___aomod
  6007  0009B8  C015  F015         	movff	___aomod@dividend+1,?___aomod+1
  6008  0009BC  C016  F016         	movff	___aomod@dividend+2,?___aomod+2
  6009  0009C0  C017  F017         	movff	___aomod@dividend+3,?___aomod+3
  6010  0009C4  C018  F018         	movff	___aomod@dividend+4,?___aomod+4
  6011  0009C8  C019  F019         	movff	___aomod@dividend+5,?___aomod+5
  6012  0009CC  C01A  F01A         	movff	___aomod@dividend+6,?___aomod+6
  6013  0009D0  C01B  F01B         	movff	___aomod@dividend+7,?___aomod+7
  6014  0009D4  0012               	return		;funcret
  6015  0009D6                     __end_of___aomod:
  6016                           	opt callstack 0
  6017                           
  6018 ;; *************** function ___aodiv *****************
  6019 ;; Defined at:
  6020 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  dividend        8   19[COMRAM] long long 
  6023 ;;  divisor         8   27[COMRAM] long long 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  quotient        8   37[COMRAM] long long 
  6026 ;;  sign            1   36[COMRAM] unsigned char 
  6027 ;;  counter         1   35[COMRAM] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  8   19[COMRAM] long long 
  6030 ;; Registers used:
  6031 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6037 ;;      Params:        16       0       0       0       0       0       0       0       0
  6038 ;;      Locals:        10       0       0       0       0       0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6040 ;;      Totals:        26       0       0       0       0       0       0       0       0
  6041 ;;Total ram usage:       26 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    5
  6044 ;; This function calls:
  6045 ;;		Nothing
  6046 ;; This function is called by:
  6047 ;;		_dtoa
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text41
  6052  000518                     __ptext41:
  6053                           	opt callstack 0
  6054  000518                     ___aodiv:
  6055                           	opt callstack 20
  6056                           
  6057                           ;incstack = 0
  6058  000518  0E00               	movlw	0
  6059  00051A  6E25               	movwf	___aodiv@sign,c
  6060  00051C  AE23               	btfss	___aodiv@divisor+7,7,c
  6061  00051E  D012               	goto	l4268
  6062  000520  1E23               	comf	___aodiv@divisor+7,f,c
  6063  000522  1E22               	comf	___aodiv@divisor+6,f,c
  6064  000524  1E21               	comf	___aodiv@divisor+5,f,c
  6065  000526  1E20               	comf	___aodiv@divisor+4,f,c
  6066  000528  1E1F               	comf	___aodiv@divisor+3,f,c
  6067  00052A  1E1E               	comf	___aodiv@divisor+2,f,c
  6068  00052C  1E1D               	comf	___aodiv@divisor+1,f,c
  6069  00052E  6C1C               	negf	___aodiv@divisor,c
  6070  000530  0E00               	movlw	0
  6071  000532  221D               	addwfc	___aodiv@divisor+1,f,c
  6072  000534  221E               	addwfc	___aodiv@divisor+2,f,c
  6073  000536  221F               	addwfc	___aodiv@divisor+3,f,c
  6074  000538  2220               	addwfc	___aodiv@divisor+4,f,c
  6075  00053A  2221               	addwfc	___aodiv@divisor+5,f,c
  6076  00053C  2222               	addwfc	___aodiv@divisor+6,f,c
  6077  00053E  2223               	addwfc	___aodiv@divisor+7,f,c
  6078  000540  0E01               	movlw	1
  6079  000542  6E25               	movwf	___aodiv@sign,c
  6080  000544                     l4268:
  6081  000544  AE1B               	btfss	___aodiv@dividend+7,7,c
  6082  000546  D012               	goto	l4274
  6083  000548  1E1B               	comf	___aodiv@dividend+7,f,c
  6084  00054A  1E1A               	comf	___aodiv@dividend+6,f,c
  6085  00054C  1E19               	comf	___aodiv@dividend+5,f,c
  6086  00054E  1E18               	comf	___aodiv@dividend+4,f,c
  6087  000550  1E17               	comf	___aodiv@dividend+3,f,c
  6088  000552  1E16               	comf	___aodiv@dividend+2,f,c
  6089  000554  1E15               	comf	___aodiv@dividend+1,f,c
  6090  000556  6C14               	negf	___aodiv@dividend,c
  6091  000558  0E00               	movlw	0
  6092  00055A  2215               	addwfc	___aodiv@dividend+1,f,c
  6093  00055C  2216               	addwfc	___aodiv@dividend+2,f,c
  6094  00055E  2217               	addwfc	___aodiv@dividend+3,f,c
  6095  000560  2218               	addwfc	___aodiv@dividend+4,f,c
  6096  000562  2219               	addwfc	___aodiv@dividend+5,f,c
  6097  000564  221A               	addwfc	___aodiv@dividend+6,f,c
  6098  000566  221B               	addwfc	___aodiv@dividend+7,f,c
  6099  000568  0E01               	movlw	1
  6100  00056A  1A25               	xorwf	___aodiv@sign,f,c
  6101  00056C                     l4274:
  6102  00056C  EE20  F026         	lfsr	2,___aodiv@quotient
  6103  000570  0E07               	movlw	7
  6104  000572                     u3651:
  6105  000572  6ADE               	clrf	postinc2,c
  6106  000574  06E8               	decf	wreg,f,c
  6107  000576  E2FD               	bc	u3651
  6108  000578  501C               	movf	___aodiv@divisor,w,c
  6109  00057A  101D               	iorwf	___aodiv@divisor+1,w,c
  6110  00057C  101E               	iorwf	___aodiv@divisor+2,w,c
  6111  00057E  101F               	iorwf	___aodiv@divisor+3,w,c
  6112  000580  1020               	iorwf	___aodiv@divisor+4,w,c
  6113  000582  1021               	iorwf	___aodiv@divisor+5,w,c
  6114  000584  1022               	iorwf	___aodiv@divisor+6,w,c
  6115  000586  1023               	iorwf	___aodiv@divisor+7,w,c
  6116  000588  B4D8               	btfsc	status,2,c
  6117  00058A  D046               	goto	l4296
  6118  00058C  0E01               	movlw	1
  6119  00058E  6E24               	movwf	___aodiv@counter,c
  6120  000590  D00A               	goto	l4282
  6121  000592                     l4280:
  6122  000592  90D8               	bcf	status,0,c
  6123  000594  361C               	rlcf	___aodiv@divisor,f,c
  6124  000596  361D               	rlcf	___aodiv@divisor+1,f,c
  6125  000598  361E               	rlcf	___aodiv@divisor+2,f,c
  6126  00059A  361F               	rlcf	___aodiv@divisor+3,f,c
  6127  00059C  3620               	rlcf	___aodiv@divisor+4,f,c
  6128  00059E  3621               	rlcf	___aodiv@divisor+5,f,c
  6129  0005A0  3622               	rlcf	___aodiv@divisor+6,f,c
  6130  0005A2  3623               	rlcf	___aodiv@divisor+7,f,c
  6131  0005A4  2A24               	incf	___aodiv@counter,f,c
  6132  0005A6                     l4282:
  6133  0005A6  AE23               	btfss	___aodiv@divisor+7,7,c
  6134  0005A8  D7F4               	goto	l4280
  6135  0005AA                     u3670:
  6136  0005AA  90D8               	bcf	status,0,c
  6137  0005AC  3626               	rlcf	___aodiv@quotient,f,c
  6138  0005AE  3627               	rlcf	___aodiv@quotient+1,f,c
  6139  0005B0  3628               	rlcf	___aodiv@quotient+2,f,c
  6140  0005B2  3629               	rlcf	___aodiv@quotient+3,f,c
  6141  0005B4  362A               	rlcf	___aodiv@quotient+4,f,c
  6142  0005B6  362B               	rlcf	___aodiv@quotient+5,f,c
  6143  0005B8  362C               	rlcf	___aodiv@quotient+6,f,c
  6144  0005BA  362D               	rlcf	___aodiv@quotient+7,f,c
  6145  0005BC  501C               	movf	___aodiv@divisor,w,c
  6146  0005BE  5C14               	subwf	___aodiv@dividend,w,c
  6147  0005C0  501D               	movf	___aodiv@divisor+1,w,c
  6148  0005C2  5815               	subwfb	___aodiv@dividend+1,w,c
  6149  0005C4  501E               	movf	___aodiv@divisor+2,w,c
  6150  0005C6  5816               	subwfb	___aodiv@dividend+2,w,c
  6151  0005C8  501F               	movf	___aodiv@divisor+3,w,c
  6152  0005CA  5817               	subwfb	___aodiv@dividend+3,w,c
  6153  0005CC  5020               	movf	___aodiv@divisor+4,w,c
  6154  0005CE  5818               	subwfb	___aodiv@dividend+4,w,c
  6155  0005D0  5021               	movf	___aodiv@divisor+5,w,c
  6156  0005D2  5819               	subwfb	___aodiv@dividend+5,w,c
  6157  0005D4  5022               	movf	___aodiv@divisor+6,w,c
  6158  0005D6  581A               	subwfb	___aodiv@dividend+6,w,c
  6159  0005D8  5023               	movf	___aodiv@divisor+7,w,c
  6160  0005DA  581B               	subwfb	___aodiv@dividend+7,w,c
  6161  0005DC  A0D8               	btfss	status,0,c
  6162  0005DE  D011               	goto	l4292
  6163  0005E0  501C               	movf	___aodiv@divisor,w,c
  6164  0005E2  5E14               	subwf	___aodiv@dividend,f,c
  6165  0005E4  501D               	movf	___aodiv@divisor+1,w,c
  6166  0005E6  5A15               	subwfb	___aodiv@dividend+1,f,c
  6167  0005E8  501E               	movf	___aodiv@divisor+2,w,c
  6168  0005EA  5A16               	subwfb	___aodiv@dividend+2,f,c
  6169  0005EC  501F               	movf	___aodiv@divisor+3,w,c
  6170  0005EE  5A17               	subwfb	___aodiv@dividend+3,f,c
  6171  0005F0  5020               	movf	___aodiv@divisor+4,w,c
  6172  0005F2  5A18               	subwfb	___aodiv@dividend+4,f,c
  6173  0005F4  5021               	movf	___aodiv@divisor+5,w,c
  6174  0005F6  5A19               	subwfb	___aodiv@dividend+5,f,c
  6175  0005F8  5022               	movf	___aodiv@divisor+6,w,c
  6176  0005FA  5A1A               	subwfb	___aodiv@dividend+6,f,c
  6177  0005FC  5023               	movf	___aodiv@divisor+7,w,c
  6178  0005FE  5A1B               	subwfb	___aodiv@dividend+7,f,c
  6179  000600  8026               	bsf	___aodiv@quotient,0,c
  6180  000602                     l4292:
  6181  000602  90D8               	bcf	status,0,c
  6182  000604  3223               	rrcf	___aodiv@divisor+7,f,c
  6183  000606  3222               	rrcf	___aodiv@divisor+6,f,c
  6184  000608  3221               	rrcf	___aodiv@divisor+5,f,c
  6185  00060A  3220               	rrcf	___aodiv@divisor+4,f,c
  6186  00060C  321F               	rrcf	___aodiv@divisor+3,f,c
  6187  00060E  321E               	rrcf	___aodiv@divisor+2,f,c
  6188  000610  321D               	rrcf	___aodiv@divisor+1,f,c
  6189  000612  321C               	rrcf	___aodiv@divisor,f,c
  6190  000614  2E24               	decfsz	___aodiv@counter,f,c
  6191  000616  D7C9               	goto	u3670
  6192  000618                     l4296:
  6193  000618  5025               	movf	___aodiv@sign,w,c
  6194  00061A  B4D8               	btfsc	status,2,c
  6195  00061C  D010               	goto	l4300
  6196  00061E  1E2D               	comf	___aodiv@quotient+7,f,c
  6197  000620  1E2C               	comf	___aodiv@quotient+6,f,c
  6198  000622  1E2B               	comf	___aodiv@quotient+5,f,c
  6199  000624  1E2A               	comf	___aodiv@quotient+4,f,c
  6200  000626  1E29               	comf	___aodiv@quotient+3,f,c
  6201  000628  1E28               	comf	___aodiv@quotient+2,f,c
  6202  00062A  1E27               	comf	___aodiv@quotient+1,f,c
  6203  00062C  6C26               	negf	___aodiv@quotient,c
  6204  00062E  0E00               	movlw	0
  6205  000630  2227               	addwfc	___aodiv@quotient+1,f,c
  6206  000632  2228               	addwfc	___aodiv@quotient+2,f,c
  6207  000634  2229               	addwfc	___aodiv@quotient+3,f,c
  6208  000636  222A               	addwfc	___aodiv@quotient+4,f,c
  6209  000638  222B               	addwfc	___aodiv@quotient+5,f,c
  6210  00063A  222C               	addwfc	___aodiv@quotient+6,f,c
  6211  00063C  222D               	addwfc	___aodiv@quotient+7,f,c
  6212  00063E                     l4300:
  6213  00063E  C026  F014         	movff	___aodiv@quotient,?___aodiv
  6214  000642  C027  F015         	movff	___aodiv@quotient+1,?___aodiv+1
  6215  000646  C028  F016         	movff	___aodiv@quotient+2,?___aodiv+2
  6216  00064A  C029  F017         	movff	___aodiv@quotient+3,?___aodiv+3
  6217  00064E  C02A  F018         	movff	___aodiv@quotient+4,?___aodiv+4
  6218  000652  C02B  F019         	movff	___aodiv@quotient+5,?___aodiv+5
  6219  000656  C02C  F01A         	movff	___aodiv@quotient+6,?___aodiv+6
  6220  00065A  C02D  F01B         	movff	___aodiv@quotient+7,?___aodiv+7
  6221  00065E  0012               	return		;funcret
  6222  000660                     __end_of___aodiv:
  6223                           	opt callstack 0
  6224                           
  6225 ;; *************** function _ctoa *****************
  6226 ;; Defined at:
  6227 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  6228 ;; Parameters:    Size  Location     Type
  6229 ;;  fp              2   54[COMRAM] PTR struct _IO_FILE
  6230 ;;		 -> NULL(0), 
  6231 ;;  c               1   56[COMRAM] unsigned char 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  w               2   57[COMRAM] int 
  6234 ;;  l               2    0        int 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  2   54[COMRAM] int 
  6237 ;; Registers used:
  6238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6244 ;;      Params:         3       0       0       0       0       0       0       0       0
  6245 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6247 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6248 ;;Total ram usage:        5 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:   10
  6251 ;; This function calls:
  6252 ;;		_pad
  6253 ;; This function is called by:
  6254 ;;		_vfpfcnvrt
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           	psect	text42
  6259  0014B2                     __ptext42:
  6260                           	opt callstack 0
  6261  0014B2                     _ctoa:
  6262                           	opt callstack 16
  6263                           
  6264                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  6265                           
  6266                           ;incstack = 0
  6267  0014B2  503F               	movf	_width,w,c
  6268  0014B4  1040               	iorwf	_width+1,w,c
  6269  0014B6  A4D8               	btfss	status,2,c
  6270  0014B8  D005               	goto	l4370
  6271  0014BA  C03F  F03A         	movff	_width,ctoa@w
  6272  0014BE  C040  F03B         	movff	_width+1,ctoa@w+1
  6273  0014C2  D006               	goto	l4372
  6274  0014C4                     l4370:
  6275  0014C4  0EFF               	movlw	255
  6276  0014C6  243F               	addwf	_width,w,c
  6277  0014C8  6E3A               	movwf	ctoa@w,c
  6278  0014CA  0EFF               	movlw	255
  6279  0014CC  2040               	addwfc	_width+1,w,c
  6280  0014CE  6E3B               	movwf	ctoa@w+1,c
  6281  0014D0                     l4372:
  6282                           
  6283                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  6284  0014D0  C039  F100         	movff	ctoa@c,_dbuf
  6285                           
  6286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  6287  0014D4  0E00               	movlw	0
  6288  0014D6  0101               	movlb	1	; () banked
  6289  0014D8  6F01               	movwf	(_dbuf+1)& (0+255),b
  6290                           
  6291                           ; BSR set to: 1
  6292                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  6293  0014DA  C037  F02C         	movff	ctoa@fp,pad@fp
  6294  0014DE  C038  F02D         	movff	ctoa@fp+1,pad@fp+1
  6295  0014E2  0E00               	movlw	low _dbuf
  6296  0014E4  6E2E               	movwf	pad@buf,c
  6297  0014E6  0E01               	movlw	high _dbuf
  6298  0014E8  6E2F               	movwf	pad@buf+1,c
  6299  0014EA  C03A  F030         	movff	ctoa@w,pad@p
  6300  0014EE  C03B  F031         	movff	ctoa@w+1,pad@p+1
  6301  0014F2  EC17  F007         	call	_pad	;wreg free
  6302  0014F6  C02C  F037         	movff	?_pad,?_ctoa
  6303  0014FA  C02D  F038         	movff	?_pad+1,?_ctoa+1
  6304  0014FE  0012               	return		;funcret
  6305  001500                     __end_of_ctoa:
  6306                           	opt callstack 0
  6307                           
  6308 ;; *************** function _pad *****************
  6309 ;; Defined at:
  6310 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  fp              2   43[COMRAM] PTR struct _IO_FILE
  6313 ;;		 -> NULL(0), 
  6314 ;;  buf             2   45[COMRAM] PTR unsigned char 
  6315 ;;		 -> dbuf(32), 
  6316 ;;  p               2   47[COMRAM] int 
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  w               2   52[COMRAM] int 
  6319 ;;  i               2   50[COMRAM] int 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  2   43[COMRAM] int 
  6322 ;; Registers used:
  6323 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6329 ;;      Params:         6       0       0       0       0       0       0       0       0
  6330 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6331 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6332 ;;      Totals:        11       0       0       0       0       0       0       0       0
  6333 ;;Total ram usage:       11 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; Hardware stack levels required when called:    9
  6336 ;; This function calls:
  6337 ;;		_fputc
  6338 ;;		_fputs
  6339 ;;		_strlen
  6340 ;; This function is called by:
  6341 ;;		_ctoa
  6342 ;;		_dtoa
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text43
  6347  000E2E                     __ptext43:
  6348                           	opt callstack 0
  6349  000E2E                     _pad:
  6350                           	opt callstack 16
  6351                           
  6352                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  6353                           
  6354                           ;incstack = 0
  6355  000E2E  A043               	btfss	_flags,0,c
  6356  000E30  D00A               	goto	l4238
  6357                           
  6358                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  6359  000E32  C02E  F025         	movff	pad@buf,fputs@s
  6360  000E36  C02F  F026         	movff	pad@buf+1,fputs@s+1
  6361  000E3A  C02C  F027         	movff	pad@fp,fputs@fp
  6362  000E3E  C02D  F028         	movff	pad@fp+1,fputs@fp+1
  6363  000E42  EC23  F00B         	call	_fputs	;wreg free
  6364  000E46                     l4238:
  6365                           
  6366                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  6367  000E46  BE31               	btfsc	pad@p+1,7,c
  6368  000E48  D005               	goto	l4242
  6369  000E4A  C030  F035         	movff	pad@p,pad@w
  6370  000E4E  C031  F036         	movff	pad@p+1,pad@w+1
  6371  000E52  D004               	goto	l726
  6372  000E54                     l4242:
  6373  000E54  0E00               	movlw	0
  6374  000E56  6E36               	movwf	pad@w+1,c
  6375  000E58  0E00               	movlw	0
  6376  000E5A  6E35               	movwf	pad@w,c
  6377  000E5C                     l726:
  6378                           
  6379                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  6380  000E5C  0E00               	movlw	0
  6381  000E5E  6E34               	movwf	pad@i+1,c
  6382  000E60  0E00               	movlw	0
  6383  000E62  6E33               	movwf	pad@i,c
  6384                           
  6385                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  6386  000E64  D00C               	goto	l4248
  6387  000E66                     l4244:
  6388                           
  6389                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  6390  000E66  0E00               	movlw	0
  6391  000E68  6E1D               	movwf	fputc@c+1,c
  6392  000E6A  0E20               	movlw	32
  6393  000E6C  6E1C               	movwf	fputc@c,c
  6394  000E6E  C02C  F01E         	movff	pad@fp,fputc@fp
  6395  000E72  C02D  F01F         	movff	pad@fp+1,fputc@fp+1
  6396  000E76  ECE2  F008         	call	_fputc	;wreg free
  6397                           
  6398                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  6399  000E7A  4A33               	infsnz	pad@i,f,c
  6400  000E7C  2A34               	incf	pad@i+1,f,c
  6401  000E7E                     l4248:
  6402                           
  6403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  6404  000E7E  5035               	movf	pad@w,w,c
  6405  000E80  5C33               	subwf	pad@i,w,c
  6406  000E82  5034               	movf	pad@i+1,w,c
  6407  000E84  0A80               	xorlw	128
  6408  000E86  6E32               	movwf	??_pad& (0+255),c
  6409  000E88  5036               	movf	pad@w+1,w,c
  6410  000E8A  0A80               	xorlw	128
  6411  000E8C  5832               	subwfb	??_pad& (0+255),w,c
  6412  000E8E  A0D8               	btfss	status,0,c
  6413  000E90  D7EA               	goto	l4244
  6414                           
  6415                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  6416  000E92  B043               	btfsc	_flags,0,c
  6417  000E94  D00A               	goto	l4252
  6418                           
  6419                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  6420  000E96  C02E  F025         	movff	pad@buf,fputs@s
  6421  000E9A  C02F  F026         	movff	pad@buf+1,fputs@s+1
  6422  000E9E  C02C  F027         	movff	pad@fp,fputs@fp
  6423  000EA2  C02D  F028         	movff	pad@fp+1,fputs@fp+1
  6424  000EA6  EC23  F00B         	call	_fputs	;wreg free
  6425  000EAA                     l4252:
  6426                           
  6427                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  6428  000EAA  C02E  F014         	movff	pad@buf,strlen@s
  6429  000EAE  C02F  F015         	movff	pad@buf+1,strlen@s+1
  6430  000EB2  ECED  F00B         	call	_strlen	;wreg free
  6431  000EB6  5035               	movf	pad@w,w,c
  6432  000EB8  2414               	addwf	?_strlen,w,c
  6433  000EBA  6E2C               	movwf	?_pad,c
  6434  000EBC  5036               	movf	pad@w+1,w,c
  6435  000EBE  2015               	addwfc	?_strlen+1,w,c
  6436  000EC0  6E2D               	movwf	?_pad+1,c
  6437  000EC2  0012               	return		;funcret
  6438  000EC4                     __end_of_pad:
  6439                           	opt callstack 0
  6440                           
  6441 ;; *************** function _strlen *****************
  6442 ;; Defined at:
  6443 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  s               2   19[COMRAM] PTR const unsigned char 
  6446 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), receiveMessage@message(10), 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  a               2   21[COMRAM] PTR const unsigned char 
  6449 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), receiveMessage@message(10), 
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  2   19[COMRAM] unsigned int 
  6452 ;; Registers used:
  6453 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6459 ;;      Params:         2       0       0       0       0       0       0       0       0
  6460 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6461 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6462 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6463 ;;Total ram usage:        4 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:    5
  6466 ;; This function calls:
  6467 ;;		Nothing
  6468 ;; This function is called by:
  6469 ;;		_pad
  6470 ;;		_stoa
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           	psect	text44
  6475  0017DA                     __ptext44:
  6476                           	opt callstack 0
  6477  0017DA                     _strlen:
  6478                           	opt callstack 20
  6479                           
  6480                           ;incstack = 0
  6481  0017DA  C014  F016         	movff	strlen@s,strlen@a
  6482  0017DE  C015  F017         	movff	strlen@s+1,strlen@a+1
  6483  0017E2  D002               	goto	l4228
  6484  0017E4                     l4226:
  6485  0017E4  4A14               	infsnz	strlen@s,f,c
  6486  0017E6  2A15               	incf	strlen@s+1,f,c
  6487  0017E8                     l4228:
  6488  0017E8  C014  FFD9         	movff	strlen@s,fsr2l
  6489  0017EC  C015  FFDA         	movff	strlen@s+1,fsr2h
  6490  0017F0  50DF               	movf	indf2,w,c
  6491  0017F2  A4D8               	btfss	status,2,c
  6492  0017F4  D7F7               	goto	l4226
  6493  0017F6  5016               	movf	strlen@a,w,c
  6494  0017F8  5C14               	subwf	strlen@s,w,c
  6495  0017FA  6E14               	movwf	?_strlen,c
  6496  0017FC  5017               	movf	strlen@a+1,w,c
  6497  0017FE  5815               	subwfb	strlen@s+1,w,c
  6498  001800  6E15               	movwf	?_strlen+1,c
  6499  001802  0012               	return		;funcret
  6500  001804                     __end_of_strlen:
  6501                           	opt callstack 0
  6502                           
  6503 ;; *************** function _fputs *****************
  6504 ;; Defined at:
  6505 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  s               2   36[COMRAM] PTR const unsigned char 
  6508 ;;		 -> dbuf(32), 
  6509 ;;  fp              2   38[COMRAM] PTR struct _IO_FILE
  6510 ;;		 -> NULL(0), 
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;  i               2   41[COMRAM] int 
  6513 ;;  c               1   40[COMRAM] unsigned char 
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  2   36[COMRAM] int 
  6516 ;; Registers used:
  6517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6523 ;;      Params:         4       0       0       0       0       0       0       0       0
  6524 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6526 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6527 ;;Total ram usage:        7 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    8
  6530 ;; This function calls:
  6531 ;;		_fputc
  6532 ;; This function is called by:
  6533 ;;		_pad
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           	psect	text45
  6538  001646                     __ptext45:
  6539                           	opt callstack 0
  6540  001646                     _fputs:
  6541                           	opt callstack 16
  6542                           
  6543                           ;incstack = 0
  6544  001646  0E00               	movlw	0
  6545  001648  6E2B               	movwf	fputs@i+1,c
  6546  00164A  0E00               	movlw	0
  6547  00164C  6E2A               	movwf	fputs@i,c
  6548  00164E  D00B               	goto	l4222
  6549  001650                     l4218:
  6550  001650  C029  F01C         	movff	fputs@c,fputc@c
  6551  001654  6A1D               	clrf	fputc@c+1,c
  6552  001656  C027  F01E         	movff	fputs@fp,fputc@fp
  6553  00165A  C028  F01F         	movff	fputs@fp+1,fputc@fp+1
  6554  00165E  ECE2  F008         	call	_fputc	;wreg free
  6555  001662  4A2A               	infsnz	fputs@i,f,c
  6556  001664  2A2B               	incf	fputs@i+1,f,c
  6557  001666                     l4222:
  6558  001666  502A               	movf	fputs@i,w,c
  6559  001668  2425               	addwf	fputs@s,w,c
  6560  00166A  6ED9               	movwf	fsr2l,c
  6561  00166C  502B               	movf	fputs@i+1,w,c
  6562  00166E  2026               	addwfc	fputs@s+1,w,c
  6563  001670  6EDA               	movwf	fsr2h,c
  6564  001672  50DF               	movf	indf2,w,c
  6565  001674  6E29               	movwf	fputs@c,c
  6566  001676  5029               	movf	fputs@c,w,c
  6567  001678  B4D8               	btfsc	status,2,c
  6568  00167A  0012               	return	
  6569  00167C  D7E9               	goto	l4218
  6570  00167E                     __end_of_fputs:
  6571                           	opt callstack 0
  6572                           
  6573 ;; *************** function _fputc *****************
  6574 ;; Defined at:
  6575 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  c               2   27[COMRAM] int 
  6578 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  6579 ;;		 -> NULL(0), 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  2   27[COMRAM] int 
  6584 ;; Registers used:
  6585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6591 ;;      Params:         4       0       0       0       0       0       0       0       0
  6592 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6593 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6594 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6595 ;;Total ram usage:        9 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    7
  6598 ;; This function calls:
  6599 ;;		_putch
  6600 ;; This function is called by:
  6601 ;;		_pad
  6602 ;;		_stoa
  6603 ;;		_vfpfcnvrt
  6604 ;;		_fputs
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text46
  6609  0011C4                     __ptext46:
  6610                           	opt callstack 0
  6611  0011C4                     _fputc:
  6612                           	opt callstack 18
  6613                           
  6614                           ;incstack = 0
  6615  0011C4  501E               	movf	fputc@fp,w,c
  6616  0011C6  101F               	iorwf	fputc@fp+1,w,c
  6617  0011C8  B4D8               	btfsc	status,2,c
  6618  0011CA  D004               	goto	u3530
  6619  0011CC  501E               	movf	fputc@fp,w,c
  6620  0011CE  101F               	iorwf	fputc@fp+1,w,c
  6621  0011D0  A4D8               	btfss	status,2,c
  6622  0011D2  D004               	goto	l4208
  6623  0011D4                     u3530:
  6624  0011D4  501C               	movf	fputc@c,w,c
  6625  0011D6  ECE2  F00C         	call	_putch
  6626  0011DA  0012               	return	
  6627  0011DC                     l4208:
  6628  0011DC  EE20 F004          	lfsr	2,4
  6629  0011E0  501E               	movf	fputc@fp,w,c
  6630  0011E2  26D9               	addwf	fsr2l,f,c
  6631  0011E4  501F               	movf	fputc@fp+1,w,c
  6632  0011E6  22DA               	addwfc	fsr2h,f,c
  6633  0011E8  50DE               	movf	postinc2,w,c
  6634  0011EA  10DE               	iorwf	postinc2,w,c
  6635  0011EC  B4D8               	btfsc	status,2,c
  6636  0011EE  D016               	goto	u3550
  6637  0011F0  EE20 F004          	lfsr	2,4
  6638  0011F4  501E               	movf	fputc@fp,w,c
  6639  0011F6  26D9               	addwf	fsr2l,f,c
  6640  0011F8  501F               	movf	fputc@fp+1,w,c
  6641  0011FA  22DA               	addwfc	fsr2h,f,c
  6642  0011FC  EE10 F002          	lfsr	1,2
  6643  001200  501E               	movf	fputc@fp,w,c
  6644  001202  26E1               	addwf	fsr1l,f,c
  6645  001204  501F               	movf	fputc@fp+1,w,c
  6646  001206  22E2               	addwfc	fsr1h,f,c
  6647  001208  50DE               	movf	postinc2,w,c
  6648  00120A  5CE6               	subwf	postinc1,w,c
  6649  00120C  50E6               	movf	postinc1,w,c
  6650  00120E  0A80               	xorlw	128
  6651  001210  6E24               	movwf	(??_fputc+4)& (0+255),c
  6652  001212  50DE               	movf	postinc2,w,c
  6653  001214  0A80               	xorlw	128
  6654  001216  5824               	subwfb	(??_fputc+4)& (0+255),w,c
  6655  001218  B0D8               	btfsc	status,0,c
  6656  00121A  0012               	return	
  6657  00121C                     u3550:
  6658  00121C  EE20 F002          	lfsr	2,2
  6659  001220  501E               	movf	fputc@fp,w,c
  6660  001222  26D9               	addwf	fsr2l,f,c
  6661  001224  501F               	movf	fputc@fp+1,w,c
  6662  001226  22DA               	addwfc	fsr2h,f,c
  6663  001228  2ADE               	incf	postinc2,f,c
  6664  00122A  0E00               	movlw	0
  6665  00122C  22DD               	addwfc	postdec2,f,c
  6666  00122E  0012               	return		;funcret
  6667  001230                     __end_of_fputc:
  6668                           	opt callstack 0
  6669                           
  6670 ;; *************** function _putch *****************
  6671 ;; Defined at:
  6672 ;;		line 209 in file "serial.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  c               1    wreg     unsigned char 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  c               1   26[COMRAM] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      void 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0
  6687 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6689 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6690 ;;Total ram usage:        1 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    6
  6693 ;; This function calls:
  6694 ;;		_push
  6695 ;; This function is called by:
  6696 ;;		_output_message
  6697 ;;		_fputc
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text47
  6702  0019C4                     __ptext47:
  6703                           	opt callstack 0
  6704  0019C4                     _putch:
  6705                           	opt callstack 18
  6706                           
  6707                           ;incstack = 0
  6708                           ;putch@c stored from wreg
  6709  0019C4  6E1B               	movwf	putch@c,c
  6710                           
  6711                           ;serial.c: 210:     push(&outbound, c);
  6712  0019C6  0E5B               	movlw	low _outbound
  6713  0019C8  6E14               	movwf	push@buff,c
  6714  0019CA  0E02               	movlw	high _outbound
  6715  0019CC  6E15               	movwf	push@buff+1,c
  6716  0019CE  C01B  F016         	movff	putch@c,push@d
  6717  0019D2  EC4B  F009         	call	_push	;wreg free
  6718  0019D6  0012               	return		;funcret
  6719  0019D8                     __end_of_putch:
  6720                           	opt callstack 0
  6721                           
  6722 ;; *************** function _push *****************
  6723 ;; Defined at:
  6724 ;;		line 10 in file "serial_buffer.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  buff            2   19[COMRAM] PTR struct .
  6727 ;;		 -> inbound(260), outbound(260), 
  6728 ;;  d               1   21[COMRAM] unsigned char 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6740 ;;      Params:         3       0       0       0       0       0       0       0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6742 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6743 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6744 ;;Total ram usage:        7 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    5
  6747 ;; This function calls:
  6748 ;;		Nothing
  6749 ;; This function is called by:
  6750 ;;		_putch
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           	psect	text48
  6755  001296                     __ptext48:
  6756                           	opt callstack 0
  6757  001296                     _push:
  6758                           	opt callstack 18
  6759                           
  6760                           ;serial_buffer.c: 14:     GIE = 0;
  6761                           
  6762                           ;incstack = 0
  6763  001296  9EF2               	bcf	4082,7,c	;volatile
  6764                           
  6765                           ;serial_buffer.c: 15:     buff->data[(buff->start + buff->length) % 256] = d;
  6766  001298  EE21 F002          	lfsr	2,258
  6767  00129C  5014               	movf	push@buff,w,c
  6768  00129E  26D9               	addwf	fsr2l,f,c
  6769  0012A0  5015               	movf	push@buff+1,w,c
  6770  0012A2  22DA               	addwfc	fsr2h,f,c
  6771  0012A4  CFDE F017          	movff	postinc2,??_push
  6772  0012A8  CFDD F018          	movff	postdec2,??_push+1
  6773  0012AC  EE21 F000          	lfsr	2,256
  6774  0012B0  5014               	movf	push@buff,w,c
  6775  0012B2  26D9               	addwf	fsr2l,f,c
  6776  0012B4  5015               	movf	push@buff+1,w,c
  6777  0012B6  22DA               	addwfc	fsr2h,f,c
  6778  0012B8  CFDE F019          	movff	postinc2,??_push+2
  6779  0012BC  CFDD F01A          	movff	postdec2,??_push+3
  6780  0012C0  5017               	movf	??_push,w,c
  6781  0012C2  2619               	addwf	??_push+2,f,c
  6782  0012C4  5018               	movf	??_push+1,w,c
  6783  0012C6  221A               	addwfc	??_push+3,f,c
  6784  0012C8  0EFF               	movlw	255
  6785  0012CA  1619               	andwf	??_push+2,f,c
  6786  0012CC  0E00               	movlw	0
  6787  0012CE  161A               	andwf	??_push+3,f,c
  6788  0012D0  5019               	movf	??_push+2,w,c
  6789  0012D2  2414               	addwf	push@buff,w,c
  6790  0012D4  6ED9               	movwf	fsr2l,c
  6791  0012D6  501A               	movf	??_push+3,w,c
  6792  0012D8  2015               	addwfc	push@buff+1,w,c
  6793  0012DA  6EDA               	movwf	fsr2h,c
  6794  0012DC  C016  FFDF         	movff	push@d,indf2
  6795                           
  6796                           ;serial_buffer.c: 16:     buff->length++;
  6797  0012E0  EE21 F002          	lfsr	2,258
  6798  0012E4  5014               	movf	push@buff,w,c
  6799  0012E6  26D9               	addwf	fsr2l,f,c
  6800  0012E8  5015               	movf	push@buff+1,w,c
  6801  0012EA  22DA               	addwfc	fsr2h,f,c
  6802  0012EC  2ADE               	incf	postinc2,f,c
  6803  0012EE  0E00               	movlw	0
  6804  0012F0  22DD               	addwfc	postdec2,f,c
  6805                           
  6806                           ;serial_buffer.c: 17:     GIE = 1;
  6807  0012F2  8EF2               	bsf	4082,7,c	;volatile
  6808  0012F4  0012               	return		;funcret
  6809  0012F6                     __end_of_push:
  6810                           	opt callstack 0
  6811                           
  6812 ;; *************** function _monitor_water_pressure *****************
  6813 ;; Defined at:
  6814 ;;		line 4 in file "MonitorWaterPressure.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;		None
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;		None
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0
  6829 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6830 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6831 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6832 ;;Total ram usage:        1 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    6
  6835 ;; This function calls:
  6836 ;;		_clear_callback
  6837 ;;		_enable_callback
  6838 ;; This function is called by:
  6839 ;;		_main
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text49
  6844  00167E                     __ptext49:
  6845                           	opt callstack 0
  6846  00167E                     _monitor_water_pressure:
  6847                           	opt callstack 24
  6848                           
  6849                           ;MonitorWaterPressure.c: 8:   if (( PORTBbits.RB2) == fault_flags.wpOkBit){
  6850                           
  6851                           ;incstack = 0
  6852  00167E  A847               	btfss	_fault_flags,4,c
  6853  001680  D002               	goto	u4550
  6854  001682  0E01               	movlw	1
  6855  001684  D001               	goto	u4552
  6856  001686                     u4550:
  6857  001686  0E00               	movlw	0
  6858  001688                     u4552:
  6859  001688  6E17               	movwf	??_monitor_water_pressure& (0+255),c
  6860  00168A  A481               	btfss	3969,2,c	;volatile
  6861  00168C  D002               	goto	u4560
  6862  00168E  0E01               	movlw	1
  6863  001690  D001               	goto	u4562
  6864  001692                     u4560:
  6865  001692  0E00               	movlw	0
  6866  001694                     u4562:
  6867  001694  1A17               	xorwf	??_monitor_water_pressure,f,c
  6868  001696  A4D8               	btfss	status,2,c
  6869  001698  D00A               	goto	l4954
  6870                           
  6871                           ;MonitorWaterPressure.c: 12:        timer_events[EventLowWaterPressureDebounce].flag_bit
      +                           = 0;
  6872  00169A  0100               	movlb	0	; () banked
  6873  00169C  9372               	bcf	(_timer_events+18)& (0+255),1,b	;volatile
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;MonitorWaterPressure.c: 14:     enable_callback (EventLowWaterPressureDebounce, (3*(800
      +                          0000/256/4/256)));
  6877  00169E  0E00               	movlw	0
  6878  0016A0  6E15               	movwf	enable_callback@time_delay+1,c
  6879  0016A2  0E5A               	movlw	90
  6880  0016A4  6E14               	movwf	enable_callback@time_delay,c
  6881  0016A6  0E02               	movlw	2
  6882  0016A8  ECA3  F00A         	call	_enable_callback
  6883                           
  6884                           ;MonitorWaterPressure.c: 15:   } else{
  6885  0016AC  0012               	return	
  6886  0016AE                     l4954:
  6887                           
  6888                           ;MonitorWaterPressure.c: 17:     clear_callback(EventLowWaterPressureDebounce);
  6889  0016AE  0E02               	movlw	2
  6890  0016B0  ECCC  F00C         	call	_clear_callback
  6891  0016B4  0012               	return		;funcret
  6892  0016B6                     __end_of_monitor_water_pressure:
  6893                           	opt callstack 0
  6894                           
  6895 ;; *************** function _clear_callback *****************
  6896 ;; Defined at:
  6897 ;;		line 25 in file "timer_event.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;  callback        1    wreg     unsigned char 
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;  callback        1   19[COMRAM] unsigned char 
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  1    wreg      void 
  6904 ;; Registers used:
  6905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6911 ;;      Params:         0       0       0       0       0       0       0       0       0
  6912 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6913 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6914 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6915 ;;Total ram usage:        1 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    5
  6918 ;; This function calls:
  6919 ;;		Nothing
  6920 ;; This function is called by:
  6921 ;;		_monitor_water_pressure
  6922 ;;		_main
  6923 ;;		_pump_run
  6924 ;;		_monitor_pump_run
  6925 ;;		_standby
  6926 ;;		_start_main
  6927 ;;		_start_pump
  6928 ;;		_clear_callback_for_shutdown
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           	psect	text50
  6933  001998                     __ptext50:
  6934                           	opt callstack 0
  6935  001998                     _clear_callback:
  6936                           	opt callstack 23
  6937                           
  6938                           ;incstack = 0
  6939                           ;clear_callback@callback stored from wreg
  6940  001998  6E14               	movwf	clear_callback@callback,c
  6941                           
  6942                           ;timer_event.c: 26:     timer_events[callback].active = 0;
  6943  00199A  5014               	movf	clear_callback@callback,w,c
  6944  00199C  0D08               	mullw	8
  6945  00199E  0E62               	movlw	low (_timer_events+2)
  6946  0019A0  24F3               	addwf	prodl,w,c
  6947  0019A2  6ED9               	movwf	fsr2l,c
  6948  0019A4  0E00               	movlw	high (_timer_events+2)
  6949  0019A6  20F4               	addwfc	prodh,w,c
  6950  0019A8  6EDA               	movwf	fsr2h,c
  6951  0019AA  0100               	movlb	0	; () banked
  6952  0019AC  90DF               	bcf	indf2,0,c
  6953                           
  6954                           ; BSR set to: 0
  6955  0019AE  0012               	return		;funcret
  6956  0019B0                     __end_of_clear_callback:
  6957                           	opt callstack 0
  6958                           
  6959 ;; *************** function _checkIfShoudReset *****************
  6960 ;; Defined at:
  6961 ;;		line 221 in file "pump_control.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;		None
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;		None
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  1    wreg      void 
  6968 ;; Registers used:
  6969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6975 ;;      Params:         0       0       0       0       0       0       0       0       0
  6976 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6977 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6978 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6979 ;;Total ram usage:        0 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    8
  6982 ;; This function calls:
  6983 ;;		_resetPump
  6984 ;; This function is called by:
  6985 ;;		_main
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           	psect	text51
  6990  0018E8                     __ptext51:
  6991                           	opt callstack 0
  6992  0018E8                     _checkIfShoudReset:
  6993                           	opt callstack 22
  6994                           
  6995                           ;pump_control.c: 223:     if (!( (!PORTBbits.RB3) || (zones != 0) )
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;incstack = 0
  6999  0018E8  A681               	btfss	3969,3,c	;volatile
  7000  0018EA  0012               	return	
  7001  0018EC  5045               	movf	_zones,w,c
  7002  0018EE  1046               	iorwf	_zones+1,w,c
  7003  0018F0  A4D8               	btfss	status,2,c
  7004  0018F2  0012               	return	
  7005  0018F4  A047               	btfss	_fault_flags,0,c
  7006  0018F6  B247               	btfsc	_fault_flags,1,c
  7007  0018F8  D004               	goto	u4630
  7008  0018FA  B447               	btfsc	_fault_flags,2,c
  7009  0018FC  D002               	goto	u4630
  7010  0018FE  A647               	btfss	_fault_flags,3,c
  7011  001900  0012               	return	
  7012  001902                     u4630:
  7013                           
  7014                           ;pump_control.c: 228:             ) {;pump_control.c: 230:         resetPump();
  7015  001902  EC1C  F00D         	call	_resetPump	;wreg free
  7016  001906  0012               	return		;funcret
  7017  001908                     __end_of_checkIfShoudReset:
  7018                           	opt callstack 0
  7019                           
  7020 ;; *************** function _resetPump *****************
  7021 ;; Defined at:
  7022 ;;		line 209 in file "pump_control.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;		None
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      void 
  7029 ;; Registers used:
  7030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7036 ;;      Params:         0       0       0       0       0       0       0       0       0
  7037 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7038 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7039 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7040 ;;Total ram usage:        0 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    7
  7043 ;; This function calls:
  7044 ;;		_init
  7045 ;;		_init_event_timer
  7046 ;; This function is called by:
  7047 ;;		_checkIfShoudReset
  7048 ;;		_process_reset_pump
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text52
  7053  001A38                     __ptext52:
  7054                           	opt callstack 0
  7055  001A38                     _resetPump:
  7056                           	opt callstack 21
  7057                           
  7058                           ;pump_control.c: 210:     init();
  7059                           
  7060                           ;incstack = 0
  7061  001A38  EC36  F008         	call	_init	;wreg free
  7062                           
  7063                           ;pump_control.c: 211:     init_event_timer();
  7064  001A3C  ECAB  F009         	call	_init_event_timer	;wreg free
  7065  001A40  0012               	return		;funcret
  7066  001A42                     __end_of_resetPump:
  7067                           	opt callstack 0
  7068                           
  7069 ;; *************** function _init_event_timer *****************
  7070 ;; Defined at:
  7071 ;;		line 41 in file "timer_event.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;		None
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;		None
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  1    wreg      void 
  7078 ;; Registers used:
  7079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7085 ;;      Params:         0       0       0       0       0       0       0       0       0
  7086 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7088 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7089 ;;Total ram usage:        0 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:    6
  7092 ;; This function calls:
  7093 ;;		_enable_callback
  7094 ;; This function is called by:
  7095 ;;		_resetPump
  7096 ;;		_main
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text53
  7101  001356                     __ptext53:
  7102                           	opt callstack 0
  7103  001356                     _init_event_timer:
  7104                           	opt callstack 21
  7105                           
  7106                           ;timer_event.c: 45:     timer_events[EventLowWaterLevel].callback = EventLowWaterLevelCa
      +                          llBack;;
  7107                           
  7108                           ;incstack = 0
  7109  001356  0E54               	movlw	low _EventLowWaterLevelCallBack
  7110  001358  0100               	movlb	0	; () banked
  7111  00135A  6F66               	movwf	(_timer_events+6)& (0+255),b	;volatile
  7112  00135C  0E18               	movlw	high _EventLowWaterLevelCallBack
  7113  00135E  6F67               	movwf	(_timer_events+7)& (0+255),b	;volatile
  7114                           
  7115                           ;timer_event.c: 47:     timer_events[EventLowWaterPressure].callback = EventLowWaterPres
      +                          sureCallBack;;
  7116  001360  0EB6               	movlw	low _EventLowWaterPressureCallBack
  7117  001362  6F6E               	movwf	(_timer_events+14)& (0+255),b	;volatile
  7118  001364  0E16               	movlw	high _EventLowWaterPressureCallBack
  7119  001366  6F6F               	movwf	(_timer_events+15)& (0+255),b	;volatile
  7120                           
  7121                           ;timer_event.c: 48:     timer_events[EventLowWaterPressureDebounce].callback = EventLowW
      +                          aterPressureDebounceCallBack;;
  7122  001368  0E28               	movlw	low _EventLowWaterPressureDebounceCallBack
  7123  00136A  6F76               	movwf	(_timer_events+22)& (0+255),b	;volatile
  7124  00136C  0E19               	movlw	high _EventLowWaterPressureDebounceCallBack
  7125  00136E  6F77               	movwf	(_timer_events+23)& (0+255),b	;volatile
  7126                           
  7127                           ;timer_event.c: 50:     timer_events[EventLowFogPressure].callback = EventLowFogPressure
      +                          CallBack;;
  7128  001370  0EE8               	movlw	low _EventLowFogPressureCallBack
  7129  001372  6F7E               	movwf	(_timer_events+30)& (0+255),b	;volatile
  7130  001374  0E16               	movlw	high _EventLowFogPressureCallBack
  7131  001376  6F7F               	movwf	(_timer_events+31)& (0+255),b	;volatile
  7132                           
  7133                           ;timer_event.c: 51:     timer_events[EventFaultStateLED].callback = EventFaultStateLEDCa
      +                          llBack;;
  7134  001378  0ED6               	movlw	low _EventFaultStateLEDCallBack
  7135  00137A  6F86               	movwf	(_timer_events+38)& (0+255),b	;volatile
  7136  00137C  0E09               	movlw	high _EventFaultStateLEDCallBack
  7137  00137E  6F87               	movwf	(_timer_events+39)& (0+255),b	;volatile
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;timer_event.c: 52:     enable_callback(EventFaultStateLED, 1);
  7141  001380  0E00               	movlw	0
  7142  001382  6E15               	movwf	enable_callback@time_delay+1,c
  7143  001384  0E01               	movlw	1
  7144  001386  6E14               	movwf	enable_callback@time_delay,c
  7145  001388  0E04               	movlw	4
  7146  00138A  ECA3  F00A         	call	_enable_callback
  7147                           
  7148                           ;timer_event.c: 53:     timer_events[EventIdleTimeout].callback = EventIdleTimeoutCallBa
      +                          ck;;
  7149  00138E  0E00               	movlw	low _EventIdleTimeoutCallBack
  7150  001390  0100               	movlb	0	; () banked
  7151  001392  6F8E               	movwf	(_timer_events+46)& (0+255),b	;volatile
  7152  001394  0E15               	movlw	high _EventIdleTimeoutCallBack
  7153  001396  6F8F               	movwf	(_timer_events+47)& (0+255),b	;volatile
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;timer_event.c: 54:     timer_events[EventDumpSolenoid].callback = EventDumpSolenoidCall
      +                          Back;;
  7157  001398  0E2E               	movlw	low _EventDumpSolenoidCallBack
  7158  00139A  6F96               	movwf	(_timer_events+54)& (0+255),b	;volatile
  7159  00139C  0E1A               	movlw	high _EventDumpSolenoidCallBack
  7160  00139E  6F97               	movwf	(_timer_events+55)& (0+255),b	;volatile
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;timer_event.c: 55:     timer_events[EventPODebounce].callback = EventPODebounceCallBack
      +                          ;;
  7164  0013A0  0EEC               	movlw	low _EventPODebounceCallBack
  7165  0013A2  6FA6               	movwf	(_timer_events+70)& (0+255),b	;volatile
  7166  0013A4  0E19               	movlw	high _EventPODebounceCallBack
  7167  0013A6  6FA7               	movwf	(_timer_events+71)& (0+255),b	;volatile
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;timer_event.c: 56:     timer_events[EventRunSignalDebounce].callback = EventRunSignalDe
      +                          bounceCallBack;;
  7171  0013A8  0E0E               	movlw	low _EventRunSignalDebounceCallBack
  7172  0013AA  6F9E               	movwf	(_timer_events+62)& (0+255),b	;volatile
  7173  0013AC  0E1A               	movlw	high _EventRunSignalDebounceCallBack
  7174  0013AE  6F9F               	movwf	(_timer_events+63)& (0+255),b	;volatile
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;timer_event.c: 58:     TMR0IE = 1;
  7178  0013B0  8AF2               	bsf	4082,5,c	;volatile
  7179                           
  7180                           ; BSR set to: 0
  7181  0013B2  0012               	return		;funcret
  7182  0013B4                     __end_of_init_event_timer:
  7183                           	opt callstack 0
  7184                           
  7185 ;; *************** function _enable_callback *****************
  7186 ;; Defined at:
  7187 ;;		line 16 in file "timer_event.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  callback        1    wreg     unsigned char 
  7190 ;;  time_delay      2   19[COMRAM] int 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  callback        1   21[COMRAM] unsigned char 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      void 
  7195 ;; Registers used:
  7196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7202 ;;      Params:         2       0       0       0       0       0       0       0       0
  7203 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7204 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7205 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7206 ;;Total ram usage:        3 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    5
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_EventFaultStateLEDCallBack
  7213 ;;		_EventIdleTimeoutCallBack
  7214 ;;		_EventLowFogPressureCallBack
  7215 ;;		_EventLowWaterLevelCallBack
  7216 ;;		_monitor_water_pressure
  7217 ;;		_main
  7218 ;;		_pump_run
  7219 ;;		_monitor_pump_run
  7220 ;;		_shutdown
  7221 ;;		_standby
  7222 ;;		_start_main
  7223 ;;		_start_pump
  7224 ;;		_init_event_timer
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	text54
  7229  001546                     __ptext54:
  7230                           	opt callstack 0
  7231  001546                     _enable_callback:
  7232                           	opt callstack 24
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;incstack = 0
  7236                           ;enable_callback@callback stored from wreg
  7237  001546  6E16               	movwf	enable_callback@callback,c
  7238                           
  7239                           ;timer_event.c: 17:     if (!timer_events[callback].active) {
  7240  001548  5016               	movf	enable_callback@callback,w,c
  7241  00154A  0D08               	mullw	8
  7242  00154C  0E62               	movlw	low (_timer_events+2)
  7243  00154E  24F3               	addwf	prodl,w,c
  7244  001550  6ED9               	movwf	fsr2l,c
  7245  001552  0E00               	movlw	high (_timer_events+2)
  7246  001554  20F4               	addwfc	prodh,w,c
  7247  001556  6EDA               	movwf	fsr2h,c
  7248  001558  0100               	movlb	0	; () banked
  7249  00155A  B0DF               	btfsc	indf2,0,c
  7250  00155C  0012               	return	
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;timer_event.c: 18:         timer_events[callback].time_left = time_delay;
  7254  00155E  5016               	movf	enable_callback@callback,w,c
  7255  001560  0D08               	mullw	8
  7256  001562  0E60               	movlw	low _timer_events
  7257  001564  24F3               	addwf	prodl,w,c
  7258  001566  6ED9               	movwf	fsr2l,c
  7259  001568  0E00               	movlw	high _timer_events
  7260  00156A  20F4               	addwfc	prodh,w,c
  7261  00156C  6EDA               	movwf	fsr2h,c
  7262  00156E  C014  FFDE         	movff	enable_callback@time_delay,postinc2
  7263  001572  C015  FFDD         	movff	enable_callback@time_delay+1,postdec2
  7264                           
  7265                           ;timer_event.c: 19:         timer_events[callback].active = 1;
  7266  001576  5016               	movf	enable_callback@callback,w,c
  7267  001578  0D08               	mullw	8
  7268  00157A  0E62               	movlw	low (_timer_events+2)
  7269  00157C  24F3               	addwf	prodl,w,c
  7270  00157E  6ED9               	movwf	fsr2l,c
  7271  001580  0E00               	movlw	high (_timer_events+2)
  7272  001582  20F4               	addwfc	prodh,w,c
  7273  001584  6EDA               	movwf	fsr2h,c
  7274  001586  80DF               	bsf	indf2,0,c
  7275                           
  7276                           ; BSR set to: 0
  7277  001588  0012               	return		;funcret
  7278  00158A                     __end_of_enable_callback:
  7279                           	opt callstack 0
  7280                           
  7281 ;; *************** function _init *****************
  7282 ;; Defined at:
  7283 ;;		line 139 in file "pump_control.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      void 
  7290 ;; Registers used:
  7291 ;;		wreg, status,2, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7297 ;;      Params:         0       0       0       0       0       0       0       0       0
  7298 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7299 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7300 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7301 ;;Total ram usage:        0 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:    6
  7304 ;; This function calls:
  7305 ;;		_ser_int
  7306 ;; This function is called by:
  7307 ;;		_resetPump
  7308 ;;		_main
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           	psect	text55
  7313  00106C                     __ptext55:
  7314                           	opt callstack 0
  7315  00106C                     _init:
  7316                           	opt callstack 21
  7317                           
  7318                           ;pump_control.c: 144:     T0CS = 0;
  7319                           
  7320                           ; BSR set to: 0
  7321                           ;incstack = 0
  7322  00106C  9AD5               	bcf	4053,5,c	;volatile
  7323                           
  7324                           ;pump_control.c: 146:     ADCON1 = 0x7f;
  7325  00106E  0E7F               	movlw	127
  7326  001070  6EC1               	movwf	4033,c	;volatile
  7327                           
  7328                           ;pump_control.c: 150:     PCFG3 = 1;
  7329  001072  86C1               	bsf	4033,3,c	;volatile
  7330                           
  7331                           ;pump_control.c: 154:     RBPU = 0;
  7332  001074  9EF1               	bcf	4081,7,c	;volatile
  7333                           
  7334                           ;pump_control.c: 167: IRCF2 = 1;
  7335  001076  8CD3               	bsf	4051,6,c	;volatile
  7336                           
  7337                           ;pump_control.c: 168: IRCF1 = 1;
  7338  001078  8AD3               	bsf	4051,5,c	;volatile
  7339                           
  7340                           ;pump_control.c: 169: IRCF0 = 1;
  7341  00107A  88D3               	bsf	4051,4,c	;volatile
  7342                           
  7343                           ;pump_control.c: 172:     PORTA = 0;
  7344  00107C  0E00               	movlw	0
  7345  00107E  6E80               	movwf	3968,c	;volatile
  7346                           
  7347                           ;pump_control.c: 173:     PORTB = 0;
  7348  001080  0E00               	movlw	0
  7349  001082  6E81               	movwf	3969,c	;volatile
  7350                           
  7351                           ;pump_control.c: 174:     TRISA = 0;
  7352  001084  0E00               	movlw	0
  7353  001086  6E92               	movwf	3986,c	;volatile
  7354                           
  7355                           ;pump_control.c: 175:     TRISB = 0;
  7356  001088  0E00               	movlw	0
  7357  00108A  6E93               	movwf	3987,c	;volatile
  7358                           
  7359                           ;pump_control.c: 178:     { PORTAbits.RA3 = (0);}; { PORTAbits.RA0 = (0); fault_flags.wp
      +                          OkBit = (0);}; { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);}; { PORTBbits.RB5 =
      +                           (0); fault_flags.boostPumpBit = (0);}; { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidB
      +                          it = (0);}; { PORTBbits.RB0 = (0);}; TRISD = 0; PORTD = 0x00; TRISAbits.RA0 = 0; TRISAbi
      +                          ts.RA1 = 0; TRISAbits.RA2 = 0; TRISAbits.RA3 = 0; TRISBbits.RB5 = 0; TRISBbits.RB0 = 0;;
  7360  00108C  9680               	bcf	3968,3,c	;volatile
  7361  00108E  9080               	bcf	3968,0,c	;volatile
  7362  001090  9847               	bcf	_fault_flags,4,c
  7363  001092  9280               	bcf	3968,1,c	;volatile
  7364  001094  9A47               	bcf	_fault_flags,5,c
  7365  001096  9A81               	bcf	3969,5,c	;volatile
  7366  001098  9C47               	bcf	_fault_flags,6,c
  7367  00109A  9480               	bcf	3968,2,c	;volatile
  7368  00109C  9048               	bcf	_fault_flags+1,0,c
  7369  00109E  9081               	bcf	3969,0,c	;volatile
  7370  0010A0  0E00               	movlw	0
  7371  0010A2  6E95               	movwf	3989,c	;volatile
  7372  0010A4  0E00               	movlw	0
  7373  0010A6  6E83               	movwf	3971,c	;volatile
  7374  0010A8  9092               	bcf	3986,0,c	;volatile
  7375  0010AA  9292               	bcf	3986,1,c	;volatile
  7376  0010AC  9492               	bcf	3986,2,c	;volatile
  7377  0010AE  9692               	bcf	3986,3,c	;volatile
  7378  0010B0  9A93               	bcf	3987,5,c	;volatile
  7379  0010B2  9093               	bcf	3987,0,c	;volatile
  7380                           
  7381                           ;pump_control.c: 179:     TRISBbits.RB2 = 1; TRISBbits.RB3 = 1; TRISAbits.RA4 = 1; TRISA
      +                          bits.RA5 = 1; TRISBbits.RB4 = 1;;
  7382  0010B4  8493               	bsf	3987,2,c	;volatile
  7383  0010B6  8693               	bsf	3987,3,c	;volatile
  7384  0010B8  8892               	bsf	3986,4,c	;volatile
  7385  0010BA  8A92               	bsf	3986,5,c	;volatile
  7386  0010BC  8893               	bsf	3987,4,c	;volatile
  7387                           
  7388                           ;pump_control.c: 182:     fault_flags.boostPumpBit = 0;
  7389  0010BE  9C47               	bcf	_fault_flags,6,c
  7390                           
  7391                           ;pump_control.c: 183:     fault_flags.lwl_fault = 0;
  7392  0010C0  9047               	bcf	_fault_flags,0,c
  7393                           
  7394                           ;pump_control.c: 184:     fault_flags.lwp_fault = 0;
  7395  0010C2  9247               	bcf	_fault_flags,1,c
  7396                           
  7397                           ;pump_control.c: 185:     fault_flags.lfp_fault = 0;
  7398  0010C4  9447               	bcf	_fault_flags,2,c
  7399                           
  7400                           ;pump_control.c: 186:     fault_flags.po_fault = 0;
  7401  0010C6  9647               	bcf	_fault_flags,3,c
  7402                           
  7403                           ;pump_control.c: 188:     fault_flags.wpOkBit = 0;
  7404  0010C8  9847               	bcf	_fault_flags,4,c
  7405                           
  7406                           ;pump_control.c: 189:     fault_flags.mainPumpBit = 0;
  7407  0010CA  9A47               	bcf	_fault_flags,5,c
  7408                           
  7409                           ;pump_control.c: 190:     fault_flags.boostPumpBit = 0;
  7410  0010CC  9C47               	bcf	_fault_flags,6,c
  7411                           
  7412                           ;pump_control.c: 191:     fault_flags.pumpOverloadBit = 0;
  7413  0010CE  9E47               	bcf	_fault_flags,7,c
  7414                           
  7415                           ;pump_control.c: 192:     fault_flags.dumpSolenoidBit = 0;
  7416  0010D0  9048               	bcf	_fault_flags+1,0,c
  7417                           
  7418                           ;pump_control.c: 196:     GIE = 1;
  7419  0010D2  8EF2               	bsf	4082,7,c	;volatile
  7420                           
  7421                           ;pump_control.c: 197:     state = standbyState;
  7422  0010D4  0E00               	movlw	0
  7423  0010D6  6E4B               	movwf	_state,c
  7424                           
  7425                           ;pump_control.c: 198:     zones = 0;
  7426  0010D8  0E00               	movlw	0
  7427  0010DA  6E46               	movwf	_zones+1,c
  7428  0010DC  0E00               	movlw	0
  7429  0010DE  6E45               	movwf	_zones,c
  7430                           
  7431                           ;pump_control.c: 199:     inIdleDumpHour = 0;
  7432  0010E0  0E00               	movlw	0
  7433  0010E2  6E4A               	movwf	_inIdleDumpHour,c
  7434                           
  7435                           ;pump_control.c: 204:     ser_int();
  7436  0010E4  EC3D  F00C         	call	_ser_int	;wreg free
  7437  0010E8  0012               	return		;funcret
  7438  0010EA                     __end_of_init:
  7439                           	opt callstack 0
  7440                           
  7441 ;; *************** function _ser_int *****************
  7442 ;; Defined at:
  7443 ;;		line 51 in file "serial.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;		None
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;		None
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  1    wreg      void 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7457 ;;      Params:         0       0       0       0       0       0       0       0       0
  7458 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7459 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7460 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7461 ;;Total ram usage:        0 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    5
  7464 ;; This function calls:
  7465 ;;		Nothing
  7466 ;; This function is called by:
  7467 ;;		_init
  7468 ;;		_main
  7469 ;;		_mainserial3
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           	psect	text56
  7474  00187A                     __ptext56:
  7475                           	opt callstack 0
  7476  00187A                     _ser_int:
  7477                           	opt callstack 25
  7478                           
  7479                           ;serial.c: 52:     RCSTA = 0X90;
  7480                           
  7481                           ;incstack = 0
  7482  00187A  0E90               	movlw	144
  7483  00187C  6EAB               	movwf	4011,c	;volatile
  7484                           
  7485                           ;serial.c: 53:     TRISC6 = 0;
  7486  00187E  9C94               	bcf	3988,6,c	;volatile
  7487                           
  7488                           ;serial.c: 54:     TRISC7 = 1;
  7489  001880  8E94               	bsf	3988,7,c	;volatile
  7490                           
  7491                           ;serial.c: 55:     TXSTA = 0x24;
  7492  001882  0E24               	movlw	36
  7493  001884  6EAC               	movwf	4012,c	;volatile
  7494                           
  7495                           ;serial.c: 56:     SYNC = 0;
  7496  001886  98AC               	bcf	4012,4,c	;volatile
  7497                           
  7498                           ;serial.c: 57:     SPEN = 1;
  7499  001888  8EAB               	bsf	4011,7,c	;volatile
  7500                           
  7501                           ;serial.c: 58:     TX9 = 0;
  7502  00188A  9CAC               	bcf	4012,6,c	;volatile
  7503                           
  7504                           ;serial.c: 60:     RCSTA = 0b10010000;
  7505  00188C  0E90               	movlw	144
  7506  00188E  6EAB               	movwf	4011,c	;volatile
  7507                           
  7508                           ;serial.c: 61:     SPBRG = 207;
  7509  001890  0ECF               	movlw	207
  7510  001892  6EAF               	movwf	4015,c	;volatile
  7511                           
  7512                           ;serial.c: 63:     CREN = 1;
  7513  001894  88AB               	bsf	4011,4,c	;volatile
  7514                           
  7515                           ;serial.c: 64:     TXIE = 1;
  7516  001896  889D               	bsf	3997,4,c	;volatile
  7517                           
  7518                           ;serial.c: 65:     RCIE = 1;
  7519  001898  8A9D               	bsf	3997,5,c	;volatile
  7520                           
  7521                           ;serial.c: 66:     GIE = 1;
  7522  00189A  8EF2               	bsf	4082,7,c	;volatile
  7523                           
  7524                           ;serial.c: 67:     PEIE = 1;
  7525  00189C  8CF2               	bsf	4082,6,c	;volatile
  7526  00189E  0012               	return		;funcret
  7527  0018A0                     __end_of_ser_int:
  7528                           	opt callstack 0
  7529                           
  7530 ;; *************** function _event_timer_isr *****************
  7531 ;; Defined at:
  7532 ;;		line 64 in file "timer_event.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;		None
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;		None
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  1    wreg      void 
  7539 ;; Registers used:
  7540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7546 ;;      Params:         0       0       0       0       0       0       0       0       0
  7547 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7548 ;;      Temps:          6       0       0       0       0       0       0       0       0
  7549 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7550 ;;Total ram usage:        6 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; Hardware stack levels required when called:    4
  7553 ;; This function calls:
  7554 ;;		_usart_interrupt
  7555 ;; This function is called by:
  7556 ;;		Interrupt level 2
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           	psect	intcode
  7561  000008                     __pintcode:
  7562                           	opt callstack 0
  7563  000008                     _event_timer_isr:
  7564                           	opt callstack 16
  7565                           
  7566                           ;incstack = 0
  7567  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7568  00000A  EDC5  F00A         	call	int_func,f	;refresh shadow registers
  7569                           
  7570                           	psect	intcode_body
  7571  00158A                     __pintcode_body:
  7572                           	opt callstack 16
  7573  00158A                     int_func:
  7574                           	opt callstack 16
  7575  00158A  0006               	pop		; remove dummy address from shadow register refresh
  7576  00158C  CFD9 F00E          	movff	fsr2l,??_event_timer_isr
  7577  001590  CFDA F00F          	movff	fsr2h,??_event_timer_isr+1
  7578  001594  CFF6 F010          	movff	tblptrl,??_event_timer_isr+2
  7579  001598  CFF7 F011          	movff	tblptrh,??_event_timer_isr+3
  7580  00159C  CFF8 F012          	movff	tblptru,??_event_timer_isr+4
  7581  0015A0  CFF5 F013          	movff	tablat,??_event_timer_isr+5
  7582                           
  7583                           ;timer_event.c: 65:     if ((TMR0IE) && (TMR0IF)) {
  7584  0015A4  BAF2               	btfsc	4082,5,c	;volatile
  7585  0015A6  A4F2               	btfss	4082,2,c	;volatile
  7586  0015A8  D002               	goto	i2l4152
  7587                           
  7588                           ;timer_event.c: 66:         timer_count++;
  7589  0015AA  2A49               	incf	_timer_count,f,c	;volatile
  7590                           
  7591                           ;timer_event.c: 68:         TMR0IF = 0;
  7592  0015AC  94F2               	bcf	4082,2,c	;volatile
  7593  0015AE                     i2l4152:
  7594                           
  7595                           ;timer_event.c: 70:     usart_interrupt();
  7596  0015AE  EC75  F008         	call	_usart_interrupt	;wreg free
  7597  0015B2  C013  FFF5         	movff	??_event_timer_isr+5,tablat
  7598  0015B6  C012  FFF8         	movff	??_event_timer_isr+4,tblptru
  7599  0015BA  C011  FFF7         	movff	??_event_timer_isr+3,tblptrh
  7600  0015BE  C010  FFF6         	movff	??_event_timer_isr+2,tblptrl
  7601  0015C2  C00F  FFDA         	movff	??_event_timer_isr+1,fsr2h
  7602  0015C6  C00E  FFD9         	movff	??_event_timer_isr,fsr2l
  7603  0015CA  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7604  0015CC  0011               	retfie		f
  7605  0015CE                     __end_of_event_timer_isr:
  7606                           	opt callstack 0
  7607                           
  7608 ;; *************** function _usart_interrupt *****************
  7609 ;; Defined at:
  7610 ;;		line 136 in file "serial.c"
  7611 ;; Parameters:    Size  Location     Type
  7612 ;;		None
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;  a               1   12[COMRAM] unsigned char 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  1    wreg      void 
  7617 ;; Registers used:
  7618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7624 ;;      Params:         0       0       0       0       0       0       0       0       0
  7625 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7627 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7628 ;;Total ram usage:        1 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    3
  7631 ;; This function calls:
  7632 ;;		_not_full
  7633 ;;		_puts
  7634 ;;		i2_has_data
  7635 ;;		i2_pop
  7636 ;;		i2_push
  7637 ;; This function is called by:
  7638 ;;		_event_timer_isr
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           	psect	text58
  7643  0010EA                     __ptext58:
  7644                           	opt callstack 0
  7645  0010EA                     _usart_interrupt:
  7646                           	opt callstack 16
  7647                           
  7648                           ;serial.c: 138:     if (TXIE && TXIF) {
  7649                           
  7650                           ;incstack = 0
  7651  0010EA  B89D               	btfsc	3997,4,c	;volatile
  7652  0010EC  A89E               	btfss	3998,4,c	;volatile
  7653  0010EE  D012               	goto	i2l4012
  7654                           
  7655                           ;serial.c: 139:         TXIE = 0;
  7656  0010F0  989D               	bcf	3997,4,c	;volatile
  7657                           
  7658                           ;serial.c: 140:         if ( has_data(&outbound)) {
  7659  0010F2  0E5B               	movlw	low _outbound
  7660  0010F4  6E01               	movwf	i2has_data@buff,c
  7661  0010F6  0E02               	movlw	high _outbound
  7662  0010F8  6E02               	movwf	i2has_data@buff+1,c
  7663  0010FA  EC0F  F00D         	call	i2_has_data	;wreg free
  7664  0010FE  0900               	iorlw	0
  7665  001100  B4D8               	btfsc	status,2,c
  7666  001102  D008               	goto	i2l4012
  7667                           
  7668                           ;serial.c: 141:             TXREG = pop(&outbound);
  7669  001104  0E5B               	movlw	low _outbound
  7670  001106  6E01               	movwf	i2pop@buff,c
  7671  001108  0E02               	movlw	high _outbound
  7672  00110A  6E02               	movwf	i2pop@buff+1,c
  7673  00110C  ECA9  F007         	call	i2_pop	;wreg free
  7674  001110  6EAD               	movwf	4013,c	;volatile
  7675                           
  7676                           ;serial.c: 142:             TXIE = 1;
  7677  001112  889D               	bsf	3997,4,c	;volatile
  7678  001114                     i2l4012:
  7679                           
  7680                           ;serial.c: 145:     if (RCIE && RCIF) {
  7681  001114  AA9D               	btfss	3997,5,c	;volatile
  7682  001116  0012               	return	
  7683  001118  AA9E               	btfss	3998,5,c	;volatile
  7684  00111A  0012               	return	
  7685                           
  7686                           ;serial.c: 146:         if (OERR) {
  7687  00111C  A2AB               	btfss	4011,1,c	;volatile
  7688  00111E  D008               	goto	i2l4022
  7689                           
  7690                           ;serial.c: 147:             CREN = 0;
  7691  001120  98AB               	bcf	4011,4,c	;volatile
  7692                           
  7693                           ;serial.c: 148:             CREN = 1;
  7694  001122  88AB               	bsf	4011,4,c	;volatile
  7695                           
  7696                           ;serial.c: 149:              puts("serial overflow");
  7697  001124  0E49               	movlw	low STR_20
  7698  001126  6E09               	movwf	puts@str,c
  7699  001128  0E7F               	movlw	high STR_20
  7700  00112A  6E0A               	movwf	puts@str+1,c
  7701  00112C  ECA6  F00B         	call	_puts	;wreg free
  7702  001130                     i2l4022:
  7703                           
  7704                           ;serial.c: 151:         unsigned char a = RCREG;
  7705  001130  CFAE F00D          	movff	4014,usart_interrupt@a	;volatile
  7706                           
  7707                           ;serial.c: 152:         if (not_full(&inbound)) {
  7708  001134  0E57               	movlw	low _inbound
  7709  001136  6E01               	movwf	not_full@buff,c
  7710  001138  0E01               	movlw	high _inbound
  7711  00113A  6E02               	movwf	not_full@buff+1,c
  7712  00113C  ECB1  F00C         	call	_not_full	;wreg free
  7713  001140  0900               	iorlw	0
  7714  001142  B4D8               	btfsc	status,2,c
  7715  001144  0012               	return	
  7716                           
  7717                           ;serial.c: 153:             push(&inbound, a);
  7718  001146  0E57               	movlw	low _inbound
  7719  001148  6E01               	movwf	i2push@buff,c
  7720  00114A  0E01               	movlw	high _inbound
  7721  00114C  6E02               	movwf	i2push@buff+1,c
  7722  00114E  C00D  F003         	movff	usart_interrupt@a,i2push@d
  7723  001152  EC7B  F009         	call	i2_push	;wreg free
  7724  001156  0012               	return		;funcret
  7725  001158                     __end_of_usart_interrupt:
  7726                           	opt callstack 0
  7727                           
  7728 ;; *************** function i2_pop *****************
  7729 ;; Defined at:
  7730 ;;		line 27 in file "serial_buffer.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  buff            2    0[COMRAM] PTR struct .
  7733 ;;		 -> inbound(260), outbound(260), 
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;  pop             1    4[COMRAM] unsigned char 
  7736 ;; Return value:  Size  Location     Type
  7737 ;;                  1    wreg      unsigned char 
  7738 ;; Registers used:
  7739 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7745 ;;      Params:         2       0       0       0       0       0       0       0       0
  7746 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7747 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7748 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7749 ;;Total ram usage:        5 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; This function calls:
  7752 ;;		Nothing
  7753 ;; This function is called by:
  7754 ;;		_usart_interrupt
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text59
  7759  000F52                     __ptext59:
  7760                           	opt callstack 0
  7761  000F52                     i2_pop:
  7762                           	opt callstack 18
  7763                           
  7764                           ;serial_buffer.c: 28:     unsigned char d;;serial_buffer.c: 32:     if (buff->length == 
      +                          0) {
  7765                           
  7766                           ;incstack = 0
  7767  000F52  EE21 F002          	lfsr	2,258
  7768  000F56  5001               	movf	i2pop@buff,w,c
  7769  000F58  26D9               	addwf	fsr2l,f,c
  7770  000F5A  5002               	movf	i2pop@buff+1,w,c
  7771  000F5C  22DA               	addwfc	fsr2h,f,c
  7772  000F5E  50DE               	movf	postinc2,w,c
  7773  000F60  10DE               	iorwf	postinc2,w,c
  7774  000F62  A4D8               	btfss	status,2,c
  7775  000F64  D002               	goto	i2l484
  7776                           
  7777                           ;serial_buffer.c: 34:         return 0;
  7778  000F66  0E00               	movlw	0
  7779  000F68  0012               	return	
  7780  000F6A                     i2l484:
  7781                           
  7782                           ;serial_buffer.c: 37:     GIE = 0;
  7783  000F6A  9EF2               	bcf	4082,7,c	;volatile
  7784                           
  7785                           ;serial_buffer.c: 38:     d = buff->data[buff->start];
  7786  000F6C  EE21 F000          	lfsr	2,256
  7787  000F70  5001               	movf	i2pop@buff,w,c
  7788  000F72  26D9               	addwf	fsr2l,f,c
  7789  000F74  5002               	movf	i2pop@buff+1,w,c
  7790  000F76  22DA               	addwfc	fsr2h,f,c
  7791  000F78  CFDE F003          	movff	postinc2,??i2_pop
  7792  000F7C  CFDD F004          	movff	postdec2,??i2_pop+1
  7793  000F80  5003               	movf	??i2_pop,w,c
  7794  000F82  2401               	addwf	i2pop@buff,w,c
  7795  000F84  6ED9               	movwf	fsr2l,c
  7796  000F86  5004               	movf	??i2_pop+1,w,c
  7797  000F88  2002               	addwfc	i2pop@buff+1,w,c
  7798  000F8A  6EDA               	movwf	fsr2h,c
  7799  000F8C  50DF               	movf	indf2,w,c
  7800  000F8E  6E05               	movwf	i2pop@d,c
  7801                           
  7802                           ;serial_buffer.c: 39:     buff->length--;
  7803  000F90  EE21 F002          	lfsr	2,258
  7804  000F94  5001               	movf	i2pop@buff,w,c
  7805  000F96  26D9               	addwf	fsr2l,f,c
  7806  000F98  5002               	movf	i2pop@buff+1,w,c
  7807  000F9A  22DA               	addwfc	fsr2h,f,c
  7808  000F9C  06DE               	decf	postinc2,f,c
  7809  000F9E  0E00               	movlw	0
  7810  000FA0  5ADD               	subwfb	postdec2,f,c
  7811                           
  7812                           ;serial_buffer.c: 40:     buff->start = (buff->start + 1) % 256;
  7813  000FA2  EE21 F000          	lfsr	2,256
  7814  000FA6  5001               	movf	i2pop@buff,w,c
  7815  000FA8  26D9               	addwf	fsr2l,f,c
  7816  000FAA  5002               	movf	i2pop@buff+1,w,c
  7817  000FAC  22DA               	addwfc	fsr2h,f,c
  7818  000FAE  CFDE F003          	movff	postinc2,??i2_pop
  7819  000FB2  CFDD F004          	movff	postdec2,??i2_pop+1
  7820  000FB6  0E01               	movlw	1
  7821  000FB8  2603               	addwf	??i2_pop,f,c
  7822  000FBA  0E00               	movlw	0
  7823  000FBC  2204               	addwfc	??i2_pop+1,f,c
  7824  000FBE  0EFF               	movlw	255
  7825  000FC0  1603               	andwf	??i2_pop,f,c
  7826  000FC2  0E00               	movlw	0
  7827  000FC4  1604               	andwf	??i2_pop+1,f,c
  7828  000FC6  EE21 F000          	lfsr	2,256
  7829  000FCA  5001               	movf	i2pop@buff,w,c
  7830  000FCC  26D9               	addwf	fsr2l,f,c
  7831  000FCE  5002               	movf	i2pop@buff+1,w,c
  7832  000FD0  22DA               	addwfc	fsr2h,f,c
  7833  000FD2  C003  FFDE         	movff	??i2_pop,postinc2
  7834  000FD6  C004  FFDD         	movff	??i2_pop+1,postdec2
  7835                           
  7836                           ;serial_buffer.c: 41:     GIE = 1;
  7837  000FDA  8EF2               	bsf	4082,7,c	;volatile
  7838                           
  7839                           ;serial_buffer.c: 43:     return d;
  7840  000FDC  5005               	movf	i2pop@d,w,c
  7841  000FDE  0012               	return		;funcret
  7842  000FE0                     __end_ofi2_pop:
  7843                           	opt callstack 0
  7844                           
  7845 ;; *************** function i2_has_data *****************
  7846 ;; Defined at:
  7847 ;;		line 51 in file "serial_buffer.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;  buff            2    0[COMRAM] PTR struct .
  7850 ;;		 -> inbound(260), outbound(260), 
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;		None
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  1    wreg      unsigned char 
  7855 ;; Registers used:
  7856 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7862 ;;      Params:         2       0       0       0       0       0       0       0       0
  7863 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7865 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7866 ;;Total ram usage:        2 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; This function calls:
  7869 ;;		Nothing
  7870 ;; This function is called by:
  7871 ;;		_usart_interrupt
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text60
  7876  001A1E                     __ptext60:
  7877                           	opt callstack 0
  7878  001A1E                     i2_has_data:
  7879                           	opt callstack 18
  7880                           
  7881                           ;serial_buffer.c: 52:     return buff->length;
  7882                           
  7883                           ;incstack = 0
  7884  001A1E  EE21 F002          	lfsr	2,258
  7885  001A22  5001               	movf	i2has_data@buff,w,c
  7886  001A24  26D9               	addwf	fsr2l,f,c
  7887  001A26  5002               	movf	i2has_data@buff+1,w,c
  7888  001A28  22DA               	addwfc	fsr2h,f,c
  7889  001A2A  50DF               	movf	indf2,w,c
  7890  001A2C  0012               	return		;funcret
  7891  001A2E                     __end_ofi2_has_data:
  7892                           	opt callstack 0
  7893                           
  7894 ;; *************** function _puts *****************
  7895 ;; Defined at:
  7896 ;;		line 213 in file "serial.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  str             2    8[COMRAM] PTR const unsigned char 
  7899 ;;		 -> STR_20(16), 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  c               2   10[COMRAM] PTR const unsigned char 
  7902 ;;		 -> STR_20(16), 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  2    8[COMRAM] int 
  7905 ;; Registers used:
  7906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7912 ;;      Params:         2       0       0       0       0       0       0       0       0
  7913 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7915 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7916 ;;Total ram usage:        4 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    2
  7919 ;; This function calls:
  7920 ;;		i2_putch
  7921 ;; This function is called by:
  7922 ;;		_usart_interrupt
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text61
  7927  00174C                     __ptext61:
  7928                           	opt callstack 0
  7929  00174C                     _puts:
  7930                           	opt callstack 16
  7931                           
  7932                           ;serial.c: 214:     for ( const char * c = str; *c != 0; c++){
  7933                           
  7934                           ;incstack = 0
  7935  00174C  C009  F00B         	movff	puts@str,puts@c
  7936  001750  C00A  F00C         	movff	puts@str+1,puts@c+1
  7937  001754  D00A               	goto	i2l3664
  7938  001756                     i2l3660:
  7939                           
  7940                           ;serial.c: 215:         putch(*c);
  7941  001756  C00B  FFF6         	movff	puts@c,tblptrl
  7942  00175A  C00C  FFF7         	movff	puts@c+1,tblptrh
  7943  00175E                     	if	0	;tblptru may be non-zero
  7944  00175E                     	endif
  7945  00175E                     	if	0	;tblptru may be non-zero
  7946  00175E                     	endif
  7947  00175E  0008               	tblrd		*
  7948  001760  50F5               	movf	tablat,w,c
  7949  001762  ECEC  F00C         	call	i2_putch
  7950                           
  7951                           ;serial.c: 216:     }
  7952  001766  4A0B               	infsnz	puts@c,f,c
  7953  001768  2A0C               	incf	puts@c+1,f,c
  7954  00176A                     i2l3664:
  7955  00176A  C00B  FFF6         	movff	puts@c,tblptrl
  7956  00176E  C00C  FFF7         	movff	puts@c+1,tblptrh
  7957  001772                     	if	0	;tblptru may be non-zero
  7958  001772                     	endif
  7959  001772                     	if	0	;tblptru may be non-zero
  7960  001772                     	endif
  7961  001772  0008               	tblrd		*
  7962  001774  50F5               	movf	tablat,w,c
  7963  001776  0900               	iorlw	0
  7964  001778  B4D8               	btfsc	status,2,c
  7965  00177A  0012               	return	
  7966  00177C  D7EC               	goto	i2l3660
  7967  00177E                     __end_of_puts:
  7968                           	opt callstack 0
  7969                           
  7970 ;; *************** function i2_putch *****************
  7971 ;; Defined at:
  7972 ;;		line 209 in file "serial.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;  c               1    wreg     unsigned char 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  c               1    7[COMRAM] unsigned char 
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      void 
  7979 ;; Registers used:
  7980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7986 ;;      Params:         0       0       0       0       0       0       0       0       0
  7987 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7989 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7990 ;;Total ram usage:        1 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    1
  7993 ;; This function calls:
  7994 ;;		i2_push
  7995 ;; This function is called by:
  7996 ;;		_puts
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text62
  8001  0019D8                     __ptext62:
  8002                           	opt callstack 0
  8003  0019D8                     i2_putch:
  8004                           	opt callstack 16
  8005                           
  8006                           ;incstack = 0
  8007                           ;i2putch@c stored from wreg
  8008  0019D8  6E08               	movwf	i2putch@c,c
  8009                           
  8010                           ;serial.c: 210:     push(&outbound, c);
  8011  0019DA  0E5B               	movlw	low _outbound
  8012  0019DC  6E01               	movwf	i2push@buff,c
  8013  0019DE  0E02               	movlw	high _outbound
  8014  0019E0  6E02               	movwf	i2push@buff+1,c
  8015  0019E2  C008  F003         	movff	i2putch@c,i2push@d
  8016  0019E6  EC7B  F009         	call	i2_push	;wreg free
  8017  0019EA  0012               	return		;funcret
  8018  0019EC                     __end_ofi2_putch:
  8019                           	opt callstack 0
  8020                           
  8021 ;; *************** function i2_push *****************
  8022 ;; Defined at:
  8023 ;;		line 10 in file "serial_buffer.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;  buff            2    0[COMRAM] PTR struct .
  8026 ;;		 -> inbound(260), outbound(260), 
  8027 ;;  d               1    2[COMRAM] unsigned char 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;		None
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  1    wreg      void 
  8032 ;; Registers used:
  8033 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8039 ;;      Params:         3       0       0       0       0       0       0       0       0
  8040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8041 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8042 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8043 ;;Total ram usage:        7 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; This function calls:
  8046 ;;		Nothing
  8047 ;; This function is called by:
  8048 ;;		_usart_interrupt
  8049 ;;		i2_putch
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text63
  8054  0012F6                     __ptext63:
  8055                           	opt callstack 0
  8056  0012F6                     i2_push:
  8057                           	opt callstack 18
  8058                           
  8059                           ;serial_buffer.c: 14:     GIE = 0;
  8060                           
  8061                           ;incstack = 0
  8062  0012F6  9EF2               	bcf	4082,7,c	;volatile
  8063                           
  8064                           ;serial_buffer.c: 15:     buff->data[(buff->start + buff->length) % 256] = d;
  8065  0012F8  EE21 F002          	lfsr	2,258
  8066  0012FC  5001               	movf	i2push@buff,w,c
  8067  0012FE  26D9               	addwf	fsr2l,f,c
  8068  001300  5002               	movf	i2push@buff+1,w,c
  8069  001302  22DA               	addwfc	fsr2h,f,c
  8070  001304  CFDE F004          	movff	postinc2,??i2_push
  8071  001308  CFDD F005          	movff	postdec2,??i2_push+1
  8072  00130C  EE21 F000          	lfsr	2,256
  8073  001310  5001               	movf	i2push@buff,w,c
  8074  001312  26D9               	addwf	fsr2l,f,c
  8075  001314  5002               	movf	i2push@buff+1,w,c
  8076  001316  22DA               	addwfc	fsr2h,f,c
  8077  001318  CFDE F006          	movff	postinc2,??i2_push+2
  8078  00131C  CFDD F007          	movff	postdec2,??i2_push+3
  8079  001320  5004               	movf	??i2_push,w,c
  8080  001322  2606               	addwf	??i2_push+2,f,c
  8081  001324  5005               	movf	??i2_push+1,w,c
  8082  001326  2207               	addwfc	??i2_push+3,f,c
  8083  001328  0EFF               	movlw	255
  8084  00132A  1606               	andwf	??i2_push+2,f,c
  8085  00132C  0E00               	movlw	0
  8086  00132E  1607               	andwf	??i2_push+3,f,c
  8087  001330  5006               	movf	??i2_push+2,w,c
  8088  001332  2401               	addwf	i2push@buff,w,c
  8089  001334  6ED9               	movwf	fsr2l,c
  8090  001336  5007               	movf	??i2_push+3,w,c
  8091  001338  2002               	addwfc	i2push@buff+1,w,c
  8092  00133A  6EDA               	movwf	fsr2h,c
  8093  00133C  C003  FFDF         	movff	i2push@d,indf2
  8094                           
  8095                           ;serial_buffer.c: 16:     buff->length++;
  8096  001340  EE21 F002          	lfsr	2,258
  8097  001344  5001               	movf	i2push@buff,w,c
  8098  001346  26D9               	addwf	fsr2l,f,c
  8099  001348  5002               	movf	i2push@buff+1,w,c
  8100  00134A  22DA               	addwfc	fsr2h,f,c
  8101  00134C  2ADE               	incf	postinc2,f,c
  8102  00134E  0E00               	movlw	0
  8103  001350  22DD               	addwfc	postdec2,f,c
  8104                           
  8105                           ;serial_buffer.c: 17:     GIE = 1;
  8106  001352  8EF2               	bsf	4082,7,c	;volatile
  8107  001354  0012               	return		;funcret
  8108  001356                     __end_ofi2_push:
  8109                           	opt callstack 0
  8110                           
  8111 ;; *************** function _not_full *****************
  8112 ;; Defined at:
  8113 ;;		line 60 in file "serial_buffer.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  buff            2    0[COMRAM] PTR struct .
  8116 ;;		 -> inbound(260), 
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      unsigned char 
  8121 ;; Registers used:
  8122 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8128 ;;      Params:         2       0       0       0       0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8130 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8131 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8132 ;;Total ram usage:        4 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; This function calls:
  8135 ;;		Nothing
  8136 ;; This function is called by:
  8137 ;;		_usart_interrupt
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           	psect	text64
  8142  001962                     __ptext64:
  8143                           	opt callstack 0
  8144  001962                     _not_full:
  8145                           	opt callstack 18
  8146                           
  8147                           ;serial_buffer.c: 61:     return buff->length < 256;
  8148                           
  8149                           ;incstack = 0
  8150  001962  EE21 F002          	lfsr	2,258
  8151  001966  5001               	movf	not_full@buff,w,c
  8152  001968  26D9               	addwf	fsr2l,f,c
  8153  00196A  5002               	movf	not_full@buff+1,w,c
  8154  00196C  22DA               	addwfc	fsr2h,f,c
  8155  00196E  52DE               	movf	postinc2,f,c
  8156  001970  04DE               	decf	postinc2,w,c
  8157  001972  B0D8               	btfsc	status,0,c
  8158  001974  D002               	goto	i2u283_40
  8159  001976  0E01               	movlw	1
  8160  001978  0012               	return	
  8161  00197A                     i2u283_40:
  8162  00197A  0E00               	movlw	0
  8163  00197C  0012               	return		;funcret
  8164  00197E                     __end_of_not_full:
  8165                           	opt callstack 0
  8166                           
  8167                           	psect	text65
  8168  000000                     __ptext65:
  8169                           	opt callstack 0
  8170                           
  8171                           	psect	rparam
  8172  0000                     
  8173                           	psect	temp
  8174  00004C                     btemp:
  8175                           	opt callstack 0
  8176  00004C                     	ds	1
  8177  0000                     int$flags	set	btemp
  8178  0000                     wtemp8	set	btemp+1
  8179  0000                     ttemp5	set	btemp+1
  8180  0000                     ttemp6	set	btemp+4
  8181  0000                     ttemp7	set	btemp+8
  8182                           tosu	equ	0xFFF
  8183                           tosh	equ	0xFFE
  8184                           tosl	equ	0xFFD
  8185                           stkptr	equ	0xFFC
  8186                           pclatu	equ	0xFFB
  8187                           pclath	equ	0xFFA
  8188                           pcl	equ	0xFF9
  8189                           tblptru	equ	0xFF8
  8190                           tblptrh	equ	0xFF7
  8191                           tblptrl	equ	0xFF6
  8192                           tablat	equ	0xFF5
  8193                           prodh	equ	0xFF4
  8194                           prodl	equ	0xFF3
  8195                           indf0	equ	0xFEF
  8196                           postinc0	equ	0xFEE
  8197                           postdec0	equ	0xFED
  8198                           preinc0	equ	0xFEC
  8199                           plusw0	equ	0xFEB
  8200                           fsr0h	equ	0xFEA
  8201                           fsr0l	equ	0xFE9
  8202                           wreg	equ	0xFE8
  8203                           indf1	equ	0xFE7
  8204                           postinc1	equ	0xFE6
  8205                           postdec1	equ	0xFE5
  8206                           preinc1	equ	0xFE4
  8207                           plusw1	equ	0xFE3
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           bsr	equ	0xFE0
  8211                           indf2	equ	0xFDF
  8212                           postinc2	equ	0xFDE
  8213                           postdec2	equ	0xFDD
  8214                           preinc2	equ	0xFDC
  8215                           plusw2	equ	0xFDB
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8


Data Sizes:
    Strings     339
    Constant    0
    Data        31
    BSS         661
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      75
    BANK0           160     72     158
    BANK1           256     14      87
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printPumpState$2587	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), 
		 -> STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK1[32]), receiveMessage@message(BANK1[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK1[32]), receiveMessage@message(BANK1[10]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_22(CODE[15]), STR_21(CODE[3]), STR_18(CODE[15]), STR_17(CODE[18]), 
		 -> STR_16(CODE[18]), STR_15(CODE[15]), STR_14(CODE[14]), STR_13(CODE[10]), 
		 -> STR_12(CODE[11]), STR_11(CODE[12]), STR_10(CODE[12]), STR_9(CODE[12]), 
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), 
		 -> STR_4(CODE[21]), STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2287_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_22(CODE[15]), STR_21(CODE[3]), STR_18(CODE[15]), STR_17(CODE[18]), 
		 -> STR_16(CODE[18]), STR_15(CODE[15]), STR_14(CODE[14]), STR_13(CODE[10]), 
		 -> STR_12(CODE[11]), STR_11(CODE[12]), STR_10(CODE[12]), STR_9(CODE[12]), 
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), 
		 -> STR_4(CODE[21]), STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 31
		 -> STR_22(CODE[15]), STR_21(CODE[3]), STR_18(CODE[15]), STR_17(CODE[18]), 
		 -> STR_16(CODE[18]), STR_15(CODE[15]), STR_14(CODE[14]), STR_13(CODE[10]), 
		 -> STR_12(CODE[11]), STR_11(CODE[12]), STR_10(CODE[12]), STR_9(CODE[12]), 
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), 
		 -> STR_4(CODE[21]), STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), receiveMessage@message(BANK1[10]), 

    vfpfcnvrt@vp	PTR void  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), receiveMessage@message(BANK1[10]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), receiveMessage@message(BANK1[10]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), receiveMessage@message(BANK1[10]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    process_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_reset_pump@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_set_address_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_get_status_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), main@sendGetMessageBuffer(BANK1[10]), 

    process_set_zones_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    not_full@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM[260]), 

    has_data@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM[260]), outbound(BIGRAM[260]), 

    pop@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM[260]), outbound(BIGRAM[260]), 

    push@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM[260]), outbound(BIGRAM[260]), 

    output_message@message	PTR unsigned char  size(2) Largest target is 10
		 -> outputMessage(BANK0[10]), 

    puts@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_20(CODE[16]), 

    puts@c	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_20(CODE[16]), 

    sp__receiveMessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    main@message	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    PumpStateMappings	PTR unsigned char [7] size(2) Largest target is 31
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), 
		 -> STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    S185timer_event$callback	PTR FTN()void  size(2) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 

    timer_events.callback	PTR FTN()void  size(2) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 


Critical Paths under _main in COMRAM

    _start_pump->_enable_callback
    _start_main->_enable_callback
    _standby->_enable_callback
    _shutdown->_enable_callback
    _serial_process_loop->_has_data
    _pump_run->_enable_callback
    _monitor_pump_run->_enable_callback
    _process_message->_process_set_zones_message
    _process_set_zones_message->_output_message
    _process_set_address_message->_output_message
    _process_reset_pump->_output_message
    _process_get_status_message->_output_message
    _setBaseMessage->_chartox
    _output_message->_putch
    _process_event_timer->_EventFaultStateLEDCallBack
    _EventLowWaterLevelCallBack->_enable_callback
    _EventLowFogPressureCallBack->_enable_callback
    _clear_callback_for_shutdown->_clear_callback
    _EventIdleTimeoutCallBack->_enable_callback
    _EventFaultStateLEDCallBack->_enable_callback
    _vfpfcnvrt->_dtoa
    _stoa->_fputc
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_push
    _monitor_water_pressure->_enable_callback
    _init_event_timer->_enable_callback

Critical Paths under _event_timer_isr in COMRAM

    _event_timer_isr->_usart_interrupt
    _usart_interrupt->_puts
    _puts->i2_putch
    i2_putch->i2_push

Critical Paths under _main in BANK0

    _main->_receiveMessage
    _receiveMessage->_printf
    _printPumpState->_printf
    _printFaultState->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa

Critical Paths under _event_timer_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _event_timer_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _event_timer_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _event_timer_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _event_timer_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _event_timer_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _event_timer_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _event_timer_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0  134543
                                             70 BANK0      2     2      0
                                              0 BANK1     14    14      0
                  _checkIfShoudReset
                     _clear_callback
                    _enable_callback
                               _init
                   _init_event_timer
             _monitor_water_pressure
                    _printFaultState
                     _printPumpState
                             _printf
                _process_event_timer
         _process_get_status_message
                    _process_message
                           _pump_run
                     _receiveMessage
                            _ser_int
                _serial_process_loop
                           _shutdown
                            _standby
                         _start_main
                         _start_pump
                         _toggleLeds
 ---------------------------------------------------------------------------------
 (1) _toggleLeds                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_pump                                           0     0      0    2256
                     _clear_callback
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _start_main                                           0     0      0    4450
                     _clear_callback
                    _enable_callback
                   _monitor_pump_run
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    2225
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _shutdown                                             0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _serial_process_loop                                  0     0      0     266
                           _has_data
 ---------------------------------------------------------------------------------
 (1) _receiveMessage                                       3     1      2   22785
                                             67 BANK0      3     1      2
                           _has_data
                                _pop
                             _printf
 ---------------------------------------------------------------------------------
 (2) _pop                                                  5     3      2     455
                                             19 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _has_data                                             2     0      2     266
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _pump_run                                             0     0      0    4450
                     _clear_callback
                    _enable_callback
                   _monitor_pump_run
 ---------------------------------------------------------------------------------
 (2) _monitor_pump_run                                     0     0      0    2225
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _process_message                                      6     4      2   10098
                                             36 COMRAM     6     4      2
         _process_get_status_message
                 _process_reset_pump
        _process_set_address_message
          _process_set_zones_message
 ---------------------------------------------------------------------------------
 (2) _process_set_zones_message                            5     3      2    2107
                                             31 COMRAM     5     3      2
                     _output_message
                     _setBaseMessage
                            _xtochar
 ---------------------------------------------------------------------------------
 (3) _xtochar                                              1     1      0     279
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _process_set_address_message                          3     1      2    1800
                                             31 COMRAM     3     1      2
                     _output_message
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (2) _process_reset_pump                                   2     0      2    3960
                                             31 COMRAM     2     0      2
                     _output_message
                          _resetPump
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (2) _process_get_status_message                           2     0      2    1856
                                             31 COMRAM     2     0      2
                     _output_message
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (3) _setBaseMessage                                       6     5      1     617
                                             20 COMRAM     6     5      1
                            _chartox
 ---------------------------------------------------------------------------------
 (4) _chartox                                              1     1      0      93
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _output_message                                       4     2      2    1028
                                             27 COMRAM     4     2      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _process_event_timer                                  3     3      0    9296
                                             29 COMRAM     3     3      0
          _EventDumpSolenoidCallBack *
         _EventFaultStateLEDCallBack *
           _EventIdleTimeoutCallBack *
        _EventLowFogPressureCallBack *
         _EventLowWaterLevelCallBack *
      _EventLowWaterPressureCallBack *
_EventLowWaterPressureDebounceCallBa *
            _EventPODebounceCallBack *
     _EventRunSignalDebounceCallBack *
 ---------------------------------------------------------------------------------
 (2) _EventRunSignalDebounceCallBack                       0     0      0      31
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventPODebounceCallBack                              0     0      0      31
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterPressureDebounceCallBack                1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterPressureCallBack                        1     1      0      31
                                             20 COMRAM     1     1      0
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterLevelCallBack                           0     0      0    2225
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventLowFogPressureCallBack                          0     0      0    2225
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _clear_callback_for_shutdown                          0     0      0      31
                     _clear_callback
 ---------------------------------------------------------------------------------
 (2) _EventIdleTimeoutCallBack                             0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventFaultStateLEDCallBack                           7     7      0    2305
                                             22 COMRAM     7     7      0
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventDumpSolenoidCallBack                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printPumpState                                       0     0      0   21906
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printFaultState                                      0     0      0   21906
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              10     4      6   21906
                                             57 BANK0     10     4      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   20547
                                             49 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    34      6   20047
                                             28 BANK0     21    15      6
                               _ctoa
                               _dtoa
                              _fputc
                               _stoa
 ---------------------------------------------------------------------------------
 (5) _stoa                                                22    18      4    3115
                                             36 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    7889
                                             54 COMRAM     8     8      0
                                              0 BANK0     28    18     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             37 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                             19 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                             19 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 7     4      3    5902
                                             54 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    5623
                                             43 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     310
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    2460
                                             36 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                9     5      4    1960
                                             27 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0     476
                                             26 COMRAM     1     1      0
                               _push
 ---------------------------------------------------------------------------------
 (8) _push                                                 7     4      3     445
                                             19 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _monitor_water_pressure                               1     1      0    2225
                                             22 COMRAM     1     1      0
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (3) _clear_callback                                       1     1      0      31
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkIfShoudReset                                    0     0      0    2194
                          _resetPump
 ---------------------------------------------------------------------------------
 (3) _resetPump                                            0     0      0    2194
                               _init
                   _init_event_timer
 ---------------------------------------------------------------------------------
 (4) _init_event_timer                                     0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _enable_callback                                      3     1      2    2194
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _init                                                 0     0      0       0
                            _ser_int
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _event_timer_isr                                     6     6      0     944
                                             13 COMRAM     6     6      0
                    _usart_interrupt
 ---------------------------------------------------------------------------------
 (12) _usart_interrupt                                     1     1      0     944
                                             12 COMRAM     1     1      0
                           _not_full
                               _puts
                         i2_has_data
                              i2_pop
                             i2_push
 ---------------------------------------------------------------------------------
 (13) i2_pop                                               5     3      2     181
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (13) i2_has_data                                          2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) _puts                                                4     2      2     380
                                              8 COMRAM     4     2      2
                            i2_putch
 ---------------------------------------------------------------------------------
 (14) i2_putch                                             1     1      0     236
                                              7 COMRAM     1     1      0
                             i2_push
 ---------------------------------------------------------------------------------
 (13) i2_push                                              7     4      3     214
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (13) _not_full                                            4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkIfShoudReset
     _resetPump
       _init
         _ser_int
       _init_event_timer
         _enable_callback
   _clear_callback
   _enable_callback
   _init
     _ser_int
   _init_event_timer
     _enable_callback
   _monitor_water_pressure
     _clear_callback
     _enable_callback
   _printFaultState
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _fputc
             _putch
               _push
           _stoa
             _fputc
               _putch
                 _push
             _strlen
   _printPumpState
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _fputc
             _putch
               _push
           _stoa
             _fputc
               _putch
                 _push
             _strlen
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _push
             _fputs
               _fputc
                 _putch
                   _push
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _push
             _fputs
               _fputc
                 _putch
                   _push
             _strlen
         _fputc
           _putch
             _push
         _stoa
           _fputc
             _putch
               _push
           _strlen
   _process_event_timer
     _EventDumpSolenoidCallBack *
     _EventFaultStateLEDCallBack *
       _enable_callback
     _EventIdleTimeoutCallBack *
       _enable_callback
     _EventLowFogPressureCallBack *
       _clear_callback_for_shutdown
         _clear_callback
       _enable_callback
     _EventLowWaterLevelCallBack *
       _clear_callback_for_shutdown
         _clear_callback
       _enable_callback
     _EventLowWaterPressureCallBack *
       _clear_callback_for_shutdown
         _clear_callback
     _EventLowWaterPressureDebounceCallBack *
     _EventPODebounceCallBack *
       _clear_callback_for_shutdown
         _clear_callback
     _EventRunSignalDebounceCallBack *
       _clear_callback_for_shutdown
         _clear_callback
   _process_get_status_message
     _output_message
       _putch
         _push
     _setBaseMessage
       _chartox
   _process_message
     _process_get_status_message
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
     _process_reset_pump
       _output_message
         _putch
           _push
       _resetPump
         _init
           _ser_int
         _init_event_timer
           _enable_callback
       _setBaseMessage
         _chartox
     _process_set_address_message
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
     _process_set_zones_message
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
       _xtochar
   _pump_run
     _clear_callback
     _enable_callback
     _monitor_pump_run
       _clear_callback
       _enable_callback
   _receiveMessage
     _has_data
     _pop
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _fputc
             _putch
               _push
           _stoa
             _fputc
               _putch
                 _push
             _strlen
   _ser_int
   _serial_process_loop
     _has_data
   _shutdown
     _enable_callback
   _standby
     _clear_callback
     _enable_callback
   _start_main
     _clear_callback
     _enable_callback
     _monitor_pump_run
       _clear_callback
       _enable_callback
   _start_pump
     _clear_callback
     _clear_callback_for_shutdown
       _clear_callback
     _enable_callback
   _toggleLeds

 _event_timer_isr (ROOT)
   _usart_interrupt
     _not_full
     _puts
       i2_putch
         i2_push
     i2_has_data
     i2_pop
     i2_push

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     208      21       25.4%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      E      57       7       34.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     140      20        0.0%
DATA                 0      0     348       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Feb 04 15:03:14 2025

                   __size_of_process_reset_pump 0028                                              l20 0A00  
                                            l22 0A86                                              l23 0A22  
                                            l52 1526                                              l67 170E  
                                   __CFG_BOR$ON 000000                                     __CFG_BORV$1 000000  
                                  __CFG_CP0$OFF 000000                                    __CFG_CP1$OFF 000000  
                                  __CFG_CP2$OFF 000000                                    __CFG_CP3$OFF 000000  
                                   __CFG_LVP$ON 000000                        _EventIdleTimeoutCallBack 1500  
                                           l301 0DA2                                             l311 0E12  
                                           l308 0DE8                                             l606 15EA  
                                           l295 178E                                             l632 0D00  
                                           l633 0D16                                             l458 14B0  
                                           l484 0EDC                                             l581 13C2  
                                           l726 0E5C                                             l583 13E4  
                                           l744 0344                                             l746 034C  
                                           l773 07F0                                             _GIE 007F97  
                                  __CFG_CPB$OFF 000000                                    __CFG_CPD$OFF 000000  
                                           _TX9 007D66                                             _abs 171A  
                                           _pad 0E2E                                             _pop 0EC4  
                               ?_setBaseMessage 0015                                             prod 000FF3  
                                           tosl 000FFD                                             wreg 000FE8  
                                    i2_has_data 1A1E                                    __CFG_WDT$OFF 000000  
                                          ?_abs 0026                                            l1482 1742  
                                          l4300 063E                                            l5020 0B7A  
                                          l4222 1666                                            l5102 0C64  
                                          l4208 11DC                                            l4320 091C  
                                          l4312 08DE                                            l4400 0366  
                                          l5104 0C72                                            l5112 0C9C  
                                          l4218 1650                                            l4226 17E4  
                                          l4242 0E54                                            l4322 0930  
                                          l5106 0C80                                            l4228 17E8  
                                          l4252 0EAA                                            l4244 0E66  
                                          l4332 098E                                            l4316 0902  
                                          l4404 0376                                            l5028 0B80  
                                          l5108 0C8E                                            l5132 13D2  
                                          l5204 0D5E                                            l5300 071C  
                                          l4238 0E46                                            l4414 0470  
                                          l5214 0D82                                            l4248 0E7E  
                                          l4280 0592                                            l4336 09B4  
                                          l4328 0978                                            l5064 0AEC  
                                          l5048 0AC6                                            l5216 0D88  
                                          l5304 0722                                            l4370 14C4  
                                          l4282 05A6                                            l4274 056C  
                                          l4434 04D6                                            l4450 07B4  
                                          l5170 0CF4                                            l5306 075E  
                                          l4372 14D0                                            l4292 0602  
                                          l4268 0544                                            l4460 0806  
                                          l4700 1630                                            l5316 0782  
                                          l4438 04EE                                            l5078 0B2E  
                                          ?_pad 002C                                            l4296 0618  
                                          l4464 081E                                            l4624 01CA  
                                          l4608 00B6                                            l5280 06F0  
                                          l4386 0328                                            l4482 0894  
                                          l4474 0862                                            l4642 0280  
                                          l4618 016A                                            l5194 0D3A  
                                          l5290 070A                                            l5266 06C0  
                                          l5258 0696                                            l4468 083C  
                                          l4636 0244                                            l4628 01D6  
                                          l4652 029C                                            l4708 1642  
                                          l5292 0710                                            l4478 087C  
                                          l4646 028C                                            l4742 1422  
                                          l4830 186A                                            l4744 1448  
                                          l4672 1476                                            l5288 0704  
                                          l4690 161E                                            l4906 0E06  
                                          l5298 0716                                            l4780 0A54  
                                          l4676 148C                                            l4588 19BE  
                                          l4782 0A5C                                            l4776 0A42  
                                          l4784 0A66                                            l4954 16AE  
                                          l4794 0A98                                            l4786 0A6E  
                                          l4778 0A4A                                            l4884 0DBC  
                                          l4894 0DDA                                            ?_pop 0014  
                                          STR_1 7F96                                            STR_2 7F59  
                                          STR_3 7EE7                                            STR_4 7EFF  
                                          STR_5 7EAB                                            STR_6 7F38  
                                          STR_7 7F87                                            STR_8 7FA5  
                                          STR_9 7FC2                                            _CREN 007D5C  
                                          _T0CS 007EAD                                            u4010 08A8  
                                          u4110 149C                                            u5001 066A  
                                          u4060 00EA                                            u4205 1038  
                                          u4310 0A38                                            u3530 11D4  
                                          u4410 1932                                            u3620 1728  
                                          u3550 121C                                            u4318 0A3A  
                                          u3730 0934                                            u4370 16C0  
                                          u3651 0572                                            u4195 0FFC  
                                          _PEIE 007F96                                            u3820 033A  
                                          u4428 1934                                            u4460 0D9A  
                                          u4700 0ABA                                            u4630 1902  
                                          u4550 1686                                            u3670 05AA  
                                          u3910 04C0                                            u4560 1692  
                                          u4552 1688                                            u3840 0360  
                                          u4562 1694                                            u3850 0480  
                                          u3931 0794                                            _RCIE 007CED  
                                          u3780 02FA                                            u4388 16C2  
                                          u4740 0B24                                            _RCIF 007CF5  
                                          u3870 04A2                                            u3790 02FC  
                                          u4830 13F0                                            u3871 04A0  
                                          u3880 04B0                                            u4680 0C22  
                                          u3890 04B4                                            u4770 0C52  
                                          u3980 0832                                            u4678 0C02  
                                          u4679 0C16                                            _OERR 007D59  
                                          _RBPU 007F8F                                            _SPEN 007D5F  
                                          _TRMT 007D61                                            _TXIE 007CEC  
                                          _TXIF 007CF4                                            _TXEN 007D65  
                                          _SYNC 007D64                                     main@message 0153  
                                          abs@a 0026                                            _dbuf 0100  
                                          _ctoa 14B2                                            _main 0660  
                                          _dtoa 02D0                                            _init 106C  
                                          _prec 0041                                            _nout 00A8  
                                          pad@i 0033                                            pad@p 0030  
                                          fsr1h 000FE2                                            fsr2h 000FDA  
                                          indf2 000FDF                                            fsr1l 000FE1  
                                          pad@w 0035                                            fsr2l 000FD9  
                                          _push 1296                                            _stoa 078A  
                                          btemp 004C                                            _puts 174C  
                                          pop@d 0018                                            prodl 000FF3  
                                          start 000E                                   __CFG_IESO$OFF 000000  
            __size_of_EventDumpSolenoidCallBack 000A                                 _event_timer_isr 0008  
                          process_event_timer@i 0020                                 __end_ofi2_putch 19EC  
                                 __CFG_MCLRE$ON 000000                        ??_monitor_water_pressure 0017  
                                  ___param_bank 000000                 ??_EventLowWaterPressureCallBack 0015  
                                         ??_abs 0028                                           ??_pad 0032  
                                         ??_pop 0016                                   __CFG_PLLDIV$1 000000  
                              ?_usart_interrupt 0001                                  __CFG_CCP2MX$ON 000000  
                               __end_of___aodiv 0660                                           ?_ctoa 0037  
                                         ?_main 0001                                           ?_dtoa 00B6  
                               __end_of___aomod 09D6                                           ?_init 0001  
                                         STR_10 7FDA                                           STR_11 7FCE  
                                         STR_12 7FE6                                           STR_20 7F49  
                                         STR_21 7FFB                                           STR_13 7FF1  
                                         STR_14 7FB4                                           STR_22 7F69  
                                         STR_16 7F14                                           STR_17 7F26  
                                         STR_18 7F78                                           STR_19 7ECA  
                                         ?_push 0014                                           ?_stoa 0025  
                                         ?_puts 0009                                           _IRCF0 007E9C  
                                         _IRCF1 007E9D                                           _IRCF2 007E9E  
                                         _PCFG3 007E0B                                           i2l484 0F6A  
                                         _RCREG 000FAE                                           _RCSTA 000FAB  
                                  vfpfcnvrt@fmt 00D4                                           _SPBRG 000FAF  
                                         _PORTA 000F80                                           _PORTB 000F81  
                                         _PORTD 000F83                                   __CFG_USBDIV$1 000000  
                                         _TRISA 000F92                                           _TRISB 000F93  
                                         _TRISD 000F95                                           _TXREG 000FAD  
                                         _TXSTA 000FAC                                   __CFG_PWRT$OFF 000000  
                                         i2_pop 0F52                                 __end_of_chartox 19C4  
                                 __CFG_WRT0$OFF 000000                                   __CFG_WRT1$OFF 000000  
                                 __CFG_WRT2$OFF 000000                                   __CFG_WRT3$OFF 000000  
                                __CFG_EBTR0$OFF 000000                                  __CFG_FCMEN$OFF 000000  
                                __CFG_EBTR1$OFF 000000                                  __CFG_EBTR2$OFF 000000  
                                __CFG_EBTR3$OFF 000000                                   __CFG_WRTB$OFF 000000  
                                 __CFG_WRTC$OFF 000000                                   __CFG_WRTD$OFF 000000  
                                __CFG_EBTRB$OFF 000000                         __size_of_clear_callback 0018  
                                         _flags 0043                                 _enable_callback 1546  
                                         _fputc 11C4                                           _fputs 1646  
                         receiveMessage@message 0120                                           pad@fp 002C  
                                         _width 003F                                           ctoa@c 0039  
                                         _state 004B                                           _putch 19C4  
                                         ctoa@w 003A                                           dtoa@d 00B8  
                                         dtoa@i 00D0                                           dtoa@n 00C8  
                                         dtoa@p 00C2                                           dtoa@s 00C6  
                                         dtoa@w 00C4                                           _zones 0045  
                      __size_of_printFaultState 0002                                 __end_of_ser_int 18A0  
                                         pclath 000FFA                                           tablat 000FF5  
                                         plusw1 000FE3                                           plusw2 000FDB  
                                         push@d 0016                                 __end_of_standby 140E  
                                         stoa@i 0031                                           stoa@l 0039  
                                         stoa@p 0037                                           stoa@s 0027  
                                         stoa@w 0033                                           puts@c 000B  
                                         ttemp5 004D                                           ttemp6 0050  
                                         ttemp7 0054                                           status 000FD8  
                                         wtemp8 004D                                  __CFG_ICPRT$OFF 000000  
                           _process_event_timer 0B76                                 __end_of_xtochar 1646  
                  ?_clear_callback_for_shutdown 0001                               receiveMessage@len 00AA  
                                i2has_data@buff 0001                                 __initialization 1230  
                                  __end_of_ctoa 1500                                    __end_of_main 078A  
                                  __end_of_dtoa 0518                                    __end_of_init 10EA  
                                  __end_of_push 12F6                                    __end_of_stoa 08B2  
                                  __end_of_puts 177E                                      i2push@buff 0001  
                                        ??_ctoa 003A                                          ??_main 00FC  
                                        ??_dtoa 0037                                          ??_init 0014  
                                        ??_push 0017                                          ??_stoa 0029  
                                        ??_puts 000B                            ?_process_event_timer 0001  
                                 __activetblptr 000002                                          ?i2_pop 0001  
                                   ?i2_has_data 0001                                          _ADCON1 000FC1  
                                        ?_fputc 001C                                          ?_fputs 0025  
                                        ?_putch 0001                                          i2l4012 1114  
                                        i2l4022 1130                                          i2l4152 15AE  
                                        i2l3660 1756                                          i2l3664 176A  
                       __end_of_event_timer_isr 15CE                                          _TMR0IE 007F95  
                                        _TMR0IF 007F92                                       ??i2_putch 0008  
                             ?_monitor_pump_run 0001                                          _TRISC6 007CA6  
                                        _TRISC7 007CA7                                   _outputMessage 00AC  
                                        i2_push 12F6                              ??_monitor_pump_run 0017  
                                        i2pop@d 0005                                __end_of_has_data 1A0E  
                                __CFG_XINST$OFF 000000                     __end_of_serial_process_loop 1998  
                                  vfprintf@cfmt 00ED                 __size_of_monitor_water_pressure 0038  
                              ??_printPumpState 003F                                       ??___aodiv 0024  
                                     ??___aomod 0024                                  __CFG_STVREN$ON 000000  
                                        clear_0 1258                                          clear_1 126A  
                                        clear_2 1276                                          clear_3 1282  
                                     ??_chartox 0014                                          _printf 182C  
                                        pad@buf 002E                         __size_of_output_message 004E  
                                        ctoa@fp 0037                           ??_process_event_timer 001E  
                   ?_EventLowWaterLevelCallBack 0001           __end_of_EventLowWaterPressureCallBack 16E8  
        __size_of_EventLowWaterPressureCallBack 0032                   _EventLowWaterPressureCallBack 16B6  
                                        dtoa@fp 00B6                                          _strlen 17DA  
          process_set_address_message@inmessage 0020                         __end_of_enable_callback 158A  
                                        fputc@c 001C                                          fputs@c 0029  
                                        fputs@i 002A                                          fputs@s 0025  
                              __end_of_not_full 197E                     ??_process_set_zones_message 0022  
                                  __mediumconst 7EAA                                          tblptrh 000FF7  
                                     ??_ser_int 0014                                          tblptrl 000FF6  
                                        tblptru 000FF8                               _checkIfShoudReset 18E8  
                              __end_of_shutdown 1962                                          stoa@cp 0035  
                                        stoa@fp 0025                                          putch@c 001B  
                                     ??_standby 0017                                __end_of_vfprintf 1464  
                              __end_of_pump_run 17AE                                ??_receiveMessage 003F  
                            ?_checkIfShoudReset 0001                                       ??_xtochar 0014  
                                    __accesstop 0060                         __end_of__initialization 1288  
                               __CFG_PBADEN$OFF 000000                        ?_EventPODebounceCallBack 0001  
                      main@sendGetMessageBuffer 0149                                   ___rparam_used 000001  
                           ??_checkIfShoudReset 0017                               ??_printFaultState 003F  
                                 __end_ofi2_pop 0FE0                      ??_EventIdleTimeoutCallBack 0017  
                                __pcstackCOMRAM 0001                                    __pidataBANK1 1908  
                           __size_ofi2_has_data 0010                                   __end_of_fputc 1230  
                  ??_EventFaultStateLEDCallBack 0017                                   __end_of_fputs 167E  
                              ??_setBaseMessage 0016                       __size_of_init_event_timer 005E  
                                 __end_of_putch 19D8                                  _inIdleDumpHour 004A  
                     __end_of_checkIfShoudReset 1908                                         ??i2_pop 0003  
          __size_of_clear_callback_for_shutdown 002C                                  _clear_callback 1998  
                        _monitor_water_pressure 167E                        __size_of_process_message 00B2  
                                       ??_fputc 0020                                         ??_fputs 0029  
                                       ??_putch 001B                                      __pbssBANK0 0060  
                                    __pbssBANK1 0100                                ?_event_timer_isr 0001  
                     setBaseMessage@messageType 0019                    ??_process_get_status_message 0022  
                     _process_set_zones_message 1158                                         ?i2_push 0001  
                    __end_of_process_reset_pump 182C             __end_of_EventLowFogPressureCallBack 171A  
                   _EventLowFogPressureCallBack 16E8                              __size_of_resetPump 000A  
                                       ?_printf 00EF                                         ?_strlen 0014  
                              ?_enable_callback 0014                        process_message@inmessage 0025  
                        __end_of_clear_callback 19B0                              __size_of_vfpfcnvrt 02BE  
                                     ?_has_data 0014             __size_of_process_get_status_message 0024  
               __end_of_EventPODebounceCallBack 19FE                                 __CFG_VREGEN$OFF 000000  
                                       i2_putch 19D8                                         i2push@d 0003  
           __size_of_EventLowWaterLevelCallBack 0026                                 __size_ofi2_push 0060  
                                       __Hparam 0000                                         __Lparam 0000  
                                     ?_not_full 0001                                         ___aodiv 0518  
                                       ___aomod 08B2                                       ?_shutdown 0001  
                                     ?_vfprintf 00E7                                       ?_pump_run 0001  
                                       __pcinit 1230                                         _chartox 19B0  
                                _output_message 1464                                         __ramtop 0800  
                                       __ptext0 0660                                         __ptext1 1A42  
                                       __ptext2 0CDE                                         __ptext3 15CE  
                                       __ptext4 13B4                                         __ptext5 1946  
                                       __ptext6 197E                                         __ptext7 0AA8  
                                       __ptext8 0EC4                                         __ptext9 19FE  
                               __size_of_printf 0028                                 __size_of_strlen 002A  
                                       _inbound 0157                                    __size_of_abs 0032  
                                  __size_of_pad 0096                                 ?_clear_callback 0001  
                                  __size_of_pop 008E                      __size_of_checkIfShoudReset 0020  
                                       _ser_int 187A                        __size_of_usart_interrupt 006E  
                                  ??i2_has_data 0003                                      ??_has_data 0016  
                                       _standby 13B4                          clear_callback@callback 0014  
                                __pintcode_body 158A                            end_of_initialization 1288  
                                       _xtochar 160A                                         fputc@fp 001E  
                             __end_of_resetPump 1A42                                   __Lmediumconst 7EAA  
                                       int_func 158A                                         fputs@fp 0027  
                             ??_process_message 0027                                         pop@buff 0014  
                  ?_process_set_address_message 0020                                      ??_not_full 0003  
                             __end_of_vfpfcnvrt 02D0                                         postdec1 000FE5  
                                       postdec2 000FDD              __end_of_EventFaultStateLEDCallBack 0AA8  
                    _EventFaultStateLEDCallBack 09D6                                         postinc0 000FEE  
                                       postinc1 000FE6                                         postinc2 000FDE  
                        __end_of_output_message 14B2                      ?_EventDumpSolenoidCallBack 0001  
                                    ??_shutdown 0017                                         puts@str 0009  
                                    ??_vfprintf 003F                                      ??_pump_run 0017  
                              _init_event_timer 1356                              __end_ofi2_has_data 1A2E  
                              usart_interrupt@a 000D                                         strlen@a 0016  
                                       strlen@s 0014                       __size_of_monitor_pump_run 00A0  
                                     _PORTAbits 000F80                                       _PORTBbits 000F81  
                                    _toggleLeds 1A42                                       _TRISAbits 000F92  
                                     _TRISBbits 000F93                                 _printFaultState 1A48  
                                    _start_main 15CE                                      _start_pump 0CDE  
            __end_of_process_get_status_message 18E8                      _process_get_status_message 18C4  
                       enable_callback@callback 0016                ??_EventRunSignalDebounceCallBack 0015  
               ?_EventRunSignalDebounceCallBack 0001                   ??_process_set_address_message 0022  
                                __end_ofi2_push 1356                                 receiveMessage@c 00FB  
                   __end_of_process_event_timer 0C2C                                 ?_output_message 001C  
                                   vfpfcnvrt@ap 00D6                                     vfpfcnvrt@cp 00E2  
                                   vfpfcnvrt@fp 00D2                                     vfpfcnvrt@ll 00DA  
             __end_of_EventDumpSolenoidCallBack 1A38                                     vfpfcnvrt@vp 00E4  
            __size_of_process_set_zones_message 006C                    __size_of_serial_process_loop 001A  
              __size_of_EventPODebounceCallBack 0012                               _PumpStateMappings 012A  
                       ?_monitor_water_pressure 0001                                       i2pop@buff 0001  
                                __end_of_printf 1854                                  __end_of_strlen 1804  
                           start_initialization 1230   __end_of_EventLowWaterPressureDebounceCallBack 1946  
__size_of_EventLowWaterPressureDebounceCallBack 001E         ??_EventLowWaterPressureDebounceCallBack 0014  
        ?_EventLowWaterPressureDebounceCallBack 0001           _EventLowWaterPressureDebounceCallBack 1928  
                                   __end_of_abs 174C                                     __end_of_pad 0EC4  
                                   __end_of_pop 0F52                     process_reset_pump@inmessage 0020  
                             ??_usart_interrupt 000D                                        ??i2_push 0004  
           __end_of_clear_callback_for_shutdown 17DA                     _clear_callback_for_shutdown 17AE  
                                   vfprintf@fmt 00E9                                     __pdataBANK1 012A  
                              __CFG_LPT1OSC$OFF 000000                   ??_clear_callback_for_shutdown 0015  
                __end_of_monitor_water_pressure 16B6                                        ??_printf 003F  
                            _process_reset_pump 1804               __end_of_process_set_zones_message 11C4  
                                      ??_strlen 0016            __size_of_EventLowFogPressureCallBack 0032  
                       __end_of_printFaultState 1A4A                                     __pbssBIGRAM 0157  
          __size_of_process_set_address_message 0024                                     ?_toggleLeds 0001  
                       __size_of_printPumpState 0002                                     __pbssCOMRAM 003F  
             __size_of_EventIdleTimeoutCallBack 0046                                   __pcstackBANK0 00B6  
                                 __pcstackBANK1 0149                                ___aodiv@dividend 0014  
                     ?_EventIdleTimeoutCallBack 0001                             ?_process_reset_pump 0020  
                                   ?_start_main 0001                               __size_of_has_data 0010  
                                   ?_start_pump 0001                                        ?i2_putch 0001  
                                     _dtoa$1815 00C0                         __size_of_receiveMessage 00CE  
                          ??_process_reset_pump 0022                        __size_of_event_timer_isr 15C6  
                                     __pintcode 0008                                   __pmediumconst 7EAA  
                                      ?___aodiv 0014                                        ?___aomod 0014  
                              ___aodiv@quotient 0026                               __size_of_not_full 001C  
                              ??_clear_callback 0014                                _monitor_pump_run 0D8E  
                                      ?_chartox 0001                                 setBaseMessage@v 001A  
                             __size_of_shutdown 001C                               __size_of_vfprintf 0056  
                             __size_of_pump_run 0030                                  __size_ofi2_pop 008E  
                               _process_message 0C2C                                        ?_ser_int 0001  
                         output_message@message 001C                         __size_of_setBaseMessage 008C  
                                      ?_standby 0001                                  __size_of_fputc 006C  
                                __size_of_fputs 0038                                  __size_of_putch 0014  
                      __size_of_enable_callback 0044                                        ?_xtochar 0001  
                      __end_of_init_event_timer 13B4                                     _fault_flags 0047  
           process_get_status_message@inmessage 0020                                       _resetPump 1A38  
                           __size_of_toggleLeds 0004                                        i2u283_40 197A  
                              __CFG_WDTPS$32768 000000                                       main@F3632 0138  
            process_set_zones_message@inmessage 0020                     ?_EventFaultStateLEDCallBack 0001  
                   ??_EventDumpSolenoidCallBack 0014                                 output_message@i 001E  
                       _EventPODebounceCallBack 19EC                                       _vfpfcnvrt 0012  
                           __size_of_start_main 003C                             __size_of_start_pump 00B0  
                  ??_EventLowWaterLevelCallBack 0017                                ?_printFaultState 0001  
                                    vfpfcnvrt@c 00E6                                       copy_data0 1244  
                ?_EventLowWaterPressureCallBack 0001                             _serial_process_loop 197E  
                                      i2putch@c 0008                     ?_process_get_status_message 0020  
                              __size_ofi2_putch 0014                                ??_output_message 001E  
                                      __Hrparam 0000                  _EventFaultStateLEDCallBack$217 0018  
                _EventFaultStateLEDCallBack$218 001A                  _EventFaultStateLEDCallBack$219 001C  
                                    ?_resetPump 0001                                      vfprintf@ap 00EB  
                                      __Lrparam 0000                                      vfprintf@fp 00E7  
                              __size_of___aodiv 0148                                __size_of___aomod 0124  
                                    ?_vfpfcnvrt 00D2                         __end_of_process_message 0CDE  
                          ?_serial_process_loop 0001                                 ___aodiv@divisor 001C  
                             ??_event_timer_isr 000E                           __CFG_FOSC$INTOSCIO_EC 000000  
                               ___aodiv@counter 0024                                __size_of_chartox 0014  
                                _printPumpState 1A46          __end_of_EventRunSignalDebounceCallBack 1A1E  
       __size_of_EventRunSignalDebounceCallBack 0010                  _EventRunSignalDebounceCallBack 1A0E  
                               main@msg_counter 0155                                 _usart_interrupt 10EA  
                                      __ptext10 177E                                        __ptext11 0D8E  
                                      __ptext20 1464                                        __ptext12 0C2C  
                                      __ptext21 0B76                                        __ptext13 1158  
                                      __ptext30 1A0E                                        __ptext22 19EC  
                                      __ptext14 160A                                        __ptext31 17AE  
                                      __ptext23 1928                                        __ptext15 18A0  
                                      __ptext40 08B2                                        __ptext32 1A46  
                                      __ptext24 16B6                                        __ptext16 1804  
                                      __ptext41 0518                                        __ptext33 1A48  
                                      __ptext25 1854                                        __ptext17 18C4  
                                      __ptext50 1998                                        __ptext42 14B2  
                                      __ptext34 182C                                        __ptext26 16E8  
                                      __ptext18 0FE0                                        __ptext51 18E8  
                                      __ptext43 0E2E                                        __ptext35 140E  
                                      __ptext27 1500                                        __ptext19 19B0  
                                      __ptext60 1A1E                                        __ptext52 1A38  
                                      __ptext44 17DA                                        __ptext36 0012  
                                      __ptext28 09D6                                        __ptext61 174C  
                                      __ptext53 1356                                        __ptext45 1646  
                                      __ptext37 078A                                        __ptext29 1A2E  
                                      _has_data 19FE                                        __ptext62 19D8  
                                      __ptext54 1546                                        __ptext46 11C4  
                                      __ptext38 02D0                                        __ptext63 12F6  
                                      __ptext55 106C                                        __ptext47 19C4  
                                      __ptext39 171A                                        __ptext64 1962  
                                      __ptext56 187A                                        __ptext48 1296  
                                      __ptext65 0000                                        __ptext49 167E  
                                      __ptext58 10EA                                        __ptext59 0F52  
                              __size_of_ser_int 0026                       _EventDumpSolenoidCallBack 1A2E  
                              __size_of_standby 005A                          process_message@msgType 0029  
                              __size_of_xtochar 003C                        setBaseMessage@msgAddress 0015  
                                 __size_of_ctoa 004E                                   __size_of_main 012A  
                                 __size_of_dtoa 0248                                   __size_of_init 007E  
                                 __size_of_push 0060                                   __size_of_stoa 0128  
                                 __size_of_puts 0032                                        chartox@c 0014  
                             ??_enable_callback 0016                                  _receiveMessage 0AA8  
                  ?_EventLowFogPressureCallBack 0001                                        _not_full 1962  
                                     stoa@F1144 0142                                    not_full@buff 0001  
                     ??_EventPODebounceCallBack 0015                                        int$flags 004C  
              __end_of_EventIdleTimeoutCallBack 1546                                        _shutdown 1946  
                     enable_callback@time_delay 0014                                        _outbound 025B  
                                      _vfprintf 140E                                        _pump_run 177E  
                                     printf@fmt 00EF                           ??_serial_process_loop 0016  
                        __end_of_printPumpState 1A48                                ___aomod@dividend 0014  
                         __CFG_CPUDIV$OSC1_PLL2 000000                    __size_of_process_event_timer 00B6  
                                  ??_toggleLeds 0014                                  _setBaseMessage 0FE0  
                                  ??_start_main 0017                                        intlevel2 0000  
                                  ??_start_pump 0017             __size_of_EventFaultStateLEDCallBack 00D2  
                      __end_of_monitor_pump_run 0E2E             __end_of_process_set_address_message 18C4  
                   _process_set_address_message 18A0                          __end_of_receiveMessage 0B76  
                                  has_data@buff 0014                                     ??_resetPump 0017  
                            __end_of_toggleLeds 1A46                   ??_EventLowFogPressureCallBack 0017  
                                      printf@ap 00F7                                    _timer_events 0060  
                                      push@buff 0014                                 ___aomod@divisor 001C  
                                   ??_vfpfcnvrt 00D8                                        stoa@nuls 002A  
                               ___aomod@counter 0024                         __end_of_usart_interrupt 1158  
                              ?_process_message 0025              __end_of_EventLowWaterLevelCallBack 187A  
                    _EventLowWaterLevelCallBack 1854                                 ?_printPumpState 0001  
                            __end_of_start_main 160A                              __end_of_start_pump 0D8E  
                    ?_process_set_zones_message 0020                          __end_of_setBaseMessage 106C  
                                   _timer_count 0049                                        xtochar@x 0014  
                                  ___aodiv@sign 0025                               ?_init_event_timer 0001  
                               ?_receiveMessage 00F9                              ??_init_event_timer 0017  
                                  ___aomod@sign 0025  

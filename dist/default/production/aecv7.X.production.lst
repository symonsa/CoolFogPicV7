

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Feb 12 06:20:42 2025

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 2.05
    80                           ; Generated 20/12/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4550 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	eeprom_data
   115  F00000  30 31 00 00 00 00 00 00 	db	48,49,0,0,0,0,0,0	;# 
   116  0000                     
   117                           	psect	idataBANK0
   118  00101E                     __pidataBANK0:
   119                           	opt callstack 0
   120                           
   121                           ;initializer for _PumpStateMappings
   122  00101E  99                 	db	low STR_1
   123  00101F  7F                 	db	high STR_1
   124  001020  6B                 	db	low STR_2
   125  001021  7F                 	db	high STR_2
   126  001022  F9                 	db	low STR_3
   127  001023  7E                 	db	high STR_3
   128  001024  11                 	db	low STR_4
   129  001025  7F                 	db	high STR_4
   130  001026  BD                 	db	low STR_5
   131  001027  7E                 	db	high STR_5
   132  001028  4A                 	db	low STR_6
   133  001029  7F                 	db	high STR_6
   134  00102A  8A                 	db	low STR_7
   135  00102B  7F                 	db	high STR_7
   136                           
   137                           ;initializer for main@F3636
   138  00102C  30                 	db	48
   139  00102D  30                 	db	48
   140  00102E  30                 	db	48
   141  00102F  30                 	db	48
   142  001030  30                 	db	48
   143  001031  30                 	db	48
   144  001032  30                 	db	48
   145  001033  30                 	db	48
   146  001034  30                 	db	48
   147  001035  00                 	db	0
   148                           
   149                           	psect	nvCOMRAM
   150  00004B                     __pnvCOMRAM:
   151                           	opt callstack 0
   152  00004B                     _combinedZones:
   153                           	opt callstack 0
   154  00004B                     	ds	1
   155  0000                     _RCREG	set	4014
   156  0000                     _TXREG	set	4013
   157  0000                     _SPBRG	set	4015
   158  0000                     _TXSTA	set	4012
   159  0000                     _RCSTA	set	4011
   160  0000                     _TRISCbits	set	3988
   161  0000                     _TRISEbits	set	3990
   162  0000                     _TRISAbits	set	3986
   163  0000                     _TRISD	set	3989
   164  0000                     _PORTEbits	set	3972
   165  0000                     _TRISB	set	3987
   166  0000                     _TRISA	set	3986
   167  0000                     _PORTA	set	3968
   168  0000                     _ADCON1	set	4033
   169  0000                     _PORTD	set	3971
   170  0000                     _PORTB	set	3969
   171  0000                     _PORTCbits	set	3970
   172  0000                     _PORTAbits	set	3968
   173  0000                     _TMR0IF	set	32658
   174  0000                     _TMR0IE	set	32661
   175  0000                     _TXEN	set	32101
   176  0000                     _OERR	set	32089
   177  0000                     _TXIF	set	31988
   178  0000                     _RCIF	set	31989
   179  0000                     _TRMT	set	32097
   180  0000                     _PEIE	set	32662
   181  0000                     _RCIE	set	31981
   182  0000                     _TXIE	set	31980
   183  0000                     _CREN	set	32092
   184  0000                     _TX9	set	32102
   185  0000                     _SPEN	set	32095
   186  0000                     _SYNC	set	32100
   187  0000                     _TRISC7	set	31911
   188  0000                     _TRISC6	set	31910
   189  0000                     _GIE	set	32663
   190  0000                     _IRCF0	set	32412
   191  0000                     _IRCF1	set	32413
   192  0000                     _IRCF2	set	32414
   193  0000                     _RBPU	set	32655
   194  0000                     _PCFG3	set	32267
   195  0000                     _T0CS	set	32429
   196                           
   197                           	psect	mediumconst
   198  007EBC                     __pmediumconst:
   199                           	opt callstack 0
   200  007EBC  00                 	db	0
   201  007EBD                     STR_5:
   202  007EBD  73                 	db	115	;'s'
   203  007EBE  74                 	db	116	;'t'
   204  007EBF  61                 	db	97	;'a'
   205  007EC0  72                 	db	114	;'r'
   206  007EC1  74                 	db	116	;'t'
   207  007EC2  70                 	db	112	;'p'
   208  007EC3  75                 	db	117	;'u'
   209  007EC4  6D                 	db	109	;'m'
   210  007EC5  70                 	db	112	;'p'
   211  007EC6  53                 	db	83	;'S'
   212  007EC7  65                 	db	101	;'e'
   213  007EC8  63                 	db	99	;'c'
   214  007EC9  6F                 	db	111	;'o'
   215  007ECA  6E                 	db	110	;'n'
   216  007ECB  64                 	db	100	;'d'
   217  007ECC  4C                 	db	76	;'L'
   218  007ECD  57                 	db	87	;'W'
   219  007ECE  50                 	db	80	;'P'
   220  007ECF  43                 	db	67	;'C'
   221  007ED0  68                 	db	104	;'h'
   222  007ED1  65                 	db	101	;'e'
   223  007ED2  63                 	db	99	;'c'
   224  007ED3  6B                 	db	107	;'k'
   225  007ED4  53                 	db	83	;'S'
   226  007ED5  74                 	db	116	;'t'
   227  007ED6  61                 	db	97	;'a'
   228  007ED7  74                 	db	116	;'t'
   229  007ED8  65                 	db	101	;'e'
   230  007ED9  0A                 	db	10
   231  007EDA  0D                 	db	13
   232  007EDB  00                 	db	0
   233  007EDC  61                 	db	97	;'a'
   234  007EDD  62                 	db	98	;'b'
   235  007EDE  63                 	db	99	;'c'
   236  007EDF  64                 	db	100	;'d'
   237  007EE0  65                 	db	101	;'e'
   238  007EE1  66                 	db	102	;'f'
   239  007EE2  67                 	db	103	;'g'
   240  007EE3  68                 	db	104	;'h'
   241  007EE4  69                 	db	105	;'i'
   242  007EE5  6A                 	db	106	;'j'
   243  007EE6  6B                 	db	107	;'k'
   244  007EE7  6C                 	db	108	;'l'
   245  007EE8  6D                 	db	109	;'m'
   246  007EE9  6E                 	db	110	;'n'
   247  007EEA  6F                 	db	111	;'o'
   248  007EEB  70                 	db	112	;'p'
   249  007EEC  71                 	db	113	;'q'
   250  007EED  72                 	db	114	;'r'
   251  007EEE  73                 	db	115	;'s'
   252  007EEF  74                 	db	116	;'t'
   253  007EF0  75                 	db	117	;'u'
   254  007EF1  76                 	db	118	;'v'
   255  007EF2  77                 	db	119	;'w'
   256  007EF3  78                 	db	120	;'x'
   257  007EF4  79                 	db	121	;'y'
   258  007EF5  7A                 	db	122	;'z'
   259  007EF6  0A                 	db	10
   260  007EF7  0D                 	db	13
   261  007EF8  00                 	db	0
   262  007EF9                     STR_3:
   263  007EF9  73                 	db	115	;'s'
   264  007EFA  74                 	db	116	;'t'
   265  007EFB  61                 	db	97	;'a'
   266  007EFC  72                 	db	114	;'r'
   267  007EFD  74                 	db	116	;'t'
   268  007EFE  70                 	db	112	;'p'
   269  007EFF  75                 	db	117	;'u'
   270  007F00  6D                 	db	109	;'m'
   271  007F01  70                 	db	112	;'p'
   272  007F02  49                 	db	73	;'I'
   273  007F03  6E                 	db	110	;'n'
   274  007F04  69                 	db	105	;'i'
   275  007F05  74                 	db	116	;'t'
   276  007F06  69                 	db	105	;'i'
   277  007F07  61                 	db	97	;'a'
   278  007F08  6C                 	db	108	;'l'
   279  007F09  53                 	db	83	;'S'
   280  007F0A  74                 	db	116	;'t'
   281  007F0B  61                 	db	97	;'a'
   282  007F0C  74                 	db	116	;'t'
   283  007F0D  65                 	db	101	;'e'
   284  007F0E  0A                 	db	10
   285  007F0F  0D                 	db	13
   286  007F10  00                 	db	0
   287  007F11                     STR_4:
   288  007F11  73                 	db	115	;'s'
   289  007F12  74                 	db	116	;'t'
   290  007F13  61                 	db	97	;'a'
   291  007F14  72                 	db	114	;'r'
   292  007F15  74                 	db	116	;'t'
   293  007F16  70                 	db	112	;'p'
   294  007F17  75                 	db	117	;'u'
   295  007F18  6D                 	db	109	;'m'
   296  007F19  70                 	db	112	;'p'
   297  007F1A  57                 	db	87	;'W'
   298  007F1B  61                 	db	97	;'a'
   299  007F1C  69                 	db	105	;'i'
   300  007F1D  74                 	db	116	;'t'
   301  007F1E  53                 	db	83	;'S'
   302  007F1F  74                 	db	116	;'t'
   303  007F20  61                 	db	97	;'a'
   304  007F21  74                 	db	116	;'t'
   305  007F22  65                 	db	101	;'e'
   306  007F23  0A                 	db	10
   307  007F24  0D                 	db	13
   308  007F25  00                 	db	0
   309  007F26  70                 	db	112	;'p'
   310  007F27  75                 	db	117	;'u'
   311  007F28  6D                 	db	109	;'m'
   312  007F29  70                 	db	112	;'p'
   313  007F2A  4F                 	db	79	;'O'
   314  007F2B  76                 	db	118	;'v'
   315  007F2C  65                 	db	101	;'e'
   316  007F2D  72                 	db	114	;'r'
   317  007F2E  6C                 	db	108	;'l'
   318  007F2F  6F                 	db	111	;'o'
   319  007F30  61                 	db	97	;'a'
   320  007F31  64                 	db	100	;'d'
   321  007F32  42                 	db	66	;'B'
   322  007F33  69                 	db	105	;'i'
   323  007F34  74                 	db	116	;'t'
   324  007F35  0A                 	db	10
   325  007F36  0D                 	db	13
   326  007F37  00                 	db	0
   327  007F38  64                 	db	100	;'d'
   328  007F39  75                 	db	117	;'u'
   329  007F3A  6D                 	db	109	;'m'
   330  007F3B  70                 	db	112	;'p'
   331  007F3C  53                 	db	83	;'S'
   332  007F3D  6F                 	db	111	;'o'
   333  007F3E  6C                 	db	108	;'l'
   334  007F3F  65                 	db	101	;'e'
   335  007F40  6E                 	db	110	;'n'
   336  007F41  6F                 	db	111	;'o'
   337  007F42  69                 	db	105	;'i'
   338  007F43  64                 	db	100	;'d'
   339  007F44  42                 	db	66	;'B'
   340  007F45  69                 	db	105	;'i'
   341  007F46  74                 	db	116	;'t'
   342  007F47  0A                 	db	10
   343  007F48  0D                 	db	13
   344  007F49  00                 	db	0
   345  007F4A                     STR_6:
   346  007F4A  73                 	db	115	;'s'
   347  007F4B  74                 	db	116	;'t'
   348  007F4C  61                 	db	97	;'a'
   349  007F4D  72                 	db	114	;'r'
   350  007F4E  74                 	db	116	;'t'
   351  007F4F  6D                 	db	109	;'m'
   352  007F50  61                 	db	97	;'a'
   353  007F51  69                 	db	105	;'i'
   354  007F52  6E                 	db	110	;'n'
   355  007F53  53                 	db	83	;'S'
   356  007F54  74                 	db	116	;'t'
   357  007F55  61                 	db	97	;'a'
   358  007F56  74                 	db	116	;'t'
   359  007F57  65                 	db	101	;'e'
   360  007F58  0A                 	db	10
   361  007F59  0D                 	db	13
   362  007F5A  00                 	db	0
   363  007F5B                     STR_20:
   364  007F5B  73                 	db	115	;'s'
   365  007F5C  65                 	db	101	;'e'
   366  007F5D  72                 	db	114	;'r'
   367  007F5E  69                 	db	105	;'i'
   368  007F5F  61                 	db	97	;'a'
   369  007F60  6C                 	db	108	;'l'
   370  007F61  20                 	db	32
   371  007F62  6F                 	db	111	;'o'
   372  007F63  76                 	db	118	;'v'
   373  007F64  65                 	db	101	;'e'
   374  007F65  72                 	db	114	;'r'
   375  007F66  66                 	db	102	;'f'
   376  007F67  6C                 	db	108	;'l'
   377  007F68  6F                 	db	111	;'o'
   378  007F69  77                 	db	119	;'w'
   379  007F6A  00                 	db	0
   380  007F6B                     STR_2:
   381  007F6B  73                 	db	115	;'s'
   382  007F6C  68                 	db	104	;'h'
   383  007F6D  75                 	db	117	;'u'
   384  007F6E  74                 	db	116	;'t'
   385  007F6F  64                 	db	100	;'d'
   386  007F70  6F                 	db	111	;'o'
   387  007F71  77                 	db	119	;'w'
   388  007F72  6E                 	db	110	;'n'
   389  007F73  53                 	db	83	;'S'
   390  007F74  74                 	db	116	;'t'
   391  007F75  61                 	db	97	;'a'
   392  007F76  74                 	db	116	;'t'
   393  007F77  65                 	db	101	;'e'
   394  007F78  0A                 	db	10
   395  007F79  0D                 	db	13
   396  007F7A  00                 	db	0
   397  007F7B                     STR_18:
   398  007F7B  77                 	db	119	;'w'
   399  007F7C  61                 	db	97	;'a'
   400  007F7D  69                 	db	105	;'i'
   401  007F7E  74                 	db	116	;'t'
   402  007F7F  69                 	db	105	;'i'
   403  007F80  6E                 	db	110	;'n'
   404  007F81  67                 	db	103	;'g'
   405  007F82  78                 	db	120	;'x'
   406  007F83  78                 	db	120	;'x'
   407  007F84  78                 	db	120	;'x'
   408  007F85  78                 	db	120	;'x'
   409  007F86  20                 	db	32
   410  007F87  0A                 	db	10
   411  007F88  0D                 	db	13
   412  007F89  00                 	db	0
   413  007F8A                     STR_7:
   414  007F8A  70                 	db	112	;'p'
   415  007F8B  75                 	db	117	;'u'
   416  007F8C  6D                 	db	109	;'m'
   417  007F8D  70                 	db	112	;'p'
   418  007F8E  72                 	db	114	;'r'
   419  007F8F  75                 	db	117	;'u'
   420  007F90  6E                 	db	110	;'n'
   421  007F91  53                 	db	83	;'S'
   422  007F92  74                 	db	116	;'t'
   423  007F93  61                 	db	97	;'a'
   424  007F94  74                 	db	116	;'t'
   425  007F95  65                 	db	101	;'e'
   426  007F96  0A                 	db	10
   427  007F97  0D                 	db	13
   428  007F98  00                 	db	0
   429  007F99                     STR_1:
   430  007F99  73                 	db	115	;'s'
   431  007F9A  74                 	db	116	;'t'
   432  007F9B  61                 	db	97	;'a'
   433  007F9C  6E                 	db	110	;'n'
   434  007F9D  64                 	db	100	;'d'
   435  007F9E  62                 	db	98	;'b'
   436  007F9F  79                 	db	121	;'y'
   437  007FA0  53                 	db	83	;'S'
   438  007FA1  74                 	db	116	;'t'
   439  007FA2  61                 	db	97	;'a'
   440  007FA3  74                 	db	116	;'t'
   441  007FA4  65                 	db	101	;'e'
   442  007FA5  0A                 	db	10
   443  007FA6  0D                 	db	13
   444  007FA7  00                 	db	0
   445  007FA8                     STR_8:
   446  007FA8  62                 	db	98	;'b'
   447  007FA9  6F                 	db	111	;'o'
   448  007FAA  6F                 	db	111	;'o'
   449  007FAB  73                 	db	115	;'s'
   450  007FAC  74                 	db	116	;'t'
   451  007FAD  50                 	db	80	;'P'
   452  007FAE  75                 	db	117	;'u'
   453  007FAF  6D                 	db	109	;'m'
   454  007FB0  70                 	db	112	;'p'
   455  007FB1  42                 	db	66	;'B'
   456  007FB2  69                 	db	105	;'i'
   457  007FB3  74                 	db	116	;'t'
   458  007FB4  0A                 	db	10
   459  007FB5  0D                 	db	13
   460  007FB6  00                 	db	0
   461  007FB7  6D                 	db	109	;'m'
   462  007FB8  61                 	db	97	;'a'
   463  007FB9  69                 	db	105	;'i'
   464  007FBA  6E                 	db	110	;'n'
   465  007FBB  50                 	db	80	;'P'
   466  007FBC  75                 	db	117	;'u'
   467  007FBD  6D                 	db	109	;'m'
   468  007FBE  70                 	db	112	;'p'
   469  007FBF  42                 	db	66	;'B'
   470  007FC0  69                 	db	105	;'i'
   471  007FC1  74                 	db	116	;'t'
   472  007FC2  0A                 	db	10
   473  007FC3  0D                 	db	13
   474  007FC4  00                 	db	0
   475  007FC5  6C                 	db	108	;'l'
   476  007FC6  77                 	db	119	;'w'
   477  007FC7  6C                 	db	108	;'l'
   478  007FC8  5F                 	db	95	;'_'
   479  007FC9  66                 	db	102	;'f'
   480  007FCA  61                 	db	97	;'a'
   481  007FCB  75                 	db	117	;'u'
   482  007FCC  6C                 	db	108	;'l'
   483  007FCD  74                 	db	116	;'t'
   484  007FCE  0A                 	db	10
   485  007FCF  0D                 	db	13
   486  007FD0  00                 	db	0
   487  007FD1  6C                 	db	108	;'l'
   488  007FD2  66                 	db	102	;'f'
   489  007FD3  70                 	db	112	;'p'
   490  007FD4  5F                 	db	95	;'_'
   491  007FD5  66                 	db	102	;'f'
   492  007FD6  61                 	db	97	;'a'
   493  007FD7  75                 	db	117	;'u'
   494  007FD8  6C                 	db	108	;'l'
   495  007FD9  74                 	db	116	;'t'
   496  007FDA  0A                 	db	10
   497  007FDB  0D                 	db	13
   498  007FDC  00                 	db	0
   499  007FDD  6C                 	db	108	;'l'
   500  007FDE  77                 	db	119	;'w'
   501  007FDF  70                 	db	112	;'p'
   502  007FE0  5F                 	db	95	;'_'
   503  007FE1  66                 	db	102	;'f'
   504  007FE2  61                 	db	97	;'a'
   505  007FE3  75                 	db	117	;'u'
   506  007FE4  6C                 	db	108	;'l'
   507  007FE5  74                 	db	116	;'t'
   508  007FE6  0A                 	db	10
   509  007FE7  0D                 	db	13
   510  007FE8  00                 	db	0
   511  007FE9  70                 	db	112	;'p'
   512  007FEA  6F                 	db	111	;'o'
   513  007FEB  5F                 	db	95	;'_'
   514  007FEC  66                 	db	102	;'f'
   515  007FED  61                 	db	97	;'a'
   516  007FEE  75                 	db	117	;'u'
   517  007FEF  6C                 	db	108	;'l'
   518  007FF0  74                 	db	116	;'t'
   519  007FF1  0A                 	db	10
   520  007FF2  0D                 	db	13
   521  007FF3  00                 	db	0
   522  007FF4  77                 	db	119	;'w'
   523  007FF5  70                 	db	112	;'p'
   524  007FF6  4F                 	db	79	;'O'
   525  007FF7  6B                 	db	107	;'k'
   526  007FF8  42                 	db	66	;'B'
   527  007FF9  69                 	db	105	;'i'
   528  007FFA  74                 	db	116	;'t'
   529  007FFB  0A                 	db	10
   530  007FFC  0D                 	db	13
   531  007FFD  00                 	db	0
   532  0000                     
   533                           ; #config settings
   534  007FFE  00                 	db	0	; dummy byte at the end
   535  0000                     
   536                           	psect	cinit
   537  000A90                     __pcinit:
   538                           	opt callstack 0
   539  000A90                     start_initialization:
   540                           	opt callstack 0
   541  000A90                     __initialization:
   542                           	opt callstack 0
   543                           
   544                           ; Initialize objects allocated to BANK0 (24 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  000A90  0E1E               	movlw	low __pidataBANK0
   547  000A92  6EF6               	movwf	tblptrl,c
   548  000A94  0E10               	movlw	high __pidataBANK0
   549  000A96  6EF7               	movwf	tblptrh,c
   550  000A98  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  000A9A  6EF8               	movwf	tblptru,c
   552  000A9C  EE00  F0D2         	lfsr	0,__pdataBANK0
   553  000AA0  EE10 F018          	lfsr	1,24
   554  000AA4                     copy_data0:
   555  000AA4  0009               	tblrd		*+
   556  000AA6  CFF5 FFEE          	movff	tablat,postinc0
   557  000AAA  50E5               	movf	postdec1,w,c
   558  000AAC  50E1               	movf	fsr1l,w,c
   559  000AAE  E1FA               	bnz	copy_data0
   560                           
   561                           ; Clear objects allocated to BIGRAM (520 bytes)
   562  000AB0  EE01  F00E         	lfsr	0,__pbssBIGRAM
   563  000AB4  EE12 F008          	lfsr	1,520
   564  000AB8                     clear_0:
   565  000AB8  6AEE               	clrf	postinc0,c
   566  000ABA  50E5               	movf	postdec1,w,c
   567  000ABC  50E1               	movf	fsr1l,w,c
   568  000ABE  E1FC               	bnz	clear_0
   569  000AC0  50E2               	movf	fsr1h,w,c
   570  000AC2  E1FA               	bnz	clear_0
   571                           
   572                           ; Clear objects allocated to BANK0 (114 bytes)
   573  000AC4  EE00  F060         	lfsr	0,__pbssBANK0
   574  000AC8  0E72               	movlw	114
   575  000ACA                     clear_1:
   576  000ACA  6AEE               	clrf	postinc0,c
   577  000ACC  06E8               	decf	wreg,f,c
   578  000ACE  E1FD               	bnz	clear_1
   579                           
   580                           ; Clear objects allocated to COMRAM (26 bytes)
   581  000AD0  EE00  F031         	lfsr	0,__pbssCOMRAM
   582  000AD4  0E1A               	movlw	26
   583  000AD6                     clear_2:
   584  000AD6  6AEE               	clrf	postinc0,c
   585  000AD8  06E8               	decf	wreg,f,c
   586  000ADA  E1FD               	bnz	clear_2
   587  000ADC                     end_of_initialization:
   588                           	opt callstack 0
   589  000ADC                     __end_of__initialization:
   590                           	opt callstack 0
   591  000ADC  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   592  000ADE  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   593  000AE0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   594  000AE2  6EF8               	movwf	tblptru,c
   595  000AE4  0100               	movlb	0
   596  000AE6  EFA1  F000         	goto	_main	;jump to C main() function
   597                           
   598                           	psect	bssCOMRAM
   599  000031                     __pbssCOMRAM:
   600                           	opt callstack 0
   601  000031                     _nout:
   602                           	opt callstack 0
   603  000031                     	ds	2
   604  000033                     _width:
   605                           	opt callstack 0
   606  000033                     	ds	2
   607  000035                     _prec:
   608                           	opt callstack 0
   609  000035                     	ds	2
   610  000037                     _flags:
   611                           	opt callstack 0
   612  000037                     	ds	2
   613  000039                     receiveMessage@len:
   614                           	opt callstack 0
   615  000039                     	ds	2
   616  00003B                     _fault_flags:
   617                           	opt callstack 0
   618  00003B                     	ds	2
   619  00003D                     _timer_count:
   620                           	opt callstack 0
   621  00003D                     	ds	1
   622  00003E                     _commsZones:
   623                           	opt callstack 0
   624  00003E                     	ds	1
   625  00003F                     _inIdleDumpHour:
   626                           	opt callstack 0
   627  00003F                     	ds	1
   628  000040                     _state:
   629                           	opt callstack 0
   630  000040                     	ds	1
   631  000041                     _outputMessage:
   632                           	opt callstack 0
   633  000041                     	ds	10
   634                           
   635                           	psect	bssBANK0
   636  000060                     __pbssBANK0:
   637                           	opt callstack 0
   638  000060                     _timer_events:
   639                           	opt callstack 0
   640  000060                     	ds	72
   641  0000A8                     	ds	32
   642  0000C8                     receiveMessage@message:
   643                           	opt callstack 0
   644  0000C8                     	ds	10
   645                           
   646                           	psect	dataBANK0
   647  0000D2                     __pdataBANK0:
   648                           	opt callstack 0
   649  0000D2                     _PumpStateMappings:
   650                           	opt callstack 0
   651  0000D2                     	ds	14
   652  0000E0                     main@F3636:
   653                           	opt callstack 0
   654  0000E0                     	ds	10
   655                           
   656                           	psect	bssBIGRAM
   657  00010E                     __pbssBIGRAM:
   658                           	opt callstack 0
   659  00010E                     _inbound:
   660                           	opt callstack 0
   661  00010E                     	ds	260
   662  000212                     _outbound:
   663                           	opt callstack 0
   664  000212                     	ds	260
   665                           
   666                           	psect	cstackBANK1
   667  000100                     __pcstackBANK1:
   668                           	opt callstack 0
   669  000100                     main@sendGetMessageBuffer:
   670                           	opt callstack 0
   671                           
   672                           ; 10 bytes @ 0x0
   673  000100                     	ds	10
   674  00010A                     main@message:
   675                           	opt callstack 0
   676                           
   677                           ; 2 bytes @ 0xA
   678  00010A                     	ds	2
   679  00010C                     main@msg_counter:
   680                           	opt callstack 0
   681                           
   682                           ; 2 bytes @ 0xC
   683  00010C                     	ds	2
   684                           
   685                           	psect	cstackBANK0
   686  0000EA                     __pcstackBANK0:
   687                           	opt callstack 0
   688  0000EA                     ?_vfprintf:
   689                           	opt callstack 0
   690  0000EA                     vfprintf@fp:
   691                           	opt callstack 0
   692                           
   693                           ; 2 bytes @ 0x0
   694  0000EA                     	ds	2
   695  0000EC                     vfprintf@fmt:
   696                           	opt callstack 0
   697                           
   698                           ; 2 bytes @ 0x2
   699  0000EC                     	ds	2
   700  0000EE                     vfprintf@ap:
   701                           	opt callstack 0
   702                           
   703                           ; 2 bytes @ 0x4
   704  0000EE                     	ds	2
   705  0000F0                     ?_printf:
   706                           	opt callstack 0
   707  0000F0                     printf@fmt:
   708                           	opt callstack 0
   709                           
   710                           ; 2 bytes @ 0x6
   711  0000F0                     	ds	4
   712  0000F4                     printf@ap:
   713                           	opt callstack 0
   714                           
   715                           ; 2 bytes @ 0xA
   716  0000F4                     	ds	2
   717  0000F6                     ??_main:
   718                           
   719                           ; 1 bytes @ 0xC
   720  0000F6                     	ds	2
   721                           
   722                           	psect	cstackCOMRAM
   723  000001                     __pcstackCOMRAM:
   724                           	opt callstack 0
   725  000001                     not_full@buff:
   726                           	opt callstack 0
   727  000001                     i2push@buff:
   728                           	opt callstack 0
   729  000001                     i2pop@buff:
   730                           	opt callstack 0
   731  000001                     i2has_data@buff:
   732                           	opt callstack 0
   733                           
   734                           ; 2 bytes @ 0x0
   735  000001                     	ds	2
   736  000003                     ??i2_pop:
   737  000003                     i2push@d:
   738                           	opt callstack 0
   739                           
   740                           ; 1 bytes @ 0x2
   741  000003                     	ds	1
   742  000004                     ??i2_push:
   743                           
   744                           ; 1 bytes @ 0x3
   745  000004                     	ds	1
   746  000005                     i2pop@d:
   747                           	opt callstack 0
   748                           
   749                           ; 1 bytes @ 0x4
   750  000005                     	ds	3
   751  000008                     i2putch@c:
   752                           	opt callstack 0
   753                           
   754                           ; 1 bytes @ 0x7
   755  000008                     	ds	1
   756  000009                     puts@str:
   757                           	opt callstack 0
   758                           
   759                           ; 2 bytes @ 0x8
   760  000009                     	ds	2
   761  00000B                     puts@c:
   762                           	opt callstack 0
   763                           
   764                           ; 2 bytes @ 0xA
   765  00000B                     	ds	2
   766  00000D                     usart_interrupt@a:
   767                           	opt callstack 0
   768                           
   769                           ; 1 bytes @ 0xC
   770  00000D                     	ds	1
   771  00000E                     ??_event_timer_isr:
   772                           
   773                           ; 1 bytes @ 0xD
   774  00000E                     	ds	6
   775  000014                     ??_EventLowWaterPressureDebounceCallBack:
   776  000014                     xtochar@x:
   777                           	opt callstack 0
   778  000014                     chartox@c:
   779                           	opt callstack 0
   780  000014                     clear_callback@callback:
   781                           	opt callstack 0
   782  000014                     push@buff:
   783                           	opt callstack 0
   784  000014                     pop@buff:
   785                           	opt callstack 0
   786  000014                     has_data@buff:
   787                           	opt callstack 0
   788  000014                     enable_callback@time_delay:
   789                           	opt callstack 0
   790                           
   791                           ; 2 bytes @ 0x13
   792  000014                     	ds	1
   793  000015                     ??_EventLowWaterPressureCallBack:
   794  000015                     setBaseMessage@msgAddress:
   795                           	opt callstack 0
   796                           
   797                           ; 1 bytes @ 0x14
   798  000015                     	ds	1
   799  000016                     ??_pop:
   800  000016                     ??_setBaseMessage:
   801  000016                     push@d:
   802                           	opt callstack 0
   803  000016                     enable_callback@callback:
   804                           	opt callstack 0
   805                           
   806                           ; 1 bytes @ 0x15
   807  000016                     	ds	1
   808  000017                     ??_push:
   809  000017                     ??_EventFaultStateLEDCallBack:
   810  000017                     ??_monitor_water_pressure:
   811  000017                     
   812                           ; 1 bytes @ 0x16
   813  000017                     	ds	1
   814  000018                     pop@d:
   815                           	opt callstack 0
   816  000018                     _EventFaultStateLEDCallBack$217:
   817                           	opt callstack 0
   818                           
   819                           ; 2 bytes @ 0x17
   820  000018                     	ds	1
   821  000019                     ?_receiveMessage:
   822                           	opt callstack 0
   823  000019                     setBaseMessage@messageType:
   824                           	opt callstack 0
   825                           
   826                           ; 1 bytes @ 0x18
   827  000019                     	ds	1
   828  00001A                     setBaseMessage@v:
   829                           	opt callstack 0
   830  00001A                     _EventFaultStateLEDCallBack$218:
   831                           	opt callstack 0
   832                           
   833                           ; 2 bytes @ 0x19
   834  00001A                     	ds	1
   835  00001B                     putch@c:
   836                           	opt callstack 0
   837  00001B                     receiveMessage@c:
   838                           	opt callstack 0
   839                           
   840                           ; 1 bytes @ 0x1A
   841  00001B                     	ds	1
   842  00001C                     _EventFaultStateLEDCallBack$219:
   843                           	opt callstack 0
   844  00001C                     output_message@message:
   845                           	opt callstack 0
   846  00001C                     fputc@c:
   847                           	opt callstack 0
   848                           
   849                           ; 2 bytes @ 0x1B
   850  00001C                     	ds	2
   851  00001E                     output_message@i:
   852                           	opt callstack 0
   853  00001E                     fputc@fp:
   854                           	opt callstack 0
   855                           
   856                           ; 2 bytes @ 0x1D
   857  00001E                     	ds	2
   858  000020                     ??_fputc:
   859  000020                     process_event_timer@i:
   860                           	opt callstack 0
   861  000020                     process_set_zones_message@inmessage:
   862                           	opt callstack 0
   863  000020                     process_get_status_message@inmessage:
   864                           	opt callstack 0
   865  000020                     process_set_address_message@inmessage:
   866                           	opt callstack 0
   867  000020                     process_reset_pump@inmessage:
   868                           	opt callstack 0
   869                           
   870                           ; 2 bytes @ 0x1F
   871  000020                     	ds	2
   872  000022                     ??_process_set_zones_message:
   873  000022                     
   874                           ; 1 bytes @ 0x21
   875  000022                     	ds	1
   876  000023                     process_message@inmessage:
   877                           	opt callstack 0
   878                           
   879                           ; 2 bytes @ 0x22
   880  000023                     	ds	2
   881  000025                     ??_process_message:
   882  000025                     ?_vfpfcnvrt:
   883                           	opt callstack 0
   884  000025                     vfpfcnvrt@fp:
   885                           	opt callstack 0
   886                           
   887                           ; 2 bytes @ 0x24
   888  000025                     	ds	2
   889  000027                     process_message@msgType:
   890                           	opt callstack 0
   891  000027                     vfpfcnvrt@fmt:
   892                           	opt callstack 0
   893                           
   894                           ; 2 bytes @ 0x26
   895  000027                     	ds	2
   896  000029                     vfpfcnvrt@ap:
   897                           	opt callstack 0
   898                           
   899                           ; 2 bytes @ 0x28
   900  000029                     	ds	2
   901  00002B                     ??_vfpfcnvrt:
   902                           
   903                           ; 1 bytes @ 0x2A
   904  00002B                     	ds	2
   905  00002D                     vfpfcnvrt@vp:
   906                           	opt callstack 0
   907                           
   908                           ; 2 bytes @ 0x2C
   909  00002D                     	ds	2
   910  00002F                     vfprintf@cfmt:
   911                           	opt callstack 0
   912                           
   913                           ; 2 bytes @ 0x2E
   914  00002F                     	ds	2
   915  000031                     
   916                           ; 1 bytes @ 0x30
   917 ;;
   918 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   919 ;;
   920 ;; *************** function _main *****************
   921 ;; Defined at:
   922 ;;		line 264 in file "pump_control.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  sendGetMessa   10    0[BANK1 ] unsigned char [10]
   927 ;;  msg_counter     2   12[BANK1 ] unsigned int 
   928 ;;  message         2   10[BANK1 ] PTR unsigned char 
   929 ;;		 -> receiveMessage@message(10), NULL(0), 
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   939 ;;      Params:         0       0       0       0       0       0       0       0       0
   940 ;;      Locals:         0       0      14       0       0       0       0       0       0
   941 ;;      Temps:          0       2       0       0       0       0       0       0       0
   942 ;;      Totals:         0       2      14       0       0       0       0       0       0
   943 ;;Total ram usage:       16 bytes
   944 ;; Hardware stack levels required when called:   12
   945 ;; This function calls:
   946 ;;		_checkIfShoudReset
   947 ;;		_clear_callback
   948 ;;		_combineZones
   949 ;;		_enable_callback
   950 ;;		_init
   951 ;;		_init_event_timer
   952 ;;		_monitor_water_pressure
   953 ;;		_printFaultState
   954 ;;		_printPumpState
   955 ;;		_printf
   956 ;;		_process_event_timer
   957 ;;		_process_get_status_message
   958 ;;		_process_message
   959 ;;		_pump_run
   960 ;;		_receiveMessage
   961 ;;		_ser_int
   962 ;;		_serial_process_loop
   963 ;;		_shutdown
   964 ;;		_standby
   965 ;;		_start_main
   966 ;;		_start_pump
   967 ;; This function is called by:
   968 ;;		Startup code after reset
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text0
   973  000142                     __ptext0:
   974                           	opt callstack 0
   975  000142                     _main:
   976                           	opt callstack 19
   977                           
   978                           ;pump_control.c: 265:     char *message;;pump_control.c: 266:     char sendGetMessageBuf
      +                          fer[10] = {'0', '0', '0', '0', '0', '0', '0', '0', '0'};
   979                           
   980                           ;incstack = 0
   981  000142  EE20  F0E0         	lfsr	2,main@F3636
   982  000146  EE11  F000         	lfsr	1,main@sendGetMessageBuffer
   983  00014A  0E09               	movlw	9
   984  00014C                     u3501:
   985  00014C  CFDB FFE3          	movff	plusw2,plusw1
   986  000150  06E8               	decf	wreg,f,c
   987  000152  E2FC               	bc	u3501
   988                           
   989                           ;pump_control.c: 267:     init();
   990  000154  ECD3  F003         	call	_init	;wreg free
   991                           
   992                           ;pump_control.c: 268:     init_event_timer();
   993  000158  EC19  F005         	call	_init_event_timer	;wreg free
   994                           
   995                           ;pump_control.c: 269:     ser_int();
   996  00015C  ECA3  F007         	call	_ser_int	;wreg free
   997                           
   998                           ;pump_control.c: 270:     printf("waitingxxxx \n\r");
   999  000160  0E7B               	movlw	low STR_18
  1000  000162  0100               	movlb	0	; () banked
  1001  000164  6FF0               	movwf	printf@fmt& (0+255),b
  1002  000166  0E7F               	movlw	high STR_18
  1003  000168  6FF1               	movwf	(printf@fmt+1)& (0+255),b
  1004  00016A  EC7C  F007         	call	_printf	;wreg free
  1005                           
  1006                           ;pump_control.c: 287:     unsigned int msg_counter = 0;
  1007  00016E  0E00               	movlw	0
  1008  000170  0101               	movlb	1	; () banked
  1009  000172  6F0D               	movwf	(main@msg_counter+1)& (0+255),b
  1010  000174  0E00               	movlw	0
  1011  000176  6F0C               	movwf	main@msg_counter& (0+255),b
  1012  000178                     l4405:
  1013                           
  1014                           ;pump_control.c: 289:         combineZones();
  1015  000178  EC66  F008         	call	_combineZones	;wreg free
  1016                           
  1017                           ;pump_control.c: 292:         process_event_timer();
  1018  00017C  EC9F  F001         	call	_process_event_timer	;wreg free
  1019                           
  1020                           ;pump_control.c: 294:         if ((message = receiveMessage())) {
  1021  000180  ECF9  F002         	call	_receiveMessage	;wreg free
  1022  000184  C019  F10A         	movff	?_receiveMessage,main@message
  1023  000188  C01A  F10B         	movff	?_receiveMessage+1,main@message+1
  1024  00018C  0101               	movlb	1	; () banked
  1025  00018E  510A               	movf	main@message& (0+255),w,b
  1026  000190  110B               	iorwf	(main@message+1)& (0+255),w,b
  1027  000192  B4D8               	btfsc	status,2,c
  1028  000194  D006               	goto	l4413
  1029                           
  1030                           ; BSR set to: 1
  1031                           ;pump_control.c: 296:             process_message(message);
  1032  000196  C10A  F023         	movff	main@message,process_message@inmessage
  1033  00019A  C10B  F024         	movff	main@message+1,process_message@inmessage+1
  1034  00019E  ECFA  F001         	call	_process_message	;wreg free
  1035  0001A2                     l4413:
  1036                           
  1037                           ;pump_control.c: 299:         serial_process_loop();
  1038  0001A2  EC02  F008         	call	_serial_process_loop	;wreg free
  1039                           
  1040                           ;pump_control.c: 301:         msg_counter++;
  1041  0001A6  0101               	movlb	1	; () banked
  1042  0001A8  4B0C               	infsnz	main@msg_counter& (0+255),f,b
  1043  0001AA  2B0D               	incf	(main@msg_counter+1)& (0+255),f,b
  1044                           
  1045                           ; BSR set to: 1
  1046                           ;pump_control.c: 302:         if (msg_counter >= (1 << 10)) {
  1047  0001AC  0E04               	movlw	4
  1048  0001AE  5D0D               	subwf	(main@msg_counter+1)& (0+255),w,b
  1049  0001B0  A0D8               	btfss	status,0,c
  1050  0001B2  D00F               	goto	l4427
  1051                           
  1052                           ; BSR set to: 1
  1053                           ;pump_control.c: 303:             printPumpState();
  1054  0001B4  EC76  F008         	call	_printPumpState	;wreg free
  1055                           
  1056                           ;pump_control.c: 304:             printFaultState();
  1057  0001B8  EC77  F008         	call	_printFaultState	;wreg free
  1058                           
  1059                           ;pump_control.c: 305:             process_get_status_message(sendGetMessageBuffer);
  1060  0001BC  0E00               	movlw	low main@sendGetMessageBuffer
  1061  0001BE  6E20               	movwf	process_get_status_message@inmessage,c
  1062  0001C0  0E01               	movlw	high main@sendGetMessageBuffer
  1063  0001C2  6E21               	movwf	process_get_status_message@inmessage+1,c
  1064  0001C4  EC68  F007         	call	_process_get_status_message	;wreg free
  1065                           
  1066                           ;pump_control.c: 307:             msg_counter = 0;
  1067  0001C8  0E00               	movlw	0
  1068  0001CA  0101               	movlb	1	; () banked
  1069  0001CC  6F0D               	movwf	(main@msg_counter+1)& (0+255),b
  1070  0001CE  0E00               	movlw	0
  1071  0001D0  6F0C               	movwf	main@msg_counter& (0+255),b
  1072  0001D2                     l4427:
  1073                           
  1074                           ; BSR set to: 1
  1075                           ;pump_control.c: 312:         checkIfShoudReset();
  1076  0001D2  ECD7  F007         	call	_checkIfShoudReset	;wreg free
  1077                           
  1078                           ;pump_control.c: 313:         monitor_water_pressure();
  1079  0001D6  ECBF  F006         	call	_monitor_water_pressure	;wreg free
  1080                           
  1081                           ;pump_control.c: 314:         if (!( !PORTCbits.RC2)) {
  1082  0001DA  A482               	btfss	3970,2,c	;volatile
  1083  0001DC  D013               	goto	l4451
  1084                           
  1085                           ;pump_control.c: 315:             clear_callback(EventPODebounce);
  1086  0001DE  0E08               	movlw	8
  1087  0001E0  EC1B  F008         	call	_clear_callback
  1088  0001E4  D00F               	goto	l4451
  1089  0001E6                     l4435:
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;pump_control.c: 319:                 standby();
  1093  0001E6  EC75  F005         	call	_standby	;wreg free
  1094                           
  1095                           ;pump_control.c: 320:                 break;
  1096  0001EA  D02A               	goto	l4453
  1097  0001EC                     l4437:
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;pump_control.c: 322:                 shutdown();
  1101  0001EC  ECE6  F007         	call	_shutdown	;wreg free
  1102                           
  1103                           ;pump_control.c: 323:                 break;
  1104  0001F0  D027               	goto	l4453
  1105  0001F2                     l4439:
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;pump_control.c: 325:                 start_pump();
  1109  0001F2  EC53  F002         	call	_start_pump	;wreg free
  1110                           
  1111                           ;pump_control.c: 326:                 break;
  1112  0001F6  D024               	goto	l4453
  1113  0001F8                     l4445:
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;pump_control.c: 334:                 start_main();
  1117  0001F8  EC83  F006         	call	_start_main	;wreg free
  1118                           
  1119                           ;pump_control.c: 335:                 break;
  1120  0001FC  D021               	goto	l4453
  1121  0001FE                     l4447:
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;pump_control.c: 337:                 pump_run();
  1125  0001FE  EC26  F007         	call	_pump_run	;wreg free
  1126                           
  1127                           ;pump_control.c: 338:                 break;
  1128  000202  D01E               	goto	l4453
  1129  000204                     l4451:
  1130  000204  5040               	movf	_state,w,c
  1131  000206  0100               	movlb	0	; () banked
  1132  000208  6FF6               	movwf	??_main& (0+255),b
  1133  00020A  6BF7               	clrf	(??_main+1)& (0+255),b
  1134                           
  1135                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1136                           ; Switch size 1, requested type "simple"
  1137                           ; Number of cases is 1, Range of values is 0 to 0
  1138                           ; switch strategies available:
  1139                           ; Name         Instructions Cycles
  1140                           ; simple_byte            4     3 (average)
  1141                           ;	Chosen strategy is simple_byte
  1142  00020C  51F7               	movf	(??_main+1)& (0+255),w,b
  1143  00020E  0A00               	xorlw	0	; case 0
  1144  000210  A4D8               	btfss	status,2,c
  1145  000212  D016               	goto	l4453
  1146                           
  1147                           ; BSR set to: 0
  1148                           ; Switch size 1, requested type "simple"
  1149                           ; Number of cases is 7, Range of values is 0 to 6
  1150                           ; switch strategies available:
  1151                           ; Name         Instructions Cycles
  1152                           ; simple_byte           22    12 (average)
  1153                           ;	Chosen strategy is simple_byte
  1154  000214  51F6               	movf	??_main& (0+255),w,b
  1155  000216  0A00               	xorlw	0	; case 0
  1156  000218  B4D8               	btfsc	status,2,c
  1157  00021A  D7E5               	goto	l4435
  1158  00021C  0A01               	xorlw	1	; case 1
  1159  00021E  B4D8               	btfsc	status,2,c
  1160  000220  D7E5               	goto	l4437
  1161  000222  0A03               	xorlw	3	; case 2
  1162  000224  B4D8               	btfsc	status,2,c
  1163  000226  D7E5               	goto	l4439
  1164  000228  0A01               	xorlw	1	; case 3
  1165  00022A  B4D8               	btfsc	status,2,c
  1166  00022C  D7E2               	goto	l4439
  1167  00022E  0A07               	xorlw	7	; case 4
  1168  000230  B4D8               	btfsc	status,2,c
  1169  000232  D7DF               	goto	l4439
  1170  000234  0A01               	xorlw	1	; case 5
  1171  000236  B4D8               	btfsc	status,2,c
  1172  000238  D7DF               	goto	l4445
  1173  00023A  0A03               	xorlw	3	; case 6
  1174  00023C  B4D8               	btfsc	status,2,c
  1175  00023E  D7DF               	goto	l4447
  1176  000240                     l4453:
  1177                           
  1178                           ;pump_control.c: 341:         if (state == standbyState) {
  1179  000240  5040               	movf	_state,w,c
  1180  000242  A4D8               	btfss	status,2,c
  1181  000244  D00F               	goto	l4463
  1182                           
  1183                           ;pump_control.c: 342:             if (!timer_events[EventIdleTimeout].active) {
  1184  000246  0100               	movlb	0	; () banked
  1185  000248  B18A               	btfsc	(_timer_events+42)& (0+255),0,b	;volatile
  1186  00024A  D796               	goto	l4405
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;pump_control.c: 343:                 timer_events[EventIdleTimeout].flag_bit = 0;
  1190  00024C  938A               	bcf	(_timer_events+42)& (0+255),1,b	;volatile
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;pump_control.c: 344:                 timer_events[EventIdleTimeout].flag_data = 0;
  1194  00024E  0E00               	movlw	0
  1195  000250  6F8D               	movwf	(_timer_events+45)& (0+255),b	;volatile
  1196  000252  0E00               	movlw	0
  1197  000254  6F8C               	movwf	(_timer_events+44)& (0+255),b	;volatile
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;pump_control.c: 345:                 enable_callback(EventIdleTimeout, (0x7fff));
  1201  000256  0E7F               	movlw	127
  1202  000258  6E15               	movwf	enable_callback@time_delay+1,c
  1203  00025A  6814               	setf	enable_callback@time_delay,c
  1204  00025C  0E05               	movlw	5
  1205  00025E  EC3F  F006         	call	_enable_callback
  1206  000262  D78A               	goto	l4405
  1207  000264                     l4463:
  1208                           
  1209                           ;pump_control.c: 349:             clear_callback(EventIdleTimeout);
  1210  000264  0E05               	movlw	5
  1211  000266  EC1B  F008         	call	_clear_callback
  1212  00026A  D786               	goto	l4405
  1213  00026C                     __end_of_main:
  1214                           	opt callstack 0
  1215                           
  1216 ;; *************** function _start_pump *****************
  1217 ;; Defined at:
  1218 ;;		line 3 in file "start_pump_state.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1232 ;;      Params:         0       0       0       0       0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1235 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1236 ;;Total ram usage:        0 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    7
  1239 ;; This function calls:
  1240 ;;		_clear_callback
  1241 ;;		_clear_callback_for_shutdown
  1242 ;;		_enable_callback
  1243 ;; This function is called by:
  1244 ;;		_main
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text1
  1249  0004A6                     __ptext1:
  1250                           	opt callstack 0
  1251  0004A6                     _start_pump:
  1252                           	opt callstack 23
  1253                           
  1254                           ;start_pump_state.c: 8:   if (( PORTAbits.RA4)) {
  1255                           
  1256                           ;incstack = 0
  1257  0004A6  A880               	btfss	3968,4,c	;volatile
  1258  0004A8  D009               	goto	l4317
  1259                           
  1260                           ;start_pump_state.c: 9:     fault_flags.lwl_fault = 1;
  1261  0004AA  803B               	bsf	_fault_flags,0,c
  1262                           
  1263                           ;start_pump_state.c: 10:     enable_callback (EventLowWaterLevel, (30*(8000000/256/4/256
      +                          )));
  1264  0004AC  0E03               	movlw	3
  1265  0004AE  6E15               	movwf	enable_callback@time_delay+1,c
  1266  0004B0  0E84               	movlw	132
  1267  0004B2  6E14               	movwf	enable_callback@time_delay,c
  1268  0004B4  0E00               	movlw	0
  1269  0004B6  EC3F  F006         	call	_enable_callback
  1270  0004BA  0012               	return	
  1271  0004BC                     l4317:
  1272                           
  1273                           ;start_pump_state.c: 16:   if (state != startpumpWaitState) {
  1274  0004BC  0E03               	movlw	3
  1275  0004BE  1840               	xorwf	_state,w,c
  1276  0004C0  B4D8               	btfsc	status,2,c
  1277  0004C2  D002               	goto	l647
  1278                           
  1279                           ;start_pump_state.c: 17:     { PORTEbits.RE0 = (1); fault_flags.boostPumpBit = (1);};
  1280  0004C4  8084               	bsf	3972,0,c	;volatile
  1281  0004C6  8C3B               	bsf	_fault_flags,6,c
  1282  0004C8                     l647:
  1283                           
  1284                           ;start_pump_state.c: 20:   if (!( (!PORTCbits.RC1) || (combinedZones != 0) )) {
  1285  0004C8  A282               	btfss	3970,1,c	;volatile
  1286  0004CA  D008               	goto	l648
  1287  0004CC  504B               	movf	_combinedZones,w,c
  1288  0004CE  A4D8               	btfss	status,2,c
  1289  0004D0  D005               	goto	l648
  1290                           
  1291                           ;start_pump_state.c: 23:     state = shutdownState;
  1292  0004D2  0E01               	movlw	1
  1293  0004D4  6E40               	movwf	_state,c
  1294                           
  1295                           ;start_pump_state.c: 24:      clear_callback_for_shutdown();
  1296  0004D6  EC3E  F007         	call	_clear_callback_for_shutdown	;wreg free
  1297  0004DA  0012               	return	
  1298  0004DC                     l648:
  1299                           
  1300                           ;start_pump_state.c: 41:     if (!fault_flags.wpOkBit) {
  1301  0004DC  B83B               	btfsc	_fault_flags,4,c
  1302  0004DE  D034               	goto	l4361
  1303                           
  1304                           ;start_pump_state.c: 42:       if (state == startpumpInitialState) {
  1305  0004E0  0E02               	movlw	2
  1306  0004E2  1840               	xorwf	_state,w,c
  1307  0004E4  A4D8               	btfss	status,2,c
  1308  0004E6  D00C               	goto	l4341
  1309                           
  1310                           ;start_pump_state.c: 46:  timer_events[EventLowWaterPressure].flag_bit = 0;
  1311  0004E8  0100               	movlb	0	; () banked
  1312  0004EA  936A               	bcf	(_timer_events+10)& (0+255),1,b	;volatile
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;start_pump_state.c: 47:  timer_events[EventLowWaterPressure].next_state = startpumpWait
      +                          State;
  1316  0004EC  0E03               	movlw	3
  1317  0004EE  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;start_pump_state.c: 48:  enable_callback (EventLowWaterPressure, (30*(8000000/256/4/256
      +                          )));
  1321  0004F0  0E03               	movlw	3
  1322  0004F2  6E15               	movwf	enable_callback@time_delay+1,c
  1323  0004F4  0E84               	movlw	132
  1324  0004F6  6E14               	movwf	enable_callback@time_delay,c
  1325  0004F8  0E01               	movlw	1
  1326  0004FA  EC3F  F006         	call	_enable_callback
  1327  0004FE  0012               	return	
  1328  000500                     l4341:
  1329                           
  1330                           ;start_pump_state.c: 52:       if (state == startpumpWaitState) {
  1331  000500  0E03               	movlw	3
  1332  000502  1840               	xorwf	_state,w,c
  1333  000504  A4D8               	btfss	status,2,c
  1334  000506  D00E               	goto	l4351
  1335                           
  1336                           ;start_pump_state.c: 56:  { PORTEbits.RE0 = (0); fault_flags.boostPumpBit = (0);};
  1337  000508  9084               	bcf	3972,0,c	;volatile
  1338  00050A  9C3B               	bcf	_fault_flags,6,c
  1339                           
  1340                           ;start_pump_state.c: 58:  timer_events[EventLowWaterPressure].flag_bit = 0;
  1341  00050C  0100               	movlb	0	; () banked
  1342  00050E  936A               	bcf	(_timer_events+10)& (0+255),1,b	;volatile
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;start_pump_state.c: 59:  timer_events[EventLowWaterPressure].next_state = startpumpSeco
      +                          ndLWPCheckState;
  1346  000510  0E04               	movlw	4
  1347  000512  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;start_pump_state.c: 60:  enable_callback (EventLowWaterPressure, (30*(8000000/256/4/256
      +                          )));
  1351  000514  0E03               	movlw	3
  1352  000516  6E15               	movwf	enable_callback@time_delay+1,c
  1353  000518  0E84               	movlw	132
  1354  00051A  6E14               	movwf	enable_callback@time_delay,c
  1355  00051C  0E01               	movlw	1
  1356  00051E  EC3F  F006         	call	_enable_callback
  1357  000522  0012               	return	
  1358  000524                     l4351:
  1359                           
  1360                           ;start_pump_state.c: 64:       if (state == startpumpSecondLWPCheckState) {
  1361  000524  0E04               	movlw	4
  1362  000526  1840               	xorwf	_state,w,c
  1363  000528  A4D8               	btfss	status,2,c
  1364  00052A  D011               	goto	l4363
  1365                           
  1366                           ;start_pump_state.c: 68:  { PORTEbits.RE0 = (1); fault_flags.boostPumpBit = (1);};
  1367  00052C  8084               	bsf	3972,0,c	;volatile
  1368  00052E  8C3B               	bsf	_fault_flags,6,c
  1369                           
  1370                           ;start_pump_state.c: 70:  timer_events[EventLowWaterPressure].flag_bit = 1;
  1371  000530  0100               	movlb	0	; () banked
  1372  000532  836A               	bsf	(_timer_events+10)& (0+255),1,b	;volatile
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;start_pump_state.c: 71:  timer_events[EventLowWaterPressure].next_state = shutdownState
      +                          ;
  1376  000534  0E01               	movlw	1
  1377  000536  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;start_pump_state.c: 72:  enable_callback (EventLowWaterPressure, (30*(8000000/256/4/256
      +                          )));
  1381  000538  0E03               	movlw	3
  1382  00053A  6E15               	movwf	enable_callback@time_delay+1,c
  1383  00053C  0E84               	movlw	132
  1384  00053E  6E14               	movwf	enable_callback@time_delay,c
  1385  000540  0E01               	movlw	1
  1386  000542  EC3F  F006         	call	_enable_callback
  1387  000546  0012               	return	
  1388  000548                     l4361:
  1389                           
  1390                           ;start_pump_state.c: 79:       clear_callback (EventLowWaterPressure);
  1391  000548  0E01               	movlw	1
  1392  00054A  EC1B  F008         	call	_clear_callback
  1393  00054E                     l4363:
  1394                           
  1395                           ;start_pump_state.c: 83:     state = startmainState;
  1396  00054E  0E05               	movlw	5
  1397  000550  6E40               	movwf	_state,c
  1398  000552  0012               	return		;funcret
  1399  000554                     __end_of_start_pump:
  1400                           	opt callstack 0
  1401                           
  1402 ;; *************** function _start_main *****************
  1403 ;; Defined at:
  1404 ;;		line 4 in file "start_main.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;		None
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1418 ;;      Params:         0       0       0       0       0       0       0       0       0
  1419 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1420 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1421 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1422 ;;Total ram usage:        0 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    7
  1425 ;; This function calls:
  1426 ;;		_clear_callback
  1427 ;;		_enable_callback
  1428 ;;		_monitor_pump_run
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text2
  1435  000D06                     __ptext2:
  1436                           	opt callstack 0
  1437  000D06                     _start_main:
  1438                           	opt callstack 23
  1439                           
  1440                           ;start_main.c: 12:     { PORTEbits.RE0 = (1); fault_flags.boostPumpBit = (1);};
  1441                           
  1442                           ;incstack = 0
  1443  000D06  8084               	bsf	3972,0,c	;volatile
  1444  000D08  8C3B               	bsf	_fault_flags,6,c
  1445                           
  1446                           ;start_main.c: 13:     { PORTAbits.RA1 = (1); fault_flags.mainPumpBit = (1);};
  1447  000D0A  8280               	bsf	3968,1,c	;volatile
  1448  000D0C  8A3B               	bsf	_fault_flags,5,c
  1449                           
  1450                           ;start_main.c: 14:     monitor_pump_run();
  1451  000D0E  ECAA  F002         	call	_monitor_pump_run	;wreg free
  1452                           
  1453                           ;start_main.c: 16:     if (!( PORTAbits.RA5)) {
  1454  000D12  BA80               	btfsc	3968,5,c	;volatile
  1455  000D14  D006               	goto	l619
  1456                           
  1457                           ;start_main.c: 17:         clear_callback(EventLowFogPressure);
  1458  000D16  0E03               	movlw	3
  1459  000D18  EC1B  F008         	call	_clear_callback
  1460                           
  1461                           ;start_main.c: 18:         state = pumprunState;
  1462  000D1C  0E06               	movlw	6
  1463  000D1E  6E40               	movwf	_state,c
  1464                           
  1465                           ;start_main.c: 19:     } else {
  1466  000D20  0012               	return	
  1467  000D22                     l619:
  1468                           
  1469                           ;start_main.c: 20:         if (!timer_events[EventLowFogPressure].active) {
  1470  000D22  0100               	movlb	0	; () banked
  1471  000D24  B17A               	btfsc	(_timer_events+26)& (0+255),0,b	;volatile
  1472  000D26  0012               	return	
  1473                           
  1474                           ; BSR set to: 0
  1475                           ;start_main.c: 21:             timer_events[EventLowFogPressure].flag_bit = 0;
  1476  000D28  937A               	bcf	(_timer_events+26)& (0+255),1,b	;volatile
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;start_main.c: 22:             timer_events[EventLowFogPressure].flag_data = (3*(8000000
      +                          /256/4/256));
  1480  000D2A  0E00               	movlw	0
  1481  000D2C  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  1482  000D2E  0E5A               	movlw	90
  1483  000D30  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;start_main.c: 23:             enable_callback(EventLowFogPressure, (30*(8000000/256/4/2
      +                          56)));
  1487  000D32  0E03               	movlw	3
  1488  000D34  6E15               	movwf	enable_callback@time_delay+1,c
  1489  000D36  0E84               	movlw	132
  1490  000D38  6E14               	movwf	enable_callback@time_delay,c
  1491  000D3A  0E03               	movlw	3
  1492  000D3C  EC3F  F006         	call	_enable_callback
  1493  000D40  0012               	return		;funcret
  1494  000D42                     __end_of_start_main:
  1495                           	opt callstack 0
  1496                           
  1497 ;; *************** function _standby *****************
  1498 ;; Defined at:
  1499 ;;		line 3 in file "standby_state.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;		None
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;		None
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0
  1514 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1516 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1517 ;;Total ram usage:        0 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    6
  1520 ;; This function calls:
  1521 ;;		_clear_callback
  1522 ;;		_enable_callback
  1523 ;; This function is called by:
  1524 ;;		_main
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text3
  1529  000AEA                     __ptext3:
  1530                           	opt callstack 0
  1531  000AEA                     _standby:
  1532                           	opt callstack 24
  1533                           
  1534                           ;standby_state.c: 24:   if (!( PORTAbits.RA4)) {
  1535                           
  1536                           ;incstack = 0
  1537  000AEA  B880               	btfsc	3968,4,c	;volatile
  1538  000AEC  D005               	goto	l594
  1539                           
  1540                           ;standby_state.c: 27:     clear_callback (EventLowWaterLevel);
  1541  000AEE  0E00               	movlw	0
  1542  000AF0  EC1B  F008         	call	_clear_callback
  1543                           
  1544                           ;standby_state.c: 28:     fault_flags.lwl_fault = 0;
  1545  000AF4  903B               	bcf	_fault_flags,0,c
  1546                           
  1547                           ;standby_state.c: 29:   }
  1548  000AF6  D008               	goto	l4279
  1549  000AF8                     l594:
  1550                           
  1551                           ;standby_state.c: 31:     fault_flags.lwl_fault = 1;
  1552  000AF8  803B               	bsf	_fault_flags,0,c
  1553                           
  1554                           ;standby_state.c: 32:     enable_callback (EventLowWaterLevel, (30*(8000000/256/4/256)))
      +                          ;
  1555  000AFA  0E03               	movlw	3
  1556  000AFC  6E15               	movwf	enable_callback@time_delay+1,c
  1557  000AFE  0E84               	movlw	132
  1558  000B00  6E14               	movwf	enable_callback@time_delay,c
  1559  000B02  0E00               	movlw	0
  1560  000B04  EC3F  F006         	call	_enable_callback
  1561  000B08                     l4279:
  1562                           
  1563                           ;standby_state.c: 37:   { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);};
  1564  000B08  9280               	bcf	3968,1,c	;volatile
  1565  000B0A  9A3B               	bcf	_fault_flags,5,c
  1566                           
  1567                           ;standby_state.c: 39:   { PORTEbits.RE0 = (0); fault_flags.boostPumpBit = (0);};
  1568  000B0C  9084               	bcf	3972,0,c	;volatile
  1569  000B0E  9C3B               	bcf	_fault_flags,6,c
  1570                           
  1571                           ;standby_state.c: 40:   if (!inIdleDumpHour){
  1572  000B10  503F               	movf	_inIdleDumpHour,w,c
  1573  000B12  A4D8               	btfss	status,2,c
  1574  000B14  D002               	goto	l596
  1575                           
  1576                           ;standby_state.c: 41:      { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  1577  000B16  9480               	bcf	3968,2,c	;volatile
  1578  000B18  903C               	bcf	_fault_flags+1,0,c
  1579  000B1A                     l596:
  1580                           
  1581                           ;standby_state.c: 48:   if (( (!PORTCbits.RC1) || (combinedZones != 0) )
  1582  000B1A  A282               	btfss	3970,1,c	;volatile
  1583  000B1C  D003               	goto	u3330
  1584  000B1E  504B               	movf	_combinedZones,w,c
  1585  000B20  B4D8               	btfsc	status,2,c
  1586  000B22  0012               	return	
  1587  000B24                     u3330:
  1588  000B24  B03B               	btfsc	_fault_flags,0,c
  1589  000B26  0012               	return	
  1590  000B28  B23B               	btfsc	_fault_flags,1,c
  1591  000B2A  0012               	return	
  1592  000B2C  B43B               	btfsc	_fault_flags,2,c
  1593  000B2E  0012               	return	
  1594  000B30  B63B               	btfsc	_fault_flags,3,c
  1595  000B32  0012               	return	
  1596                           
  1597                           ;standby_state.c: 52:       && !fault_flags.po_fault) {;standby_state.c: 54:     state =
      +                           startpumpInitialState;
  1598  000B34  0E02               	movlw	2
  1599  000B36  6E40               	movwf	_state,c
  1600                           
  1601                           ;standby_state.c: 55:     inIdleDumpHour = 0;
  1602  000B38  0E00               	movlw	0
  1603  000B3A  6E3F               	movwf	_inIdleDumpHour,c
  1604                           
  1605                           ;standby_state.c: 56:      { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  1606  000B3C  9480               	bcf	3968,2,c	;volatile
  1607  000B3E  903C               	bcf	_fault_flags+1,0,c
  1608  000B40  0012               	return		;funcret
  1609  000B42                     __end_of_standby:
  1610                           	opt callstack 0
  1611                           
  1612 ;; *************** function _shutdown *****************
  1613 ;; Defined at:
  1614 ;;		line 4 in file "shutdown_state.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;		None
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1628 ;;      Params:         0       0       0       0       0       0       0       0       0
  1629 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1631 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1632 ;;Total ram usage:        0 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    6
  1635 ;; This function calls:
  1636 ;;		_enable_callback
  1637 ;; This function is called by:
  1638 ;;		_main
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	text4
  1643  000FCC                     __ptext4:
  1644                           	opt callstack 0
  1645  000FCC                     _shutdown:
  1646                           	opt callstack 24
  1647                           
  1648                           ;shutdown_state.c: 14:   { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);};
  1649                           
  1650                           ;incstack = 0
  1651  000FCC  9280               	bcf	3968,1,c	;volatile
  1652  000FCE  9A3B               	bcf	_fault_flags,5,c
  1653                           
  1654                           ;shutdown_state.c: 15:   { PORTEbits.RE0 = (0); fault_flags.boostPumpBit = (0);};
  1655  000FD0  9084               	bcf	3972,0,c	;volatile
  1656  000FD2  9C3B               	bcf	_fault_flags,6,c
  1657                           
  1658                           ;shutdown_state.c: 16:   { PORTAbits.RA2 = (1); fault_flags.dumpSolenoidBit = (1);};
  1659  000FD4  8480               	bsf	3968,2,c	;volatile
  1660  000FD6  803C               	bsf	_fault_flags+1,0,c
  1661                           
  1662                           ;shutdown_state.c: 20:   enable_callback (EventDumpSolenoid, (2*(8000000/256/4/256)));
  1663  000FD8  0E00               	movlw	0
  1664  000FDA  6E15               	movwf	enable_callback@time_delay+1,c
  1665  000FDC  0E3C               	movlw	60
  1666  000FDE  6E14               	movwf	enable_callback@time_delay,c
  1667  000FE0  0E06               	movlw	6
  1668  000FE2  EC3F  F006         	call	_enable_callback
  1669  000FE6  0012               	return		;funcret
  1670  000FE8                     __end_of_shutdown:
  1671                           	opt callstack 0
  1672                           
  1673 ;; *************** function _serial_process_loop *****************
  1674 ;; Defined at:
  1675 ;;		line 106 in file "serial.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;		None
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;		None
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      void 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1689 ;;      Params:         0       0       0       0       0       0       0       0       0
  1690 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1691 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1692 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1693 ;;Total ram usage:        0 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    6
  1696 ;; This function calls:
  1697 ;;		_has_data
  1698 ;; This function is called by:
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text5
  1704  001004                     __ptext5:
  1705                           	opt callstack 0
  1706  001004                     _serial_process_loop:
  1707                           	opt callstack 24
  1708                           
  1709                           ;serial.c: 108:     if (TRMT && has_data(&outbound)) {
  1710                           
  1711                           ;incstack = 0
  1712  001004  A2AC               	btfss	4012,1,c	;volatile
  1713  001006  0012               	return	
  1714  001008  0E12               	movlw	low _outbound
  1715  00100A  6E14               	movwf	has_data@buff,c
  1716  00100C  0E02               	movlw	high _outbound
  1717  00100E  6E15               	movwf	has_data@buff+1,c
  1718  001010  EC4E  F008         	call	_has_data	;wreg free
  1719  001014  0900               	iorlw	0
  1720  001016  B4D8               	btfsc	status,2,c
  1721  001018  0012               	return	
  1722                           
  1723                           ;serial.c: 110:         TXIE = 1;
  1724  00101A  889D               	bsf	3997,4,c	;volatile
  1725  00101C  0012               	return		;funcret
  1726  00101E                     __end_of_serial_process_loop:
  1727                           	opt callstack 0
  1728                           
  1729 ;; *************** function _receiveMessage *****************
  1730 ;; Defined at:
  1731 ;;		line 222 in file "serial.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  c               1   26[COMRAM] unsigned char 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  2   24[COMRAM] PTR unsigned char 
  1738 ;; Registers used:
  1739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1745 ;;      Params:         2       0       0       0       0       0       0       0       0
  1746 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1748 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1749 ;;Total ram usage:        3 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    6
  1752 ;; This function calls:
  1753 ;;		_has_data
  1754 ;;		_pop
  1755 ;; This function is called by:
  1756 ;;		_main
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text6
  1761  0005F2                     __ptext6:
  1762                           	opt callstack 0
  1763  0005F2                     _receiveMessage:
  1764                           	opt callstack 24
  1765                           
  1766                           ;serial.c: 224:   static char message[10];;serial.c: 225:   char c;;serial.c: 226:   sta
      +                          tic int len = 0;;serial.c: 228:   if (!has_data(&inbound)) {
  1767                           
  1768                           ;incstack = 0
  1769  0005F2  0E0E               	movlw	low _inbound
  1770  0005F4  6E14               	movwf	has_data@buff,c
  1771  0005F6  0E01               	movlw	high _inbound
  1772  0005F8  6E15               	movwf	has_data@buff+1,c
  1773  0005FA  EC4E  F008         	call	_has_data	;wreg free
  1774  0005FE  0900               	iorlw	0
  1775  000600  A4D8               	btfss	status,2,c
  1776  000602  D005               	goto	l4199
  1777  000604                     u3200:
  1778                           
  1779                           ;serial.c: 229:       return 0;
  1780  000604  0E00               	movlw	0
  1781  000606  6E19               	movwf	?_receiveMessage,c
  1782  000608  0E00               	movlw	0
  1783  00060A  6E1A               	movwf	?_receiveMessage+1,c
  1784  00060C  0012               	return	
  1785  00060E                     l4199:
  1786                           
  1787                           ;serial.c: 232:   c = pop(&inbound);
  1788  00060E  0E0E               	movlw	low _inbound
  1789  000610  6E14               	movwf	pop@buff,c
  1790  000612  0E01               	movlw	high _inbound
  1791  000614  6E15               	movwf	pop@buff+1,c
  1792  000616  EC45  F003         	call	_pop	;wreg free
  1793  00061A  6E1B               	movwf	receiveMessage@c,c
  1794                           
  1795                           ;serial.c: 234:   if (0 == c) {
  1796  00061C  501B               	movf	receiveMessage@c,w,c
  1797  00061E  B4D8               	btfsc	status,2,c
  1798  000620  D7F1               	goto	u3200
  1799                           
  1800                           ;serial.c: 239:   if ((0 == len) && (c != '{')) {
  1801  000622  5039               	movf	receiveMessage@len,w,c
  1802  000624  103A               	iorwf	receiveMessage@len+1,w,c
  1803  000626  A4D8               	btfss	status,2,c
  1804  000628  D004               	goto	l4215
  1805  00062A  0E7B               	movlw	123
  1806  00062C  181B               	xorwf	receiveMessage@c,w,c
  1807  00062E  A4D8               	btfss	status,2,c
  1808  000630  D7E9               	goto	u3200
  1809  000632                     l4215:
  1810                           
  1811                           ;serial.c: 244:   message[len] = c;
  1812  000632  0EC8               	movlw	low receiveMessage@message
  1813  000634  2439               	addwf	receiveMessage@len,w,c
  1814  000636  6ED9               	movwf	fsr2l,c
  1815  000638  0E00               	movlw	high receiveMessage@message
  1816  00063A  203A               	addwfc	receiveMessage@len+1,w,c
  1817  00063C  6EDA               	movwf	fsr2h,c
  1818  00063E  C01B  FFDF         	movff	receiveMessage@c,indf2
  1819                           
  1820                           ;serial.c: 246:   len++;
  1821  000642  4A39               	infsnz	receiveMessage@len,f,c
  1822  000644  2A3A               	incf	receiveMessage@len+1,f,c
  1823                           
  1824                           ;serial.c: 247:   if (len >= 10) {
  1825  000646  BE3A               	btfsc	receiveMessage@len+1,7,c
  1826  000648  D00B               	goto	l4227
  1827  00064A  503A               	movf	receiveMessage@len+1,w,c
  1828  00064C  E104               	bnz	u3240
  1829  00064E  0E0A               	movlw	10
  1830  000650  5C39               	subwf	receiveMessage@len,w,c
  1831  000652  A0D8               	btfss	status,0,c
  1832  000654  D005               	goto	l4227
  1833  000656                     u3240:
  1834                           
  1835                           ;serial.c: 249:     len = 0;
  1836  000656  0E00               	movlw	0
  1837  000658  6E3A               	movwf	receiveMessage@len+1,c
  1838  00065A  0E00               	movlw	0
  1839  00065C  6E39               	movwf	receiveMessage@len,c
  1840  00065E  D7D2               	goto	u3200
  1841  000660                     l4227:
  1842                           
  1843                           ;serial.c: 252:   if ('}' == c) {
  1844  000660  0E7D               	movlw	125
  1845  000662  181B               	xorwf	receiveMessage@c,w,c
  1846  000664  A4D8               	btfss	status,2,c
  1847  000666  D7CE               	goto	u3200
  1848                           
  1849                           ;serial.c: 253:     message[len] = 0;
  1850  000668  0EC8               	movlw	low receiveMessage@message
  1851  00066A  2439               	addwf	receiveMessage@len,w,c
  1852  00066C  6ED9               	movwf	fsr2l,c
  1853  00066E  0E00               	movlw	high receiveMessage@message
  1854  000670  203A               	addwfc	receiveMessage@len+1,w,c
  1855  000672  6EDA               	movwf	fsr2h,c
  1856  000674  0E00               	movlw	0
  1857  000676  6EDF               	movwf	indf2,c
  1858                           
  1859                           ;serial.c: 255:     len = 0;
  1860  000678  0E00               	movlw	0
  1861  00067A  6E3A               	movwf	receiveMessage@len+1,c
  1862  00067C  0E00               	movlw	0
  1863  00067E  6E39               	movwf	receiveMessage@len,c
  1864                           
  1865                           ;serial.c: 257:     return message;
  1866  000680  0EC8               	movlw	low receiveMessage@message
  1867  000682  6E19               	movwf	?_receiveMessage,c
  1868  000684  0E00               	movlw	high receiveMessage@message
  1869  000686  6E1A               	movwf	?_receiveMessage+1,c
  1870  000688  0012               	return		;funcret
  1871  00068A                     __end_of_receiveMessage:
  1872                           	opt callstack 0
  1873                           
  1874 ;; *************** function _pop *****************
  1875 ;; Defined at:
  1876 ;;		line 27 in file "serial_buffer.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;  buff            2   19[COMRAM] PTR struct .
  1879 ;;		 -> inbound(260), outbound(260), 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  d               1   23[COMRAM] unsigned char 
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      unsigned char 
  1884 ;; Registers used:
  1885 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1891 ;;      Params:         2       0       0       0       0       0       0       0       0
  1892 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1893 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1894 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1895 ;;Total ram usage:        5 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    5
  1898 ;; This function calls:
  1899 ;;		Nothing
  1900 ;; This function is called by:
  1901 ;;		_receiveMessage
  1902 ;;		_sendChars
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text7
  1907  00068A                     __ptext7:
  1908                           	opt callstack 0
  1909  00068A                     _pop:
  1910                           	opt callstack 24
  1911                           
  1912                           ;serial_buffer.c: 28:     unsigned char d;;serial_buffer.c: 32:     if (buff->length == 
      +                          0) {
  1913                           
  1914                           ;incstack = 0
  1915  00068A  EE21 F002          	lfsr	2,258
  1916  00068E  5014               	movf	pop@buff,w,c
  1917  000690  26D9               	addwf	fsr2l,f,c
  1918  000692  5015               	movf	pop@buff+1,w,c
  1919  000694  22DA               	addwfc	fsr2h,f,c
  1920  000696  50DE               	movf	postinc2,w,c
  1921  000698  10DE               	iorwf	postinc2,w,c
  1922  00069A  A4D8               	btfss	status,2,c
  1923  00069C  D002               	goto	l491
  1924                           
  1925                           ;serial_buffer.c: 34:         return 0;
  1926  00069E  0E00               	movlw	0
  1927  0006A0  0012               	return	
  1928  0006A2                     l491:
  1929                           
  1930                           ;serial_buffer.c: 37:     GIE = 0;
  1931  0006A2  9EF2               	bcf	4082,7,c	;volatile
  1932                           
  1933                           ;serial_buffer.c: 38:     d = buff->data[buff->start];
  1934  0006A4  EE21 F000          	lfsr	2,256
  1935  0006A8  5014               	movf	pop@buff,w,c
  1936  0006AA  26D9               	addwf	fsr2l,f,c
  1937  0006AC  5015               	movf	pop@buff+1,w,c
  1938  0006AE  22DA               	addwfc	fsr2h,f,c
  1939  0006B0  CFDE F016          	movff	postinc2,??_pop
  1940  0006B4  CFDD F017          	movff	postdec2,??_pop+1
  1941  0006B8  5016               	movf	??_pop,w,c
  1942  0006BA  2414               	addwf	pop@buff,w,c
  1943  0006BC  6ED9               	movwf	fsr2l,c
  1944  0006BE  5017               	movf	??_pop+1,w,c
  1945  0006C0  2015               	addwfc	pop@buff+1,w,c
  1946  0006C2  6EDA               	movwf	fsr2h,c
  1947  0006C4  50DF               	movf	indf2,w,c
  1948  0006C6  6E18               	movwf	pop@d,c
  1949                           
  1950                           ;serial_buffer.c: 39:     buff->length--;
  1951  0006C8  EE21 F002          	lfsr	2,258
  1952  0006CC  5014               	movf	pop@buff,w,c
  1953  0006CE  26D9               	addwf	fsr2l,f,c
  1954  0006D0  5015               	movf	pop@buff+1,w,c
  1955  0006D2  22DA               	addwfc	fsr2h,f,c
  1956  0006D4  06DE               	decf	postinc2,f,c
  1957  0006D6  0E00               	movlw	0
  1958  0006D8  5ADD               	subwfb	postdec2,f,c
  1959                           
  1960                           ;serial_buffer.c: 40:     buff->start = (buff->start + 1) % 256;
  1961  0006DA  EE21 F000          	lfsr	2,256
  1962  0006DE  5014               	movf	pop@buff,w,c
  1963  0006E0  26D9               	addwf	fsr2l,f,c
  1964  0006E2  5015               	movf	pop@buff+1,w,c
  1965  0006E4  22DA               	addwfc	fsr2h,f,c
  1966  0006E6  CFDE F016          	movff	postinc2,??_pop
  1967  0006EA  CFDD F017          	movff	postdec2,??_pop+1
  1968  0006EE  0E01               	movlw	1
  1969  0006F0  2616               	addwf	??_pop,f,c
  1970  0006F2  0E00               	movlw	0
  1971  0006F4  2217               	addwfc	??_pop+1,f,c
  1972  0006F6  0EFF               	movlw	255
  1973  0006F8  1616               	andwf	??_pop,f,c
  1974  0006FA  0E00               	movlw	0
  1975  0006FC  1617               	andwf	??_pop+1,f,c
  1976  0006FE  EE21 F000          	lfsr	2,256
  1977  000702  5014               	movf	pop@buff,w,c
  1978  000704  26D9               	addwf	fsr2l,f,c
  1979  000706  5015               	movf	pop@buff+1,w,c
  1980  000708  22DA               	addwfc	fsr2h,f,c
  1981  00070A  C016  FFDE         	movff	??_pop,postinc2
  1982  00070E  C017  FFDD         	movff	??_pop+1,postdec2
  1983                           
  1984                           ;serial_buffer.c: 41:     GIE = 1;
  1985  000712  8EF2               	bsf	4082,7,c	;volatile
  1986                           
  1987                           ;serial_buffer.c: 43:     return d;
  1988  000714  5018               	movf	pop@d,w,c
  1989  000716  0012               	return		;funcret
  1990  000718                     __end_of_pop:
  1991                           	opt callstack 0
  1992                           
  1993 ;; *************** function _has_data *****************
  1994 ;; Defined at:
  1995 ;;		line 51 in file "serial_buffer.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  buff            2   19[COMRAM] PTR struct .
  1998 ;;		 -> inbound(260), outbound(260), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      unsigned char 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2010 ;;      Params:         2       0       0       0       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2013 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2014 ;;Total ram usage:        2 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    5
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_serial_process_loop
  2021 ;;		_receiveMessage
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text8
  2026  00109C                     __ptext8:
  2027                           	opt callstack 0
  2028  00109C                     _has_data:
  2029                           	opt callstack 24
  2030                           
  2031                           ;serial_buffer.c: 52:     return buff->length;
  2032                           
  2033                           ;incstack = 0
  2034  00109C  EE21 F002          	lfsr	2,258
  2035  0010A0  5014               	movf	has_data@buff,w,c
  2036  0010A2  26D9               	addwf	fsr2l,f,c
  2037  0010A4  5015               	movf	has_data@buff+1,w,c
  2038  0010A6  22DA               	addwfc	fsr2h,f,c
  2039  0010A8  50DF               	movf	indf2,w,c
  2040  0010AA  0012               	return		;funcret
  2041  0010AC                     __end_of_has_data:
  2042                           	opt callstack 0
  2043                           
  2044 ;; *************** function _pump_run *****************
  2045 ;; Defined at:
  2046 ;;		line 4 in file "pump_run.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      void 
  2053 ;; Registers used:
  2054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2060 ;;      Params:         0       0       0       0       0       0       0       0       0
  2061 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2063 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    7
  2067 ;; This function calls:
  2068 ;;		_clear_callback
  2069 ;;		_enable_callback
  2070 ;;		_monitor_pump_run
  2071 ;; This function is called by:
  2072 ;;		_main
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text9
  2077  000E4C                     __ptext9:
  2078                           	opt callstack 0
  2079  000E4C                     _pump_run:
  2080                           	opt callstack 23
  2081                           
  2082                           ;pump_run.c: 15:    monitor_pump_run();
  2083                           
  2084                           ;incstack = 0
  2085  000E4C  ECAA  F002         	call	_monitor_pump_run	;wreg free
  2086                           
  2087                           ;pump_run.c: 17:  if (!( PORTAbits.RA5)) {
  2088  000E50  BA80               	btfsc	3968,5,c	;volatile
  2089  000E52  D004               	goto	l304
  2090                           
  2091                           ;pump_run.c: 18:       clear_callback (EventLowFogPressure);
  2092  000E54  0E03               	movlw	3
  2093  000E56  EC1B  F008         	call	_clear_callback
  2094                           
  2095                           ;pump_run.c: 19:   } else {
  2096  000E5A  0012               	return	
  2097  000E5C                     l304:
  2098                           
  2099                           ;pump_run.c: 20:     if (!timer_events[EventLowFogPressure].active) {
  2100  000E5C  0100               	movlb	0	; () banked
  2101  000E5E  B17A               	btfsc	(_timer_events+26)& (0+255),0,b	;volatile
  2102  000E60  0012               	return	
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;pump_run.c: 21:       timer_events[EventLowFogPressure].flag_bit = 1;
  2106  000E62  837A               	bsf	(_timer_events+26)& (0+255),1,b	;volatile
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;pump_run.c: 22:       timer_events[EventLowFogPressure].flag_data = (15*(8000000/256/4/
      +                          256));
  2110  000E64  0E01               	movlw	1
  2111  000E66  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  2112  000E68  0EC2               	movlw	194
  2113  000E6A  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;pump_run.c: 23:       enable_callback (EventLowFogPressure, (15*(8000000/256/4/256)));
  2117  000E6C  0E01               	movlw	1
  2118  000E6E  6E15               	movwf	enable_callback@time_delay+1,c
  2119  000E70  0EC2               	movlw	194
  2120  000E72  6E14               	movwf	enable_callback@time_delay,c
  2121  000E74  0E03               	movlw	3
  2122  000E76  EC3F  F006         	call	_enable_callback
  2123  000E7A  0012               	return		;funcret
  2124  000E7C                     __end_of_pump_run:
  2125                           	opt callstack 0
  2126                           
  2127 ;; *************** function _monitor_pump_run *****************
  2128 ;; Defined at:
  2129 ;;		line 38 in file "pump_run.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;		None
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2143 ;;      Params:         0       0       0       0       0       0       0       0       0
  2144 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2146 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2147 ;;Total ram usage:        0 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    6
  2150 ;; This function calls:
  2151 ;;		_clear_callback
  2152 ;;		_enable_callback
  2153 ;; This function is called by:
  2154 ;;		_pump_run
  2155 ;;		_start_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text10
  2160  000554                     __ptext10:
  2161                           	opt callstack 0
  2162  000554                     _monitor_pump_run:
  2163                           	opt callstack 23
  2164                           
  2165                           ;pump_run.c: 41:     if (( (!PORTCbits.RC1) || (combinedZones != 0) )) {
  2166                           
  2167                           ;incstack = 0
  2168  000554  A282               	btfss	3970,1,c	;volatile
  2169  000556  D003               	goto	u2960
  2170  000558  504B               	movf	_combinedZones,w,c
  2171  00055A  B4D8               	btfsc	status,2,c
  2172  00055C  D004               	goto	l310
  2173  00055E                     u2960:
  2174                           
  2175                           ;pump_run.c: 42:       clear_callback (EventRunSignalDebounce);
  2176  00055E  0E07               	movlw	7
  2177  000560  EC1B  F008         	call	_clear_callback
  2178                           
  2179                           ;pump_run.c: 44:   } else {
  2180  000564  D00D               	goto	l4031
  2181  000566                     l310:
  2182                           
  2183                           ;pump_run.c: 46:        if (!timer_events[EventRunSignalDebounce].active) {
  2184  000566  0100               	movlb	0	; () banked
  2185  000568  B19A               	btfsc	(_timer_events+58)& (0+255),0,b	;volatile
  2186  00056A  D00A               	goto	l4031
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;pump_run.c: 47:       timer_events[EventRunSignalDebounce].flag_bit = 0;
  2190  00056C  939A               	bcf	(_timer_events+58)& (0+255),1,b	;volatile
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;pump_run.c: 48:       timer_events[EventRunSignalDebounce].next_state = shutdownState;
  2194  00056E  0E01               	movlw	1
  2195  000570  6F9B               	movwf	(_timer_events+59)& (0+255),b	;volatile
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;pump_run.c: 49:       enable_callback (EventRunSignalDebounce, ((8000000/256/4/256)/2))
      +                          ;
  2199  000572  0E00               	movlw	0
  2200  000574  6E15               	movwf	enable_callback@time_delay+1,c
  2201  000576  0E0F               	movlw	15
  2202  000578  6E14               	movwf	enable_callback@time_delay,c
  2203  00057A  0E07               	movlw	7
  2204  00057C  EC3F  F006         	call	_enable_callback
  2205  000580                     l4031:
  2206                           
  2207                           ;pump_run.c: 55:   if (( !PORTCbits.RC2)) {
  2208  000580  B482               	btfsc	3970,2,c	;volatile
  2209  000582  D00D               	goto	l4041
  2210                           
  2211                           ;pump_run.c: 57:        if (!timer_events[EventPODebounce].active) {
  2212  000584  0100               	movlb	0	; () banked
  2213  000586  B1A2               	btfsc	(_timer_events+66)& (0+255),0,b	;volatile
  2214  000588  D00A               	goto	l4041
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;pump_run.c: 58:       timer_events[EventPODebounce].flag_bit = 0;
  2218  00058A  93A2               	bcf	(_timer_events+66)& (0+255),1,b	;volatile
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;pump_run.c: 59:       timer_events[EventPODebounce].next_state = shutdownState;
  2222  00058C  0E01               	movlw	1
  2223  00058E  6FA3               	movwf	(_timer_events+67)& (0+255),b	;volatile
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;pump_run.c: 60:       enable_callback (EventPODebounce, ((8000000/256/4/256)/2));
  2227  000590  0E00               	movlw	0
  2228  000592  6E15               	movwf	enable_callback@time_delay+1,c
  2229  000594  0E0F               	movlw	15
  2230  000596  6E14               	movwf	enable_callback@time_delay,c
  2231  000598  0E08               	movlw	8
  2232  00059A  EC3F  F006         	call	_enable_callback
  2233  00059E                     l4041:
  2234                           
  2235                           ;pump_run.c: 67:   if (!( PORTAbits.RA4)) {
  2236  00059E  B880               	btfsc	3968,4,c	;volatile
  2237  0005A0  D005               	goto	l317
  2238                           
  2239                           ;pump_run.c: 68:        clear_callback (EventLowWaterLevel);
  2240  0005A2  0E00               	movlw	0
  2241  0005A4  EC1B  F008         	call	_clear_callback
  2242                           
  2243                           ;pump_run.c: 69:       fault_flags.lwl_fault = 0;
  2244  0005A8  903B               	bcf	_fault_flags,0,c
  2245                           
  2246                           ;pump_run.c: 70:   } else {
  2247  0005AA  D00F               	goto	l4053
  2248  0005AC                     l317:
  2249                           
  2250                           ;pump_run.c: 71:     if (!timer_events[EventLowWaterLevel].active) {
  2251  0005AC  0100               	movlb	0	; () banked
  2252  0005AE  B162               	btfsc	(_timer_events+2)& (0+255),0,b	;volatile
  2253  0005B0  D00C               	goto	l4053
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;pump_run.c: 72:       timer_events[EventLowWaterLevel].flag_bit = 1;
  2257  0005B2  8362               	bsf	(_timer_events+2)& (0+255),1,b	;volatile
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;pump_run.c: 73:       timer_events[EventLowWaterLevel].flag_data = 0;
  2261  0005B4  0E00               	movlw	0
  2262  0005B6  6F65               	movwf	(_timer_events+5)& (0+255),b	;volatile
  2263  0005B8  0E00               	movlw	0
  2264  0005BA  6F64               	movwf	(_timer_events+4)& (0+255),b	;volatile
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;pump_run.c: 74:       enable_callback (EventLowWaterLevel, (3*(8000000/256/4/256)));
  2268  0005BC  0E00               	movlw	0
  2269  0005BE  6E15               	movwf	enable_callback@time_delay+1,c
  2270  0005C0  0E5A               	movlw	90
  2271  0005C2  6E14               	movwf	enable_callback@time_delay,c
  2272  0005C4  0E00               	movlw	0
  2273  0005C6  EC3F  F006         	call	_enable_callback
  2274  0005CA                     l4053:
  2275                           
  2276                           ;pump_run.c: 79:   if (fault_flags.wpOkBit) {
  2277  0005CA  A83B               	btfss	_fault_flags,4,c
  2278  0005CC  D004               	goto	l320
  2279                           
  2280                           ;pump_run.c: 80:       clear_callback (EventLowWaterPressure);
  2281  0005CE  0E01               	movlw	1
  2282  0005D0  EC1B  F008         	call	_clear_callback
  2283                           
  2284                           ;pump_run.c: 81:   }else {
  2285  0005D4  0012               	return	
  2286  0005D6                     l320:
  2287                           
  2288                           ;pump_run.c: 82:     if (!timer_events[EventLowWaterPressure].active) {
  2289  0005D6  0100               	movlb	0	; () banked
  2290  0005D8  B16A               	btfsc	(_timer_events+10)& (0+255),0,b	;volatile
  2291  0005DA  0012               	return	
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;pump_run.c: 83:       timer_events[EventLowWaterPressure].flag_bit = 1;
  2295  0005DC  836A               	bsf	(_timer_events+10)& (0+255),1,b	;volatile
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;pump_run.c: 84:       timer_events[EventLowWaterPressure].next_state = shutdownState;
  2299  0005DE  0E01               	movlw	1
  2300  0005E0  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;pump_run.c: 85:       enable_callback (EventLowWaterPressure, (3*(8000000/256/4/256)));
  2304  0005E2  0E00               	movlw	0
  2305  0005E4  6E15               	movwf	enable_callback@time_delay+1,c
  2306  0005E6  0E5A               	movlw	90
  2307  0005E8  6E14               	movwf	enable_callback@time_delay,c
  2308  0005EA  0E01               	movlw	1
  2309  0005EC  EC3F  F006         	call	_enable_callback
  2310  0005F0  0012               	return		;funcret
  2311  0005F2                     __end_of_monitor_pump_run:
  2312                           	opt callstack 0
  2313                           
  2314 ;; *************** function _process_message *****************
  2315 ;; Defined at:
  2316 ;;		line 104 in file "serial_message.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  inmessage       2   34[COMRAM] PTR unsigned char 
  2319 ;;		 -> receiveMessage@message(10), NULL(0), 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  address         1    0        unsigned char 
  2322 ;;  msgType         1   38[COMRAM] unsigned char 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2332 ;;      Params:         2       0       0       0       0       0       0       0       0
  2333 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2334 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2335 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2336 ;;Total ram usage:        6 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    9
  2339 ;; This function calls:
  2340 ;;		_process_get_status_message
  2341 ;;		_process_reset_pump
  2342 ;;		_process_set_address_message
  2343 ;;		_process_set_zones_message
  2344 ;; This function is called by:
  2345 ;;		_main
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text11
  2350  0003F4                     __ptext11:
  2351                           	opt callstack 0
  2352  0003F4                     _process_message:
  2353                           	opt callstack 21
  2354                           
  2355                           ;serial_message.c: 112:     if (inmessage[1] == '0' || inmessage[1] == address) {
  2356                           
  2357                           ;incstack = 0
  2358  0003F4  EE20 F001          	lfsr	2,1
  2359  0003F8  5023               	movf	process_message@inmessage,w,c
  2360  0003FA  26D9               	addwf	fsr2l,f,c
  2361  0003FC  5024               	movf	process_message@inmessage+1,w,c
  2362  0003FE  22DA               	addwfc	fsr2h,f,c
  2363  000400  0E30               	movlw	48
  2364  000402  18DE               	xorwf	postinc2,w,c
  2365  000404  B4D8               	btfsc	status,2,c
  2366  000406  D009               	goto	u3270
  2367  000408  EE20 F001          	lfsr	2,1
  2368  00040C  5023               	movf	process_message@inmessage,w,c
  2369  00040E  26D9               	addwf	fsr2l,f,c
  2370  000410  5024               	movf	process_message@inmessage+1,w,c
  2371  000412  22DA               	addwfc	fsr2h,f,c
  2372  000414  50DF               	movf	indf2,w,c
  2373  000416  A4D8               	btfss	status,2,c
  2374  000418  0012               	return	
  2375  00041A                     u3270:
  2376                           
  2377                           ;serial_message.c: 114:         msgType = inmessage[2];
  2378  00041A  EE20 F002          	lfsr	2,2
  2379  00041E  5023               	movf	process_message@inmessage,w,c
  2380  000420  26D9               	addwf	fsr2l,f,c
  2381  000422  5024               	movf	process_message@inmessage+1,w,c
  2382  000424  22DA               	addwfc	fsr2h,f,c
  2383  000426  50DF               	movf	indf2,w,c
  2384  000428  6E27               	movwf	process_message@msgType,c
  2385                           
  2386                           ;serial_message.c: 116:         switch(msgType){
  2387  00042A  D01C               	goto	l4259
  2388  00042C                     l4249:
  2389                           
  2390                           ;serial_message.c: 119:                 process_set_zones_message(inmessage);
  2391  00042C  C023  F020         	movff	process_message@inmessage,process_set_zones_message@inmessage
  2392  000430  C024  F021         	movff	process_message@inmessage+1,process_set_zones_message@inmessage+1
  2393  000434  ECA1  F005         	call	_process_set_zones_message	;wreg free
  2394                           
  2395                           ;serial_message.c: 120:                 break;
  2396  000438  0012               	return	
  2397  00043A                     l4251:
  2398                           
  2399                           ;serial_message.c: 124:                 process_get_status_message(inmessage);
  2400  00043A  C023  F020         	movff	process_message@inmessage,process_get_status_message@inmessage
  2401  00043E  C024  F021         	movff	process_message@inmessage+1,process_get_status_message@inmessage+1
  2402  000442  EC68  F007         	call	_process_get_status_message	;wreg free
  2403                           
  2404                           ;serial_message.c: 125:                 break;
  2405  000446  0012               	return	
  2406  000448                     l4253:
  2407                           
  2408                           ;serial_message.c: 129:                 process_set_address_message(inmessage);
  2409  000448  C023  F020         	movff	process_message@inmessage,process_set_address_message@inmessage
  2410  00044C  C024  F021         	movff	process_message@inmessage+1,process_set_address_message@inmessage+1
  2411  000450  ECB6  F007         	call	_process_set_address_message	;wreg free
  2412                           
  2413                           ;serial_message.c: 130:                 break;
  2414  000454  0012               	return	
  2415  000456                     l4255:
  2416                           
  2417                           ;serial_message.c: 141:                 process_reset_pump(inmessage);
  2418  000456  C023  F020         	movff	process_message@inmessage,process_reset_pump@inmessage
  2419  00045A  C024  F021         	movff	process_message@inmessage+1,process_reset_pump@inmessage+1
  2420  00045E  EC54  F007         	call	_process_reset_pump	;wreg free
  2421                           
  2422                           ;serial_message.c: 142:                 break;
  2423  000462  0012               	return	
  2424  000464                     l4259:
  2425  000464  5027               	movf	process_message@msgType,w,c
  2426  000466  6E25               	movwf	??_process_message& (0+255),c
  2427  000468  6A26               	clrf	(??_process_message+1)& (0+255),c
  2428                           
  2429                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2430                           ; Switch size 1, requested type "simple"
  2431                           ; Number of cases is 1, Range of values is 0 to 0
  2432                           ; switch strategies available:
  2433                           ; Name         Instructions Cycles
  2434                           ; simple_byte            4     3 (average)
  2435                           ;	Chosen strategy is simple_byte
  2436  00046A  5026               	movf	??_process_message+1,w,c
  2437  00046C  0A00               	xorlw	0	; case 0
  2438  00046E  A4D8               	btfss	status,2,c
  2439  000470  0012               	return	
  2440                           
  2441                           ; Switch size 1, requested type "simple"
  2442                           ; Number of cases is 8, Range of values is 65 to 115
  2443                           ; switch strategies available:
  2444                           ; Name         Instructions Cycles
  2445                           ; simple_byte           25    13 (average)
  2446                           ;	Chosen strategy is simple_byte
  2447  000472  5025               	movf	??_process_message,w,c
  2448  000474  0A41               	xorlw	65	; case 65
  2449  000476  B4D8               	btfsc	status,2,c
  2450  000478  D7E7               	goto	l4253
  2451  00047A  0A06               	xorlw	6	; case 71
  2452  00047C  B4D8               	btfsc	status,2,c
  2453  00047E  D7DD               	goto	l4251
  2454  000480  0A0A               	xorlw	10	; case 77
  2455  000482  B4D8               	btfsc	status,2,c
  2456  000484  D7E8               	goto	l4255
  2457  000486  0A1E               	xorlw	30	; case 83
  2458  000488  B4D8               	btfsc	status,2,c
  2459  00048A  D7D0               	goto	l4249
  2460  00048C  0A32               	xorlw	50	; case 97
  2461  00048E  B4D8               	btfsc	status,2,c
  2462  000490  D7DB               	goto	l4253
  2463  000492  0A06               	xorlw	6	; case 103
  2464  000494  B4D8               	btfsc	status,2,c
  2465  000496  D7D1               	goto	l4251
  2466  000498  0A0A               	xorlw	10	; case 109
  2467  00049A  B4D8               	btfsc	status,2,c
  2468  00049C  D7DC               	goto	l4255
  2469  00049E  0A1E               	xorlw	30	; case 115
  2470  0004A0  A4D8               	btfss	status,2,c
  2471  0004A2  0012               	return	
  2472  0004A4  D7C3               	goto	l4249
  2473  0004A6                     __end_of_process_message:
  2474                           	opt callstack 0
  2475                           
  2476 ;; *************** function _process_set_zones_message *****************
  2477 ;; Defined at:
  2478 ;;		line 65 in file "serial_message.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2481 ;;		 -> receiveMessage@message(10), NULL(0), 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;		None
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2493 ;;      Params:         2       0       0       0       0       0       0       0       0
  2494 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2495 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2496 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2497 ;;Total ram usage:        3 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    8
  2500 ;; This function calls:
  2501 ;;		_combineZones
  2502 ;;		_output_message
  2503 ;;		_setBaseMessage
  2504 ;;		_xtochar
  2505 ;; This function is called by:
  2506 ;;		_process_message
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text12
  2511  000B42                     __ptext12:
  2512                           	opt callstack 0
  2513  000B42                     _process_set_zones_message:
  2514                           	opt callstack 21
  2515                           
  2516                           ;serial_message.c: 66:     commsZones = (xtochar(inmessage[3]) << 4) + xtochar(inmessage
      +                          [4]);
  2517                           
  2518                           ;incstack = 0
  2519  000B42  EE20 F004          	lfsr	2,4
  2520  000B46  5020               	movf	process_set_zones_message@inmessage,w,c
  2521  000B48  26D9               	addwf	fsr2l,f,c
  2522  000B4A  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2523  000B4C  22DA               	addwfc	fsr2h,f,c
  2524  000B4E  50DF               	movf	indf2,w,c
  2525  000B50  ECA1  F006         	call	_xtochar
  2526  000B54  6E22               	movwf	??_process_set_zones_message& (0+255),c
  2527  000B56  EE20 F003          	lfsr	2,3
  2528  000B5A  5020               	movf	process_set_zones_message@inmessage,w,c
  2529  000B5C  26D9               	addwf	fsr2l,f,c
  2530  000B5E  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2531  000B60  22DA               	addwfc	fsr2h,f,c
  2532  000B62  50DF               	movf	indf2,w,c
  2533  000B64  ECA1  F006         	call	_xtochar
  2534  000B68  0D10               	mullw	16
  2535  000B6A  50F3               	movf	prodl,w,c
  2536  000B6C  2422               	addwf	??_process_set_zones_message,w,c
  2537  000B6E  6E3E               	movwf	_commsZones,c
  2538                           
  2539                           ;serial_message.c: 67:     combineZones();
  2540  000B70  EC66  F008         	call	_combineZones	;wreg free
  2541                           
  2542                           ;serial_message.c: 68:     setBaseMessage('s', inmessage[1]);
  2543  000B74  EE20 F001          	lfsr	2,1
  2544  000B78  5020               	movf	process_set_zones_message@inmessage,w,c
  2545  000B7A  26D9               	addwf	fsr2l,f,c
  2546  000B7C  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2547  000B7E  22DA               	addwfc	fsr2h,f,c
  2548  000B80  50DF               	movf	indf2,w,c
  2549  000B82  6E15               	movwf	setBaseMessage@msgAddress,c
  2550  000B84  0E73               	movlw	115
  2551  000B86  EC4D  F004         	call	_setBaseMessage
  2552                           
  2553                           ;serial_message.c: 71:     output_message(outputMessage);
  2554  000B8A  0E41               	movlw	low _outputMessage
  2555  000B8C  6E1C               	movwf	output_message@message,c
  2556  000B8E  0E00               	movlw	high _outputMessage
  2557  000B90  6E1D               	movwf	output_message@message+1,c
  2558  000B92  ECF5  F005         	call	_output_message	;wreg free
  2559  000B96  0012               	return		;funcret
  2560  000B98                     __end_of_process_set_zones_message:
  2561                           	opt callstack 0
  2562                           
  2563 ;; *************** function _xtochar *****************
  2564 ;; Defined at:
  2565 ;;		line 18 in file "serial_message.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  x               1    wreg     unsigned char 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  x               1   19[COMRAM] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      unsigned char 
  2572 ;; Registers used:
  2573 ;;		wreg, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2579 ;;      Params:         0       0       0       0       0       0       0       0       0
  2580 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2582 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2583 ;;Total ram usage:        1 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    5
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_process_set_zones_message
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text13
  2594  000D42                     __ptext13:
  2595                           	opt callstack 0
  2596  000D42                     _xtochar:
  2597                           	opt callstack 23
  2598                           
  2599                           ;incstack = 0
  2600                           ;xtochar@x stored from wreg
  2601  000D42  6E14               	movwf	xtochar@x,c
  2602                           
  2603                           ;serial_message.c: 19:     if ((x >= '0')
  2604  000D44  0E2F               	movlw	47
  2605  000D46  6414               	cpfsgt	xtochar@x,c
  2606  000D48  D006               	goto	l3833
  2607  000D4A  0E3A               	movlw	58
  2608  000D4C  6014               	cpfslt	xtochar@x,c
  2609  000D4E  D003               	goto	l3833
  2610                           
  2611                           ;serial_message.c: 20:             && (x <= '9')) {;serial_message.c: 21:         return
      +                           (x - '0');
  2612  000D50  5014               	movf	xtochar@x,w,c
  2613  000D52  0FD0               	addlw	208
  2614  000D54  0012               	return	
  2615  000D56                     l3833:
  2616  000D56  0E60               	movlw	96
  2617  000D58  6414               	cpfsgt	xtochar@x,c
  2618  000D5A  D006               	goto	l3843
  2619  000D5C  0E67               	movlw	103
  2620  000D5E  6014               	cpfslt	xtochar@x,c
  2621  000D60  D003               	goto	l3843
  2622                           
  2623                           ;serial_message.c: 23:             && (x <= 'f')) {;serial_message.c: 24:         return
      +                           (x) - 'a' + 10;
  2624  000D62  5014               	movf	xtochar@x,w,c
  2625  000D64  0FA9               	addlw	169
  2626  000D66  0012               	return	
  2627  000D68                     l3843:
  2628  000D68  0E40               	movlw	64
  2629  000D6A  6414               	cpfsgt	xtochar@x,c
  2630  000D6C  D006               	goto	l3851
  2631  000D6E  0E47               	movlw	71
  2632  000D70  6014               	cpfslt	xtochar@x,c
  2633  000D72  D003               	goto	l3851
  2634                           
  2635                           ;serial_message.c: 27:             && (x <= 'F')) {;serial_message.c: 28:         return
      +                           (x) - 'F' + 10;
  2636  000D74  5014               	movf	xtochar@x,w,c
  2637  000D76  0FC4               	addlw	196
  2638  000D78  0012               	return	
  2639  000D7A                     l3851:
  2640                           
  2641                           ;serial_message.c: 30:     return 0;
  2642  000D7A  0E00               	movlw	0
  2643  000D7C  0012               	return		;funcret
  2644  000D7E                     __end_of_xtochar:
  2645                           	opt callstack 0
  2646                           
  2647 ;; *************** function _process_set_address_message *****************
  2648 ;; Defined at:
  2649 ;;		line 88 in file "serial_message.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2652 ;;		 -> receiveMessage@message(10), NULL(0), 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  new_address     1    0        unsigned char 
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2664 ;;      Params:         2       0       0       0       0       0       0       0       0
  2665 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2667 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2668 ;;Total ram usage:        3 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    8
  2671 ;; This function calls:
  2672 ;;		_output_message
  2673 ;;		_setBaseMessage
  2674 ;; This function is called by:
  2675 ;;		_process_message
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text14
  2680  000F6C                     __ptext14:
  2681                           	opt callstack 0
  2682  000F6C                     _process_set_address_message:
  2683                           	opt callstack 21
  2684                           
  2685                           ;serial_message.c: 92:     setBaseMessage('a', inmessage[1]);
  2686                           
  2687                           ;incstack = 0
  2688  000F6C  EE20 F001          	lfsr	2,1
  2689  000F70  5020               	movf	process_set_address_message@inmessage,w,c
  2690  000F72  26D9               	addwf	fsr2l,f,c
  2691  000F74  5021               	movf	process_set_address_message@inmessage+1,w,c
  2692  000F76  22DA               	addwfc	fsr2h,f,c
  2693  000F78  50DF               	movf	indf2,w,c
  2694  000F7A  6E15               	movwf	setBaseMessage@msgAddress,c
  2695  000F7C  0E61               	movlw	97
  2696  000F7E  EC4D  F004         	call	_setBaseMessage
  2697                           
  2698                           ;serial_message.c: 93:     output_message(outputMessage);
  2699  000F82  0E41               	movlw	low _outputMessage
  2700  000F84  6E1C               	movwf	output_message@message,c
  2701  000F86  0E00               	movlw	high _outputMessage
  2702  000F88  6E1D               	movwf	output_message@message+1,c
  2703  000F8A  ECF5  F005         	call	_output_message	;wreg free
  2704  000F8E  0012               	return		;funcret
  2705  000F90                     __end_of_process_set_address_message:
  2706                           	opt callstack 0
  2707                           
  2708 ;; *************** function _process_reset_pump *****************
  2709 ;; Defined at:
  2710 ;;		line 97 in file "serial_message.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2713 ;;		 -> receiveMessage@message(10), NULL(0), 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2725 ;;      Params:         2       0       0       0       0       0       0       0       0
  2726 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2728 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2729 ;;Total ram usage:        2 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    8
  2732 ;; This function calls:
  2733 ;;		_output_message
  2734 ;;		_resetPump
  2735 ;;		_setBaseMessage
  2736 ;; This function is called by:
  2737 ;;		_process_message
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text15
  2742  000EA8                     __ptext15:
  2743                           	opt callstack 0
  2744  000EA8                     _process_reset_pump:
  2745                           	opt callstack 21
  2746                           
  2747                           ;serial_message.c: 98:     resetPump();
  2748                           
  2749                           ;incstack = 0
  2750  000EA8  EC71  F008         	call	_resetPump	;wreg free
  2751                           
  2752                           ;serial_message.c: 99:     setBaseMessage('m', inmessage[1]);
  2753  000EAC  EE20 F001          	lfsr	2,1
  2754  000EB0  5020               	movf	process_reset_pump@inmessage,w,c
  2755  000EB2  26D9               	addwf	fsr2l,f,c
  2756  000EB4  5021               	movf	process_reset_pump@inmessage+1,w,c
  2757  000EB6  22DA               	addwfc	fsr2h,f,c
  2758  000EB8  50DF               	movf	indf2,w,c
  2759  000EBA  6E15               	movwf	setBaseMessage@msgAddress,c
  2760  000EBC  0E6D               	movlw	109
  2761  000EBE  EC4D  F004         	call	_setBaseMessage
  2762                           
  2763                           ;serial_message.c: 100:     output_message(outputMessage);
  2764  000EC2  0E41               	movlw	low _outputMessage
  2765  000EC4  6E1C               	movwf	output_message@message,c
  2766  000EC6  0E00               	movlw	high _outputMessage
  2767  000EC8  6E1D               	movwf	output_message@message+1,c
  2768  000ECA  ECF5  F005         	call	_output_message	;wreg free
  2769  000ECE  0012               	return		;funcret
  2770  000ED0                     __end_of_process_reset_pump:
  2771                           	opt callstack 0
  2772                           
  2773 ;; *************** function _process_get_status_message *****************
  2774 ;; Defined at:
  2775 ;;		line 76 in file "serial_message.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2778 ;;		 -> receiveMessage@message(10), NULL(0), main@sendGetMessageBuffer(10), 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2790 ;;      Params:         2       0       0       0       0       0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2793 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2794 ;;Total ram usage:        2 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    8
  2797 ;; This function calls:
  2798 ;;		_combineZones
  2799 ;;		_output_message
  2800 ;;		_setBaseMessage
  2801 ;; This function is called by:
  2802 ;;		_main
  2803 ;;		_process_message
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text16
  2808  000ED0                     __ptext16:
  2809                           	opt callstack 0
  2810  000ED0                     _process_get_status_message:
  2811                           	opt callstack 21
  2812                           
  2813                           ;serial_message.c: 78:     combineZones();
  2814                           
  2815                           ;incstack = 0
  2816  000ED0  EC66  F008         	call	_combineZones	;wreg free
  2817                           
  2818                           ;serial_message.c: 79:     setBaseMessage('g', inmessage[1]);
  2819  000ED4  EE20 F001          	lfsr	2,1
  2820  000ED8  5020               	movf	process_get_status_message@inmessage,w,c
  2821  000EDA  26D9               	addwf	fsr2l,f,c
  2822  000EDC  5021               	movf	process_get_status_message@inmessage+1,w,c
  2823  000EDE  22DA               	addwfc	fsr2h,f,c
  2824  000EE0  50DF               	movf	indf2,w,c
  2825  000EE2  6E15               	movwf	setBaseMessage@msgAddress,c
  2826  000EE4  0E67               	movlw	103
  2827  000EE6  EC4D  F004         	call	_setBaseMessage
  2828                           
  2829                           ;serial_message.c: 84:     output_message(outputMessage);
  2830  000EEA  0E41               	movlw	low _outputMessage
  2831  000EEC  6E1C               	movwf	output_message@message,c
  2832  000EEE  0E00               	movlw	high _outputMessage
  2833  000EF0  6E1D               	movwf	output_message@message+1,c
  2834  000EF2  ECF5  F005         	call	_output_message	;wreg free
  2835  000EF6  0012               	return		;funcret
  2836  000EF8                     __end_of_process_get_status_message:
  2837                           	opt callstack 0
  2838                           
  2839 ;; *************** function _setBaseMessage *****************
  2840 ;; Defined at:
  2841 ;;		line 42 in file "serial_message.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  messageType     1    wreg     unsigned char 
  2844 ;;  msgAddress      1   20[COMRAM] unsigned char 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  messageType     1   24[COMRAM] unsigned char 
  2847 ;;  v               1   25[COMRAM] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2857 ;;      Params:         1       0       0       0       0       0       0       0       0
  2858 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2859 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2860 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2861 ;;Total ram usage:        6 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    6
  2864 ;; This function calls:
  2865 ;;		_chartox
  2866 ;; This function is called by:
  2867 ;;		_process_set_zones_message
  2868 ;;		_process_get_status_message
  2869 ;;		_process_set_address_message
  2870 ;;		_process_reset_pump
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text17
  2875  00089A                     __ptext17:
  2876                           	opt callstack 0
  2877  00089A                     _setBaseMessage:
  2878                           	opt callstack 22
  2879                           
  2880                           ;incstack = 0
  2881                           ;setBaseMessage@messageType stored from wreg
  2882  00089A  6E19               	movwf	setBaseMessage@messageType,c
  2883                           
  2884                           ;serial_message.c: 43:     outputMessage[0] = '{';
  2885  00089C  0E7B               	movlw	123
  2886  00089E  6E41               	movwf	_outputMessage,c
  2887                           
  2888                           ;serial_message.c: 45:  outputMessage[1] = msgAddress;
  2889  0008A0  C015  F042         	movff	setBaseMessage@msgAddress,_outputMessage+1
  2890                           
  2891                           ;serial_message.c: 46:  outputMessage[2] = messageType;
  2892  0008A4  C019  F043         	movff	setBaseMessage@messageType,_outputMessage+2
  2893                           
  2894                           ;serial_message.c: 47:  outputMessage[3] = chartox(combinedZones >>4);
  2895  0008A8  384B               	swapf	_combinedZones,w,c
  2896  0008AA  0B0F               	andlw	15
  2897  0008AC  EC27  F008         	call	_chartox
  2898  0008B0  6E44               	movwf	_outputMessage+3,c
  2899                           
  2900                           ;serial_message.c: 48:     outputMessage[4] = chartox((combinedZones &15));
  2901  0008B2  504B               	movf	_combinedZones,w,c
  2902  0008B4  0B0F               	andlw	15
  2903  0008B6  EC27  F008         	call	_chartox
  2904  0008BA  6E45               	movwf	_outputMessage+4,c
  2905                           
  2906                           ;serial_message.c: 52:     char v = (fault_flags.value >> 8) &0xf;
  2907  0008BC  503C               	movf	_fault_flags+1,w,c
  2908  0008BE  0B0F               	andlw	15
  2909  0008C0  6E1A               	movwf	setBaseMessage@v,c
  2910                           
  2911                           ;serial_message.c: 53:     outputMessage[5] = chartox(v);
  2912  0008C2  501A               	movf	setBaseMessage@v,w,c
  2913  0008C4  EC27  F008         	call	_chartox
  2914  0008C8  6E46               	movwf	_outputMessage+5,c
  2915                           
  2916                           ;serial_message.c: 55:     v = (fault_flags.value >> 4) &0xf;
  2917  0008CA  C03B  F016         	movff	_fault_flags,??_setBaseMessage
  2918  0008CE  C03C  F017         	movff	_fault_flags+1,??_setBaseMessage+1
  2919  0008D2  0E04               	movlw	4
  2920  0008D4  6E18               	movwf	(??_setBaseMessage+2)& (0+255),c
  2921  0008D6                     u2705:
  2922  0008D6  90D8               	bcf	status,0,c
  2923  0008D8  3217               	rrcf	??_setBaseMessage+1,f,c
  2924  0008DA  3216               	rrcf	??_setBaseMessage,f,c
  2925  0008DC  2E18               	decfsz	(??_setBaseMessage+2)& (0+255),f,c
  2926  0008DE  D7FB               	goto	u2705
  2927  0008E0  5016               	movf	??_setBaseMessage,w,c
  2928  0008E2  0B0F               	andlw	15
  2929  0008E4  6E1A               	movwf	setBaseMessage@v,c
  2930                           
  2931                           ;serial_message.c: 56:     outputMessage[6] = chartox(v);
  2932  0008E6  501A               	movf	setBaseMessage@v,w,c
  2933  0008E8  EC27  F008         	call	_chartox
  2934  0008EC  6E47               	movwf	_outputMessage+6,c
  2935                           
  2936                           ;serial_message.c: 58:     v = (fault_flags.value) &0xf;
  2937  0008EE  503B               	movf	_fault_flags,w,c
  2938  0008F0  0B0F               	andlw	15
  2939  0008F2  6E1A               	movwf	setBaseMessage@v,c
  2940                           
  2941                           ;serial_message.c: 59:     outputMessage[7] = chartox(v);
  2942  0008F4  501A               	movf	setBaseMessage@v,w,c
  2943  0008F6  EC27  F008         	call	_chartox
  2944  0008FA  6E48               	movwf	_outputMessage+7,c
  2945                           
  2946                           ;serial_message.c: 61:     outputMessage[8] = '}';
  2947  0008FC  0E7D               	movlw	125
  2948  0008FE  6E49               	movwf	_outputMessage+8,c
  2949                           
  2950                           ;serial_message.c: 62:     outputMessage[9] = 0;
  2951  000900  0E00               	movlw	0
  2952  000902  6E4A               	movwf	_outputMessage+9,c
  2953  000904  0012               	return		;funcret
  2954  000906                     __end_of_setBaseMessage:
  2955                           	opt callstack 0
  2956                           
  2957 ;; *************** function _chartox *****************
  2958 ;; Defined at:
  2959 ;;		line 33 in file "serial_message.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  c               1    wreg     unsigned char 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  c               1   19[COMRAM] unsigned char 
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      unsigned char 
  2966 ;; Registers used:
  2967 ;;		wreg, status,2, status,0
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0
  2974 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2976 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2977 ;;Total ram usage:        1 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    5
  2980 ;; This function calls:
  2981 ;;		Nothing
  2982 ;; This function is called by:
  2983 ;;		_setBaseMessage
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text18
  2988  00104E                     __ptext18:
  2989                           	opt callstack 0
  2990  00104E                     _chartox:
  2991                           	opt callstack 22
  2992                           
  2993                           ;incstack = 0
  2994                           ;chartox@c stored from wreg
  2995  00104E  6E14               	movwf	chartox@c,c
  2996                           
  2997                           ;serial_message.c: 34:     if (c > 9) {
  2998  001050  0E09               	movlw	9
  2999  001052  6414               	cpfsgt	chartox@c,c
  3000  001054  D003               	goto	l3757
  3001                           
  3002                           ;serial_message.c: 35:         return 'a' + (c - 10);
  3003  001056  5014               	movf	chartox@c,w,c
  3004  001058  0F57               	addlw	87
  3005  00105A  0012               	return	
  3006  00105C                     l3757:
  3007                           
  3008                           ;serial_message.c: 37:         return '0' + c;
  3009  00105C  5014               	movf	chartox@c,w,c
  3010  00105E  0F30               	addlw	48
  3011  001060  0012               	return		;funcret
  3012  001062                     __end_of_chartox:
  3013                           	opt callstack 0
  3014                           
  3015 ;; *************** function _output_message *****************
  3016 ;; Defined at:
  3017 ;;		line 269 in file "serial.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  message         2   27[COMRAM] PTR unsigned char 
  3020 ;;		 -> outputMessage(10), 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  i               2   29[COMRAM] int 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3032 ;;      Params:         2       0       0       0       0       0       0       0       0
  3033 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3035 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3036 ;;Total ram usage:        4 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    7
  3039 ;; This function calls:
  3040 ;;		_putch
  3041 ;; This function is called by:
  3042 ;;		_process_set_zones_message
  3043 ;;		_process_get_status_message
  3044 ;;		_process_set_address_message
  3045 ;;		_process_reset_pump
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text19
  3050  000BEA                     __ptext19:
  3051                           	opt callstack 0
  3052  000BEA                     _output_message:
  3053                           	opt callstack 21
  3054                           
  3055                           ;serial.c: 269: output_message (char *message);serial.c: 270: {;serial.c: 271:   if (((v
      +                          oid*)0) == message) {
  3056                           
  3057                           ;incstack = 0
  3058  000BEA  501C               	movf	output_message@message,w,c
  3059  000BEC  101D               	iorwf	output_message@message+1,w,c
  3060  000BEE  B4D8               	btfsc	status,2,c
  3061  000BF0  0012               	return	
  3062                           
  3063                           ;serial.c: 275:   for (int i = 0; (i < 10) && (0 != message[i]); i++) {
  3064  000BF2  0E00               	movlw	0
  3065  000BF4  6E1F               	movwf	output_message@i+1,c
  3066  000BF6  0E00               	movlw	0
  3067  000BF8  6E1E               	movwf	output_message@i,c
  3068  000BFA  D00B               	goto	l3819
  3069  000BFC                     l3815:
  3070                           
  3071                           ;serial.c: 276:     putch (message[i]);
  3072  000BFC  501E               	movf	output_message@i,w,c
  3073  000BFE  241C               	addwf	output_message@message,w,c
  3074  000C00  6ED9               	movwf	fsr2l,c
  3075  000C02  501F               	movf	output_message@i+1,w,c
  3076  000C04  201D               	addwfc	output_message@message+1,w,c
  3077  000C06  6EDA               	movwf	fsr2h,c
  3078  000C08  50DF               	movf	indf2,w,c
  3079  000C0A  EC31  F008         	call	_putch
  3080                           
  3081                           ;serial.c: 277:   }
  3082  000C0E  4A1E               	infsnz	output_message@i,f,c
  3083  000C10  2A1F               	incf	output_message@i+1,f,c
  3084  000C12                     l3819:
  3085  000C12  BE1F               	btfsc	output_message@i+1,7,c
  3086  000C14  D006               	goto	u2620
  3087  000C16  501F               	movf	output_message@i+1,w,c
  3088  000C18  E10E               	bnz	l465
  3089  000C1A  0E0A               	movlw	10
  3090  000C1C  5C1E               	subwf	output_message@i,w,c
  3091  000C1E  B0D8               	btfsc	status,0,c
  3092  000C20  0012               	return	
  3093  000C22                     u2620:
  3094  000C22  501E               	movf	output_message@i,w,c
  3095  000C24  241C               	addwf	output_message@message,w,c
  3096  000C26  6ED9               	movwf	fsr2l,c
  3097  000C28  501F               	movf	output_message@i+1,w,c
  3098  000C2A  201D               	addwfc	output_message@message+1,w,c
  3099  000C2C  6EDA               	movwf	fsr2h,c
  3100  000C2E  50DF               	movf	indf2,w,c
  3101  000C30  B4D8               	btfsc	status,2,c
  3102  000C32  0012               	return	
  3103  000C34  D7E3               	goto	l3815
  3104  000C36                     l465:
  3105  000C36  0012               	return		;funcret
  3106  000C38                     __end_of_output_message:
  3107                           	opt callstack 0
  3108                           
  3109 ;; *************** function _process_event_timer *****************
  3110 ;; Defined at:
  3111 ;;		line 82 in file "timer_event.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  i               1   31[COMRAM] char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3125 ;;      Params:         0       0       0       0       0       0       0       0       0
  3126 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3127 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3128 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3129 ;;Total ram usage:        3 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    8
  3132 ;; This function calls:
  3133 ;;		_EventDumpSolenoidCallBack
  3134 ;;		_EventFaultStateLEDCallBack
  3135 ;;		_EventIdleTimeoutCallBack
  3136 ;;		_EventLowFogPressureCallBack
  3137 ;;		_EventLowWaterLevelCallBack
  3138 ;;		_EventLowWaterPressureCallBack
  3139 ;;		_EventLowWaterPressureDebounceCallBack
  3140 ;;		_EventPODebounceCallBack
  3141 ;;		_EventRunSignalDebounceCallBack
  3142 ;; This function is called by:
  3143 ;;		_main
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text20
  3148  00033E                     __ptext20:
  3149                           	opt callstack 0
  3150  00033E                     _process_event_timer:
  3151                           	opt callstack 22
  3152                           
  3153                           ;timer_event.c: 83:     TMR0IE = 0;
  3154                           
  3155                           ;incstack = 0
  3156  00033E  9AF2               	bcf	4082,5,c	;volatile
  3157                           
  3158                           ;timer_event.c: 84:     while (timer_count > 0) {
  3159  000340  D054               	goto	u3180
  3160  000342                     l4171:
  3161                           
  3162                           ;timer_event.c: 86:         timer_count--;
  3163  000342  063D               	decf	_timer_count,f,c	;volatile
  3164                           
  3165                           ;timer_event.c: 89:         for (signed char i = 0; i < EventTotalNumber; i++) {
  3166  000344  0E00               	movlw	0
  3167  000346  6E20               	movwf	process_event_timer@i,c
  3168  000348                     l4179:
  3169                           
  3170                           ;timer_event.c: 90:             if (timer_events[i].active) {
  3171  000348  5020               	movf	process_event_timer@i,w,c
  3172  00034A  0D08               	mullw	8
  3173  00034C  0E62               	movlw	low (_timer_events+2)
  3174  00034E  24F3               	addwf	prodl,w,c
  3175  000350  6ED9               	movwf	fsr2l,c
  3176  000352  0E00               	movlw	high (_timer_events+2)
  3177  000354  20F4               	addwfc	prodh,w,c
  3178  000356  6EDA               	movwf	fsr2h,c
  3179  000358  0100               	movlb	0	; () banked
  3180  00035A  A0DF               	btfss	indf2,0,c
  3181  00035C  D040               	goto	u3179
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;timer_event.c: 91:                 timer_events[i].time_left--;
  3185  00035E  5020               	movf	process_event_timer@i,w,c
  3186  000360  0D08               	mullw	8
  3187  000362  0E60               	movlw	low _timer_events
  3188  000364  24F3               	addwf	prodl,w,c
  3189  000366  6ED9               	movwf	fsr2l,c
  3190  000368  0E00               	movlw	high _timer_events
  3191  00036A  20F4               	addwfc	prodh,w,c
  3192  00036C  6EDA               	movwf	fsr2h,c
  3193  00036E  06DE               	decf	postinc2,f,c
  3194  000370  0E00               	movlw	0
  3195  000372  5ADD               	subwfb	postdec2,f,c
  3196                           
  3197                           ;timer_event.c: 93:                 if (timer_events[i].time_left == 0) {
  3198  000374  5020               	movf	process_event_timer@i,w,c
  3199  000376  0D08               	mullw	8
  3200  000378  0E60               	movlw	low _timer_events
  3201  00037A  24F3               	addwf	prodl,w,c
  3202  00037C  6ED9               	movwf	fsr2l,c
  3203  00037E  0E00               	movlw	high _timer_events
  3204  000380  20F4               	addwfc	prodh,w,c
  3205  000382  6EDA               	movwf	fsr2h,c
  3206  000384  50DE               	movf	postinc2,w,c
  3207  000386  10DE               	iorwf	postinc2,w,c
  3208  000388  A4D8               	btfss	status,2,c
  3209  00038A  D029               	goto	u3179
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;timer_event.c: 94:                     timer_events[i].active = 0;
  3213  00038C  5020               	movf	process_event_timer@i,w,c
  3214  00038E  0D08               	mullw	8
  3215  000390  0E62               	movlw	low (_timer_events+2)
  3216  000392  24F3               	addwf	prodl,w,c
  3217  000394  6ED9               	movwf	fsr2l,c
  3218  000396  0E00               	movlw	high (_timer_events+2)
  3219  000398  20F4               	addwfc	prodh,w,c
  3220  00039A  6EDA               	movwf	fsr2h,c
  3221  00039C  90DF               	bcf	indf2,0,c
  3222                           
  3223                           ;timer_event.c: 95:                     if (timer_events[i].callback) {
  3224  00039E  5020               	movf	process_event_timer@i,w,c
  3225  0003A0  0D08               	mullw	8
  3226  0003A2  0E66               	movlw	low (_timer_events+6)
  3227  0003A4  24F3               	addwf	prodl,w,c
  3228  0003A6  6ED9               	movwf	fsr2l,c
  3229  0003A8  0E00               	movlw	high (_timer_events+6)
  3230  0003AA  20F4               	addwfc	prodh,w,c
  3231  0003AC  6EDA               	movwf	fsr2h,c
  3232  0003AE  50DE               	movf	postinc2,w,c
  3233  0003B0  10DE               	iorwf	postinc2,w,c
  3234  0003B2  B4D8               	btfsc	status,2,c
  3235  0003B4  D014               	goto	u3179
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;timer_event.c: 97:                         (*timer_events[i].callback) ();
  3239  0003B6  5020               	movf	process_event_timer@i,w,c
  3240  0003B8  0D08               	mullw	8
  3241  0003BA  0E66               	movlw	low (_timer_events+6)
  3242  0003BC  24F3               	addwf	prodl,w,c
  3243  0003BE  6ED9               	movwf	fsr2l,c
  3244  0003C0  0E00               	movlw	high (_timer_events+6)
  3245  0003C2  20F4               	addwfc	prodh,w,c
  3246  0003C4  6EDA               	movwf	fsr2h,c
  3247  0003C6  D801               	call	u3178
  3248  0003C8  D00A               	goto	u3179
  3249  0003CA                     u3178:
  3250  0003CA  0005               	push	
  3251  0003CC  6EFA               	movwf	pclath,c
  3252  0003CE  50DE               	movf	postinc2,w,c
  3253  0003D0  6EFD               	movwf	tosl,c
  3254  0003D2  50DE               	movf	postinc2,w,c
  3255  0003D4  6EFE               	movwf	tosh,c
  3256  0003D6  50F8               	movf	tblptru,w,c
  3257  0003D8  6EFF               	movwf	tosu,c
  3258  0003DA  50FA               	movf	pclath,w,c
  3259  0003DC  0012               	return		;indir
  3260  0003DE                     u3179:
  3261                           
  3262                           ;timer_event.c: 102:         }
  3263  0003DE  2A20               	incf	process_event_timer@i,f,c
  3264  0003E0  5020               	movf	process_event_timer@i,w,c
  3265  0003E2  0A80               	xorlw	128
  3266  0003E4  0F77               	addlw	-137
  3267  0003E6  A0D8               	btfss	status,0,c
  3268  0003E8  D7AF               	goto	l4179
  3269  0003EA                     u3180:
  3270                           
  3271                           ;timer_event.c: 84:     while (timer_count > 0) {
  3272  0003EA  503D               	movf	_timer_count,w,c	;volatile
  3273  0003EC  A4D8               	btfss	status,2,c
  3274  0003EE  D7A9               	goto	l4171
  3275                           
  3276                           ;timer_event.c: 104:     TMR0IE = 1;
  3277  0003F0  8AF2               	bsf	4082,5,c	;volatile
  3278  0003F2  0012               	return		;funcret
  3279  0003F4                     __end_of_process_event_timer:
  3280                           	opt callstack 0
  3281                           
  3282 ;; *************** function _EventPODebounceCallBack *****************
  3283 ;; Defined at:
  3284 ;;		line 3 in file "EventPODebounce.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;		None
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3298 ;;      Params:         0       0       0       0       0       0       0       0       0
  3299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3301 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3302 ;;Total ram usage:        0 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    7
  3305 ;; This function calls:
  3306 ;;		_clear_callback_for_shutdown
  3307 ;; This function is called by:
  3308 ;;		_init_event_timer
  3309 ;;		_process_event_timer
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text21
  3314  00108A                     __ptext21:
  3315                           	opt callstack 0
  3316  00108A                     _EventPODebounceCallBack:
  3317                           	opt callstack 22
  3318                           
  3319                           ;EventPODebounce.c: 9:     state = timer_events[EventPODebounce].next_state;
  3320                           
  3321                           ;incstack = 0
  3322  00108A  C0A3  F040         	movff	_timer_events+67,_state	;volatile
  3323                           
  3324                           ;EventPODebounce.c: 10:     fault_flags.po_fault = 1;
  3325  00108E  863B               	bsf	_fault_flags,3,c
  3326                           
  3327                           ;EventPODebounce.c: 11:     if (shutdownState == state) {
  3328  001090  0440               	decf	_state,w,c
  3329  001092  A4D8               	btfss	status,2,c
  3330  001094  0012               	return	
  3331                           
  3332                           ;EventPODebounce.c: 13:         clear_callback_for_shutdown();
  3333  001096  EC3E  F007         	call	_clear_callback_for_shutdown	;wreg free
  3334  00109A  0012               	return		;funcret
  3335  00109C                     __end_of_EventPODebounceCallBack:
  3336                           	opt callstack 0
  3337                           
  3338 ;; *************** function _EventLowWaterPressureDebounceCallBack *****************
  3339 ;; Defined at:
  3340 ;;		line 32 in file "EventLowWaterPressure.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;		None
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;		None
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      void 
  3347 ;; Registers used:
  3348 ;;		wreg, status,2, status,0
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3354 ;;      Params:         0       0       0       0       0       0       0       0       0
  3355 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3356 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3357 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3358 ;;Total ram usage:        1 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    5
  3361 ;; This function calls:
  3362 ;;		Nothing
  3363 ;; This function is called by:
  3364 ;;		_init_event_timer
  3365 ;;		_process_event_timer
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text22
  3370  000F90                     __ptext22:
  3371                           	opt callstack 0
  3372  000F90                     _EventLowWaterPressureDebounceCallBack:
  3373                           	opt callstack 24
  3374                           
  3375                           ;EventLowWaterPressure.c: 44:     { PORTAbits.RA0 = (!( PORTCbits.RC0)); fault_flags.wpO
      +                          kBit = (!( PORTCbits.RC0));};
  3376                           
  3377                           ;incstack = 0
  3378  000F90  B082               	btfsc	3970,0,c	;volatile
  3379  000F92  D003               	goto	u2910
  3380  000F94  6A14               	clrf	??_EventLowWaterPressureDebounceCallBack& (0+255),c
  3381  000F96  2A14               	incf	??_EventLowWaterPressureDebounceCallBack& (0+255),f,c
  3382  000F98  D001               	goto	u2928
  3383  000F9A                     u2910:
  3384  000F9A  6A14               	clrf	??_EventLowWaterPressureDebounceCallBack& (0+255),c
  3385  000F9C                     u2928:
  3386  000F9C  5080               	movf	3968,w,c	;volatile
  3387  000F9E  1814               	xorwf	??_EventLowWaterPressureDebounceCallBack,w,c
  3388  000FA0  0BFE               	andlw	-2
  3389  000FA2  1814               	xorwf	??_EventLowWaterPressureDebounceCallBack,w,c
  3390  000FA4  6E80               	movwf	3968,c	;volatile
  3391  000FA6  883B               	bsf	_fault_flags,4,c
  3392  000FA8  B082               	btfsc	3970,0,c	;volatile
  3393  000FAA  983B               	bcf	_fault_flags,4,c
  3394  000FAC  0012               	return		;funcret
  3395  000FAE                     __end_of_EventLowWaterPressureDebounceCallBack:
  3396                           	opt callstack 0
  3397                           
  3398 ;; *************** function _EventLowWaterPressureCallBack *****************
  3399 ;; Defined at:
  3400 ;;		line 4 in file "EventLowWaterPressure.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;		None
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;		None
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  1    wreg      void 
  3407 ;; Registers used:
  3408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3414 ;;      Params:         0       0       0       0       0       0       0       0       0
  3415 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3416 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3417 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3418 ;;Total ram usage:        1 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    7
  3421 ;; This function calls:
  3422 ;;		_clear_callback_for_shutdown
  3423 ;; This function is called by:
  3424 ;;		_init_event_timer
  3425 ;;		_process_event_timer
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text23
  3430  000DB6                     __ptext23:
  3431                           	opt callstack 0
  3432  000DB6                     _EventLowWaterPressureCallBack:
  3433                           	opt callstack 22
  3434                           
  3435                           ;EventLowWaterPressure.c: 16:     { PORTAbits.RA0 = (!( PORTCbits.RC0)); fault_flags.wpO
      +                          kBit = (!( PORTCbits.RC0));};
  3436                           
  3437                           ;incstack = 0
  3438  000DB6  B082               	btfsc	3970,0,c	;volatile
  3439  000DB8  D003               	goto	u2870
  3440  000DBA  6A15               	clrf	??_EventLowWaterPressureCallBack& (0+255),c
  3441  000DBC  2A15               	incf	??_EventLowWaterPressureCallBack& (0+255),f,c
  3442  000DBE  D001               	goto	u2888
  3443  000DC0                     u2870:
  3444  000DC0  6A15               	clrf	??_EventLowWaterPressureCallBack& (0+255),c
  3445  000DC2                     u2888:
  3446  000DC2  5080               	movf	3968,w,c	;volatile
  3447  000DC4  1815               	xorwf	??_EventLowWaterPressureCallBack,w,c
  3448  000DC6  0BFE               	andlw	-2
  3449  000DC8  1815               	xorwf	??_EventLowWaterPressureCallBack,w,c
  3450  000DCA  6E80               	movwf	3968,c	;volatile
  3451  000DCC  883B               	bsf	_fault_flags,4,c
  3452  000DCE  B082               	btfsc	3970,0,c	;volatile
  3453  000DD0  983B               	bcf	_fault_flags,4,c
  3454                           
  3455                           ;EventLowWaterPressure.c: 18:     if (timer_events[EventLowWaterPressure].flag_bit) {
  3456  000DD2  0100               	movlb	0	; () banked
  3457  000DD4  B36A               	btfsc	(_timer_events+10)& (0+255),1,b	;volatile
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;EventLowWaterPressure.c: 20:         fault_flags.lwp_fault = 1;
  3461  000DD6  823B               	bsf	_fault_flags,1,c
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;EventLowWaterPressure.c: 23:     state = timer_events[EventLowWaterPressure].next_state
      +                          ;
  3465                           
  3466                           ;EventLowWaterPressure.c: 22:     }
  3467  000DD8  C06B  F040         	movff	_timer_events+11,_state	;volatile
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;EventLowWaterPressure.c: 24:  if (shutdownState == state) {
  3471  000DDC  0440               	decf	_state,w,c
  3472  000DDE  A4D8               	btfss	status,2,c
  3473  000DE0  0012               	return	
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;EventLowWaterPressure.c: 26:         clear_callback_for_shutdown();
  3477  000DE2  EC3E  F007         	call	_clear_callback_for_shutdown	;wreg free
  3478  000DE6  0012               	return		;funcret
  3479  000DE8                     __end_of_EventLowWaterPressureCallBack:
  3480                           	opt callstack 0
  3481                           
  3482 ;; *************** function _EventLowWaterLevelCallBack *****************
  3483 ;; Defined at:
  3484 ;;		line 4 in file "EventLowWaterLevel.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;		None
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;		None
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3498 ;;      Params:         0       0       0       0       0       0       0       0       0
  3499 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3501 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3502 ;;Total ram usage:        0 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    7
  3505 ;; This function calls:
  3506 ;;		_clear_callback_for_shutdown
  3507 ;;		_enable_callback
  3508 ;; This function is called by:
  3509 ;;		_init_event_timer
  3510 ;;		_process_event_timer
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text24
  3515  000F20                     __ptext24:
  3516                           	opt callstack 0
  3517  000F20                     _EventLowWaterLevelCallBack:
  3518                           	opt callstack 22
  3519                           
  3520                           ;EventLowWaterLevel.c: 10:     if (!fault_flags.lwl_fault) {
  3521                           
  3522                           ;incstack = 0
  3523  000F20  B03B               	btfsc	_fault_flags,0,c
  3524  000F22  D009               	goto	l3973
  3525                           
  3526                           ;EventLowWaterLevel.c: 14:         fault_flags.lwl_fault = 1;
  3527  000F24  803B               	bsf	_fault_flags,0,c
  3528                           
  3529                           ;EventLowWaterLevel.c: 15:         enable_callback(EventLowWaterLevel, (30*(8000000/256/
      +                          4/256)));
  3530  000F26  0E03               	movlw	3
  3531  000F28  6E15               	movwf	enable_callback@time_delay+1,c
  3532  000F2A  0E84               	movlw	132
  3533  000F2C  6E14               	movwf	enable_callback@time_delay,c
  3534  000F2E  0E00               	movlw	0
  3535  000F30  EC3F  F006         	call	_enable_callback
  3536                           
  3537                           ;EventLowWaterLevel.c: 16:     } else {
  3538  000F34  0012               	return	
  3539  000F36                     l3973:
  3540                           
  3541                           ;EventLowWaterLevel.c: 20:         if (state != standbyState) {
  3542  000F36  5040               	movf	_state,w,c
  3543  000F38  B4D8               	btfsc	status,2,c
  3544  000F3A  0012               	return	
  3545                           
  3546                           ;EventLowWaterLevel.c: 21:             state = shutdownState;
  3547  000F3C  0E01               	movlw	1
  3548  000F3E  6E40               	movwf	_state,c
  3549                           
  3550                           ;EventLowWaterLevel.c: 23:             clear_callback_for_shutdown();
  3551  000F40  EC3E  F007         	call	_clear_callback_for_shutdown	;wreg free
  3552  000F44  0012               	return		;funcret
  3553  000F46                     __end_of_EventLowWaterLevelCallBack:
  3554                           	opt callstack 0
  3555                           
  3556 ;; *************** function _EventLowFogPressureCallBack *****************
  3557 ;; Defined at:
  3558 ;;		line 4 in file "EventLowFogPressure.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3572 ;;      Params:         0       0       0       0       0       0       0       0       0
  3573 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3575 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3576 ;;Total ram usage:        0 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    7
  3579 ;; This function calls:
  3580 ;;		_clear_callback_for_shutdown
  3581 ;;		_enable_callback
  3582 ;; This function is called by:
  3583 ;;		_init_event_timer
  3584 ;;		_process_event_timer
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text25
  3589  000DE8                     __ptext25:
  3590                           	opt callstack 0
  3591  000DE8                     _EventLowFogPressureCallBack:
  3592                           	opt callstack 22
  3593                           
  3594                           ;EventLowFogPressure.c: 15:     if (timer_events[EventLowFogPressure].flag_data) {
  3595                           
  3596                           ;incstack = 0
  3597  000DE8  0100               	movlb	0	; () banked
  3598  000DEA  517C               	movf	(_timer_events+28)& (0+255),w,b	;volatile
  3599  000DEC  117D               	iorwf	(_timer_events+29)& (0+255),w,b	;volatile
  3600  000DEE  B4D8               	btfsc	status,2,c
  3601  000DF0  D00E               	goto	l67
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;EventLowFogPressure.c: 16:     enable_callback (EventLowFogPressure, timer_events[Event
      +                          LowFogPressure].flag_data);
  3605  000DF2  C07C  F014         	movff	_timer_events+28,enable_callback@time_delay	;volatile
  3606  000DF6  C07D  F015         	movff	_timer_events+29,enable_callback@time_delay+1	;volatile
  3607  000DFA  0E03               	movlw	3
  3608  000DFC  EC3F  F006         	call	_enable_callback
  3609                           
  3610                           ;EventLowFogPressure.c: 17:         timer_events[EventLowFogPressure].flag_data = 0;
  3611  000E00  0E00               	movlw	0
  3612  000E02  0100               	movlb	0	; () banked
  3613  000E04  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  3614  000E06  0E00               	movlw	0
  3615  000E08  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;EventLowFogPressure.c: 18:         timer_events[EventLowFogPressure].flag_bit = 1;
  3619  000E0A  837A               	bsf	(_timer_events+26)& (0+255),1,b	;volatile
  3620                           
  3621                           ;EventLowFogPressure.c: 19:   }
  3622  000E0C  0012               	return	
  3623  000E0E                     l67:
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;EventLowFogPressure.c: 21:         fault_flags.lfp_fault = 1;
  3627  000E0E  843B               	bsf	_fault_flags,2,c
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;EventLowFogPressure.c: 22:         state = shutdownState;
  3631  000E10  0E01               	movlw	1
  3632  000E12  6E40               	movwf	_state,c
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;EventLowFogPressure.c: 23:         clear_callback_for_shutdown();
  3636  000E14  EC3E  F007         	call	_clear_callback_for_shutdown	;wreg free
  3637  000E18  0012               	return		;funcret
  3638  000E1A                     __end_of_EventLowFogPressureCallBack:
  3639                           	opt callstack 0
  3640                           
  3641 ;; *************** function _EventIdleTimeoutCallBack *****************
  3642 ;; Defined at:
  3643 ;;		line 5 in file "EventIdleTimeout.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;		None
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      void 
  3650 ;; Registers used:
  3651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3657 ;;      Params:         0       0       0       0       0       0       0       0       0
  3658 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3660 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3661 ;;Total ram usage:        0 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    6
  3664 ;; This function calls:
  3665 ;;		_enable_callback
  3666 ;; This function is called by:
  3667 ;;		_init_event_timer
  3668 ;;		_process_event_timer
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text26
  3673  000C38                     __ptext26:
  3674                           	opt callstack 0
  3675  000C38                     _EventIdleTimeoutCallBack:
  3676                           	opt callstack 23
  3677                           
  3678                           ;EventIdleTimeout.c: 7:   if (!timer_events[EventIdleTimeout].flag_bit) {
  3679                           
  3680                           ;incstack = 0
  3681  000C38  0100               	movlb	0	; () banked
  3682  000C3A  B38A               	btfsc	(_timer_events+42)& (0+255),1,b	;volatile
  3683  000C3C  D010               	goto	l52
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;EventIdleTimeout.c: 11:     { PORTAbits.RA2 = (1); fault_flags.dumpSolenoidBit = (1);};
  3687  000C3E  8480               	bsf	3968,2,c	;volatile
  3688  000C40  803C               	bsf	_fault_flags+1,0,c
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;EventIdleTimeout.c: 12:     inIdleDumpHour = 1;
  3692  000C42  0E01               	movlw	1
  3693  000C44  6E3F               	movwf	_inIdleDumpHour,c
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;EventIdleTimeout.c: 17:     timer_events[EventIdleTimeout].flag_bit = 1;
  3697  000C46  838A               	bsf	(_timer_events+42)& (0+255),1,b	;volatile
  3698                           
  3699                           ;EventIdleTimeout.c: 18:     timer_events[EventIdleTimeout].flag_data = 0;
  3700  000C48  0E00               	movlw	0
  3701  000C4A  6F8D               	movwf	(_timer_events+45)& (0+255),b	;volatile
  3702  000C4C  0E00               	movlw	0
  3703  000C4E  6F8C               	movwf	(_timer_events+44)& (0+255),b	;volatile
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;EventIdleTimeout.c: 19:     enable_callback (EventIdleTimeout, (0x7fff));
  3707  000C50  0E7F               	movlw	127
  3708  000C52  6E15               	movwf	enable_callback@time_delay+1,c
  3709  000C54  6814               	setf	enable_callback@time_delay,c
  3710  000C56  0E05               	movlw	5
  3711  000C58  EC3F  F006         	call	_enable_callback
  3712                           
  3713                           ;EventIdleTimeout.c: 21:   }
  3714  000C5C  0012               	return	
  3715  000C5E                     l52:
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;EventIdleTimeout.c: 26:     { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  3719  000C5E  9480               	bcf	3968,2,c	;volatile
  3720  000C60  903C               	bcf	_fault_flags+1,0,c
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;EventIdleTimeout.c: 27:     inIdleDumpHour = 0;
  3724  000C62  0E00               	movlw	0
  3725  000C64  6E3F               	movwf	_inIdleDumpHour,c
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;EventIdleTimeout.c: 30:     timer_events[EventIdleTimeout].flag_bit = 1;
  3729  000C66  838A               	bsf	(_timer_events+42)& (0+255),1,b	;volatile
  3730                           
  3731                           ;EventIdleTimeout.c: 31:     timer_events[EventIdleTimeout].flag_data = 0;
  3732  000C68  0E00               	movlw	0
  3733  000C6A  6F8D               	movwf	(_timer_events+45)& (0+255),b	;volatile
  3734  000C6C  0E00               	movlw	0
  3735  000C6E  6F8C               	movwf	(_timer_events+44)& (0+255),b	;volatile
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;EventIdleTimeout.c: 32:     enable_callback (EventIdleTimeout, (0x7fff));
  3739  000C70  0E7F               	movlw	127
  3740  000C72  6E15               	movwf	enable_callback@time_delay+1,c
  3741  000C74  6814               	setf	enable_callback@time_delay,c
  3742  000C76  0E05               	movlw	5
  3743  000C78  EC3F  F006         	call	_enable_callback
  3744  000C7C  0012               	return		;funcret
  3745  000C7E                     __end_of_EventIdleTimeoutCallBack:
  3746                           	opt callstack 0
  3747                           
  3748 ;; *************** function _EventFaultStateLEDCallBack *****************
  3749 ;; Defined at:
  3750 ;;		line 3 in file "EventFaultStateLed.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;		None
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;		None
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3764 ;;      Params:         0       0       0       0       0       0       0       0       0
  3765 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3766 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3767 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3768 ;;Total ram usage:        7 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    6
  3771 ;; This function calls:
  3772 ;;		_enable_callback
  3773 ;; This function is called by:
  3774 ;;		_init_event_timer
  3775 ;;		_process_event_timer
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text27
  3780  00026C                     __ptext27:
  3781                           	opt callstack 0
  3782  00026C                     _EventFaultStateLEDCallBack:
  3783                           	opt callstack 23
  3784                           
  3785                           ;EventFaultStateLed.c: 13:   if (!(fault_flags.lwl_fault
  3786                           
  3787                           ;incstack = 0
  3788  00026C  A03B               	btfss	_fault_flags,0,c
  3789  00026E  B23B               	btfsc	_fault_flags,1,c
  3790  000270  D012               	goto	l20
  3791  000272  A43B               	btfss	_fault_flags,2,c
  3792  000274  B63B               	btfsc	_fault_flags,3,c
  3793  000276  D00F               	goto	l20
  3794                           
  3795                           ;EventFaultStateLed.c: 16:     || fault_flags.po_fault )) {;EventFaultStateLed.c: 18:   
      +                            { PORTAbits.RA3 = (0);};
  3796  000278  9680               	bcf	3968,3,c	;volatile
  3797                           
  3798                           ;EventFaultStateLed.c: 19:     timer_events[EventFaultStateLED].flag_bit = 0;
  3799  00027A  0100               	movlb	0	; () banked
  3800  00027C  9382               	bcf	(_timer_events+34)& (0+255),1,b	;volatile
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;EventFaultStateLed.c: 20:     timer_events[EventFaultStateLED].flag_data = 0;
  3804  00027E  0E00               	movlw	0
  3805  000280  6F85               	movwf	(_timer_events+37)& (0+255),b	;volatile
  3806  000282  0E00               	movlw	0
  3807  000284  6F84               	movwf	(_timer_events+36)& (0+255),b	;volatile
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;EventFaultStateLed.c: 21:     enable_callback (EventFaultStateLED, ((8000000/256/4/256)
      +                          /4));
  3811  000286  0E00               	movlw	0
  3812  000288  6E15               	movwf	enable_callback@time_delay+1,c
  3813  00028A  0E07               	movlw	7
  3814  00028C  6E14               	movwf	enable_callback@time_delay,c
  3815  00028E  0E04               	movlw	4
  3816  000290  EC3F  F006         	call	_enable_callback
  3817                           
  3818                           ;EventFaultStateLed.c: 22:   }
  3819  000294  0012               	return	
  3820  000296                     l20:
  3821                           
  3822                           ;EventFaultStateLed.c: 29:     if (timer_events[EventFaultStateLED].flag_bit) {
  3823  000296  0100               	movlb	0	; () banked
  3824  000298  A382               	btfss	(_timer_events+34)& (0+255),1,b	;volatile
  3825  00029A  D040               	goto	l22
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;EventFaultStateLed.c: 31:       { PORTAbits.RA3 = (0);};
  3829  00029C  9680               	bcf	3968,3,c	;volatile
  3830                           
  3831                           ;EventFaultStateLed.c: 32:       timer_events[EventFaultStateLED].flag_bit = 0;
  3832  00029E  9382               	bcf	(_timer_events+34)& (0+255),1,b	;volatile
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;EventFaultStateLed.c: 34:       if (timer_events[EventFaultStateLED].flag_data) {
  3836  0002A0  5184               	movf	(_timer_events+36)& (0+255),w,b	;volatile
  3837  0002A2  1185               	iorwf	(_timer_events+37)& (0+255),w,b	;volatile
  3838  0002A4  B4D8               	btfsc	status,2,c
  3839  0002A6  D008               	goto	l23
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;EventFaultStateLed.c: 36:  enable_callback (EventFaultStateLED, ((8000000/256/4/256)/4)
      +                          );
  3843  0002A8  0E00               	movlw	0
  3844  0002AA  6E15               	movwf	enable_callback@time_delay+1,c
  3845  0002AC  0E07               	movlw	7
  3846  0002AE  6E14               	movwf	enable_callback@time_delay,c
  3847  0002B0  0E04               	movlw	4
  3848  0002B2  EC3F  F006         	call	_enable_callback
  3849                           
  3850                           ;EventFaultStateLed.c: 37:       }
  3851  0002B6  0012               	return	
  3852  0002B8                     l23:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;EventFaultStateLed.c: 43:  timer_events[EventFaultStateLED].flag_data =
  3856  0002B8  B63B               	btfsc	_fault_flags,3,c
  3857  0002BA  D020               	goto	l3927
  3858                           
  3859                           ; BSR set to: 0
  3860  0002BC  B43B               	btfsc	_fault_flags,2,c
  3861  0002BE  D015               	goto	l3923
  3862                           
  3863                           ; BSR set to: 0
  3864  0002C0  B23B               	btfsc	_fault_flags,1,c
  3865  0002C2  D00A               	goto	l3919
  3866                           
  3867                           ; BSR set to: 0
  3868  0002C4  A03B               	btfss	_fault_flags,0,c
  3869  0002C6  D003               	goto	u2810
  3870  0002C8  6A17               	clrf	??_EventFaultStateLEDCallBack& (0+255),c
  3871  0002CA  2A17               	incf	??_EventFaultStateLEDCallBack& (0+255),f,c
  3872  0002CC  D001               	goto	u2818
  3873  0002CE                     u2810:
  3874  0002CE  6A17               	clrf	??_EventFaultStateLEDCallBack& (0+255),c
  3875  0002D0                     u2818:
  3876  0002D0  5017               	movf	??_EventFaultStateLEDCallBack,w,c
  3877  0002D2  6E1C               	movwf	_EventFaultStateLEDCallBack$219,c
  3878  0002D4  6A1D               	clrf	_EventFaultStateLEDCallBack$219+1,c
  3879  0002D6  D004               	goto	l3921
  3880  0002D8                     l3919:
  3881                           
  3882                           ; BSR set to: 0
  3883  0002D8  0E00               	movlw	0
  3884  0002DA  6E1D               	movwf	_EventFaultStateLEDCallBack$219+1,c
  3885  0002DC  0E02               	movlw	2
  3886  0002DE  6E1C               	movwf	_EventFaultStateLEDCallBack$219,c
  3887  0002E0                     l3921:
  3888  0002E0  C01C  F01A         	movff	_EventFaultStateLEDCallBack$219,_EventFaultStateLEDCallBack$218
  3889  0002E4  C01D  F01B         	movff	_EventFaultStateLEDCallBack$219+1,_EventFaultStateLEDCallBack$218+1
  3890  0002E8  D004               	goto	l3925
  3891  0002EA                     l3923:
  3892                           
  3893                           ; BSR set to: 0
  3894  0002EA  0E00               	movlw	0
  3895  0002EC  6E1B               	movwf	_EventFaultStateLEDCallBack$218+1,c
  3896  0002EE  0E03               	movlw	3
  3897  0002F0  6E1A               	movwf	_EventFaultStateLEDCallBack$218,c
  3898  0002F2                     l3925:
  3899  0002F2  C01A  F018         	movff	_EventFaultStateLEDCallBack$218,_EventFaultStateLEDCallBack$217
  3900  0002F6  C01B  F019         	movff	_EventFaultStateLEDCallBack$218+1,_EventFaultStateLEDCallBack$217+1
  3901  0002FA  D004               	goto	l3929
  3902  0002FC                     l3927:
  3903                           
  3904                           ; BSR set to: 0
  3905  0002FC  0E00               	movlw	0
  3906  0002FE  6E19               	movwf	_EventFaultStateLEDCallBack$217+1,c
  3907  000300  0E04               	movlw	4
  3908  000302  6E18               	movwf	_EventFaultStateLEDCallBack$217,c
  3909  000304                     l3929:
  3910  000304  C018  F084         	movff	_EventFaultStateLEDCallBack$217,_timer_events+36	;volatile
  3911  000308  C019  F085         	movff	_EventFaultStateLEDCallBack$217+1,_timer_events+37	;volatile
  3912                           
  3913                           ;EventFaultStateLed.c: 50:  enable_callback (EventFaultStateLED, ((8000000/256/4/256)*1)
      +                          );
  3914  00030C  0E00               	movlw	0
  3915  00030E  6E15               	movwf	enable_callback@time_delay+1,c
  3916  000310  0E1E               	movlw	30
  3917  000312  6E14               	movwf	enable_callback@time_delay,c
  3918  000314  0E04               	movlw	4
  3919  000316  EC3F  F006         	call	_enable_callback
  3920  00031A  0012               	return	
  3921  00031C                     l22:
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;EventFaultStateLed.c: 55:       { PORTAbits.RA3 = (1);};
  3925  00031C  8680               	bsf	3968,3,c	;volatile
  3926                           
  3927                           ;EventFaultStateLed.c: 56:       timer_events[EventFaultStateLED].flag_bit = 1;
  3928  00031E  8382               	bsf	(_timer_events+34)& (0+255),1,b	;volatile
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;EventFaultStateLed.c: 57:       if (timer_events[EventFaultStateLED].flag_data) {
  3932  000320  5184               	movf	(_timer_events+36)& (0+255),w,b	;volatile
  3933  000322  1185               	iorwf	(_timer_events+37)& (0+255),w,b	;volatile
  3934  000324  B4D8               	btfsc	status,2,c
  3935  000326  D003               	goto	l3937
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;EventFaultStateLed.c: 58:  timer_events[EventFaultStateLED].flag_data--;
  3939  000328  0784               	decf	(_timer_events+36)& (0+255),f,b	;volatile
  3940  00032A  A0D8               	btfss	status,0,c
  3941  00032C  0785               	decf	(_timer_events+37)& (0+255),f,b	;volatile
  3942  00032E                     l3937:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;EventFaultStateLed.c: 60:       enable_callback (EventFaultStateLED, ((8000000/256/4/25
      +                          6)/4));
  3946  00032E  0E00               	movlw	0
  3947  000330  6E15               	movwf	enable_callback@time_delay+1,c
  3948  000332  0E07               	movlw	7
  3949  000334  6E14               	movwf	enable_callback@time_delay,c
  3950  000336  0E04               	movlw	4
  3951  000338  EC3F  F006         	call	_enable_callback
  3952  00033C  0012               	return		;funcret
  3953  00033E                     __end_of_EventFaultStateLEDCallBack:
  3954                           	opt callstack 0
  3955                           
  3956 ;; *************** function _EventDumpSolenoidCallBack *****************
  3957 ;; Defined at:
  3958 ;;		line 3 in file "EventDumpsolenoid.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;		None
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;		None
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      void 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3972 ;;      Params:         0       0       0       0       0       0       0       0       0
  3973 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3975 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3976 ;;Total ram usage:        0 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    5
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_init_event_timer
  3983 ;;		_process_event_timer
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text28
  3988  0010D8                     __ptext28:
  3989                           	opt callstack 0
  3990  0010D8                     _EventDumpSolenoidCallBack:
  3991                           	opt callstack 24
  3992                           
  3993                           ;EventDumpsolenoid.c: 5:   { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  3994                           
  3995                           ;incstack = 0
  3996  0010D8  9480               	bcf	3968,2,c	;volatile
  3997  0010DA  903C               	bcf	_fault_flags+1,0,c
  3998                           
  3999                           ;EventDumpsolenoid.c: 7:   state = standbyState;
  4000  0010DC  0E00               	movlw	0
  4001  0010DE  6E40               	movwf	_state,c
  4002  0010E0  0012               	return		;funcret
  4003  0010E2                     __end_of_EventDumpSolenoidCallBack:
  4004                           	opt callstack 0
  4005                           
  4006 ;; *************** function _EventRunSignalDebounceCallBack *****************
  4007 ;; Defined at:
  4008 ;;		line 4 in file "EventRunSignalDebounce.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;		None
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;		None
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      void 
  4015 ;; Registers used:
  4016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4022 ;;      Params:         0       0       0       0       0       0       0       0       0
  4023 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4024 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4025 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4026 ;;Total ram usage:        0 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    7
  4029 ;; This function calls:
  4030 ;;		_clear_callback_for_shutdown
  4031 ;; This function is called by:
  4032 ;;		_init_event_timer
  4033 ;;		_process_event_timer
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           	psect	text29
  4038  0010AC                     __ptext29:
  4039                           	opt callstack 0
  4040  0010AC                     _EventRunSignalDebounceCallBack:
  4041                           	opt callstack 22
  4042                           
  4043                           ;EventRunSignalDebounce.c: 9:     state = timer_events[EventRunSignalDebounce].next_stat
      +                          e;
  4044                           
  4045                           ;incstack = 0
  4046  0010AC  C09B  F040         	movff	_timer_events+59,_state	;volatile
  4047                           
  4048                           ;EventRunSignalDebounce.c: 10:     if (shutdownState == state) {
  4049  0010B0  0440               	decf	_state,w,c
  4050  0010B2  A4D8               	btfss	status,2,c
  4051  0010B4  0012               	return	
  4052                           
  4053                           ;EventRunSignalDebounce.c: 12:         clear_callback_for_shutdown();
  4054  0010B6  EC3E  F007         	call	_clear_callback_for_shutdown	;wreg free
  4055  0010BA  0012               	return		;funcret
  4056  0010BC                     __end_of_EventRunSignalDebounceCallBack:
  4057                           	opt callstack 0
  4058                           
  4059 ;; *************** function _clear_callback_for_shutdown *****************
  4060 ;; Defined at:
  4061 ;;		line 30 in file "timer_event.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;		None
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;		None
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  1    wreg      void 
  4068 ;; Registers used:
  4069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4075 ;;      Params:         0       0       0       0       0       0       0       0       0
  4076 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4078 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4079 ;;Total ram usage:        0 bytes
  4080 ;; Hardware stack levels used:    1
  4081 ;; Hardware stack levels required when called:    6
  4082 ;; This function calls:
  4083 ;;		_clear_callback
  4084 ;; This function is called by:
  4085 ;;		_EventLowFogPressureCallBack
  4086 ;;		_EventLowWaterLevelCallBack
  4087 ;;		_EventLowWaterPressureCallBack
  4088 ;;		_EventPODebounceCallBack
  4089 ;;		_EventRunSignalDebounceCallBack
  4090 ;;		_start_pump
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text30
  4095  000E7C                     __ptext30:
  4096                           	opt callstack 0
  4097  000E7C                     _clear_callback_for_shutdown:
  4098                           	opt callstack 23
  4099                           
  4100                           ;timer_event.c: 31:     clear_callback(EventLowWaterLevel);
  4101                           
  4102                           ;incstack = 0
  4103  000E7C  0E00               	movlw	0
  4104  000E7E  EC1B  F008         	call	_clear_callback
  4105                           
  4106                           ;timer_event.c: 32:     clear_callback(EventLowWaterPressure);
  4107  000E82  0E01               	movlw	1
  4108  000E84  EC1B  F008         	call	_clear_callback
  4109                           
  4110                           ;timer_event.c: 33:     clear_callback(EventLowWaterPressureDebounce);
  4111  000E88  0E02               	movlw	2
  4112  000E8A  EC1B  F008         	call	_clear_callback
  4113                           
  4114                           ;timer_event.c: 34:     clear_callback(EventLowFogPressure);
  4115  000E8E  0E03               	movlw	3
  4116  000E90  EC1B  F008         	call	_clear_callback
  4117                           
  4118                           ;timer_event.c: 35:     clear_callback(EventDumpSolenoid);
  4119  000E94  0E06               	movlw	6
  4120  000E96  EC1B  F008         	call	_clear_callback
  4121                           
  4122                           ;timer_event.c: 36:     clear_callback(EventPODebounce);
  4123  000E9A  0E08               	movlw	8
  4124  000E9C  EC1B  F008         	call	_clear_callback
  4125                           
  4126                           ;timer_event.c: 37:     clear_callback(EventRunSignalDebounce);
  4127  000EA0  0E07               	movlw	7
  4128  000EA2  EC1B  F008         	call	_clear_callback
  4129  000EA6  0012               	return		;funcret
  4130  000EA8                     __end_of_clear_callback_for_shutdown:
  4131                           	opt callstack 0
  4132                           
  4133 ;; *************** function _printPumpState *****************
  4134 ;; Defined at:
  4135 ;;		line 102 in file "pump_control.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0
  4150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4153 ;;Total ram usage:        0 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:   11
  4156 ;; This function calls:
  4157 ;;		_printf
  4158 ;; This function is called by:
  4159 ;;		_main
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text31
  4164  0010EC                     __ptext31:
  4165                           	opt callstack 0
  4166  0010EC                     _printPumpState:
  4167                           	opt callstack 19
  4168                           
  4169                           ;pump_control.c: 103:     return;
  4170                           
  4171                           ;incstack = 0
  4172  0010EC  0012               	return		;funcret
  4173  0010EE                     __end_of_printPumpState:
  4174                           	opt callstack 0
  4175                           
  4176 ;; *************** function _printFaultState *****************
  4177 ;; Defined at:
  4178 ;;		line 107 in file "pump_control.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;		None
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4192 ;;      Params:         0       0       0       0       0       0       0       0       0
  4193 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4195 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4196 ;;Total ram usage:        0 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:   11
  4199 ;; This function calls:
  4200 ;;		_printf
  4201 ;; This function is called by:
  4202 ;;		_main
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text32
  4207  0010EE                     __ptext32:
  4208                           	opt callstack 0
  4209  0010EE                     _printFaultState:
  4210                           	opt callstack 19
  4211                           
  4212                           ;pump_control.c: 108:     return;
  4213                           
  4214                           ;incstack = 0
  4215  0010EE  0012               	return		;funcret
  4216  0010F0                     __end_of_printFaultState:
  4217                           	opt callstack 0
  4218                           
  4219 ;; *************** function _printf *****************
  4220 ;; Defined at:
  4221 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  fmt             2    6[BANK0 ] PTR const unsigned char 
  4224 ;;		 -> STR_18(15), STR_17(18), STR_16(18), STR_15(15), 
  4225 ;;		 -> STR_14(14), STR_13(10), STR_12(11), STR_11(12), 
  4226 ;;		 -> STR_10(12), STR_9(12), STR_8(15), STR_7(15), 
  4227 ;;		 -> STR_6(17), STR_5(31), STR_4(21), STR_3(24), 
  4228 ;;		 -> STR_2(16), STR_1(15), 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  ap              2   10[BANK0 ] PTR void [1]
  4231 ;;		 -> ?_printf(2), 
  4232 ;;  ret             2    0        int 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  2    6[BANK0 ] int 
  4235 ;; Registers used:
  4236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4242 ;;      Params:         0       2       0       0       0       0       0       0       0
  4243 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4245 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4246 ;;Total ram usage:        6 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:   10
  4249 ;; This function calls:
  4250 ;;		_vfprintf
  4251 ;; This function is called by:
  4252 ;;		_printPumpState
  4253 ;;		_printFaultState
  4254 ;;		_main
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           	psect	text33
  4259  000EF8                     __ptext33:
  4260                           	opt callstack 0
  4261  000EF8                     _printf:
  4262                           	opt callstack 20
  4263                           
  4264                           ;incstack = 0
  4265  000EF8  0EF2               	movlw	low (?_printf+2)
  4266  000EFA  0100               	movlb	0	; () banked
  4267  000EFC  6FF4               	movwf	printf@ap& (0+255),b
  4268  000EFE  0E00               	movlw	high (?_printf+2)
  4269  000F00  6FF5               	movwf	(printf@ap+1)& (0+255),b
  4270                           
  4271                           ; BSR set to: 0
  4272  000F02  0E00               	movlw	0
  4273  000F04  6FEA               	movwf	vfprintf@fp& (0+255),b
  4274  000F06  0E00               	movlw	0
  4275  000F08  6FEB               	movwf	(vfprintf@fp+1)& (0+255),b
  4276  000F0A  C0F0  F0EC         	movff	printf@fmt,vfprintf@fmt
  4277  000F0E  C0F1  F0ED         	movff	printf@fmt+1,vfprintf@fmt+1
  4278  000F12  0EF4               	movlw	low printf@ap
  4279  000F14  6FEE               	movwf	vfprintf@ap& (0+255),b
  4280  000F16  0E00               	movlw	high printf@ap
  4281  000F18  6FEF               	movwf	(vfprintf@ap+1)& (0+255),b
  4282  000F1A  ECCC  F005         	call	_vfprintf	;wreg free
  4283  000F1E  0012               	return		;funcret
  4284  000F20                     __end_of_printf:
  4285                           	opt callstack 0
  4286                           
  4287 ;; *************** function _vfprintf *****************
  4288 ;; Defined at:
  4289 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  4292 ;;		 -> NULL(0), 
  4293 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  4294 ;;		 -> STR_18(15), STR_17(18), STR_16(18), STR_15(15), 
  4295 ;;		 -> STR_14(14), STR_13(10), STR_12(11), STR_11(12), 
  4296 ;;		 -> STR_10(12), STR_9(12), STR_8(15), STR_7(15), 
  4297 ;;		 -> STR_6(17), STR_5(31), STR_4(21), STR_3(24), 
  4298 ;;		 -> STR_2(16), STR_1(15), 
  4299 ;;  ap              2    4[BANK0 ] PTR PTR void 
  4300 ;;		 -> printf@ap(2), 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  cfmt            2   46[COMRAM] PTR unsigned char 
  4303 ;;		 -> STR_18(15), STR_17(18), STR_16(18), STR_15(15), 
  4304 ;;		 -> STR_14(14), STR_13(10), STR_12(11), STR_11(12), 
  4305 ;;		 -> STR_10(12), STR_9(12), STR_8(15), STR_7(15), 
  4306 ;;		 -> STR_6(17), STR_5(31), STR_4(21), STR_3(24), 
  4307 ;;		 -> STR_2(16), STR_1(15), 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  2    0[BANK0 ] int 
  4310 ;; Registers used:
  4311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4317 ;;      Params:         0       6       0       0       0       0       0       0       0
  4318 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4320 ;;      Totals:         2       6       0       0       0       0       0       0       0
  4321 ;;Total ram usage:        8 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    9
  4324 ;; This function calls:
  4325 ;;		_vfpfcnvrt
  4326 ;; This function is called by:
  4327 ;;		_printf
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text34
  4332  000B98                     __ptext34:
  4333                           	opt callstack 0
  4334  000B98                     _vfprintf:
  4335                           	opt callstack 20
  4336                           
  4337                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  4338                           
  4339                           ;incstack = 0
  4340  000B98  C0EC  F02F         	movff	vfprintf@fmt,vfprintf@cfmt
  4341  000B9C  C0ED  F030         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4342                           
  4343                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  4344  000BA0  0E00               	movlw	0
  4345  000BA2  6E32               	movwf	_nout+1,c
  4346  000BA4  0E00               	movlw	0
  4347  000BA6  6E31               	movwf	_nout,c
  4348                           
  4349                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4350  000BA8  D012               	goto	l3887
  4351  000BAA                     l3885:
  4352                           
  4353                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  4354  000BAA  C0EA  F025         	movff	vfprintf@fp,vfpfcnvrt@fp
  4355  000BAE  C0EB  F026         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4356  000BB2  0E2F               	movlw	low vfprintf@cfmt
  4357  000BB4  6E27               	movwf	vfpfcnvrt@fmt,c
  4358  000BB6  0E00               	movlw	high vfprintf@cfmt
  4359  000BB8  6E28               	movwf	vfpfcnvrt@fmt+1,c
  4360  000BBA  C0EE  F029         	movff	vfprintf@ap,vfpfcnvrt@ap
  4361  000BBE  C0EF  F02A         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4362  000BC2  EC09  F000         	call	_vfpfcnvrt	;wreg free
  4363  000BC6  5025               	movf	?_vfpfcnvrt,w,c
  4364  000BC8  2631               	addwf	_nout,f,c
  4365  000BCA  5026               	movf	?_vfpfcnvrt+1,w,c
  4366  000BCC  2232               	addwfc	_nout+1,f,c
  4367  000BCE                     l3887:
  4368                           
  4369                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4370  000BCE  C02F  FFF6         	movff	vfprintf@cfmt,tblptrl
  4371  000BD2  C030  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4372  000BD6                     	if	0	;tblptru may be non-zero
  4373  000BD6                     	endif
  4374  000BD6                     	if	0	;tblptru may be non-zero
  4375  000BD6                     	endif
  4376  000BD6  0008               	tblrd		*
  4377  000BD8  50F5               	movf	tablat,w,c
  4378  000BDA  0900               	iorlw	0
  4379  000BDC  A4D8               	btfss	status,2,c
  4380  000BDE  D7E5               	goto	l3885
  4381                           
  4382                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  4383  000BE0  C031  F0EA         	movff	_nout,?_vfprintf
  4384  000BE4  C032  F0EB         	movff	_nout+1,?_vfprintf+1
  4385  000BE8  0012               	return		;funcret
  4386  000BEA                     __end_of_vfprintf:
  4387                           	opt callstack 0
  4388                           
  4389 ;; *************** function _vfpfcnvrt *****************
  4390 ;; Defined at:
  4391 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
  4394 ;;		 -> NULL(0), 
  4395 ;;  fmt             2   38[COMRAM] PTR PTR unsigned char 
  4396 ;;		 -> vfprintf@cfmt(2), 
  4397 ;;  ap              2   40[COMRAM] PTR PTR void 
  4398 ;;		 -> printf@ap(2), 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  llu             8    0        unsigned long long 
  4401 ;;  ll              8    0        long long 
  4402 ;;  f               4    0        long long 
  4403 ;;  ct              3    0        unsigned char [3]
  4404 ;;  cp              3    0        PTR unsigned char 
  4405 ;;  vp              2   44[COMRAM] PTR void 
  4406 ;;		 -> ?_printf(2), 
  4407 ;;  i               2    0        int 
  4408 ;;  done            2    0        int 
  4409 ;;  c               1    0        unsigned char 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  2   36[COMRAM] int 
  4412 ;; Registers used:
  4413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4419 ;;      Params:         6       0       0       0       0       0       0       0       0
  4420 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4421 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4422 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4423 ;;Total ram usage:       10 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    8
  4426 ;; This function calls:
  4427 ;;		_fputc
  4428 ;; This function is called by:
  4429 ;;		_vfprintf
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text35
  4434  000012                     __ptext35:
  4435                           	opt callstack 0
  4436  000012                     _vfpfcnvrt:
  4437                           	opt callstack 20
  4438                           
  4439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  4440                           
  4441                           ;incstack = 0
  4442  000012  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4443  000016  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4444  00001A  CFDE FFF6          	movff	postinc2,tblptrl
  4445  00001E  CFDD FFF7          	movff	postdec2,tblptrh
  4446  000022                     	if	0	;tblptru may be non-zero
  4447  000022                     	endif
  4448  000022                     	if	0	;tblptru may be non-zero
  4449  000022                     	endif
  4450  000022  0008               	tblrd		*
  4451  000024  50F5               	movf	tablat,w,c
  4452  000026  0A25               	xorlw	37
  4453  000028  A4D8               	btfss	status,2,c
  4454  00002A  D071               	goto	l3795
  4455                           
  4456                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  4457  00002C  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4458  000030  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4459  000034  2ADE               	incf	postinc2,f,c
  4460  000036  0E00               	movlw	0
  4461  000038  22DD               	addwfc	postdec2,f,c
  4462                           
  4463                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  4464  00003A  0E00               	movlw	0
  4465  00003C  6E34               	movwf	_width+1,c
  4466  00003E  0E00               	movlw	0
  4467  000040  6E33               	movwf	_width,c
  4468  000042  C033  F037         	movff	_width,_flags
  4469  000046  C034  F038         	movff	_width+1,_flags+1
  4470                           
  4471                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  4472  00004A  6835               	setf	_prec,c
  4473  00004C  6836               	setf	_prec+1,c
  4474                           
  4475                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1077:      
      +                             if (*fmt[0] == 'n') {
  4476  00004E  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4477  000052  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4478  000056  CFDE FFF6          	movff	postinc2,tblptrl
  4479  00005A  CFDD FFF7          	movff	postdec2,tblptrh
  4480  00005E                     	if	0	;tblptru may be non-zero
  4481  00005E                     	endif
  4482  00005E                     	if	0	;tblptru may be non-zero
  4483  00005E                     	endif
  4484  00005E  0008               	tblrd		*
  4485  000060  50F5               	movf	tablat,w,c
  4486  000062  0A6E               	xorlw	110
  4487  000064  A4D8               	btfss	status,2,c
  4488  000066  D028               	goto	l3779
  4489                           
  4490                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1078:      
      +                                 ++*fmt;
  4491  000068  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4492  00006C  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4493  000070  2ADE               	incf	postinc2,f,c
  4494  000072  0E00               	movlw	0
  4495  000074  22DD               	addwfc	postdec2,f,c
  4496                           
  4497                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1079:      
      +                                 vp = (void *)(*(int * *)__va_arg(*(int * **)ap, (int *)0));
  4498  000076  C029  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4499  00007A  C02A  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4500  00007E  CFDF F02B          	movff	indf2,??_vfpfcnvrt
  4501  000082  0E02               	movlw	2
  4502  000084  26DE               	addwf	postinc2,f,c
  4503  000086  CFDF F02C          	movff	indf2,??_vfpfcnvrt+1
  4504  00008A  0E00               	movlw	0
  4505  00008C  22DD               	addwfc	postdec2,f,c
  4506  00008E  C02B  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4507  000092  C02C  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4508  000096  CFDE F02D          	movff	postinc2,vfpfcnvrt@vp
  4509  00009A  CFDD F02E          	movff	postdec2,vfpfcnvrt@vp+1
  4510                           
  4511                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1080:      
      +                                 *(int *)vp = nout;
  4512  00009E  C02D  FFD9         	movff	vfpfcnvrt@vp,fsr2l
  4513  0000A2  C02E  FFDA         	movff	vfpfcnvrt@vp+1,fsr2h
  4514  0000A6  C031  FFDE         	movff	_nout,postinc2
  4515  0000AA  C032  FFDD         	movff	_nout+1,postdec2
  4516  0000AE                     l3775:
  4517                           
  4518                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1081:      
      +                                 return 0;
  4519  0000AE  0E00               	movlw	0
  4520  0000B0  6E26               	movwf	?_vfpfcnvrt+1,c
  4521  0000B2  0E00               	movlw	0
  4522  0000B4  6E25               	movwf	?_vfpfcnvrt,c
  4523  0000B6  0012               	return	
  4524  0000B8                     l3779:
  4525                           
  4526                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  4527  0000B8  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4528  0000BC  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4529  0000C0  CFDE FFF6          	movff	postinc2,tblptrl
  4530  0000C4  CFDD FFF7          	movff	postdec2,tblptrh
  4531  0000C8                     	if	0	;tblptru may be non-zero
  4532  0000C8                     	endif
  4533  0000C8                     	if	0	;tblptru may be non-zero
  4534  0000C8                     	endif
  4535  0000C8  0008               	tblrd		*
  4536  0000CA  50F5               	movf	tablat,w,c
  4537  0000CC  0A25               	xorlw	37
  4538  0000CE  A4D8               	btfss	status,2,c
  4539  0000D0  D016               	goto	l3789
  4540                           
  4541                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  4542  0000D2  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4543  0000D6  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4544  0000DA  2ADE               	incf	postinc2,f,c
  4545  0000DC  0E00               	movlw	0
  4546  0000DE  22DD               	addwfc	postdec2,f,c
  4547                           
  4548                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  4549  0000E0  0E00               	movlw	0
  4550  0000E2  6E1D               	movwf	fputc@c+1,c
  4551  0000E4  0E25               	movlw	37
  4552  0000E6  6E1C               	movwf	fputc@c,c
  4553  0000E8  C025  F01E         	movff	vfpfcnvrt@fp,fputc@fp
  4554  0000EC  C026  F01F         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4555  0000F0  EC83  F004         	call	_fputc	;wreg free
  4556  0000F4                     l3785:
  4557                           
  4558                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  4559  0000F4  0E00               	movlw	0
  4560  0000F6  6E26               	movwf	?_vfpfcnvrt+1,c
  4561  0000F8  0E01               	movlw	1
  4562  0000FA  6E25               	movwf	?_vfpfcnvrt,c
  4563  0000FC  0012               	return	
  4564  0000FE                     l3789:
  4565                           
  4566                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  4567  0000FE  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4568  000102  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4569  000106  2ADE               	incf	postinc2,f,c
  4570  000108  0E00               	movlw	0
  4571  00010A  22DD               	addwfc	postdec2,f,c
  4572  00010C  D7D0               	goto	l3775
  4573  00010E                     l3795:
  4574                           
  4575                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  4576  00010E  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4577  000112  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4578  000116  CFDE FFF6          	movff	postinc2,tblptrl
  4579  00011A  CFDD FFF7          	movff	postdec2,tblptrh
  4580  00011E                     	if	0	;tblptru may be non-zero
  4581  00011E                     	endif
  4582  00011E                     	if	0	;tblptru may be non-zero
  4583  00011E                     	endif
  4584  00011E  0008               	tblrd		*
  4585  000120  50F5               	movf	tablat,w,c
  4586  000122  6E1C               	movwf	fputc@c,c
  4587  000124  6A1D               	clrf	fputc@c+1,c
  4588  000126  C025  F01E         	movff	vfpfcnvrt@fp,fputc@fp
  4589  00012A  C026  F01F         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4590  00012E  EC83  F004         	call	_fputc	;wreg free
  4591                           
  4592                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  4593  000132  C027  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4594  000136  C028  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4595  00013A  2ADE               	incf	postinc2,f,c
  4596  00013C  0E00               	movlw	0
  4597  00013E  22DD               	addwfc	postdec2,f,c
  4598  000140  D7D9               	goto	l3785
  4599  000142                     __end_of_vfpfcnvrt:
  4600                           	opt callstack 0
  4601                           
  4602 ;; *************** function _fputc *****************
  4603 ;; Defined at:
  4604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  c               2   27[COMRAM] int 
  4607 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  4608 ;;		 -> NULL(0), 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;		None
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  2   27[COMRAM] int 
  4613 ;; Registers used:
  4614 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4620 ;;      Params:         4       0       0       0       0       0       0       0       0
  4621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4622 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4623 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4624 ;;Total ram usage:        9 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    7
  4627 ;; This function calls:
  4628 ;;		_putch
  4629 ;; This function is called by:
  4630 ;;		_vfpfcnvrt
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text36
  4635  000906                     __ptext36:
  4636                           	opt callstack 0
  4637  000906                     _fputc:
  4638                           	opt callstack 20
  4639                           
  4640                           ;incstack = 0
  4641  000906  501E               	movf	fputc@fp,w,c
  4642  000908  101F               	iorwf	fputc@fp+1,w,c
  4643  00090A  B4D8               	btfsc	status,2,c
  4644  00090C  D004               	goto	u2540
  4645  00090E  501E               	movf	fputc@fp,w,c
  4646  000910  101F               	iorwf	fputc@fp+1,w,c
  4647  000912  A4D8               	btfss	status,2,c
  4648  000914  D004               	goto	l3641
  4649  000916                     u2540:
  4650  000916  501C               	movf	fputc@c,w,c
  4651  000918  EC31  F008         	call	_putch
  4652  00091C  0012               	return	
  4653  00091E                     l3641:
  4654  00091E  EE20 F004          	lfsr	2,4
  4655  000922  501E               	movf	fputc@fp,w,c
  4656  000924  26D9               	addwf	fsr2l,f,c
  4657  000926  501F               	movf	fputc@fp+1,w,c
  4658  000928  22DA               	addwfc	fsr2h,f,c
  4659  00092A  50DE               	movf	postinc2,w,c
  4660  00092C  10DE               	iorwf	postinc2,w,c
  4661  00092E  B4D8               	btfsc	status,2,c
  4662  000930  D016               	goto	u2560
  4663  000932  EE20 F004          	lfsr	2,4
  4664  000936  501E               	movf	fputc@fp,w,c
  4665  000938  26D9               	addwf	fsr2l,f,c
  4666  00093A  501F               	movf	fputc@fp+1,w,c
  4667  00093C  22DA               	addwfc	fsr2h,f,c
  4668  00093E  EE10 F002          	lfsr	1,2
  4669  000942  501E               	movf	fputc@fp,w,c
  4670  000944  26E1               	addwf	fsr1l,f,c
  4671  000946  501F               	movf	fputc@fp+1,w,c
  4672  000948  22E2               	addwfc	fsr1h,f,c
  4673  00094A  50DE               	movf	postinc2,w,c
  4674  00094C  5CE6               	subwf	postinc1,w,c
  4675  00094E  50E6               	movf	postinc1,w,c
  4676  000950  0A80               	xorlw	128
  4677  000952  6E24               	movwf	(??_fputc+4)& (0+255),c
  4678  000954  50DE               	movf	postinc2,w,c
  4679  000956  0A80               	xorlw	128
  4680  000958  5824               	subwfb	(??_fputc+4)& (0+255),w,c
  4681  00095A  B0D8               	btfsc	status,0,c
  4682  00095C  0012               	return	
  4683  00095E                     u2560:
  4684  00095E  EE20 F002          	lfsr	2,2
  4685  000962  501E               	movf	fputc@fp,w,c
  4686  000964  26D9               	addwf	fsr2l,f,c
  4687  000966  501F               	movf	fputc@fp+1,w,c
  4688  000968  22DA               	addwfc	fsr2h,f,c
  4689  00096A  2ADE               	incf	postinc2,f,c
  4690  00096C  0E00               	movlw	0
  4691  00096E  22DD               	addwfc	postdec2,f,c
  4692  000970  0012               	return		;funcret
  4693  000972                     __end_of_fputc:
  4694                           	opt callstack 0
  4695                           
  4696 ;; *************** function _putch *****************
  4697 ;; Defined at:
  4698 ;;		line 209 in file "serial.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  c               1    wreg     unsigned char 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  c               1   26[COMRAM] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      void 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4712 ;;      Params:         0       0       0       0       0       0       0       0       0
  4713 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4715 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4716 ;;Total ram usage:        1 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    6
  4719 ;; This function calls:
  4720 ;;		_push
  4721 ;; This function is called by:
  4722 ;;		_output_message
  4723 ;;		_fputc
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text37
  4728  001062                     __ptext37:
  4729                           	opt callstack 0
  4730  001062                     _putch:
  4731                           	opt callstack 21
  4732                           
  4733                           ;incstack = 0
  4734                           ;putch@c stored from wreg
  4735  001062  6E1B               	movwf	putch@c,c
  4736                           
  4737                           ;serial.c: 210:     push(&outbound, c);
  4738  001064  0E12               	movlw	low _outbound
  4739  001066  6E14               	movwf	push@buff,c
  4740  001068  0E02               	movlw	high _outbound
  4741  00106A  6E15               	movwf	push@buff+1,c
  4742  00106C  C01B  F016         	movff	putch@c,push@d
  4743  001070  ECB9  F004         	call	_push	;wreg free
  4744  001074  0012               	return		;funcret
  4745  001076                     __end_of_putch:
  4746                           	opt callstack 0
  4747                           
  4748 ;; *************** function _push *****************
  4749 ;; Defined at:
  4750 ;;		line 10 in file "serial_buffer.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;  buff            2   19[COMRAM] PTR struct .
  4753 ;;		 -> inbound(260), outbound(260), 
  4754 ;;  d               1   21[COMRAM] unsigned char 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;		None
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4766 ;;      Params:         3       0       0       0       0       0       0       0       0
  4767 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4768 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4769 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4770 ;;Total ram usage:        7 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    5
  4773 ;; This function calls:
  4774 ;;		Nothing
  4775 ;; This function is called by:
  4776 ;;		_putch
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text38
  4781  000972                     __ptext38:
  4782                           	opt callstack 0
  4783  000972                     _push:
  4784                           	opt callstack 21
  4785                           
  4786                           ;serial_buffer.c: 14:     GIE = 0;
  4787                           
  4788                           ;incstack = 0
  4789  000972  9EF2               	bcf	4082,7,c	;volatile
  4790                           
  4791                           ;serial_buffer.c: 15:     buff->data[(buff->start + buff->length) % 256] = d;
  4792  000974  EE21 F002          	lfsr	2,258
  4793  000978  5014               	movf	push@buff,w,c
  4794  00097A  26D9               	addwf	fsr2l,f,c
  4795  00097C  5015               	movf	push@buff+1,w,c
  4796  00097E  22DA               	addwfc	fsr2h,f,c
  4797  000980  CFDE F017          	movff	postinc2,??_push
  4798  000984  CFDD F018          	movff	postdec2,??_push+1
  4799  000988  EE21 F000          	lfsr	2,256
  4800  00098C  5014               	movf	push@buff,w,c
  4801  00098E  26D9               	addwf	fsr2l,f,c
  4802  000990  5015               	movf	push@buff+1,w,c
  4803  000992  22DA               	addwfc	fsr2h,f,c
  4804  000994  CFDE F019          	movff	postinc2,??_push+2
  4805  000998  CFDD F01A          	movff	postdec2,??_push+3
  4806  00099C  5017               	movf	??_push,w,c
  4807  00099E  2619               	addwf	??_push+2,f,c
  4808  0009A0  5018               	movf	??_push+1,w,c
  4809  0009A2  221A               	addwfc	??_push+3,f,c
  4810  0009A4  0EFF               	movlw	255
  4811  0009A6  1619               	andwf	??_push+2,f,c
  4812  0009A8  0E00               	movlw	0
  4813  0009AA  161A               	andwf	??_push+3,f,c
  4814  0009AC  5019               	movf	??_push+2,w,c
  4815  0009AE  2414               	addwf	push@buff,w,c
  4816  0009B0  6ED9               	movwf	fsr2l,c
  4817  0009B2  501A               	movf	??_push+3,w,c
  4818  0009B4  2015               	addwfc	push@buff+1,w,c
  4819  0009B6  6EDA               	movwf	fsr2h,c
  4820  0009B8  C016  FFDF         	movff	push@d,indf2
  4821                           
  4822                           ;serial_buffer.c: 16:     buff->length++;
  4823  0009BC  EE21 F002          	lfsr	2,258
  4824  0009C0  5014               	movf	push@buff,w,c
  4825  0009C2  26D9               	addwf	fsr2l,f,c
  4826  0009C4  5015               	movf	push@buff+1,w,c
  4827  0009C6  22DA               	addwfc	fsr2h,f,c
  4828  0009C8  2ADE               	incf	postinc2,f,c
  4829  0009CA  0E00               	movlw	0
  4830  0009CC  22DD               	addwfc	postdec2,f,c
  4831                           
  4832                           ;serial_buffer.c: 17:     GIE = 1;
  4833  0009CE  8EF2               	bsf	4082,7,c	;volatile
  4834  0009D0  0012               	return		;funcret
  4835  0009D2                     __end_of_push:
  4836                           	opt callstack 0
  4837                           
  4838 ;; *************** function _monitor_water_pressure *****************
  4839 ;; Defined at:
  4840 ;;		line 4 in file "MonitorWaterPressure.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;		None
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4854 ;;      Params:         0       0       0       0       0       0       0       0       0
  4855 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4856 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4857 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4858 ;;Total ram usage:        1 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    6
  4861 ;; This function calls:
  4862 ;;		_clear_callback
  4863 ;;		_enable_callback
  4864 ;; This function is called by:
  4865 ;;		_main
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text39
  4870  000D7E                     __ptext39:
  4871                           	opt callstack 0
  4872  000D7E                     _monitor_water_pressure:
  4873                           	opt callstack 24
  4874                           
  4875                           ;MonitorWaterPressure.c: 8:   if (( PORTCbits.RC0) == fault_flags.wpOkBit){
  4876                           
  4877                           ;incstack = 0
  4878  000D7E  A83B               	btfss	_fault_flags,4,c
  4879  000D80  D002               	goto	u3050
  4880  000D82  0E01               	movlw	1
  4881  000D84  D001               	goto	u3052
  4882  000D86                     u3050:
  4883  000D86  0E00               	movlw	0
  4884  000D88                     u3052:
  4885  000D88  6E17               	movwf	??_monitor_water_pressure& (0+255),c
  4886  000D8A  A082               	btfss	3970,0,c	;volatile
  4887  000D8C  D002               	goto	u3060
  4888  000D8E  0E01               	movlw	1
  4889  000D90  D001               	goto	u3062
  4890  000D92                     u3060:
  4891  000D92  0E00               	movlw	0
  4892  000D94                     u3062:
  4893  000D94  1A17               	xorwf	??_monitor_water_pressure,f,c
  4894  000D96  A4D8               	btfss	status,2,c
  4895  000D98  D00A               	goto	l4107
  4896                           
  4897                           ;MonitorWaterPressure.c: 12:        timer_events[EventLowWaterPressureDebounce].flag_bit
      +                           = 0;
  4898  000D9A  0100               	movlb	0	; () banked
  4899  000D9C  9372               	bcf	(_timer_events+18)& (0+255),1,b	;volatile
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;MonitorWaterPressure.c: 14:     enable_callback (EventLowWaterPressureDebounce, (3*(800
      +                          0000/256/4/256)));
  4903  000D9E  0E00               	movlw	0
  4904  000DA0  6E15               	movwf	enable_callback@time_delay+1,c
  4905  000DA2  0E5A               	movlw	90
  4906  000DA4  6E14               	movwf	enable_callback@time_delay,c
  4907  000DA6  0E02               	movlw	2
  4908  000DA8  EC3F  F006         	call	_enable_callback
  4909                           
  4910                           ;MonitorWaterPressure.c: 15:   } else{
  4911  000DAC  0012               	return	
  4912  000DAE                     l4107:
  4913                           
  4914                           ;MonitorWaterPressure.c: 17:     clear_callback(EventLowWaterPressureDebounce);
  4915  000DAE  0E02               	movlw	2
  4916  000DB0  EC1B  F008         	call	_clear_callback
  4917  000DB4  0012               	return		;funcret
  4918  000DB6                     __end_of_monitor_water_pressure:
  4919                           	opt callstack 0
  4920                           
  4921 ;; *************** function _clear_callback *****************
  4922 ;; Defined at:
  4923 ;;		line 25 in file "timer_event.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  callback        1    wreg     unsigned char 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  callback        1   19[COMRAM] unsigned char 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  1    wreg      void 
  4930 ;; Registers used:
  4931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4937 ;;      Params:         0       0       0       0       0       0       0       0       0
  4938 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4939 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4940 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4941 ;;Total ram usage:        1 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    5
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_monitor_water_pressure
  4948 ;;		_main
  4949 ;;		_pump_run
  4950 ;;		_monitor_pump_run
  4951 ;;		_standby
  4952 ;;		_start_main
  4953 ;;		_start_pump
  4954 ;;		_clear_callback_for_shutdown
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text40
  4959  001036                     __ptext40:
  4960                           	opt callstack 0
  4961  001036                     _clear_callback:
  4962                           	opt callstack 23
  4963                           
  4964                           ;incstack = 0
  4965                           ;clear_callback@callback stored from wreg
  4966  001036  6E14               	movwf	clear_callback@callback,c
  4967                           
  4968                           ;timer_event.c: 26:     timer_events[callback].active = 0;
  4969  001038  5014               	movf	clear_callback@callback,w,c
  4970  00103A  0D08               	mullw	8
  4971  00103C  0E62               	movlw	low (_timer_events+2)
  4972  00103E  24F3               	addwf	prodl,w,c
  4973  001040  6ED9               	movwf	fsr2l,c
  4974  001042  0E00               	movlw	high (_timer_events+2)
  4975  001044  20F4               	addwfc	prodh,w,c
  4976  001046  6EDA               	movwf	fsr2h,c
  4977  001048  0100               	movlb	0	; () banked
  4978  00104A  90DF               	bcf	indf2,0,c
  4979                           
  4980                           ; BSR set to: 0
  4981  00104C  0012               	return		;funcret
  4982  00104E                     __end_of_clear_callback:
  4983                           	opt callstack 0
  4984                           
  4985 ;; *************** function _checkIfShoudReset *****************
  4986 ;; Defined at:
  4987 ;;		line 227 in file "pump_control.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      void 
  4994 ;; Registers used:
  4995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5001 ;;      Params:         0       0       0       0       0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5004 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5005 ;;Total ram usage:        0 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    8
  5008 ;; This function calls:
  5009 ;;		_resetPump
  5010 ;; This function is called by:
  5011 ;;		_main
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           	psect	text41
  5016  000FAE                     __ptext41:
  5017                           	opt callstack 0
  5018  000FAE                     _checkIfShoudReset:
  5019                           	opt callstack 22
  5020                           
  5021                           ;pump_control.c: 229:     if (!( (!PORTCbits.RC1) || (combinedZones != 0) )
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;incstack = 0
  5025  000FAE  A282               	btfss	3970,1,c	;volatile
  5026  000FB0  0012               	return	
  5027  000FB2  504B               	movf	_combinedZones,w,c
  5028  000FB4  A4D8               	btfss	status,2,c
  5029  000FB6  0012               	return	
  5030  000FB8  A03B               	btfss	_fault_flags,0,c
  5031  000FBA  B23B               	btfsc	_fault_flags,1,c
  5032  000FBC  D004               	goto	u3130
  5033  000FBE  B43B               	btfsc	_fault_flags,2,c
  5034  000FC0  D002               	goto	u3130
  5035  000FC2  A63B               	btfss	_fault_flags,3,c
  5036  000FC4  0012               	return	
  5037  000FC6                     u3130:
  5038                           
  5039                           ;pump_control.c: 234:             ) {;pump_control.c: 236:         resetPump();
  5040  000FC6  EC71  F008         	call	_resetPump	;wreg free
  5041  000FCA  0012               	return		;funcret
  5042  000FCC                     __end_of_checkIfShoudReset:
  5043                           	opt callstack 0
  5044                           
  5045 ;; *************** function _resetPump *****************
  5046 ;; Defined at:
  5047 ;;		line 215 in file "pump_control.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5061 ;;      Params:         0       0       0       0       0       0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5064 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5065 ;;Total ram usage:        0 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    7
  5068 ;; This function calls:
  5069 ;;		_init
  5070 ;;		_init_event_timer
  5071 ;; This function is called by:
  5072 ;;		_checkIfShoudReset
  5073 ;;		_process_reset_pump
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text42
  5078  0010E2                     __ptext42:
  5079                           	opt callstack 0
  5080  0010E2                     _resetPump:
  5081                           	opt callstack 21
  5082                           
  5083                           ;pump_control.c: 216:     init();
  5084                           
  5085                           ;incstack = 0
  5086  0010E2  ECD3  F003         	call	_init	;wreg free
  5087                           
  5088                           ;pump_control.c: 217:     init_event_timer();
  5089  0010E6  EC19  F005         	call	_init_event_timer	;wreg free
  5090  0010EA  0012               	return		;funcret
  5091  0010EC                     __end_of_resetPump:
  5092                           	opt callstack 0
  5093                           
  5094 ;; *************** function _init_event_timer *****************
  5095 ;; Defined at:
  5096 ;;		line 41 in file "timer_event.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;		None
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;		None
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  1    wreg      void 
  5103 ;; Registers used:
  5104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5110 ;;      Params:         0       0       0       0       0       0       0       0       0
  5111 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5112 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5113 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5114 ;;Total ram usage:        0 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    6
  5117 ;; This function calls:
  5118 ;;		_enable_callback
  5119 ;; This function is called by:
  5120 ;;		_resetPump
  5121 ;;		_main
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text43
  5126  000A32                     __ptext43:
  5127                           	opt callstack 0
  5128  000A32                     _init_event_timer:
  5129                           	opt callstack 21
  5130                           
  5131                           ;timer_event.c: 45:     timer_events[EventLowWaterLevel].callback = EventLowWaterLevelCa
      +                          llBack;;
  5132                           
  5133                           ;incstack = 0
  5134  000A32  0E20               	movlw	low _EventLowWaterLevelCallBack
  5135  000A34  0100               	movlb	0	; () banked
  5136  000A36  6F66               	movwf	(_timer_events+6)& (0+255),b	;volatile
  5137  000A38  0E0F               	movlw	high _EventLowWaterLevelCallBack
  5138  000A3A  6F67               	movwf	(_timer_events+7)& (0+255),b	;volatile
  5139                           
  5140                           ;timer_event.c: 47:     timer_events[EventLowWaterPressure].callback = EventLowWaterPres
      +                          sureCallBack;;
  5141  000A3C  0EB6               	movlw	low _EventLowWaterPressureCallBack
  5142  000A3E  6F6E               	movwf	(_timer_events+14)& (0+255),b	;volatile
  5143  000A40  0E0D               	movlw	high _EventLowWaterPressureCallBack
  5144  000A42  6F6F               	movwf	(_timer_events+15)& (0+255),b	;volatile
  5145                           
  5146                           ;timer_event.c: 48:     timer_events[EventLowWaterPressureDebounce].callback = EventLowW
      +                          aterPressureDebounceCallBack;;
  5147  000A44  0E90               	movlw	low _EventLowWaterPressureDebounceCallBack
  5148  000A46  6F76               	movwf	(_timer_events+22)& (0+255),b	;volatile
  5149  000A48  0E0F               	movlw	high _EventLowWaterPressureDebounceCallBack
  5150  000A4A  6F77               	movwf	(_timer_events+23)& (0+255),b	;volatile
  5151                           
  5152                           ;timer_event.c: 50:     timer_events[EventLowFogPressure].callback = EventLowFogPressure
      +                          CallBack;;
  5153  000A4C  0EE8               	movlw	low _EventLowFogPressureCallBack
  5154  000A4E  6F7E               	movwf	(_timer_events+30)& (0+255),b	;volatile
  5155  000A50  0E0D               	movlw	high _EventLowFogPressureCallBack
  5156  000A52  6F7F               	movwf	(_timer_events+31)& (0+255),b	;volatile
  5157                           
  5158                           ;timer_event.c: 51:     timer_events[EventFaultStateLED].callback = EventFaultStateLEDCa
      +                          llBack;;
  5159  000A54  0E6C               	movlw	low _EventFaultStateLEDCallBack
  5160  000A56  6F86               	movwf	(_timer_events+38)& (0+255),b	;volatile
  5161  000A58  0E02               	movlw	high _EventFaultStateLEDCallBack
  5162  000A5A  6F87               	movwf	(_timer_events+39)& (0+255),b	;volatile
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;timer_event.c: 52:     enable_callback(EventFaultStateLED, 1);
  5166  000A5C  0E00               	movlw	0
  5167  000A5E  6E15               	movwf	enable_callback@time_delay+1,c
  5168  000A60  0E01               	movlw	1
  5169  000A62  6E14               	movwf	enable_callback@time_delay,c
  5170  000A64  0E04               	movlw	4
  5171  000A66  EC3F  F006         	call	_enable_callback
  5172                           
  5173                           ;timer_event.c: 53:     timer_events[EventIdleTimeout].callback = EventIdleTimeoutCallBa
      +                          ck;;
  5174  000A6A  0E38               	movlw	low _EventIdleTimeoutCallBack
  5175  000A6C  0100               	movlb	0	; () banked
  5176  000A6E  6F8E               	movwf	(_timer_events+46)& (0+255),b	;volatile
  5177  000A70  0E0C               	movlw	high _EventIdleTimeoutCallBack
  5178  000A72  6F8F               	movwf	(_timer_events+47)& (0+255),b	;volatile
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;timer_event.c: 54:     timer_events[EventDumpSolenoid].callback = EventDumpSolenoidCall
      +                          Back;;
  5182  000A74  0ED8               	movlw	low _EventDumpSolenoidCallBack
  5183  000A76  6F96               	movwf	(_timer_events+54)& (0+255),b	;volatile
  5184  000A78  0E10               	movlw	high _EventDumpSolenoidCallBack
  5185  000A7A  6F97               	movwf	(_timer_events+55)& (0+255),b	;volatile
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;timer_event.c: 55:     timer_events[EventPODebounce].callback = EventPODebounceCallBack
      +                          ;;
  5189  000A7C  0E8A               	movlw	low _EventPODebounceCallBack
  5190  000A7E  6FA6               	movwf	(_timer_events+70)& (0+255),b	;volatile
  5191  000A80  0E10               	movlw	high _EventPODebounceCallBack
  5192  000A82  6FA7               	movwf	(_timer_events+71)& (0+255),b	;volatile
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;timer_event.c: 56:     timer_events[EventRunSignalDebounce].callback = EventRunSignalDe
      +                          bounceCallBack;;
  5196  000A84  0EAC               	movlw	low _EventRunSignalDebounceCallBack
  5197  000A86  6F9E               	movwf	(_timer_events+62)& (0+255),b	;volatile
  5198  000A88  0E10               	movlw	high _EventRunSignalDebounceCallBack
  5199  000A8A  6F9F               	movwf	(_timer_events+63)& (0+255),b	;volatile
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;timer_event.c: 58:     TMR0IE = 1;
  5203  000A8C  8AF2               	bsf	4082,5,c	;volatile
  5204                           
  5205                           ; BSR set to: 0
  5206  000A8E  0012               	return		;funcret
  5207  000A90                     __end_of_init_event_timer:
  5208                           	opt callstack 0
  5209                           
  5210 ;; *************** function _enable_callback *****************
  5211 ;; Defined at:
  5212 ;;		line 16 in file "timer_event.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  callback        1    wreg     unsigned char 
  5215 ;;  time_delay      2   19[COMRAM] int 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  callback        1   21[COMRAM] unsigned char 
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5227 ;;      Params:         2       0       0       0       0       0       0       0       0
  5228 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5230 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5231 ;;Total ram usage:        3 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    5
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_EventFaultStateLEDCallBack
  5238 ;;		_EventIdleTimeoutCallBack
  5239 ;;		_EventLowFogPressureCallBack
  5240 ;;		_EventLowWaterLevelCallBack
  5241 ;;		_monitor_water_pressure
  5242 ;;		_main
  5243 ;;		_pump_run
  5244 ;;		_monitor_pump_run
  5245 ;;		_shutdown
  5246 ;;		_standby
  5247 ;;		_start_main
  5248 ;;		_start_pump
  5249 ;;		_init_event_timer
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text44
  5254  000C7E                     __ptext44:
  5255                           	opt callstack 0
  5256  000C7E                     _enable_callback:
  5257                           	opt callstack 24
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;incstack = 0
  5261                           ;enable_callback@callback stored from wreg
  5262  000C7E  6E16               	movwf	enable_callback@callback,c
  5263                           
  5264                           ;timer_event.c: 17:     if (!timer_events[callback].active) {
  5265  000C80  5016               	movf	enable_callback@callback,w,c
  5266  000C82  0D08               	mullw	8
  5267  000C84  0E62               	movlw	low (_timer_events+2)
  5268  000C86  24F3               	addwf	prodl,w,c
  5269  000C88  6ED9               	movwf	fsr2l,c
  5270  000C8A  0E00               	movlw	high (_timer_events+2)
  5271  000C8C  20F4               	addwfc	prodh,w,c
  5272  000C8E  6EDA               	movwf	fsr2h,c
  5273  000C90  0100               	movlb	0	; () banked
  5274  000C92  B0DF               	btfsc	indf2,0,c
  5275  000C94  0012               	return	
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;timer_event.c: 18:         timer_events[callback].time_left = time_delay;
  5279  000C96  5016               	movf	enable_callback@callback,w,c
  5280  000C98  0D08               	mullw	8
  5281  000C9A  0E60               	movlw	low _timer_events
  5282  000C9C  24F3               	addwf	prodl,w,c
  5283  000C9E  6ED9               	movwf	fsr2l,c
  5284  000CA0  0E00               	movlw	high _timer_events
  5285  000CA2  20F4               	addwfc	prodh,w,c
  5286  000CA4  6EDA               	movwf	fsr2h,c
  5287  000CA6  C014  FFDE         	movff	enable_callback@time_delay,postinc2
  5288  000CAA  C015  FFDD         	movff	enable_callback@time_delay+1,postdec2
  5289                           
  5290                           ;timer_event.c: 19:         timer_events[callback].active = 1;
  5291  000CAE  5016               	movf	enable_callback@callback,w,c
  5292  000CB0  0D08               	mullw	8
  5293  000CB2  0E62               	movlw	low (_timer_events+2)
  5294  000CB4  24F3               	addwf	prodl,w,c
  5295  000CB6  6ED9               	movwf	fsr2l,c
  5296  000CB8  0E00               	movlw	high (_timer_events+2)
  5297  000CBA  20F4               	addwfc	prodh,w,c
  5298  000CBC  6EDA               	movwf	fsr2h,c
  5299  000CBE  80DF               	bsf	indf2,0,c
  5300                           
  5301                           ; BSR set to: 0
  5302  000CC0  0012               	return		;funcret
  5303  000CC2                     __end_of_enable_callback:
  5304                           	opt callstack 0
  5305                           
  5306 ;; *************** function _init *****************
  5307 ;; Defined at:
  5308 ;;		line 143 in file "pump_control.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5322 ;;      Params:         0       0       0       0       0       0       0       0       0
  5323 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5325 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5326 ;;Total ram usage:        0 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    6
  5329 ;; This function calls:
  5330 ;;		_combineZones
  5331 ;;		_ser_int
  5332 ;; This function is called by:
  5333 ;;		_resetPump
  5334 ;;		_main
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text45
  5339  0007A6                     __ptext45:
  5340                           	opt callstack 0
  5341  0007A6                     _init:
  5342                           	opt callstack 21
  5343                           
  5344                           ;pump_control.c: 148:     T0CS = 0;
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;incstack = 0
  5348  0007A6  9AD5               	bcf	4053,5,c	;volatile
  5349                           
  5350                           ;pump_control.c: 150:     ADCON1 = 0x7f;
  5351  0007A8  0E7F               	movlw	127
  5352  0007AA  6EC1               	movwf	4033,c	;volatile
  5353                           
  5354                           ;pump_control.c: 154:     PCFG3 = 1;
  5355  0007AC  86C1               	bsf	4033,3,c	;volatile
  5356                           
  5357                           ;pump_control.c: 158:     RBPU = 0;
  5358  0007AE  9EF1               	bcf	4081,7,c	;volatile
  5359                           
  5360                           ;pump_control.c: 171: IRCF2 = 1;
  5361  0007B0  8CD3               	bsf	4051,6,c	;volatile
  5362                           
  5363                           ;pump_control.c: 172: IRCF1 = 1;
  5364  0007B2  8AD3               	bsf	4051,5,c	;volatile
  5365                           
  5366                           ;pump_control.c: 173: IRCF0 = 1;
  5367  0007B4  88D3               	bsf	4051,4,c	;volatile
  5368                           
  5369                           ;pump_control.c: 176:     PORTA = 0;
  5370  0007B6  0E00               	movlw	0
  5371  0007B8  6E80               	movwf	3968,c	;volatile
  5372                           
  5373                           ;pump_control.c: 177:     PORTB = 0;
  5374  0007BA  0E00               	movlw	0
  5375  0007BC  6E81               	movwf	3969,c	;volatile
  5376                           
  5377                           ;pump_control.c: 178:     TRISA = 0;
  5378  0007BE  0E00               	movlw	0
  5379  0007C0  6E92               	movwf	3986,c	;volatile
  5380                           
  5381                           ;pump_control.c: 179:     TRISB = 0;
  5382  0007C2  0E00               	movlw	0
  5383  0007C4  6E93               	movwf	3987,c	;volatile
  5384                           
  5385                           ;pump_control.c: 182:     { PORTAbits.RA3 = (0);}; { PORTAbits.RA0 = (0); fault_flags.wp
      +                          OkBit = (0);}; { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);}; { PORTEbits.RE0 =
      +                           (0); fault_flags.boostPumpBit = (0);}; { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidB
      +                          it = (0);}; { PORTEbits.RE1 = (0);}; TRISD = 0; PORTD = 0x00; TRISAbits.RA0 = 0; TRISAbi
      +                          ts.RA1 = 0; TRISAbits.RA2 = 0; TRISAbits.RA3 = 0; TRISEbits.RE0 = 0; TRISEbits.RE1 = 0;;
  5386  0007C6  9680               	bcf	3968,3,c	;volatile
  5387  0007C8  9080               	bcf	3968,0,c	;volatile
  5388  0007CA  983B               	bcf	_fault_flags,4,c
  5389  0007CC  9280               	bcf	3968,1,c	;volatile
  5390  0007CE  9A3B               	bcf	_fault_flags,5,c
  5391  0007D0  9084               	bcf	3972,0,c	;volatile
  5392  0007D2  9C3B               	bcf	_fault_flags,6,c
  5393  0007D4  9480               	bcf	3968,2,c	;volatile
  5394  0007D6  903C               	bcf	_fault_flags+1,0,c
  5395  0007D8  9284               	bcf	3972,1,c	;volatile
  5396  0007DA  0E00               	movlw	0
  5397  0007DC  6E95               	movwf	3989,c	;volatile
  5398  0007DE  0E00               	movlw	0
  5399  0007E0  6E83               	movwf	3971,c	;volatile
  5400  0007E2  9092               	bcf	3986,0,c	;volatile
  5401  0007E4  9292               	bcf	3986,1,c	;volatile
  5402  0007E6  9492               	bcf	3986,2,c	;volatile
  5403  0007E8  9692               	bcf	3986,3,c	;volatile
  5404  0007EA  9096               	bcf	3990,0,c	;volatile
  5405  0007EC  9296               	bcf	3990,1,c	;volatile
  5406                           
  5407                           ;pump_control.c: 183:     TRISCbits.RC0 = 1; TRISCbits.RC1 = 1; TRISAbits.RA4 = 1; TRISA
      +                          bits.RA5 = 1; TRISCbits.RC2 = 1; TRISB = 1;
  5408  0007EE  8094               	bsf	3988,0,c	;volatile
  5409  0007F0  8294               	bsf	3988,1,c	;volatile
  5410  0007F2  8892               	bsf	3986,4,c	;volatile
  5411  0007F4  8A92               	bsf	3986,5,c	;volatile
  5412  0007F6  8494               	bsf	3988,2,c	;volatile
  5413  0007F8  0E01               	movlw	1
  5414  0007FA  6E93               	movwf	3987,c	;volatile
  5415                           
  5416                           ;pump_control.c: 186:     fault_flags.boostPumpBit = 0;
  5417  0007FC  9C3B               	bcf	_fault_flags,6,c
  5418                           
  5419                           ;pump_control.c: 187:     fault_flags.lwl_fault = 0;
  5420  0007FE  903B               	bcf	_fault_flags,0,c
  5421                           
  5422                           ;pump_control.c: 188:     fault_flags.lwp_fault = 0;
  5423  000800  923B               	bcf	_fault_flags,1,c
  5424                           
  5425                           ;pump_control.c: 189:     fault_flags.lfp_fault = 0;
  5426  000802  943B               	bcf	_fault_flags,2,c
  5427                           
  5428                           ;pump_control.c: 190:     fault_flags.po_fault = 0;
  5429  000804  963B               	bcf	_fault_flags,3,c
  5430                           
  5431                           ;pump_control.c: 192:     fault_flags.wpOkBit = 0;
  5432  000806  983B               	bcf	_fault_flags,4,c
  5433                           
  5434                           ;pump_control.c: 193:     fault_flags.mainPumpBit = 0;
  5435  000808  9A3B               	bcf	_fault_flags,5,c
  5436                           
  5437                           ;pump_control.c: 194:     fault_flags.boostPumpBit = 0;
  5438  00080A  9C3B               	bcf	_fault_flags,6,c
  5439                           
  5440                           ;pump_control.c: 195:     fault_flags.pumpOverloadBit = 0;
  5441  00080C  9E3B               	bcf	_fault_flags,7,c
  5442                           
  5443                           ;pump_control.c: 196:     fault_flags.dumpSolenoidBit = 0;
  5444  00080E  903C               	bcf	_fault_flags+1,0,c
  5445                           
  5446                           ;pump_control.c: 200:     GIE = 1;
  5447  000810  8EF2               	bsf	4082,7,c	;volatile
  5448                           
  5449                           ;pump_control.c: 201:     state = standbyState;
  5450  000812  0E00               	movlw	0
  5451  000814  6E40               	movwf	_state,c
  5452                           
  5453                           ;pump_control.c: 202:     commsZones = 0;
  5454  000816  0E00               	movlw	0
  5455  000818  6E3E               	movwf	_commsZones,c
  5456                           
  5457                           ;pump_control.c: 203:     combinedZones = 0;
  5458  00081A  0E00               	movlw	0
  5459  00081C  6E4B               	movwf	_combinedZones,c
  5460                           
  5461                           ;pump_control.c: 204:     combineZones();
  5462  00081E  EC66  F008         	call	_combineZones	;wreg free
  5463                           
  5464                           ;pump_control.c: 205:     inIdleDumpHour = 0;
  5465  000822  0E00               	movlw	0
  5466  000824  6E3F               	movwf	_inIdleDumpHour,c
  5467                           
  5468                           ;pump_control.c: 210:     ser_int();
  5469  000826  ECA3  F007         	call	_ser_int	;wreg free
  5470  00082A  0012               	return		;funcret
  5471  00082C                     __end_of_init:
  5472                           	opt callstack 0
  5473                           
  5474 ;; *************** function _ser_int *****************
  5475 ;; Defined at:
  5476 ;;		line 51 in file "serial.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg, status,2
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5490 ;;      Params:         0       0       0       0       0       0       0       0       0
  5491 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5493 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5494 ;;Total ram usage:        0 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    5
  5497 ;; This function calls:
  5498 ;;		Nothing
  5499 ;; This function is called by:
  5500 ;;		_init
  5501 ;;		_main
  5502 ;;		_mainserial3
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text46
  5507  000F46                     __ptext46:
  5508                           	opt callstack 0
  5509  000F46                     _ser_int:
  5510                           	opt callstack 25
  5511                           
  5512                           ;serial.c: 52:     RCSTA = 0X90;
  5513                           
  5514                           ;incstack = 0
  5515  000F46  0E90               	movlw	144
  5516  000F48  6EAB               	movwf	4011,c	;volatile
  5517                           
  5518                           ;serial.c: 53:     TRISC6 = 0;
  5519  000F4A  9C94               	bcf	3988,6,c	;volatile
  5520                           
  5521                           ;serial.c: 54:     TRISC7 = 1;
  5522  000F4C  8E94               	bsf	3988,7,c	;volatile
  5523                           
  5524                           ;serial.c: 55:     TXSTA = 0x24;
  5525  000F4E  0E24               	movlw	36
  5526  000F50  6EAC               	movwf	4012,c	;volatile
  5527                           
  5528                           ;serial.c: 56:     SYNC = 0;
  5529  000F52  98AC               	bcf	4012,4,c	;volatile
  5530                           
  5531                           ;serial.c: 57:     SPEN = 1;
  5532  000F54  8EAB               	bsf	4011,7,c	;volatile
  5533                           
  5534                           ;serial.c: 58:     TX9 = 0;
  5535  000F56  9CAC               	bcf	4012,6,c	;volatile
  5536                           
  5537                           ;serial.c: 60:     RCSTA = 0b10010000;
  5538  000F58  0E90               	movlw	144
  5539  000F5A  6EAB               	movwf	4011,c	;volatile
  5540                           
  5541                           ;serial.c: 61:     SPBRG = 207;
  5542  000F5C  0ECF               	movlw	207
  5543  000F5E  6EAF               	movwf	4015,c	;volatile
  5544                           
  5545                           ;serial.c: 63:     CREN = 1;
  5546  000F60  88AB               	bsf	4011,4,c	;volatile
  5547                           
  5548                           ;serial.c: 64:     TXIE = 1;
  5549  000F62  889D               	bsf	3997,4,c	;volatile
  5550                           
  5551                           ;serial.c: 65:     RCIE = 1;
  5552  000F64  8A9D               	bsf	3997,5,c	;volatile
  5553                           
  5554                           ;serial.c: 66:     GIE = 1;
  5555  000F66  8EF2               	bsf	4082,7,c	;volatile
  5556                           
  5557                           ;serial.c: 67:     PEIE = 1;
  5558  000F68  8CF2               	bsf	4082,6,c	;volatile
  5559  000F6A  0012               	return		;funcret
  5560  000F6C                     __end_of_ser_int:
  5561                           	opt callstack 0
  5562                           
  5563 ;; *************** function _combineZones *****************
  5564 ;; Defined at:
  5565 ;;		line 88 in file "pump_control.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    5
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_init
  5590 ;;		_main
  5591 ;;		_process_set_zones_message
  5592 ;;		_process_get_status_message
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           	psect	text47
  5597  0010CC                     __ptext47:
  5598                           	opt callstack 0
  5599  0010CC                     _combineZones:
  5600                           	opt callstack 23
  5601                           
  5602                           ;pump_control.c: 89:     combinedZones = commsZones | PORTB;
  5603                           
  5604                           ;incstack = 0
  5605  0010CC  503E               	movf	_commsZones,w,c
  5606  0010CE  1081               	iorwf	3969,w,c	;volatile
  5607  0010D0  6E4B               	movwf	_combinedZones,c
  5608                           
  5609                           ;pump_control.c: 90:     PORTD = combinedZones;
  5610  0010D2  C04B  FF83         	movff	_combinedZones,3971	;volatile
  5611  0010D6  0012               	return		;funcret
  5612  0010D8                     __end_of_combineZones:
  5613                           	opt callstack 0
  5614                           
  5615 ;; *************** function _event_timer_isr *****************
  5616 ;; Defined at:
  5617 ;;		line 64 in file "timer_event.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5631 ;;      Params:         0       0       0       0       0       0       0       0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5633 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5634 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5635 ;;Total ram usage:        6 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    4
  5638 ;; This function calls:
  5639 ;;		_usart_interrupt
  5640 ;; This function is called by:
  5641 ;;		Interrupt level 2
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	intcode
  5646  000008                     __pintcode:
  5647                           	opt callstack 0
  5648  000008                     _event_timer_isr:
  5649                           	opt callstack 19
  5650                           
  5651                           ;incstack = 0
  5652  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5653  00000A  ED61  F006         	call	int_func,f	;refresh shadow registers
  5654                           
  5655                           	psect	intcode_body
  5656  000CC2                     __pintcode_body:
  5657                           	opt callstack 19
  5658  000CC2                     int_func:
  5659                           	opt callstack 19
  5660  000CC2  0006               	pop		; remove dummy address from shadow register refresh
  5661  000CC4  CFD9 F00E          	movff	fsr2l,??_event_timer_isr
  5662  000CC8  CFDA F00F          	movff	fsr2h,??_event_timer_isr+1
  5663  000CCC  CFF6 F010          	movff	tblptrl,??_event_timer_isr+2
  5664  000CD0  CFF7 F011          	movff	tblptrh,??_event_timer_isr+3
  5665  000CD4  CFF8 F012          	movff	tblptru,??_event_timer_isr+4
  5666  000CD8  CFF5 F013          	movff	tablat,??_event_timer_isr+5
  5667                           
  5668                           ;timer_event.c: 65:     if ((TMR0IE) && (TMR0IF)) {
  5669  000CDC  BAF2               	btfsc	4082,5,c	;volatile
  5670  000CDE  A4F2               	btfss	4082,2,c	;volatile
  5671  000CE0  D002               	goto	i2l3555
  5672                           
  5673                           ;timer_event.c: 66:         timer_count++;
  5674  000CE2  2A3D               	incf	_timer_count,f,c	;volatile
  5675                           
  5676                           ;timer_event.c: 68:         TMR0IF = 0;
  5677  000CE4  94F2               	bcf	4082,2,c	;volatile
  5678  000CE6                     i2l3555:
  5679                           
  5680                           ;timer_event.c: 70:     usart_interrupt();
  5681  000CE6  EC16  F004         	call	_usart_interrupt	;wreg free
  5682  000CEA  C013  FFF5         	movff	??_event_timer_isr+5,tablat
  5683  000CEE  C012  FFF8         	movff	??_event_timer_isr+4,tblptru
  5684  000CF2  C011  FFF7         	movff	??_event_timer_isr+3,tblptrh
  5685  000CF6  C010  FFF6         	movff	??_event_timer_isr+2,tblptrl
  5686  000CFA  C00F  FFDA         	movff	??_event_timer_isr+1,fsr2h
  5687  000CFE  C00E  FFD9         	movff	??_event_timer_isr,fsr2l
  5688  000D02  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5689  000D04  0011               	retfie		f
  5690  000D06                     __end_of_event_timer_isr:
  5691                           	opt callstack 0
  5692                           
  5693 ;; *************** function _usart_interrupt *****************
  5694 ;; Defined at:
  5695 ;;		line 136 in file "serial.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;		None
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  a               1   12[COMRAM] unsigned char 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  1    wreg      void 
  5702 ;; Registers used:
  5703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5709 ;;      Params:         0       0       0       0       0       0       0       0       0
  5710 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5711 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5712 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5713 ;;Total ram usage:        1 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    3
  5716 ;; This function calls:
  5717 ;;		_not_full
  5718 ;;		_puts
  5719 ;;		i2_has_data
  5720 ;;		i2_pop
  5721 ;;		i2_push
  5722 ;; This function is called by:
  5723 ;;		_event_timer_isr
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text49
  5728  00082C                     __ptext49:
  5729                           	opt callstack 0
  5730  00082C                     _usart_interrupt:
  5731                           	opt callstack 19
  5732                           
  5733                           ;serial.c: 138:     if (TXIE && TXIF) {
  5734                           
  5735                           ;incstack = 0
  5736  00082C  B89D               	btfsc	3997,4,c	;volatile
  5737  00082E  A89E               	btfss	3998,4,c	;volatile
  5738  000830  D012               	goto	i2l3415
  5739                           
  5740                           ;serial.c: 139:         TXIE = 0;
  5741  000832  989D               	bcf	3997,4,c	;volatile
  5742                           
  5743                           ;serial.c: 140:         if ( has_data(&outbound)) {
  5744  000834  0E12               	movlw	low _outbound
  5745  000836  6E01               	movwf	i2has_data@buff,c
  5746  000838  0E02               	movlw	high _outbound
  5747  00083A  6E02               	movwf	i2has_data@buff+1,c
  5748  00083C  EC5E  F008         	call	i2_has_data	;wreg free
  5749  000840  0900               	iorlw	0
  5750  000842  B4D8               	btfsc	status,2,c
  5751  000844  D008               	goto	i2l3415
  5752                           
  5753                           ;serial.c: 141:             TXREG = pop(&outbound);
  5754  000846  0E12               	movlw	low _outbound
  5755  000848  6E01               	movwf	i2pop@buff,c
  5756  00084A  0E02               	movlw	high _outbound
  5757  00084C  6E02               	movwf	i2pop@buff+1,c
  5758  00084E  EC8C  F003         	call	i2_pop	;wreg free
  5759  000852  6EAD               	movwf	4013,c	;volatile
  5760                           
  5761                           ;serial.c: 142:             TXIE = 1;
  5762  000854  889D               	bsf	3997,4,c	;volatile
  5763  000856                     i2l3415:
  5764                           
  5765                           ;serial.c: 145:     if (RCIE && RCIF) {
  5766  000856  AA9D               	btfss	3997,5,c	;volatile
  5767  000858  0012               	return	
  5768  00085A  AA9E               	btfss	3998,5,c	;volatile
  5769  00085C  0012               	return	
  5770                           
  5771                           ;serial.c: 146:         if (OERR) {
  5772  00085E  A2AB               	btfss	4011,1,c	;volatile
  5773  000860  D008               	goto	i2l3425
  5774                           
  5775                           ;serial.c: 147:             CREN = 0;
  5776  000862  98AB               	bcf	4011,4,c	;volatile
  5777                           
  5778                           ;serial.c: 148:             CREN = 1;
  5779  000864  88AB               	bsf	4011,4,c	;volatile
  5780                           
  5781                           ;serial.c: 149:              puts("serial overflow");
  5782  000866  0E5B               	movlw	low STR_20
  5783  000868  6E09               	movwf	puts@str,c
  5784  00086A  0E7F               	movlw	high STR_20
  5785  00086C  6E0A               	movwf	puts@str+1,c
  5786  00086E  EC0D  F007         	call	_puts	;wreg free
  5787  000872                     i2l3425:
  5788                           
  5789                           ;serial.c: 151:         unsigned char a = RCREG;
  5790  000872  CFAE F00D          	movff	4014,usart_interrupt@a	;volatile
  5791                           
  5792                           ;serial.c: 152:         if (not_full(&inbound)) {
  5793  000876  0E0E               	movlw	low _inbound
  5794  000878  6E01               	movwf	not_full@buff,c
  5795  00087A  0E01               	movlw	high _inbound
  5796  00087C  6E02               	movwf	not_full@buff+1,c
  5797  00087E  ECF4  F007         	call	_not_full	;wreg free
  5798  000882  0900               	iorlw	0
  5799  000884  B4D8               	btfsc	status,2,c
  5800  000886  0012               	return	
  5801                           
  5802                           ;serial.c: 153:             push(&inbound, a);
  5803  000888  0E0E               	movlw	low _inbound
  5804  00088A  6E01               	movwf	i2push@buff,c
  5805  00088C  0E01               	movlw	high _inbound
  5806  00088E  6E02               	movwf	i2push@buff+1,c
  5807  000890  C00D  F003         	movff	usart_interrupt@a,i2push@d
  5808  000894  ECE9  F004         	call	i2_push	;wreg free
  5809  000898  0012               	return		;funcret
  5810  00089A                     __end_of_usart_interrupt:
  5811                           	opt callstack 0
  5812                           
  5813 ;; *************** function i2_pop *****************
  5814 ;; Defined at:
  5815 ;;		line 27 in file "serial_buffer.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  buff            2    0[COMRAM] PTR struct .
  5818 ;;		 -> inbound(260), outbound(260), 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  pop             1    4[COMRAM] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      unsigned char 
  5823 ;; Registers used:
  5824 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5830 ;;      Params:         2       0       0       0       0       0       0       0       0
  5831 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5832 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5833 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5834 ;;Total ram usage:        5 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; This function calls:
  5837 ;;		Nothing
  5838 ;; This function is called by:
  5839 ;;		_usart_interrupt
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text50
  5844  000718                     __ptext50:
  5845                           	opt callstack 0
  5846  000718                     i2_pop:
  5847                           	opt callstack 21
  5848                           
  5849                           ;serial_buffer.c: 28:     unsigned char d;;serial_buffer.c: 32:     if (buff->length == 
      +                          0) {
  5850                           
  5851                           ;incstack = 0
  5852  000718  EE21 F002          	lfsr	2,258
  5853  00071C  5001               	movf	i2pop@buff,w,c
  5854  00071E  26D9               	addwf	fsr2l,f,c
  5855  000720  5002               	movf	i2pop@buff+1,w,c
  5856  000722  22DA               	addwfc	fsr2h,f,c
  5857  000724  50DE               	movf	postinc2,w,c
  5858  000726  10DE               	iorwf	postinc2,w,c
  5859  000728  A4D8               	btfss	status,2,c
  5860  00072A  D002               	goto	i2l491
  5861                           
  5862                           ;serial_buffer.c: 34:         return 0;
  5863  00072C  0E00               	movlw	0
  5864  00072E  0012               	return	
  5865  000730                     i2l491:
  5866                           
  5867                           ;serial_buffer.c: 37:     GIE = 0;
  5868  000730  9EF2               	bcf	4082,7,c	;volatile
  5869                           
  5870                           ;serial_buffer.c: 38:     d = buff->data[buff->start];
  5871  000732  EE21 F000          	lfsr	2,256
  5872  000736  5001               	movf	i2pop@buff,w,c
  5873  000738  26D9               	addwf	fsr2l,f,c
  5874  00073A  5002               	movf	i2pop@buff+1,w,c
  5875  00073C  22DA               	addwfc	fsr2h,f,c
  5876  00073E  CFDE F003          	movff	postinc2,??i2_pop
  5877  000742  CFDD F004          	movff	postdec2,??i2_pop+1
  5878  000746  5003               	movf	??i2_pop,w,c
  5879  000748  2401               	addwf	i2pop@buff,w,c
  5880  00074A  6ED9               	movwf	fsr2l,c
  5881  00074C  5004               	movf	??i2_pop+1,w,c
  5882  00074E  2002               	addwfc	i2pop@buff+1,w,c
  5883  000750  6EDA               	movwf	fsr2h,c
  5884  000752  50DF               	movf	indf2,w,c
  5885  000754  6E05               	movwf	i2pop@d,c
  5886                           
  5887                           ;serial_buffer.c: 39:     buff->length--;
  5888  000756  EE21 F002          	lfsr	2,258
  5889  00075A  5001               	movf	i2pop@buff,w,c
  5890  00075C  26D9               	addwf	fsr2l,f,c
  5891  00075E  5002               	movf	i2pop@buff+1,w,c
  5892  000760  22DA               	addwfc	fsr2h,f,c
  5893  000762  06DE               	decf	postinc2,f,c
  5894  000764  0E00               	movlw	0
  5895  000766  5ADD               	subwfb	postdec2,f,c
  5896                           
  5897                           ;serial_buffer.c: 40:     buff->start = (buff->start + 1) % 256;
  5898  000768  EE21 F000          	lfsr	2,256
  5899  00076C  5001               	movf	i2pop@buff,w,c
  5900  00076E  26D9               	addwf	fsr2l,f,c
  5901  000770  5002               	movf	i2pop@buff+1,w,c
  5902  000772  22DA               	addwfc	fsr2h,f,c
  5903  000774  CFDE F003          	movff	postinc2,??i2_pop
  5904  000778  CFDD F004          	movff	postdec2,??i2_pop+1
  5905  00077C  0E01               	movlw	1
  5906  00077E  2603               	addwf	??i2_pop,f,c
  5907  000780  0E00               	movlw	0
  5908  000782  2204               	addwfc	??i2_pop+1,f,c
  5909  000784  0EFF               	movlw	255
  5910  000786  1603               	andwf	??i2_pop,f,c
  5911  000788  0E00               	movlw	0
  5912  00078A  1604               	andwf	??i2_pop+1,f,c
  5913  00078C  EE21 F000          	lfsr	2,256
  5914  000790  5001               	movf	i2pop@buff,w,c
  5915  000792  26D9               	addwf	fsr2l,f,c
  5916  000794  5002               	movf	i2pop@buff+1,w,c
  5917  000796  22DA               	addwfc	fsr2h,f,c
  5918  000798  C003  FFDE         	movff	??i2_pop,postinc2
  5919  00079C  C004  FFDD         	movff	??i2_pop+1,postdec2
  5920                           
  5921                           ;serial_buffer.c: 41:     GIE = 1;
  5922  0007A0  8EF2               	bsf	4082,7,c	;volatile
  5923                           
  5924                           ;serial_buffer.c: 43:     return d;
  5925  0007A2  5005               	movf	i2pop@d,w,c
  5926  0007A4  0012               	return		;funcret
  5927  0007A6                     __end_ofi2_pop:
  5928                           	opt callstack 0
  5929                           
  5930 ;; *************** function i2_has_data *****************
  5931 ;; Defined at:
  5932 ;;		line 51 in file "serial_buffer.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  buff            2    0[COMRAM] PTR struct .
  5935 ;;		 -> inbound(260), outbound(260), 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;		None
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  1    wreg      unsigned char 
  5940 ;; Registers used:
  5941 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5947 ;;      Params:         2       0       0       0       0       0       0       0       0
  5948 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5949 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5950 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5951 ;;Total ram usage:        2 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		_usart_interrupt
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text51
  5961  0010BC                     __ptext51:
  5962                           	opt callstack 0
  5963  0010BC                     i2_has_data:
  5964                           	opt callstack 21
  5965                           
  5966                           ;serial_buffer.c: 52:     return buff->length;
  5967                           
  5968                           ;incstack = 0
  5969  0010BC  EE21 F002          	lfsr	2,258
  5970  0010C0  5001               	movf	i2has_data@buff,w,c
  5971  0010C2  26D9               	addwf	fsr2l,f,c
  5972  0010C4  5002               	movf	i2has_data@buff+1,w,c
  5973  0010C6  22DA               	addwfc	fsr2h,f,c
  5974  0010C8  50DF               	movf	indf2,w,c
  5975  0010CA  0012               	return		;funcret
  5976  0010CC                     __end_ofi2_has_data:
  5977                           	opt callstack 0
  5978                           
  5979 ;; *************** function _puts *****************
  5980 ;; Defined at:
  5981 ;;		line 213 in file "serial.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  str             2    8[COMRAM] PTR const unsigned char 
  5984 ;;		 -> STR_20(16), 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  c               2   10[COMRAM] PTR const unsigned char 
  5987 ;;		 -> STR_20(16), 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  2    8[COMRAM] int 
  5990 ;; Registers used:
  5991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5997 ;;      Params:         2       0       0       0       0       0       0       0       0
  5998 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6000 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6001 ;;Total ram usage:        4 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    2
  6004 ;; This function calls:
  6005 ;;		i2_putch
  6006 ;; This function is called by:
  6007 ;;		_usart_interrupt
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           	psect	text52
  6012  000E1A                     __ptext52:
  6013                           	opt callstack 0
  6014  000E1A                     _puts:
  6015                           	opt callstack 19
  6016                           
  6017                           ;serial.c: 214:     for ( const char * c = str; *c != 0; c++){
  6018                           
  6019                           ;incstack = 0
  6020  000E1A  C009  F00B         	movff	puts@str,puts@c
  6021  000E1E  C00A  F00C         	movff	puts@str+1,puts@c+1
  6022  000E22  D00A               	goto	i2l3067
  6023  000E24                     i2l3063:
  6024                           
  6025                           ;serial.c: 215:         putch(*c);
  6026  000E24  C00B  FFF6         	movff	puts@c,tblptrl
  6027  000E28  C00C  FFF7         	movff	puts@c+1,tblptrh
  6028  000E2C                     	if	0	;tblptru may be non-zero
  6029  000E2C                     	endif
  6030  000E2C                     	if	0	;tblptru may be non-zero
  6031  000E2C                     	endif
  6032  000E2C  0008               	tblrd		*
  6033  000E2E  50F5               	movf	tablat,w,c
  6034  000E30  EC3B  F008         	call	i2_putch
  6035                           
  6036                           ;serial.c: 216:     }
  6037  000E34  4A0B               	infsnz	puts@c,f,c
  6038  000E36  2A0C               	incf	puts@c+1,f,c
  6039  000E38                     i2l3067:
  6040  000E38  C00B  FFF6         	movff	puts@c,tblptrl
  6041  000E3C  C00C  FFF7         	movff	puts@c+1,tblptrh
  6042  000E40                     	if	0	;tblptru may be non-zero
  6043  000E40                     	endif
  6044  000E40                     	if	0	;tblptru may be non-zero
  6045  000E40                     	endif
  6046  000E40  0008               	tblrd		*
  6047  000E42  50F5               	movf	tablat,w,c
  6048  000E44  0900               	iorlw	0
  6049  000E46  B4D8               	btfsc	status,2,c
  6050  000E48  0012               	return	
  6051  000E4A  D7EC               	goto	i2l3063
  6052  000E4C                     __end_of_puts:
  6053                           	opt callstack 0
  6054                           
  6055 ;; *************** function i2_putch *****************
  6056 ;; Defined at:
  6057 ;;		line 209 in file "serial.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;  c               1    wreg     unsigned char 
  6060 ;; Auto vars:     Size  Location     Type
  6061 ;;  c               1    7[COMRAM] unsigned char 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      void 
  6064 ;; Registers used:
  6065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6071 ;;      Params:         0       0       0       0       0       0       0       0       0
  6072 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6074 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6075 ;;Total ram usage:        1 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    1
  6078 ;; This function calls:
  6079 ;;		i2_push
  6080 ;; This function is called by:
  6081 ;;		_puts
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text53
  6086  001076                     __ptext53:
  6087                           	opt callstack 0
  6088  001076                     i2_putch:
  6089                           	opt callstack 19
  6090                           
  6091                           ;incstack = 0
  6092                           ;i2putch@c stored from wreg
  6093  001076  6E08               	movwf	i2putch@c,c
  6094                           
  6095                           ;serial.c: 210:     push(&outbound, c);
  6096  001078  0E12               	movlw	low _outbound
  6097  00107A  6E01               	movwf	i2push@buff,c
  6098  00107C  0E02               	movlw	high _outbound
  6099  00107E  6E02               	movwf	i2push@buff+1,c
  6100  001080  C008  F003         	movff	i2putch@c,i2push@d
  6101  001084  ECE9  F004         	call	i2_push	;wreg free
  6102  001088  0012               	return		;funcret
  6103  00108A                     __end_ofi2_putch:
  6104                           	opt callstack 0
  6105                           
  6106 ;; *************** function i2_push *****************
  6107 ;; Defined at:
  6108 ;;		line 10 in file "serial_buffer.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  buff            2    0[COMRAM] PTR struct .
  6111 ;;		 -> inbound(260), outbound(260), 
  6112 ;;  d               1    2[COMRAM] unsigned char 
  6113 ;; Auto vars:     Size  Location     Type
  6114 ;;		None
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  1    wreg      void 
  6117 ;; Registers used:
  6118 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6124 ;;      Params:         3       0       0       0       0       0       0       0       0
  6125 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6126 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6127 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6128 ;;Total ram usage:        7 bytes
  6129 ;; Hardware stack levels used:    1
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_usart_interrupt
  6134 ;;		i2_putch
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           	psect	text54
  6139  0009D2                     __ptext54:
  6140                           	opt callstack 0
  6141  0009D2                     i2_push:
  6142                           	opt callstack 21
  6143                           
  6144                           ;serial_buffer.c: 14:     GIE = 0;
  6145                           
  6146                           ;incstack = 0
  6147  0009D2  9EF2               	bcf	4082,7,c	;volatile
  6148                           
  6149                           ;serial_buffer.c: 15:     buff->data[(buff->start + buff->length) % 256] = d;
  6150  0009D4  EE21 F002          	lfsr	2,258
  6151  0009D8  5001               	movf	i2push@buff,w,c
  6152  0009DA  26D9               	addwf	fsr2l,f,c
  6153  0009DC  5002               	movf	i2push@buff+1,w,c
  6154  0009DE  22DA               	addwfc	fsr2h,f,c
  6155  0009E0  CFDE F004          	movff	postinc2,??i2_push
  6156  0009E4  CFDD F005          	movff	postdec2,??i2_push+1
  6157  0009E8  EE21 F000          	lfsr	2,256
  6158  0009EC  5001               	movf	i2push@buff,w,c
  6159  0009EE  26D9               	addwf	fsr2l,f,c
  6160  0009F0  5002               	movf	i2push@buff+1,w,c
  6161  0009F2  22DA               	addwfc	fsr2h,f,c
  6162  0009F4  CFDE F006          	movff	postinc2,??i2_push+2
  6163  0009F8  CFDD F007          	movff	postdec2,??i2_push+3
  6164  0009FC  5004               	movf	??i2_push,w,c
  6165  0009FE  2606               	addwf	??i2_push+2,f,c
  6166  000A00  5005               	movf	??i2_push+1,w,c
  6167  000A02  2207               	addwfc	??i2_push+3,f,c
  6168  000A04  0EFF               	movlw	255
  6169  000A06  1606               	andwf	??i2_push+2,f,c
  6170  000A08  0E00               	movlw	0
  6171  000A0A  1607               	andwf	??i2_push+3,f,c
  6172  000A0C  5006               	movf	??i2_push+2,w,c
  6173  000A0E  2401               	addwf	i2push@buff,w,c
  6174  000A10  6ED9               	movwf	fsr2l,c
  6175  000A12  5007               	movf	??i2_push+3,w,c
  6176  000A14  2002               	addwfc	i2push@buff+1,w,c
  6177  000A16  6EDA               	movwf	fsr2h,c
  6178  000A18  C003  FFDF         	movff	i2push@d,indf2
  6179                           
  6180                           ;serial_buffer.c: 16:     buff->length++;
  6181  000A1C  EE21 F002          	lfsr	2,258
  6182  000A20  5001               	movf	i2push@buff,w,c
  6183  000A22  26D9               	addwf	fsr2l,f,c
  6184  000A24  5002               	movf	i2push@buff+1,w,c
  6185  000A26  22DA               	addwfc	fsr2h,f,c
  6186  000A28  2ADE               	incf	postinc2,f,c
  6187  000A2A  0E00               	movlw	0
  6188  000A2C  22DD               	addwfc	postdec2,f,c
  6189                           
  6190                           ;serial_buffer.c: 17:     GIE = 1;
  6191  000A2E  8EF2               	bsf	4082,7,c	;volatile
  6192  000A30  0012               	return		;funcret
  6193  000A32                     __end_ofi2_push:
  6194                           	opt callstack 0
  6195                           
  6196 ;; *************** function _not_full *****************
  6197 ;; Defined at:
  6198 ;;		line 60 in file "serial_buffer.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;  buff            2    0[COMRAM] PTR struct .
  6201 ;;		 -> inbound(260), 
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;		None
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      unsigned char 
  6206 ;; Registers used:
  6207 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6213 ;;      Params:         2       0       0       0       0       0       0       0       0
  6214 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6215 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6216 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6217 ;;Total ram usage:        4 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		_usart_interrupt
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text55
  6227  000FE8                     __ptext55:
  6228                           	opt callstack 0
  6229  000FE8                     _not_full:
  6230                           	opt callstack 21
  6231                           
  6232                           ;serial_buffer.c: 61:     return buff->length < 256;
  6233                           
  6234                           ;incstack = 0
  6235  000FE8  EE21 F002          	lfsr	2,258
  6236  000FEC  5001               	movf	not_full@buff,w,c
  6237  000FEE  26D9               	addwf	fsr2l,f,c
  6238  000FF0  5002               	movf	not_full@buff+1,w,c
  6239  000FF2  22DA               	addwfc	fsr2h,f,c
  6240  000FF4  52DE               	movf	postinc2,f,c
  6241  000FF6  04DE               	decf	postinc2,w,c
  6242  000FF8  B0D8               	btfsc	status,0,c
  6243  000FFA  D002               	goto	i2u183_40
  6244  000FFC  0E01               	movlw	1
  6245  000FFE  0012               	return	
  6246  001000                     i2u183_40:
  6247  001000  0E00               	movlw	0
  6248  001002  0012               	return		;funcret
  6249  001004                     __end_of_not_full:
  6250                           	opt callstack 0
  6251                           
  6252                           	psect	text56
  6253  000000                     __ptext56:
  6254                           	opt callstack 0
  6255                           
  6256                           	psect	rparam
  6257  0000                     
  6258                           	psect	temp
  6259  00004C                     btemp:
  6260                           	opt callstack 0
  6261  00004C                     	ds	1
  6262  0000                     int$flags	set	btemp
  6263  0000                     wtemp8	set	btemp+1
  6264  0000                     ttemp5	set	btemp+1
  6265  0000                     ttemp6	set	btemp+4
  6266  0000                     ttemp7	set	btemp+8
  6267                           tosu	equ	0xFFF
  6268                           tosh	equ	0xFFE
  6269                           tosl	equ	0xFFD
  6270                           stkptr	equ	0xFFC
  6271                           pclatu	equ	0xFFB
  6272                           pclath	equ	0xFFA
  6273                           pcl	equ	0xFF9
  6274                           tblptru	equ	0xFF8
  6275                           tblptrh	equ	0xFF7
  6276                           tblptrl	equ	0xFF6
  6277                           tablat	equ	0xFF5
  6278                           prodh	equ	0xFF4
  6279                           prodl	equ	0xFF3
  6280                           indf0	equ	0xFEF
  6281                           postinc0	equ	0xFEE
  6282                           postdec0	equ	0xFED
  6283                           preinc0	equ	0xFEC
  6284                           plusw0	equ	0xFEB
  6285                           fsr0h	equ	0xFEA
  6286                           fsr0l	equ	0xFE9
  6287                           wreg	equ	0xFE8
  6288                           indf1	equ	0xFE7
  6289                           postinc1	equ	0xFE6
  6290                           postdec1	equ	0xFE5
  6291                           preinc1	equ	0xFE4
  6292                           plusw1	equ	0xFE3
  6293                           fsr1h	equ	0xFE2
  6294                           fsr1l	equ	0xFE1
  6295                           bsr	equ	0xFE0
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           postdec2	equ	0xFDD
  6299                           preinc2	equ	0xFDC
  6300                           plusw2	equ	0xFDB
  6301                           fsr2h	equ	0xFDA
  6302                           fsr2l	equ	0xFD9
  6303                           status	equ	0xFD8


Data Sizes:
    Strings     321
    Constant    0
    Data        24
    BSS         660
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      75
    BANK0           160     14     152
    BANK1           256     14      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printPumpState$2829	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), 
		 -> STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_18(CODE[15]), STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[15]), 
		 -> STR_14(CODE[14]), STR_13(CODE[10]), STR_12(CODE[11]), STR_11(CODE[12]), 
		 -> STR_10(CODE[12]), STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), STR_3(CODE[24]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S2531_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_18(CODE[15]), STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[15]), 
		 -> STR_14(CODE[14]), STR_13(CODE[10]), STR_12(CODE[11]), STR_11(CODE[12]), 
		 -> STR_10(CODE[12]), STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), STR_3(CODE[24]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 31
		 -> STR_18(CODE[15]), STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[15]), 
		 -> STR_14(CODE[14]), STR_13(CODE[10]), STR_12(CODE[11]), STR_11(CODE[12]), 
		 -> STR_10(CODE[12]), STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), STR_3(CODE[24]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@vp	PTR void  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    process_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK0[10]), NULL(NULL[0]), 

    process_reset_pump@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK0[10]), NULL(NULL[0]), 

    process_set_address_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK0[10]), NULL(NULL[0]), 

    process_get_status_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK0[10]), NULL(NULL[0]), main@sendGetMessageBuffer(BANK1[10]), 

    process_set_zones_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK0[10]), NULL(NULL[0]), 

    not_full@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM[260]), 

    has_data@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM[260]), outbound(BIGRAM[260]), 

    pop@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM[260]), outbound(BIGRAM[260]), 

    push@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM[260]), outbound(BIGRAM[260]), 

    output_message@message	PTR unsigned char  size(2) Largest target is 10
		 -> outputMessage(COMRAM[10]), 

    puts@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_20(CODE[16]), 

    puts@c	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_20(CODE[16]), 

    sp__receiveMessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK0[10]), NULL(NULL[0]), 

    main@message	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK0[10]), NULL(NULL[0]), 

    PumpStateMappings	PTR unsigned char [7] size(2) Largest target is 31
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), 
		 -> STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    S185timer_event$callback	PTR FTN()void  size(2) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 

    timer_events.callback	PTR FTN()void  size(2) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 


Critical Paths under _main in COMRAM

    _start_pump->_enable_callback
    _start_main->_enable_callback
    _standby->_enable_callback
    _shutdown->_enable_callback
    _serial_process_loop->_has_data
    _receiveMessage->_pop
    _pump_run->_enable_callback
    _monitor_pump_run->_enable_callback
    _process_message->_process_set_address_message
    _process_message->_process_set_zones_message
    _process_set_zones_message->_output_message
    _process_set_address_message->_output_message
    _process_reset_pump->_output_message
    _process_get_status_message->_output_message
    _setBaseMessage->_chartox
    _output_message->_putch
    _process_event_timer->_EventFaultStateLEDCallBack
    _EventLowWaterLevelCallBack->_enable_callback
    _EventLowFogPressureCallBack->_enable_callback
    _clear_callback_for_shutdown->_clear_callback
    _EventIdleTimeoutCallBack->_enable_callback
    _EventFaultStateLEDCallBack->_enable_callback
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_push
    _monitor_water_pressure->_enable_callback
    _init_event_timer->_enable_callback

Critical Paths under _event_timer_isr in COMRAM

    _event_timer_isr->_usart_interrupt
    _usart_interrupt->_puts
    _puts->i2_putch
    i2_putch->i2_push

Critical Paths under _main in BANK0

    _main->_printf
    _printPumpState->_printf
    _printFaultState->_printf
    _printf->_vfprintf

Critical Paths under _event_timer_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _event_timer_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _event_timer_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _event_timer_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _event_timer_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _event_timer_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _event_timer_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _event_timer_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   57829
                                             12 BANK0      2     2      0
                                              0 BANK1     14    14      0
                  _checkIfShoudReset
                     _clear_callback
                       _combineZones
                    _enable_callback
                               _init
                   _init_event_timer
             _monitor_water_pressure
                    _printFaultState
                     _printPumpState
                             _printf
                _process_event_timer
         _process_get_status_message
                    _process_message
                           _pump_run
                     _receiveMessage
                            _ser_int
                _serial_process_loop
                           _shutdown
                            _standby
                         _start_main
                         _start_pump
 ---------------------------------------------------------------------------------
 (1) _start_pump                                           0     0      0    2256
                     _clear_callback
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _start_main                                           0     0      0    4450
                     _clear_callback
                    _enable_callback
                   _monitor_pump_run
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    2225
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _shutdown                                             0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _serial_process_loop                                  0     0      0     266
                           _has_data
 ---------------------------------------------------------------------------------
 (1) _receiveMessage                                       3     1      2     848
                                             24 COMRAM     3     1      2
                           _has_data
                                _pop
 ---------------------------------------------------------------------------------
 (2) _pop                                                  5     3      2     455
                                             19 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _has_data                                             2     0      2     266
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _pump_run                                             0     0      0    4450
                     _clear_callback
                    _enable_callback
                   _monitor_pump_run
 ---------------------------------------------------------------------------------
 (2) _monitor_pump_run                                     0     0      0    2225
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _process_message                                      6     4      2   10098
                                             34 COMRAM     6     4      2
         _process_get_status_message
                 _process_reset_pump
        _process_set_address_message
          _process_set_zones_message
 ---------------------------------------------------------------------------------
 (2) _process_set_zones_message                            3     1      2    2107
                                             31 COMRAM     3     1      2
                       _combineZones
                     _output_message
                     _setBaseMessage
                            _xtochar
 ---------------------------------------------------------------------------------
 (3) _xtochar                                              1     1      0     279
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _process_set_address_message                          3     1      2    1800
                                             31 COMRAM     3     1      2
                     _output_message
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (2) _process_reset_pump                                   2     0      2    3960
                                             31 COMRAM     2     0      2
                     _output_message
                          _resetPump
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (2) _process_get_status_message                           2     0      2    1856
                                             31 COMRAM     2     0      2
                       _combineZones
                     _output_message
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (3) _setBaseMessage                                       6     5      1     617
                                             20 COMRAM     6     5      1
                            _chartox
 ---------------------------------------------------------------------------------
 (4) _chartox                                              1     1      0      93
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _output_message                                       4     2      2    1028
                                             27 COMRAM     4     2      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _process_event_timer                                  3     3      0    9296
                                             29 COMRAM     3     3      0
          _EventDumpSolenoidCallBack *
         _EventFaultStateLEDCallBack *
           _EventIdleTimeoutCallBack *
        _EventLowFogPressureCallBack *
         _EventLowWaterLevelCallBack *
      _EventLowWaterPressureCallBack *
_EventLowWaterPressureDebounceCallBa *
            _EventPODebounceCallBack *
     _EventRunSignalDebounceCallBack *
 ---------------------------------------------------------------------------------
 (2) _EventRunSignalDebounceCallBack                       0     0      0      31
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventPODebounceCallBack                              0     0      0      31
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterPressureDebounceCallBack                1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterPressureCallBack                        1     1      0      31
                                             20 COMRAM     1     1      0
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterLevelCallBack                           0     0      0    2225
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventLowFogPressureCallBack                          0     0      0    2225
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _clear_callback_for_shutdown                          0     0      0      31
                     _clear_callback
 ---------------------------------------------------------------------------------
 (2) _EventIdleTimeoutCallBack                             0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventFaultStateLEDCallBack                           7     7      0    2305
                                             22 COMRAM     7     7      0
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventDumpSolenoidCallBack                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printPumpState                                       0     0      0    3647
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printFaultState                                      0     0      0    3647
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               6     4      2    3647
                                              6 BANK0      6     4      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    2486
                                             46 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           41    35      6    2016
                                             36 COMRAM    10     4      6
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1340
                                             27 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     476
                                             26 COMRAM     1     1      0
                               _push
 ---------------------------------------------------------------------------------
 (5) _push                                                 7     4      3     445
                                             19 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _monitor_water_pressure                               1     1      0    2225
                                             22 COMRAM     1     1      0
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (3) _clear_callback                                       1     1      0      31
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkIfShoudReset                                    0     0      0    2194
                          _resetPump
 ---------------------------------------------------------------------------------
 (3) _resetPump                                            0     0      0    2194
                               _init
                   _init_event_timer
 ---------------------------------------------------------------------------------
 (4) _init_event_timer                                     0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _enable_callback                                      3     1      2    2194
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _init                                                 0     0      0       0
                       _combineZones
                            _ser_int
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _combineZones                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _event_timer_isr                                      6     6      0     944
                                             13 COMRAM     6     6      0
                    _usart_interrupt
 ---------------------------------------------------------------------------------
 (9) _usart_interrupt                                      1     1      0     944
                                             12 COMRAM     1     1      0
                           _not_full
                               _puts
                         i2_has_data
                              i2_pop
                             i2_push
 ---------------------------------------------------------------------------------
 (10) i2_pop                                               5     3      2     181
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) i2_has_data                                          2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _puts                                                4     2      2     380
                                              8 COMRAM     4     2      2
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     236
                                              7 COMRAM     1     1      0
                             i2_push
 ---------------------------------------------------------------------------------
 (10) i2_push                                              7     4      3     214
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (10) _not_full                                            4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkIfShoudReset
     _resetPump
       _init
         _combineZones
         _ser_int
       _init_event_timer
         _enable_callback
   _clear_callback
   _combineZones
   _enable_callback
   _init
     _combineZones
     _ser_int
   _init_event_timer
     _enable_callback
   _monitor_water_pressure
     _clear_callback
     _enable_callback
   _printFaultState
     _printf
       _vfprintf
         _vfpfcnvrt
           _fputc
             _putch
               _push
   _printPumpState
     _printf
       _vfprintf
         _vfpfcnvrt
           _fputc
             _putch
               _push
   _printf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
             _push
   _process_event_timer
     _EventDumpSolenoidCallBack *
     _EventFaultStateLEDCallBack *
       _enable_callback
     _EventIdleTimeoutCallBack *
       _enable_callback
     _EventLowFogPressureCallBack *
       _clear_callback_for_shutdown
         _clear_callback
       _enable_callback
     _EventLowWaterLevelCallBack *
       _clear_callback_for_shutdown
         _clear_callback
       _enable_callback
     _EventLowWaterPressureCallBack *
       _clear_callback_for_shutdown
         _clear_callback
     _EventLowWaterPressureDebounceCallBack *
     _EventPODebounceCallBack *
       _clear_callback_for_shutdown
         _clear_callback
     _EventRunSignalDebounceCallBack *
       _clear_callback_for_shutdown
         _clear_callback
   _process_get_status_message
     _combineZones
     _output_message
       _putch
         _push
     _setBaseMessage
       _chartox
   _process_message
     _process_get_status_message
       _combineZones
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
     _process_reset_pump
       _output_message
         _putch
           _push
       _resetPump
         _init
           _combineZones
           _ser_int
         _init_event_timer
           _enable_callback
       _setBaseMessage
         _chartox
     _process_set_address_message
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
     _process_set_zones_message
       _combineZones
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
       _xtochar
   _pump_run
     _clear_callback
     _enable_callback
     _monitor_pump_run
       _clear_callback
       _enable_callback
   _receiveMessage
     _has_data
     _pop
   _ser_int
   _serial_process_loop
     _has_data
   _shutdown
     _enable_callback
   _standby
     _clear_callback
     _enable_callback
   _start_main
     _clear_callback
     _enable_callback
     _monitor_pump_run
       _clear_callback
       _enable_callback
   _start_pump
     _clear_callback
     _clear_callback_for_shutdown
       _clear_callback
     _enable_callback

 _event_timer_isr (ROOT)
   _usart_interrupt
     _not_full
     _puts
       i2_putch
         i2_push
     i2_has_data
     i2_pop
     i2_push

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     208      21       25.4%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      E       E       7        5.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F1      20        0.0%
DATA                 0      0     2F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Feb 12 06:20:42 2025

                   __size_of_process_reset_pump 0028                                              l20 0296  
                                            l22 031C                                              l23 02B8  
                                            l52 0C5E                                              l67 0E0E  
                                   __CFG_BOR$ON 000000                                     __CFG_BORV$1 000000  
                                  __CFG_CP0$OFF 000000                                    __CFG_CP1$OFF 000000  
                                  __CFG_CP2$OFF 000000                                    __CFG_CP3$OFF 000000  
                                   __CFG_LVP$ON 000000                        _EventIdleTimeoutCallBack 0C38  
                                           l310 0566                                             l320 05D6  
                                           l304 0E5C                                             l317 05AC  
                                           l465 0C36                                             l491 06A2  
                                           l619 0D22                                             l647 04C8  
                                           l648 04DC                                             l594 0AF8  
                                           l596 0B1A                                             _GIE 007F97  
                                  __CFG_CPB$OFF 000000                                    __CFG_CPD$OFF 000000  
                                           _TX9 007D66                                             _pop 068A  
                               ?_setBaseMessage 0015                                             prod 000FF3  
                                           tosl 000FFD                                             wreg 000FE8  
                                    i2_has_data 10BC                                  ??_combineZones 0014  
                                  __CFG_WDT$OFF 000000                                            l4031 0580  
                                          l4041 059E                                            l4107 0DAE  
                                          l4053 05CA                                            l4215 0632  
                                          l4171 0342                                            l4251 043A  
                                          l4227 0660                                            l4253 0448  
                                          l4341 0500                                            l4317 04BC  
                                          l4413 01A2                                            l4405 0178  
                                          l4255 0456                                            l4351 0524  
                                          l3641 091E                                            l4249 042C  
                                          l4361 0548                                            l4179 0348  
                                          l4259 0464                                            l4363 054E  
                                          l4435 01E6                                            l4451 0204  
                                          l4427 01D2                                            l4445 01F8  
                                          l4437 01EC                                            l4453 0240  
                                          l3815 0BFC                                            l4199 060E  
                                          l4279 0B08                                            l4463 0264  
                                          l4447 01FE                                            l4439 01F2  
                                          l3921 02E0                                            l3833 0D56  
                                          l3923 02EA                                            l3819 0C12  
                                          l3851 0D7A                                            l3843 0D68  
                                          l3925 02F2                                            l3757 105C  
                                          l3775 00AE                                            l3919 02D8  
                                          l3927 02FC                                            l3785 00F4  
                                          l3937 032E                                            l3929 0304  
                                          l3779 00B8                                            l3795 010E  
                                          l3789 00FE                                            l3885 0BAA  
                                          l3973 0F36                                            l3887 0BCE  
                                          ?_pop 0014                                            STR_1 7F99  
                                          STR_2 7F6B                                            STR_3 7EF9  
                                          STR_4 7F11                                            STR_5 7EBD  
                                          STR_6 7F4A                                            STR_7 7F8A  
                                          STR_8 7FA8                                            STR_9 7FC5  
                                          _CREN 007D5C                                            _T0CS 007EAD  
                                          u3200 0604                                            u3130 0FC6  
                                          u3050 0D86                                            u3060 0D92  
                                          u3052 0D88                                            u3062 0D94  
                                          u3240 0656                                            u3330 0B24  
                                          u2540 0916                                            u3180 03EA  
                                          u2620 0C22                                            u3501 014C  
                                          u3270 041A                                            u2560 095E  
                                          u2705 08D6                                            u2810 02CE  
                                          u3178 03CA                                            u3179 03DE  
                                          u2910 0F9A                                            u2818 02D0  
                                          _PEIE 007F96                                            u2870 0DC0  
                                          u2928 0F9C                                            u2960 055E  
                                          _RCIE 007CED                                            _RCIF 007CF5  
                                          u2888 0DC2                                            _OERR 007D59  
                                          _RBPU 007F8F                                            _SPEN 007D5F  
                                          _TRMT 007D61                                            _TXIE 007CEC  
                                          _TXIF 007CF4                                            _TXEN 007D65  
                                          _SYNC 007D64                                     main@message 010A  
                                          _dbuf 00A8                                            _main 0142  
                                          _init 07A6                                            _prec 0035  
                                          _nout 0031                                            fsr1h 000FE2  
                                          fsr2h 000FDA                                            indf2 000FDF  
                                          fsr1l 000FE1                                            fsr2l 000FD9  
                                          _push 0972                                            btemp 004C  
                                          _puts 0E1A                                            pop@d 0018  
                                          prodl 000FF3                                            start 000E  
                                 __CFG_IESO$OFF 000000              __size_of_EventDumpSolenoidCallBack 000A  
                               _event_timer_isr 0008                            process_event_timer@i 0020  
                               __end_ofi2_putch 108A                                   __CFG_MCLRE$ON 000000  
                      ??_monitor_water_pressure 0017                                    ___param_bank 000000  
               ??_EventLowWaterPressureCallBack 0015                                           ??_pop 0016  
                                 __CFG_PLLDIV$1 000000                                ?_usart_interrupt 0001  
                                __CFG_CCP2MX$ON 000000                                           ?_main 0001  
                                         ?_init 0001                                           STR_10 7FDD  
                                         STR_11 7FD1                                           STR_12 7FE9  
                                         STR_20 7F5B                                           STR_13 7FF4  
                                         STR_14 7FB7                                           STR_16 7F26  
                                         STR_17 7F38                                           STR_18 7F7B  
                                         STR_19 7EDC                                           ?_push 0014  
                                         ?_puts 0009                                           _IRCF0 007E9C  
                                         _IRCF1 007E9D                                           _IRCF2 007E9E  
                                         _PCFG3 007E0B                                           i2l491 0730  
                                         _RCREG 000FAE                                           _RCSTA 000FAB  
                                  vfpfcnvrt@fmt 0027                                           _SPBRG 000FAF  
                                         _PORTA 000F80                                           _PORTB 000F81  
                                         _PORTD 000F83                                   __CFG_USBDIV$1 000000  
                                         _TRISA 000F92                                           _TRISB 000F93  
                                         _TRISD 000F95                                           _TXREG 000FAD  
                                         _TXSTA 000FAC                                   __CFG_PWRT$OFF 000000  
                                         i2_pop 0718                                 __end_of_chartox 1062  
                                 __CFG_WRT0$OFF 000000                                   __CFG_WRT1$OFF 000000  
                                 __CFG_WRT2$OFF 000000                                   __CFG_WRT3$OFF 000000  
                                __CFG_EBTR0$OFF 000000                                  __CFG_FCMEN$OFF 000000  
                                __CFG_EBTR1$OFF 000000                                  __CFG_EBTR2$OFF 000000  
                                __CFG_EBTR3$OFF 000000                                   __CFG_WRTB$OFF 000000  
                                 __CFG_WRTC$OFF 000000                                   __CFG_WRTD$OFF 000000  
                                __CFG_EBTRB$OFF 000000                         __size_of_clear_callback 0018  
                                         _flags 0037                                 _enable_callback 0C7E  
                                         _fputc 0906                           receiveMessage@message 00C8  
                                         _width 0033                                           _state 0040  
                                         _putch 1062                        __size_of_printFaultState 0002  
                               __end_of_ser_int 0F6C                                           pclath 000FFA  
                                         tablat 000FF5                                           plusw1 000FE3  
                                         plusw2 000FDB                                           push@d 0016  
                               __end_of_standby 0B42                                           puts@c 000B  
                                         ttemp5 004D                                           ttemp6 0050  
                                         ttemp7 0054                                           status 000FD8  
                                         wtemp8 004D                                  __CFG_ICPRT$OFF 000000  
                           _process_event_timer 033E                                 __end_of_xtochar 0D7E  
                  ?_clear_callback_for_shutdown 0001                               receiveMessage@len 0039  
                                i2has_data@buff 0001                                 __initialization 0A90  
                                  __end_of_main 026C                                    __end_of_init 082C  
                                  __end_of_push 09D2                                    __end_of_puts 0E4C  
                                    i2push@buff 0001                                          ??_main 00F6  
                                        ??_init 0014                                          ??_push 0017  
                                        ??_puts 000B                            ?_process_event_timer 0001  
                                 __activetblptr 000002                                          ?i2_pop 0001  
                                   ?i2_has_data 0001                                          _ADCON1 000FC1  
                                        ?_fputc 001C                                          ?_putch 0001  
                                        i2l3063 0E24                                          i2l3067 0E38  
                                        i2l3415 0856                                          i2l3425 0872  
                                        i2l3555 0CE6                         __end_of_event_timer_isr 0D06  
                                        _TMR0IE 007F95                                          _TMR0IF 007F92  
                                     ??i2_putch 0008                               ?_monitor_pump_run 0001  
                                        _TRISC6 007CA6                                          _TRISC7 007CA7  
                                 _outputMessage 0041                                          i2_push 09D2  
                            ??_monitor_pump_run 0017                                          i2pop@d 0005  
                              __end_of_has_data 10AC                                  __CFG_XINST$OFF 000000  
                   __end_of_serial_process_loop 101E                                    vfprintf@cfmt 002F  
               __size_of_monitor_water_pressure 0038                                ??_printPumpState 0031  
                                __CFG_STVREN$ON 000000                            __end_of_combineZones 10D8  
                                        clear_0 0AB8                                          clear_1 0ACA  
                                        clear_2 0AD6                                       ??_chartox 0014  
                                        _printf 0EF8                         __size_of_output_message 004E  
                         ??_process_event_timer 001E                     ?_EventLowWaterLevelCallBack 0001  
         __end_of_EventLowWaterPressureCallBack 0DE8          __size_of_EventLowWaterPressureCallBack 0032  
                 _EventLowWaterPressureCallBack 0DB6            process_set_address_message@inmessage 0020  
                       __end_of_enable_callback 0CC2                                          fputc@c 001C  
                              __end_of_not_full 1004                     ??_process_set_zones_message 0022  
                                  __mediumconst 7EBC                                          tblptrh 000FF7  
                                     ??_ser_int 0014                                          tblptrl 000FF6  
                                        tblptru 000FF8                               _checkIfShoudReset 0FAE  
                              __end_of_shutdown 0FE8                                          putch@c 001B  
                                     ??_standby 0017                                __end_of_vfprintf 0BEA  
                              __end_of_pump_run 0E7C                                ??_receiveMessage 001B  
                            ?_checkIfShoudReset 0001                                       ??_xtochar 0014  
                                    __accesstop 0060                         __end_of__initialization 0ADC  
                               __CFG_PBADEN$OFF 000000                        ?_EventPODebounceCallBack 0001  
                      main@sendGetMessageBuffer 0100                                   ___rparam_used 000001  
                           ??_checkIfShoudReset 0017                               ??_printFaultState 0031  
                                 __end_ofi2_pop 07A6                      ??_EventIdleTimeoutCallBack 0017  
                                __pcstackCOMRAM 0001                                    __pidataBANK0 101E  
                           __size_ofi2_has_data 0010                                   __end_of_fputc 0972  
                  ??_EventFaultStateLEDCallBack 0017                                ??_setBaseMessage 0016  
                     __size_of_init_event_timer 005E                                   __end_of_putch 1076  
                                _inIdleDumpHour 003F                       __end_of_checkIfShoudReset 0FCC  
                                       ??i2_pop 0003            __size_of_clear_callback_for_shutdown 002C  
                                _clear_callback 1036                          _monitor_water_pressure 0D7E  
                      __size_of_process_message 00B2                                         ??_fputc 0020  
                                       ??_putch 001B                                      __pbssBANK0 0060  
                              ?_event_timer_isr 0001                                      __pnvCOMRAM 004B  
                     setBaseMessage@messageType 0019                    ??_process_get_status_message 0022  
                     _process_set_zones_message 0B42                                         ?i2_push 0001  
                    __end_of_process_reset_pump 0ED0             __end_of_EventLowFogPressureCallBack 0E1A  
                   _EventLowFogPressureCallBack 0DE8                              __size_of_resetPump 000A  
                                       ?_printf 00F0                                ?_enable_callback 0014  
                      process_message@inmessage 0023                          __end_of_clear_callback 104E  
                            __size_of_vfpfcnvrt 0130                                       ?_has_data 0014  
           __size_of_process_get_status_message 0028                                      _commsZones 003E  
               __end_of_EventPODebounceCallBack 109C                                 __CFG_VREGEN$OFF 000000  
                                       i2_putch 1076                                         i2push@d 0003  
           __size_of_EventLowWaterLevelCallBack 0026                                 __size_ofi2_push 0060  
                         __size_of_combineZones 000C                                         __Hparam 0000  
                                       __Lparam 0000                                       ?_not_full 0001  
                                     ?_shutdown 0001                                       ?_vfprintf 00EA  
                                     ?_pump_run 0001                                         __pcinit 0A90  
                                       _chartox 104E                                  _output_message 0BEA  
                                       __ramtop 0800                                         __ptext0 0142  
                                       __ptext1 04A6                                         __ptext2 0D06  
                                       __ptext3 0AEA                                         __ptext4 0FCC  
                                       __ptext5 1004                                         __ptext6 05F2  
                                       __ptext7 068A                                         __ptext8 109C  
                                       __ptext9 0E4C                                 __size_of_printf 0028  
                                       _inbound 010E                                 ?_clear_callback 0001  
                                  __size_of_pop 008E                      __size_of_checkIfShoudReset 001E  
                                       _ser_int 0F46                        __size_of_usart_interrupt 006E  
                                  ??i2_has_data 0003                                      ??_has_data 0016  
                                       _standby 0AEA                          clear_callback@callback 0014  
                                __pintcode_body 0CC2                            end_of_initialization 0ADC  
                                  _combineZones 10CC                                         _xtochar 0D42  
                                       fputc@fp 001E                               __end_of_resetPump 10EC  
                                 __Lmediumconst 7EBC                                         int_func 0CC2  
                             ??_process_message 0025                                         pop@buff 0014  
                  ?_process_set_address_message 0020                                      ??_not_full 0003  
                             __end_of_vfpfcnvrt 0142                                         postdec1 000FE5  
                                       postdec2 000FDD              __end_of_EventFaultStateLEDCallBack 033E  
                    _EventFaultStateLEDCallBack 026C                                         postinc0 000FEE  
                                       postinc1 000FE6                                         postinc2 000FDE  
                        __end_of_output_message 0C38                      ?_EventDumpSolenoidCallBack 0001  
                                    ??_shutdown 0017                                         puts@str 0009  
                                    ??_vfprintf 002F                                      ??_pump_run 0017  
                              _init_event_timer 0A32                              __end_ofi2_has_data 10CC  
                              usart_interrupt@a 000D                       __size_of_monitor_pump_run 009E  
                                     _PORTAbits 000F80                                       _PORTCbits 000F82  
                                     _PORTEbits 000F84                                       _TRISAbits 000F92  
                                     _TRISCbits 000F94                                       _TRISEbits 000F96  
                               _printFaultState 10EE                                      _start_main 0D06  
                                    _start_pump 04A6              __end_of_process_get_status_message 0EF8  
                    _process_get_status_message 0ED0                         enable_callback@callback 0016  
              ??_EventRunSignalDebounceCallBack 0015                 ?_EventRunSignalDebounceCallBack 0001  
                 ??_process_set_address_message 0022                                  __end_ofi2_push 0A32  
                               receiveMessage@c 001B                     __end_of_process_event_timer 03F4  
                               ?_output_message 001C                                     vfpfcnvrt@ap 0029  
                                   vfpfcnvrt@fp 0025               __end_of_EventDumpSolenoidCallBack 10E2  
                                   vfpfcnvrt@vp 002D              __size_of_process_set_zones_message 0056  
                  __size_of_serial_process_loop 001A                __size_of_EventPODebounceCallBack 0012  
                             _PumpStateMappings 00D2                         ?_monitor_water_pressure 0001  
                                     i2pop@buff 0001                                  __end_of_printf 0F20  
                           start_initialization 0A90   __end_of_EventLowWaterPressureDebounceCallBack 0FAE  
__size_of_EventLowWaterPressureDebounceCallBack 001E         ??_EventLowWaterPressureDebounceCallBack 0014  
        ?_EventLowWaterPressureDebounceCallBack 0001           _EventLowWaterPressureDebounceCallBack 0F90  
                                   __end_of_pop 0718                     process_reset_pump@inmessage 0020  
                             ??_usart_interrupt 000D                                        ??i2_push 0004  
           __end_of_clear_callback_for_shutdown 0EA8                     _clear_callback_for_shutdown 0E7C  
                                   vfprintf@fmt 00EC                                     __pdataBANK0 00D2  
                              __CFG_LPT1OSC$OFF 000000                   ??_clear_callback_for_shutdown 0015  
                __end_of_monitor_water_pressure 0DB6                                        ??_printf 0031  
                            _process_reset_pump 0EA8               __end_of_process_set_zones_message 0B98  
          __size_of_EventLowFogPressureCallBack 0032                         __end_of_printFaultState 10F0  
                                   __pbssBIGRAM 010E            __size_of_process_set_address_message 0024  
                       __size_of_printPumpState 0002                                     __pbssCOMRAM 0031  
             __size_of_EventIdleTimeoutCallBack 0046                                   __pcstackBANK0 00EA  
                                 __pcstackBANK1 0100                       ?_EventIdleTimeoutCallBack 0001  
                           ?_process_reset_pump 0020                                     ?_start_main 0001  
                             __size_of_has_data 0010                                     ?_start_pump 0001  
                                      ?i2_putch 0001                         __size_of_receiveMessage 0098  
                          ??_process_reset_pump 0022                        __size_of_event_timer_isr 0CFE  
                                     __pintcode 0008                                   __pmediumconst 7EBC  
                             __size_of_not_full 001C                                ??_clear_callback 0014  
                              _monitor_pump_run 0554                                        ?_chartox 0001  
                               setBaseMessage@v 001A                               __size_of_shutdown 001C  
                             __size_of_vfprintf 0052                               __size_of_pump_run 0030  
                                __size_ofi2_pop 008E                                 _process_message 03F4  
                                      ?_ser_int 0001                           output_message@message 001C  
                       __size_of_setBaseMessage 006C                                        ?_standby 0001  
                                __size_of_fputc 006C                                  __size_of_putch 0014  
                      __size_of_enable_callback 0044                                        ?_xtochar 0001  
                      __end_of_init_event_timer 0A90                                     _fault_flags 003B  
           process_get_status_message@inmessage 0020                                       _resetPump 10E2  
                                      i2u183_40 1000                                __CFG_WDTPS$32768 000000  
                                     main@F3636 00E0              process_set_zones_message@inmessage 0020  
                   ?_EventFaultStateLEDCallBack 0001                     ??_EventDumpSolenoidCallBack 0014  
                               output_message@i 001E                         _EventPODebounceCallBack 108A  
                                     _vfpfcnvrt 0012                             __size_of_start_main 003C  
                           __size_of_start_pump 00AE                    ??_EventLowWaterLevelCallBack 0017  
                              ?_printFaultState 0001                                       copy_data0 0AA4  
                ?_EventLowWaterPressureCallBack 0001                             _serial_process_loop 1004  
                                      i2putch@c 0008                     ?_process_get_status_message 0020  
                              __size_ofi2_putch 0014                                ??_output_message 001E  
                                      __Hrparam 0000                  _EventFaultStateLEDCallBack$217 0018  
                _EventFaultStateLEDCallBack$218 001A                  _EventFaultStateLEDCallBack$219 001C  
                                    ?_resetPump 0001                                      vfprintf@ap 00EE  
                                      __Lrparam 0000                                      vfprintf@fp 00EA  
                                    ?_vfpfcnvrt 0025                         __end_of_process_message 04A6  
                          ?_serial_process_loop 0001                               ??_event_timer_isr 000E  
                         __CFG_FOSC$INTOSCIO_EC 000000                                __size_of_chartox 0014  
                                _printPumpState 10EC          __end_of_EventRunSignalDebounceCallBack 10BC  
       __size_of_EventRunSignalDebounceCallBack 0010                  _EventRunSignalDebounceCallBack 10AC  
                               main@msg_counter 010C                                 _usart_interrupt 082C  
                                      __ptext10 0554                                        __ptext11 03F4  
                                      __ptext20 033E                                        __ptext12 0B42  
                                      __ptext21 108A                                        __ptext13 0D42  
                                      __ptext30 0E7C                                        __ptext22 0F90  
                                      __ptext14 0F6C                                        __ptext31 10EC  
                                      __ptext23 0DB6                                        __ptext15 0EA8  
                                      __ptext40 1036                                        __ptext32 10EE  
                                      __ptext24 0F20                                        __ptext16 0ED0  
                                      __ptext41 0FAE                                        __ptext33 0EF8  
                                      __ptext25 0DE8                                        __ptext17 089A  
                                      __ptext50 0718                                        __ptext42 10E2  
                                      __ptext34 0B98                                        __ptext26 0C38  
                                      __ptext18 104E                                        __ptext51 10BC  
                                      __ptext43 0A32                                        __ptext35 0012  
                                      __ptext27 026C                                        __ptext19 0BEA  
                                      __ptext52 0E1A                                        __ptext44 0C7E  
                                      __ptext36 0906                                        __ptext28 10D8  
                                      __ptext53 1076                                        __ptext45 07A6  
                                      __ptext37 1062                                        __ptext29 10AC  
                                      _has_data 109C                                        __ptext54 09D2  
                                      __ptext46 0F46                                        __ptext38 0972  
                                      __ptext55 0FE8                                        __ptext47 10CC  
                                      __ptext39 0D7E                                        __ptext56 0000  
                                      __ptext49 082C                                __size_of_ser_int 0026  
                     _EventDumpSolenoidCallBack 10D8                                __size_of_standby 0058  
                        process_message@msgType 0027                                __size_of_xtochar 003C  
                      setBaseMessage@msgAddress 0015                                   __size_of_main 012A  
                                 __size_of_init 0086                                   __size_of_push 0060  
                                 __size_of_puts 0032                                        chartox@c 0014  
                             ??_enable_callback 0016                                  _receiveMessage 05F2  
                  ?_EventLowFogPressureCallBack 0001                                        _not_full 0FE8  
                                  not_full@buff 0001                       ??_EventPODebounceCallBack 0015  
                                      int$flags 004C                __end_of_EventIdleTimeoutCallBack 0C7E  
                                      _shutdown 0FCC                       enable_callback@time_delay 0014  
                                      _outbound 0212                                        _vfprintf 0B98  
                                      _pump_run 0E4C                                       printf@fmt 00F0  
                         ??_serial_process_loop 0016                          __end_of_printPumpState 10EE  
                         __CFG_CPUDIV$OSC1_PLL2 000000                    __size_of_process_event_timer 00B6  
                                 _combinedZones 004B                                  _setBaseMessage 089A  
                                  ??_start_main 0017                                        intlevel2 0000  
                                  ??_start_pump 0017             __size_of_EventFaultStateLEDCallBack 00D2  
                      __end_of_monitor_pump_run 05F2             __end_of_process_set_address_message 0F90  
                   _process_set_address_message 0F6C                          __end_of_receiveMessage 068A  
                                  has_data@buff 0014                                     ??_resetPump 0017  
                 ??_EventLowFogPressureCallBack 0017                                        printf@ap 00F4  
                                  _timer_events 0060                                        push@buff 0014  
                                   ??_vfpfcnvrt 002B                         __end_of_usart_interrupt 089A  
                              ?_process_message 0023              __end_of_EventLowWaterLevelCallBack 0F46  
                    _EventLowWaterLevelCallBack 0F20                                 ?_printPumpState 0001  
                            __end_of_start_main 0D42                              __end_of_start_pump 0554  
                    ?_process_set_zones_message 0020                          __end_of_setBaseMessage 0906  
                                   _timer_count 003D                                   ?_combineZones 0001  
                                      xtochar@x 0014                               ?_init_event_timer 0001  
                               ?_receiveMessage 0019                              ??_init_event_timer 0017  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Feb 03 11:46:06 2025

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM_1,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           ; Version 2.05
    90                           ; Generated 20/12/2018 GMT
    91                           ; 
    92                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F4550 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     
   124                           	psect	eeprom_data
   125  F00000  30 31 00 00 00 00 00 00 	db	48,49,0,0,0,0,0,0	;# 
   126  0000                     
   127                           	psect	idataBANK1
   128  0018E4                     __pidataBANK1:
   129                           	opt callstack 0
   130                           
   131                           ;initializer for _PumpStateMappings
   132  0018E4  57                 	db	low STR_1
   133  0018E5  7D                 	db	high STR_1
   134  0018E6  1A                 	db	low STR_2
   135  0018E7  7D                 	db	high STR_2
   136  0018E8  91                 	db	low STR_3
   137  0018E9  7C                 	db	high STR_3
   138  0018EA  C0                 	db	low STR_4
   139  0018EB  7C                 	db	high STR_4
   140  0018EC  55                 	db	low STR_5
   141  0018ED  7C                 	db	high STR_5
   142  0018EE  F9                 	db	low STR_6
   143  0018EF  7C                 	db	high STR_6
   144  0018F0  48                 	db	low STR_7
   145  0018F1  7D                 	db	high STR_7
   146                           
   147                           ;initializer for main@F3632
   148  0018F2  30                 	db	48
   149  0018F3  30                 	db	48
   150  0018F4  30                 	db	48
   151  0018F5  30                 	db	48
   152  0018F6  30                 	db	48
   153  0018F7  30                 	db	48
   154  0018F8  30                 	db	48
   155  0018F9  30                 	db	48
   156  0018FA  30                 	db	48
   157  0018FB  00                 	db	0
   158                           
   159                           ;initializer for stoa@F1144
   160  0018FC  28                 	db	40
   161  0018FD  6E                 	db	110
   162  0018FE  75                 	db	117
   163  0018FF  6C                 	db	108
   164  001900  6C                 	db	108
   165  001901  29                 	db	41
   166  001902  00                 	db	0
   167  0000                     _RCREG	set	4014
   168  0000                     _TXREG	set	4013
   169  0000                     _SPBRG	set	4015
   170  0000                     _TXSTA	set	4012
   171  0000                     _RCSTA	set	4011
   172  0000                     _TRISBbits	set	3987
   173  0000                     _TRISAbits	set	3986
   174  0000                     _PORTD	set	3971
   175  0000                     _TRISD	set	3989
   176  0000                     _TRISB	set	3987
   177  0000                     _TRISA	set	3986
   178  0000                     _PORTB	set	3969
   179  0000                     _PORTA	set	3968
   180  0000                     _ADCON1	set	4033
   181  0000                     _PORTBbits	set	3969
   182  0000                     _PORTAbits	set	3968
   183  0000                     _TXEN	set	32101
   184  0000                     _OERR	set	32089
   185  0000                     _TXIF	set	31988
   186  0000                     _RCIF	set	31989
   187  0000                     _TRMT	set	32097
   188  0000                     _RCIE	set	31981
   189  0000                     _TXIE	set	31980
   190  0000                     _CREN	set	32092
   191  0000                     _TX9	set	32102
   192  0000                     _SPEN	set	32095
   193  0000                     _SYNC	set	32100
   194  0000                     _TRISC7	set	31911
   195  0000                     _TRISC6	set	31910
   196  0000                     _IRCF0	set	32412
   197  0000                     _IRCF1	set	32413
   198  0000                     _IRCF2	set	32414
   199  0000                     _PCFG3	set	32267
   200  0000                     _T0CS	set	32429
   201  0000                     _TMR0IF	set	32658
   202  0000                     _TMR0IE	set	32661
   203  0000                     _PEIE	set	32662
   204  0000                     _GIE	set	32663
   205  0000                     _RBPU	set	32655
   206                           
   207                           	psect	mediumconst
   208  007C54                     __pmediumconst:
   209                           	opt callstack 0
   210  007C54  00                 	db	0
   211  007C55                     STR_5:
   212  007C55  73                 	db	115	;'s'
   213  007C56  74                 	db	116	;'t'
   214  007C57  61                 	db	97	;'a'
   215  007C58  72                 	db	114	;'r'
   216  007C59  74                 	db	116	;'t'
   217  007C5A  70                 	db	112	;'p'
   218  007C5B  75                 	db	117	;'u'
   219  007C5C  6D                 	db	109	;'m'
   220  007C5D  70                 	db	112	;'p'
   221  007C5E  53                 	db	83	;'S'
   222  007C5F  65                 	db	101	;'e'
   223  007C60  63                 	db	99	;'c'
   224  007C61  6F                 	db	111	;'o'
   225  007C62  6E                 	db	110	;'n'
   226  007C63  64                 	db	100	;'d'
   227  007C64  4C                 	db	76	;'L'
   228  007C65  57                 	db	87	;'W'
   229  007C66  50                 	db	80	;'P'
   230  007C67  43                 	db	67	;'C'
   231  007C68  68                 	db	104	;'h'
   232  007C69  65                 	db	101	;'e'
   233  007C6A  63                 	db	99	;'c'
   234  007C6B  6B                 	db	107	;'k'
   235  007C6C  53                 	db	83	;'S'
   236  007C6D  74                 	db	116	;'t'
   237  007C6E  61                 	db	97	;'a'
   238  007C6F  74                 	db	116	;'t'
   239  007C70  65                 	db	101	;'e'
   240  007C71  0A                 	db	10
   241  007C72  0D                 	db	13
   242  007C73  00                 	db	0
   243  007C74  61                 	db	97	;'a'
   244  007C75  62                 	db	98	;'b'
   245  007C76  63                 	db	99	;'c'
   246  007C77  64                 	db	100	;'d'
   247  007C78  65                 	db	101	;'e'
   248  007C79  66                 	db	102	;'f'
   249  007C7A  67                 	db	103	;'g'
   250  007C7B  68                 	db	104	;'h'
   251  007C7C  69                 	db	105	;'i'
   252  007C7D  6A                 	db	106	;'j'
   253  007C7E  6B                 	db	107	;'k'
   254  007C7F  6C                 	db	108	;'l'
   255  007C80  6D                 	db	109	;'m'
   256  007C81  6E                 	db	110	;'n'
   257  007C82  6F                 	db	111	;'o'
   258  007C83  70                 	db	112	;'p'
   259  007C84  71                 	db	113	;'q'
   260  007C85  72                 	db	114	;'r'
   261  007C86  73                 	db	115	;'s'
   262  007C87  74                 	db	116	;'t'
   263  007C88  75                 	db	117	;'u'
   264  007C89  76                 	db	118	;'v'
   265  007C8A  77                 	db	119	;'w'
   266  007C8B  78                 	db	120	;'x'
   267  007C8C  79                 	db	121	;'y'
   268  007C8D  7A                 	db	122	;'z'
   269  007C8E  0A                 	db	10
   270  007C8F  0D                 	db	13
   271  007C90  00                 	db	0
   272  007C91                     STR_3:
   273  007C91  73                 	db	115	;'s'
   274  007C92  74                 	db	116	;'t'
   275  007C93  61                 	db	97	;'a'
   276  007C94  72                 	db	114	;'r'
   277  007C95  74                 	db	116	;'t'
   278  007C96  70                 	db	112	;'p'
   279  007C97  75                 	db	117	;'u'
   280  007C98  6D                 	db	109	;'m'
   281  007C99  70                 	db	112	;'p'
   282  007C9A  49                 	db	73	;'I'
   283  007C9B  6E                 	db	110	;'n'
   284  007C9C  69                 	db	105	;'i'
   285  007C9D  74                 	db	116	;'t'
   286  007C9E  69                 	db	105	;'i'
   287  007C9F  61                 	db	97	;'a'
   288  007CA0  6C                 	db	108	;'l'
   289  007CA1  53                 	db	83	;'S'
   290  007CA2  74                 	db	116	;'t'
   291  007CA3  61                 	db	97	;'a'
   292  007CA4  74                 	db	116	;'t'
   293  007CA5  65                 	db	101	;'e'
   294  007CA6  0A                 	db	10
   295  007CA7  0D                 	db	13
   296  007CA8  00                 	db	0
   297  007CA9  72                 	db	114	;'r'
   298  007CAA  65                 	db	101	;'e'
   299  007CAB  63                 	db	99	;'c'
   300  007CAC  65                 	db	101	;'e'
   301  007CAD  69                 	db	105	;'i'
   302  007CAE  76                 	db	118	;'v'
   303  007CAF  65                 	db	101	;'e'
   304  007CB0  64                 	db	100	;'d'
   305  007CB1  20                 	db	32
   306  007CB2  6D                 	db	109	;'m'
   307  007CB3  65                 	db	101	;'e'
   308  007CB4  73                 	db	115	;'s'
   309  007CB5  73                 	db	115	;'s'
   310  007CB6  61                 	db	97	;'a'
   311  007CB7  67                 	db	103	;'g'
   312  007CB8  65                 	db	101	;'e'
   313  007CB9  20                 	db	32
   314  007CBA  25                 	db	37
   315  007CBB  73                 	db	115	;'s'
   316  007CBC  20                 	db	32
   317  007CBD  0D                 	db	13
   318  007CBE  0A                 	db	10
   319  007CBF  00                 	db	0
   320  007CC0                     STR_4:
   321  007CC0  73                 	db	115	;'s'
   322  007CC1  74                 	db	116	;'t'
   323  007CC2  61                 	db	97	;'a'
   324  007CC3  72                 	db	114	;'r'
   325  007CC4  74                 	db	116	;'t'
   326  007CC5  70                 	db	112	;'p'
   327  007CC6  75                 	db	117	;'u'
   328  007CC7  6D                 	db	109	;'m'
   329  007CC8  70                 	db	112	;'p'
   330  007CC9  57                 	db	87	;'W'
   331  007CCA  61                 	db	97	;'a'
   332  007CCB  69                 	db	105	;'i'
   333  007CCC  74                 	db	116	;'t'
   334  007CCD  53                 	db	83	;'S'
   335  007CCE  74                 	db	116	;'t'
   336  007CCF  61                 	db	97	;'a'
   337  007CD0  74                 	db	116	;'t'
   338  007CD1  65                 	db	101	;'e'
   339  007CD2  0A                 	db	10
   340  007CD3  0D                 	db	13
   341  007CD4  00                 	db	0
   342  007CD5                     STR_16:
   343  007CD5  70                 	db	112	;'p'
   344  007CD6  75                 	db	117	;'u'
   345  007CD7  6D                 	db	109	;'m'
   346  007CD8  70                 	db	112	;'p'
   347  007CD9  4F                 	db	79	;'O'
   348  007CDA  76                 	db	118	;'v'
   349  007CDB  65                 	db	101	;'e'
   350  007CDC  72                 	db	114	;'r'
   351  007CDD  6C                 	db	108	;'l'
   352  007CDE  6F                 	db	111	;'o'
   353  007CDF  61                 	db	97	;'a'
   354  007CE0  64                 	db	100	;'d'
   355  007CE1  42                 	db	66	;'B'
   356  007CE2  69                 	db	105	;'i'
   357  007CE3  74                 	db	116	;'t'
   358  007CE4  0A                 	db	10
   359  007CE5  0D                 	db	13
   360  007CE6  00                 	db	0
   361  007CE7                     STR_17:
   362  007CE7  64                 	db	100	;'d'
   363  007CE8  75                 	db	117	;'u'
   364  007CE9  6D                 	db	109	;'m'
   365  007CEA  70                 	db	112	;'p'
   366  007CEB  53                 	db	83	;'S'
   367  007CEC  6F                 	db	111	;'o'
   368  007CED  6C                 	db	108	;'l'
   369  007CEE  65                 	db	101	;'e'
   370  007CEF  6E                 	db	110	;'n'
   371  007CF0  6F                 	db	111	;'o'
   372  007CF1  69                 	db	105	;'i'
   373  007CF2  64                 	db	100	;'d'
   374  007CF3  42                 	db	66	;'B'
   375  007CF4  69                 	db	105	;'i'
   376  007CF5  74                 	db	116	;'t'
   377  007CF6  0A                 	db	10
   378  007CF7  0D                 	db	13
   379  007CF8  00                 	db	0
   380  007CF9                     STR_6:
   381  007CF9  73                 	db	115	;'s'
   382  007CFA  74                 	db	116	;'t'
   383  007CFB  61                 	db	97	;'a'
   384  007CFC  72                 	db	114	;'r'
   385  007CFD  74                 	db	116	;'t'
   386  007CFE  6D                 	db	109	;'m'
   387  007CFF  61                 	db	97	;'a'
   388  007D00  69                 	db	105	;'i'
   389  007D01  6E                 	db	110	;'n'
   390  007D02  53                 	db	83	;'S'
   391  007D03  74                 	db	116	;'t'
   392  007D04  61                 	db	97	;'a'
   393  007D05  74                 	db	116	;'t'
   394  007D06  65                 	db	101	;'e'
   395  007D07  0A                 	db	10
   396  007D08  0D                 	db	13
   397  007D09  00                 	db	0
   398  007D0A                     STR_21:
   399  007D0A  73                 	db	115	;'s'
   400  007D0B  65                 	db	101	;'e'
   401  007D0C  72                 	db	114	;'r'
   402  007D0D  69                 	db	105	;'i'
   403  007D0E  61                 	db	97	;'a'
   404  007D0F  6C                 	db	108	;'l'
   405  007D10  20                 	db	32
   406  007D11  6F                 	db	111	;'o'
   407  007D12  76                 	db	118	;'v'
   408  007D13  65                 	db	101	;'e'
   409  007D14  72                 	db	114	;'r'
   410  007D15  66                 	db	102	;'f'
   411  007D16  6C                 	db	108	;'l'
   412  007D17  6F                 	db	111	;'o'
   413  007D18  77                 	db	119	;'w'
   414  007D19  00                 	db	0
   415  007D1A                     STR_2:
   416  007D1A  73                 	db	115	;'s'
   417  007D1B  68                 	db	104	;'h'
   418  007D1C  75                 	db	117	;'u'
   419  007D1D  74                 	db	116	;'t'
   420  007D1E  64                 	db	100	;'d'
   421  007D1F  6F                 	db	111	;'o'
   422  007D20  77                 	db	119	;'w'
   423  007D21  6E                 	db	110	;'n'
   424  007D22  53                 	db	83	;'S'
   425  007D23  74                 	db	116	;'t'
   426  007D24  61                 	db	97	;'a'
   427  007D25  74                 	db	116	;'t'
   428  007D26  65                 	db	101	;'e'
   429  007D27  0A                 	db	10
   430  007D28  0D                 	db	13
   431  007D29  00                 	db	0
   432  007D2A                     STR_23:
   433  007D2A  4D                 	db	77	;'M'
   434  007D2B  65                 	db	101	;'e'
   435  007D2C  73                 	db	115	;'s'
   436  007D2D  73                 	db	115	;'s'
   437  007D2E  61                 	db	97	;'a'
   438  007D2F  67                 	db	103	;'g'
   439  007D30  65                 	db	101	;'e'
   440  007D31  25                 	db	37
   441  007D32  73                 	db	115	;'s'
   442  007D33  20                 	db	32
   443  007D34  25                 	db	37
   444  007D35  64                 	db	100	;'d'
   445  007D36  0D                 	db	13
   446  007D37  0A                 	db	10
   447  007D38  00                 	db	0
   448  007D39                     STR_18:
   449  007D39  77                 	db	119	;'w'
   450  007D3A  61                 	db	97	;'a'
   451  007D3B  69                 	db	105	;'i'
   452  007D3C  74                 	db	116	;'t'
   453  007D3D  69                 	db	105	;'i'
   454  007D3E  6E                 	db	110	;'n'
   455  007D3F  67                 	db	103	;'g'
   456  007D40  78                 	db	120	;'x'
   457  007D41  78                 	db	120	;'x'
   458  007D42  78                 	db	120	;'x'
   459  007D43  78                 	db	120	;'x'
   460  007D44  20                 	db	32
   461  007D45  0A                 	db	10
   462  007D46  0D                 	db	13
   463  007D47  00                 	db	0
   464  007D48                     STR_7:
   465  007D48  70                 	db	112	;'p'
   466  007D49  75                 	db	117	;'u'
   467  007D4A  6D                 	db	109	;'m'
   468  007D4B  70                 	db	112	;'p'
   469  007D4C  72                 	db	114	;'r'
   470  007D4D  75                 	db	117	;'u'
   471  007D4E  6E                 	db	110	;'n'
   472  007D4F  53                 	db	83	;'S'
   473  007D50  74                 	db	116	;'t'
   474  007D51  61                 	db	97	;'a'
   475  007D52  74                 	db	116	;'t'
   476  007D53  65                 	db	101	;'e'
   477  007D54  0A                 	db	10
   478  007D55  0D                 	db	13
   479  007D56  00                 	db	0
   480  007D57                     STR_1:
   481  007D57  73                 	db	115	;'s'
   482  007D58  74                 	db	116	;'t'
   483  007D59  61                 	db	97	;'a'
   484  007D5A  6E                 	db	110	;'n'
   485  007D5B  64                 	db	100	;'d'
   486  007D5C  62                 	db	98	;'b'
   487  007D5D  79                 	db	121	;'y'
   488  007D5E  53                 	db	83	;'S'
   489  007D5F  74                 	db	116	;'t'
   490  007D60  61                 	db	97	;'a'
   491  007D61  74                 	db	116	;'t'
   492  007D62  65                 	db	101	;'e'
   493  007D63  0A                 	db	10
   494  007D64  0D                 	db	13
   495  007D65  00                 	db	0
   496  007D66                     STR_8:
   497  007D66  62                 	db	98	;'b'
   498  007D67  6F                 	db	111	;'o'
   499  007D68  6F                 	db	111	;'o'
   500  007D69  73                 	db	115	;'s'
   501  007D6A  74                 	db	116	;'t'
   502  007D6B  50                 	db	80	;'P'
   503  007D6C  75                 	db	117	;'u'
   504  007D6D  6D                 	db	109	;'m'
   505  007D6E  70                 	db	112	;'p'
   506  007D6F  42                 	db	66	;'B'
   507  007D70  69                 	db	105	;'i'
   508  007D71  74                 	db	116	;'t'
   509  007D72  0A                 	db	10
   510  007D73  0D                 	db	13
   511  007D74  00                 	db	0
   512  007D75                     STR_14:
   513  007D75  6D                 	db	109	;'m'
   514  007D76  61                 	db	97	;'a'
   515  007D77  69                 	db	105	;'i'
   516  007D78  6E                 	db	110	;'n'
   517  007D79  50                 	db	80	;'P'
   518  007D7A  75                 	db	117	;'u'
   519  007D7B  6D                 	db	109	;'m'
   520  007D7C  70                 	db	112	;'p'
   521  007D7D  42                 	db	66	;'B'
   522  007D7E  69                 	db	105	;'i'
   523  007D7F  74                 	db	116	;'t'
   524  007D80  0A                 	db	10
   525  007D81  0D                 	db	13
   526  007D82  00                 	db	0
   527  007D83                     STR_9:
   528  007D83  6C                 	db	108	;'l'
   529  007D84  77                 	db	119	;'w'
   530  007D85  6C                 	db	108	;'l'
   531  007D86  5F                 	db	95	;'_'
   532  007D87  66                 	db	102	;'f'
   533  007D88  61                 	db	97	;'a'
   534  007D89  75                 	db	117	;'u'
   535  007D8A  6C                 	db	108	;'l'
   536  007D8B  74                 	db	116	;'t'
   537  007D8C  0A                 	db	10
   538  007D8D  0D                 	db	13
   539  007D8E  00                 	db	0
   540  007D8F                     STR_11:
   541  007D8F  6C                 	db	108	;'l'
   542  007D90  66                 	db	102	;'f'
   543  007D91  70                 	db	112	;'p'
   544  007D92  5F                 	db	95	;'_'
   545  007D93  66                 	db	102	;'f'
   546  007D94  61                 	db	97	;'a'
   547  007D95  75                 	db	117	;'u'
   548  007D96  6C                 	db	108	;'l'
   549  007D97  74                 	db	116	;'t'
   550  007D98  0A                 	db	10
   551  007D99  0D                 	db	13
   552  007D9A  00                 	db	0
   553  007D9B                     STR_10:
   554  007D9B  6C                 	db	108	;'l'
   555  007D9C  77                 	db	119	;'w'
   556  007D9D  70                 	db	112	;'p'
   557  007D9E  5F                 	db	95	;'_'
   558  007D9F  66                 	db	102	;'f'
   559  007DA0  61                 	db	97	;'a'
   560  007DA1  75                 	db	117	;'u'
   561  007DA2  6C                 	db	108	;'l'
   562  007DA3  74                 	db	116	;'t'
   563  007DA4  0A                 	db	10
   564  007DA5  0D                 	db	13
   565  007DA6  00                 	db	0
   566  007DA7                     STR_12:
   567  007DA7  70                 	db	112	;'p'
   568  007DA8  6F                 	db	111	;'o'
   569  007DA9  5F                 	db	95	;'_'
   570  007DAA  66                 	db	102	;'f'
   571  007DAB  61                 	db	97	;'a'
   572  007DAC  75                 	db	117	;'u'
   573  007DAD  6C                 	db	108	;'l'
   574  007DAE  74                 	db	116	;'t'
   575  007DAF  0A                 	db	10
   576  007DB0  0D                 	db	13
   577  007DB1  00                 	db	0
   578  007DB2                     STR_13:
   579  007DB2  77                 	db	119	;'w'
   580  007DB3  70                 	db	112	;'p'
   581  007DB4  4F                 	db	79	;'O'
   582  007DB5  6B                 	db	107	;'k'
   583  007DB6  42                 	db	66	;'B'
   584  007DB7  69                 	db	105	;'i'
   585  007DB8  74                 	db	116	;'t'
   586  007DB9  0A                 	db	10
   587  007DBA  0D                 	db	13
   588  007DBB  00                 	db	0
   589  007DBC                     STR_22:
   590  007DBC  25                 	db	37
   591  007DBD  63                 	db	99	;'c'
   592  007DBE  00                 	db	0
   593  0000                     
   594                           ; #config settings
   595  007DBF  00                 	db	0	; dummy byte at the end
   596  0000                     
   597                           	psect	cinit
   598  00120C                     __pcinit:
   599                           	opt callstack 0
   600  00120C                     start_initialization:
   601                           	opt callstack 0
   602  00120C                     __initialization:
   603                           	opt callstack 0
   604                           
   605                           ; Initialize objects allocated to BANK1 (31 bytes)
   606                           ; load TBLPTR registers with __pidataBANK1
   607  00120C  0EE4               	movlw	low __pidataBANK1
   608  00120E  6EF6               	movwf	tblptrl,c
   609  001210  0E18               	movlw	high __pidataBANK1
   610  001212  6EF7               	movwf	tblptrh,c
   611  001214  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   612  001216  6EF8               	movwf	tblptru,c
   613  001218  EE01  F02A         	lfsr	0,__pdataBANK1
   614  00121C  EE10 F01F          	lfsr	1,31
   615  001220                     copy_data0:
   616  001220  0009               	tblrd		*+
   617  001222  CFF5 FFEE          	movff	tablat,postinc0
   618  001226  50E5               	movf	postdec1,w,c
   619  001228  50E1               	movf	fsr1l,w,c
   620  00122A  E1FA               	bnz	copy_data0
   621                           
   622                           ; Clear objects allocated to BIGRAM_1 (520 bytes)
   623  00122C  EE01  F054         	lfsr	0,__pbssBIGRAM_1
   624  001230  EE12 F008          	lfsr	1,520
   625  001234                     clear_0:
   626  001234  6AEE               	clrf	postinc0,c
   627  001236  50E5               	movf	postdec1,w,c
   628  001238  50E1               	movf	fsr1l,w,c
   629  00123A  E1FC               	bnz	clear_0
   630  00123C  50E2               	movf	fsr1h,w,c
   631  00123E  E1FA               	bnz	clear_0
   632                           
   633                           ; Clear objects allocated to BANK1 (42 bytes)
   634  001240  EE01  F000         	lfsr	0,__pbssBANK1
   635  001244  0E2A               	movlw	42
   636  001246                     clear_1:
   637  001246  6AEE               	clrf	postinc0,c
   638  001248  06E8               	decf	wreg,f,c
   639  00124A  E1FD               	bnz	clear_1
   640                           
   641                           ; Clear objects allocated to BANK0 (86 bytes)
   642  00124C  EE00  F060         	lfsr	0,__pbssBANK0
   643  001250  0E56               	movlw	86
   644  001252                     clear_2:
   645  001252  6AEE               	clrf	postinc0,c
   646  001254  06E8               	decf	wreg,f,c
   647  001256  E1FD               	bnz	clear_2
   648                           
   649                           ; Clear objects allocated to COMRAM (13 bytes)
   650  001258  EE00  F03F         	lfsr	0,__pbssCOMRAM
   651  00125C  0E0D               	movlw	13
   652  00125E                     clear_3:
   653  00125E  6AEE               	clrf	postinc0,c
   654  001260  06E8               	decf	wreg,f,c
   655  001262  E1FD               	bnz	clear_3
   656  001264                     end_of_initialization:
   657                           	opt callstack 0
   658  001264                     __end_of__initialization:
   659                           	opt callstack 0
   660  001264  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   661  001266  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   662  001268  0E00               	movlw	low (__Lmediumconst shr (0+16))
   663  00126A  6EF8               	movwf	tblptru,c
   664  00126C  0100               	movlb	0
   665  00126E  EF64  F008         	goto	_main	;jump to C main() function
   666                           
   667                           	psect	bssCOMRAM
   668  00003F                     __pbssCOMRAM:
   669                           	opt callstack 0
   670  00003F                     _width:
   671                           	opt callstack 0
   672  00003F                     	ds	2
   673  000041                     _prec:
   674                           	opt callstack 0
   675  000041                     	ds	2
   676  000043                     _flags:
   677                           	opt callstack 0
   678  000043                     	ds	2
   679  000045                     _zones:
   680                           	opt callstack 0
   681  000045                     	ds	2
   682  000047                     _fault_flags:
   683                           	opt callstack 0
   684  000047                     	ds	2
   685  000049                     _timer_count:
   686                           	opt callstack 0
   687  000049                     	ds	1
   688  00004A                     _inIdleDumpHour:
   689                           	opt callstack 0
   690  00004A                     	ds	1
   691  00004B                     _state:
   692                           	opt callstack 0
   693  00004B                     	ds	1
   694                           
   695                           	psect	bssBANK0
   696  000060                     __pbssBANK0:
   697                           	opt callstack 0
   698  000060                     _timer_events:
   699                           	opt callstack 0
   700  000060                     	ds	72
   701  0000A8                     _nout:
   702                           	opt callstack 0
   703  0000A8                     	ds	2
   704  0000AA                     receiveMessage@len:
   705                           	opt callstack 0
   706  0000AA                     	ds	2
   707  0000AC                     _outputMessage:
   708                           	opt callstack 0
   709  0000AC                     	ds	10
   710                           
   711                           	psect	bssBANK1
   712  000100                     __pbssBANK1:
   713                           	opt callstack 0
   714  000100                     _dbuf:
   715                           	opt callstack 0
   716  000100                     	ds	32
   717  000120                     receiveMessage@message:
   718                           	opt callstack 0
   719  000120                     	ds	10
   720                           
   721                           	psect	dataBANK1
   722  00012A                     __pdataBANK1:
   723                           	opt callstack 0
   724  00012A                     _PumpStateMappings:
   725                           	opt callstack 0
   726  00012A                     	ds	14
   727  000138                     main@F3632:
   728                           	opt callstack 0
   729  000138                     	ds	10
   730  000142                     stoa@F1144:
   731                           	opt callstack 0
   732  000142                     	ds	7
   733                           
   734                           	psect	bssBIGRAM_1
   735  000154                     __pbssBIGRAM_1:
   736                           	opt callstack 0
   737  000154                     _outbound:
   738                           	opt callstack 0
   739  000154                     	ds	260
   740  000258                     _inbound:
   741                           	opt callstack 0
   742  000258                     	ds	260
   743                           
   744                           	psect	cstackBANK1
   745  000149                     __pcstackBANK1:
   746                           	opt callstack 0
   747  000149                     main@sendGetMessageBuffer:
   748                           	opt callstack 0
   749                           
   750                           ; 10 bytes @ 0x0
   751  000149                     	ds	10
   752  000153                     main@c:
   753                           	opt callstack 0
   754                           
   755                           ; 1 bytes @ 0xA
   756  000153                     	ds	1
   757                           
   758                           	psect	cstackBANK0
   759  0000B6                     __pcstackBANK0:
   760                           	opt callstack 0
   761  0000B6                     ?_dtoa:
   762                           	opt callstack 0
   763  0000B6                     dtoa@fp:
   764                           	opt callstack 0
   765                           
   766                           ; 2 bytes @ 0x0
   767  0000B6                     	ds	2
   768  0000B8                     dtoa@d:
   769                           	opt callstack 0
   770                           
   771                           ; 8 bytes @ 0x2
   772  0000B8                     	ds	8
   773  0000C0                     _dtoa$1827:
   774                           	opt callstack 0
   775                           
   776                           ; 2 bytes @ 0xA
   777  0000C0                     	ds	2
   778  0000C2                     dtoa@p:
   779                           	opt callstack 0
   780                           
   781                           ; 2 bytes @ 0xC
   782  0000C2                     	ds	2
   783  0000C4                     dtoa@w:
   784                           	opt callstack 0
   785                           
   786                           ; 2 bytes @ 0xE
   787  0000C4                     	ds	2
   788  0000C6                     dtoa@s:
   789                           	opt callstack 0
   790                           
   791                           ; 2 bytes @ 0x10
   792  0000C6                     	ds	2
   793  0000C8                     dtoa@n:
   794                           	opt callstack 0
   795                           
   796                           ; 8 bytes @ 0x12
   797  0000C8                     	ds	8
   798  0000D0                     dtoa@i:
   799                           	opt callstack 0
   800                           
   801                           ; 2 bytes @ 0x1A
   802  0000D0                     	ds	2
   803  0000D2                     ?_vfpfcnvrt:
   804                           	opt callstack 0
   805  0000D2                     vfpfcnvrt@fp:
   806                           	opt callstack 0
   807                           
   808                           ; 2 bytes @ 0x1C
   809  0000D2                     	ds	2
   810  0000D4                     vfpfcnvrt@fmt:
   811                           	opt callstack 0
   812                           
   813                           ; 2 bytes @ 0x1E
   814  0000D4                     	ds	2
   815  0000D6                     vfpfcnvrt@ap:
   816                           	opt callstack 0
   817                           
   818                           ; 2 bytes @ 0x20
   819  0000D6                     	ds	2
   820  0000D8                     ??_vfpfcnvrt:
   821                           
   822                           ; 1 bytes @ 0x22
   823  0000D8                     	ds	2
   824  0000DA                     vfpfcnvrt@ll:
   825                           	opt callstack 0
   826                           
   827                           ; 8 bytes @ 0x24
   828  0000DA                     	ds	8
   829  0000E2                     vfpfcnvrt@cp:
   830                           	opt callstack 0
   831                           
   832                           ; 2 bytes @ 0x2C
   833  0000E2                     	ds	2
   834  0000E4                     vfpfcnvrt@vp:
   835                           	opt callstack 0
   836                           
   837                           ; 2 bytes @ 0x2E
   838  0000E4                     	ds	2
   839  0000E6                     vfpfcnvrt@c:
   840                           	opt callstack 0
   841                           
   842                           ; 1 bytes @ 0x30
   843  0000E6                     	ds	1
   844  0000E7                     ?_vfprintf:
   845                           	opt callstack 0
   846  0000E7                     vfprintf@fp:
   847                           	opt callstack 0
   848                           
   849                           ; 2 bytes @ 0x31
   850  0000E7                     	ds	2
   851  0000E9                     vfprintf@fmt:
   852                           	opt callstack 0
   853                           
   854                           ; 2 bytes @ 0x33
   855  0000E9                     	ds	2
   856  0000EB                     vfprintf@ap:
   857                           	opt callstack 0
   858                           
   859                           ; 2 bytes @ 0x35
   860  0000EB                     	ds	2
   861  0000ED                     vfprintf@cfmt:
   862                           	opt callstack 0
   863                           
   864                           ; 2 bytes @ 0x37
   865  0000ED                     	ds	2
   866  0000EF                     ?_printf:
   867                           	opt callstack 0
   868  0000EF                     printf@fmt:
   869                           	opt callstack 0
   870                           
   871                           ; 2 bytes @ 0x39
   872  0000EF                     	ds	8
   873  0000F7                     printf@ap:
   874                           	opt callstack 0
   875                           
   876                           ; 2 bytes @ 0x41
   877  0000F7                     	ds	2
   878  0000F9                     ?_receiveMessage:
   879                           	opt callstack 0
   880                           
   881                           ; 2 bytes @ 0x43
   882  0000F9                     	ds	2
   883  0000FB                     receiveMessage@c:
   884                           	opt callstack 0
   885                           
   886                           ; 1 bytes @ 0x45
   887  0000FB                     	ds	1
   888                           
   889                           	psect	cstackCOMRAM
   890  000001                     __pcstackCOMRAM:
   891                           	opt callstack 0
   892  000001                     not_full@buff:
   893                           	opt callstack 0
   894  000001                     i2push@buff:
   895                           	opt callstack 0
   896  000001                     i2pop@buff:
   897                           	opt callstack 0
   898  000001                     i2has_data@buff:
   899                           	opt callstack 0
   900                           
   901                           ; 2 bytes @ 0x0
   902  000001                     	ds	2
   903  000003                     ??i2_pop:
   904  000003                     i2push@d:
   905                           	opt callstack 0
   906                           
   907                           ; 1 bytes @ 0x2
   908  000003                     	ds	1
   909  000004                     ??i2_push:
   910                           
   911                           ; 1 bytes @ 0x3
   912  000004                     	ds	1
   913  000005                     i2pop@d:
   914                           	opt callstack 0
   915                           
   916                           ; 1 bytes @ 0x4
   917  000005                     	ds	3
   918  000008                     i2putch@c:
   919                           	opt callstack 0
   920                           
   921                           ; 1 bytes @ 0x7
   922  000008                     	ds	1
   923  000009                     puts@str:
   924                           	opt callstack 0
   925                           
   926                           ; 2 bytes @ 0x8
   927  000009                     	ds	2
   928  00000B                     puts@c:
   929                           	opt callstack 0
   930                           
   931                           ; 2 bytes @ 0xA
   932  00000B                     	ds	2
   933  00000D                     usart_interrupt@a:
   934                           	opt callstack 0
   935                           
   936                           ; 1 bytes @ 0xC
   937  00000D                     	ds	1
   938  00000E                     ??_event_timer_isr:
   939                           
   940                           ; 1 bytes @ 0xD
   941  00000E                     	ds	6
   942  000014                     ??_EventLowWaterPressureDebounceCallBack:
   943  000014                     ?_strlen:
   944                           	opt callstack 0
   945  000014                     ?___aodiv:
   946                           	opt callstack 0
   947  000014                     ?___aomod:
   948                           	opt callstack 0
   949  000014                     xtochar@x:
   950                           	opt callstack 0
   951  000014                     chartox@c:
   952                           	opt callstack 0
   953  000014                     clear_callback@callback:
   954                           	opt callstack 0
   955  000014                     push@buff:
   956                           	opt callstack 0
   957  000014                     pop@buff:
   958                           	opt callstack 0
   959  000014                     has_data@buff:
   960                           	opt callstack 0
   961  000014                     enable_callback@time_delay:
   962                           	opt callstack 0
   963  000014                     strlen@s:
   964                           	opt callstack 0
   965  000014                     ___aodiv@dividend:
   966                           	opt callstack 0
   967  000014                     ___aomod@dividend:
   968                           	opt callstack 0
   969                           
   970                           ; 8 bytes @ 0x13
   971  000014                     	ds	1
   972  000015                     ??_EventLowWaterPressureCallBack:
   973  000015                     setBaseMessage@msgAddress:
   974                           	opt callstack 0
   975                           
   976                           ; 1 bytes @ 0x14
   977  000015                     	ds	1
   978  000016                     ??_pop:
   979  000016                     ??_setBaseMessage:
   980  000016                     push@d:
   981                           	opt callstack 0
   982  000016                     enable_callback@callback:
   983                           	opt callstack 0
   984  000016                     strlen@a:
   985                           	opt callstack 0
   986                           
   987                           ; 2 bytes @ 0x15
   988  000016                     	ds	1
   989  000017                     ??_push:
   990  000017                     ??_EventFaultStateLEDCallBack:
   991  000017                     ??_monitor_water_pressure:
   992  000017                     
   993                           ; 1 bytes @ 0x16
   994  000017                     	ds	1
   995  000018                     pop@d:
   996                           	opt callstack 0
   997  000018                     _EventFaultStateLEDCallBack$217:
   998                           	opt callstack 0
   999                           
  1000                           ; 2 bytes @ 0x17
  1001  000018                     	ds	1
  1002  000019                     setBaseMessage@messageType:
  1003                           	opt callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x18
  1006  000019                     	ds	1
  1007  00001A                     setBaseMessage@v:
  1008                           	opt callstack 0
  1009  00001A                     _EventFaultStateLEDCallBack$218:
  1010                           	opt callstack 0
  1011                           
  1012                           ; 2 bytes @ 0x19
  1013  00001A                     	ds	1
  1014  00001B                     putch@c:
  1015                           	opt callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x1A
  1018  00001B                     	ds	1
  1019  00001C                     _EventFaultStateLEDCallBack$219:
  1020                           	opt callstack 0
  1021  00001C                     output_message@message:
  1022                           	opt callstack 0
  1023  00001C                     fputc@c:
  1024                           	opt callstack 0
  1025  00001C                     ___aodiv@divisor:
  1026                           	opt callstack 0
  1027  00001C                     ___aomod@divisor:
  1028                           	opt callstack 0
  1029                           
  1030                           ; 8 bytes @ 0x1B
  1031  00001C                     	ds	2
  1032  00001E                     output_message@i:
  1033                           	opt callstack 0
  1034  00001E                     fputc@fp:
  1035                           	opt callstack 0
  1036                           
  1037                           ; 2 bytes @ 0x1D
  1038  00001E                     	ds	2
  1039  000020                     ??_fputc:
  1040  000020                     process_event_timer@i:
  1041                           	opt callstack 0
  1042  000020                     process_set_zones_message@inmessage:
  1043                           	opt callstack 0
  1044  000020                     process_get_status_message@inmessage:
  1045                           	opt callstack 0
  1046  000020                     process_set_address_message@inmessage:
  1047                           	opt callstack 0
  1048  000020                     process_reset_pump@inmessage:
  1049                           	opt callstack 0
  1050                           
  1051                           ; 2 bytes @ 0x1F
  1052  000020                     	ds	2
  1053  000022                     ??_process_set_zones_message:
  1054  000022                     
  1055                           ; 1 bytes @ 0x21
  1056  000022                     	ds	2
  1057  000024                     ___aodiv@counter:
  1058                           	opt callstack 0
  1059  000024                     ___aomod@counter:
  1060                           	opt callstack 0
  1061                           
  1062                           ; 1 bytes @ 0x23
  1063  000024                     	ds	1
  1064  000025                     ?_stoa:
  1065                           	opt callstack 0
  1066  000025                     ___aodiv@sign:
  1067                           	opt callstack 0
  1068  000025                     ___aomod@sign:
  1069                           	opt callstack 0
  1070  000025                     process_message@inmessage:
  1071                           	opt callstack 0
  1072  000025                     stoa@fp:
  1073                           	opt callstack 0
  1074  000025                     fputs@s:
  1075                           	opt callstack 0
  1076                           
  1077                           ; 2 bytes @ 0x24
  1078  000025                     	ds	1
  1079  000026                     ?_abs:
  1080                           	opt callstack 0
  1081  000026                     abs@a:
  1082                           	opt callstack 0
  1083  000026                     ___aodiv@quotient:
  1084                           	opt callstack 0
  1085                           
  1086                           ; 8 bytes @ 0x25
  1087  000026                     	ds	1
  1088  000027                     ??_process_message:
  1089  000027                     stoa@s:
  1090                           	opt callstack 0
  1091  000027                     fputs@fp:
  1092                           	opt callstack 0
  1093                           
  1094                           ; 2 bytes @ 0x26
  1095  000027                     	ds	1
  1096  000028                     ??_abs:
  1097                           
  1098                           ; 1 bytes @ 0x27
  1099  000028                     	ds	1
  1100  000029                     ??_stoa:
  1101  000029                     process_message@msgType:
  1102                           	opt callstack 0
  1103  000029                     fputs@c:
  1104                           	opt callstack 0
  1105                           
  1106                           ; 1 bytes @ 0x28
  1107  000029                     	ds	1
  1108  00002A                     fputs@i:
  1109                           	opt callstack 0
  1110  00002A                     stoa@nuls:
  1111                           	opt callstack 0
  1112                           
  1113                           ; 7 bytes @ 0x29
  1114  00002A                     	ds	2
  1115  00002C                     ?_pad:
  1116                           	opt callstack 0
  1117  00002C                     pad@fp:
  1118                           	opt callstack 0
  1119                           
  1120                           ; 2 bytes @ 0x2B
  1121  00002C                     	ds	2
  1122  00002E                     pad@buf:
  1123                           	opt callstack 0
  1124                           
  1125                           ; 2 bytes @ 0x2D
  1126  00002E                     	ds	2
  1127  000030                     pad@p:
  1128                           	opt callstack 0
  1129                           
  1130                           ; 2 bytes @ 0x2F
  1131  000030                     	ds	1
  1132  000031                     stoa@i:
  1133                           	opt callstack 0
  1134                           
  1135                           ; 2 bytes @ 0x30
  1136  000031                     	ds	1
  1137  000032                     ??_pad:
  1138                           
  1139                           ; 1 bytes @ 0x31
  1140  000032                     	ds	1
  1141  000033                     pad@i:
  1142                           	opt callstack 0
  1143  000033                     stoa@w:
  1144                           	opt callstack 0
  1145                           
  1146                           ; 2 bytes @ 0x32
  1147  000033                     	ds	2
  1148  000035                     pad@w:
  1149                           	opt callstack 0
  1150  000035                     stoa@cp:
  1151                           	opt callstack 0
  1152                           
  1153                           ; 2 bytes @ 0x34
  1154  000035                     	ds	2
  1155  000037                     ??_dtoa:
  1156  000037                     ?_ctoa:
  1157                           	opt callstack 0
  1158  000037                     ctoa@fp:
  1159                           	opt callstack 0
  1160  000037                     stoa@p:
  1161                           	opt callstack 0
  1162                           
  1163                           ; 2 bytes @ 0x36
  1164  000037                     	ds	2
  1165  000039                     ctoa@c:
  1166                           	opt callstack 0
  1167  000039                     stoa@l:
  1168                           	opt callstack 0
  1169                           
  1170                           ; 2 bytes @ 0x38
  1171  000039                     	ds	1
  1172  00003A                     ctoa@w:
  1173                           	opt callstack 0
  1174                           
  1175                           ; 2 bytes @ 0x39
  1176  00003A                     	ds	5
  1177  00003F                     
  1178                           ; 1 bytes @ 0x3E
  1179 ;;
  1180 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1181 ;;
  1182 ;; *************** function _main *****************
  1183 ;; Defined at:
  1184 ;;		line 256 in file "pump_control.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;		None
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  c               1   10[BANK1 ] unsigned char 
  1189 ;;  sendGetMessa   10    0[BANK1 ] unsigned char [10]
  1190 ;;  message         2    0        PTR unsigned char 
  1191 ;;		 -> receiveMessage@message(10), NULL(0), 
  1192 ;;  msg_counter     2    0        unsigned int 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1202 ;;      Params:         0       0       0       0       0       0       0       0       0
  1203 ;;      Locals:         0       0      15       0       0       0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1205 ;;      Totals:         0       0      15       0       0       0       0       0       0
  1206 ;;Total ram usage:       15 bytes
  1207 ;; Hardware stack levels required when called:   15
  1208 ;; This function calls:
  1209 ;;		_checkIfShoudReset
  1210 ;;		_clear_callback
  1211 ;;		_enable_callback
  1212 ;;		_has_data
  1213 ;;		_init
  1214 ;;		_init_event_timer
  1215 ;;		_monitor_water_pressure
  1216 ;;		_pop
  1217 ;;		_printFaultState
  1218 ;;		_printPumpState
  1219 ;;		_printf
  1220 ;;		_process_event_timer
  1221 ;;		_process_get_status_message
  1222 ;;		_process_message
  1223 ;;		_pump_run
  1224 ;;		_push
  1225 ;;		_receiveMessage
  1226 ;;		_ser_int
  1227 ;;		_serial_process_loop
  1228 ;;		_shutdown
  1229 ;;		_standby
  1230 ;;		_start_main
  1231 ;;		_start_pump
  1232 ;;		_toggleLeds
  1233 ;; This function is called by:
  1234 ;;		Startup code after reset
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           	psect	text0
  1239  0010C8                     __ptext0:
  1240                           	opt callstack 0
  1241  0010C8                     _main:
  1242                           	opt callstack 16
  1243                           
  1244                           ;pump_control.c: 257:     char *message;;pump_control.c: 258:     char sendGetMessageBuf
      +                          fer[10] = {'0', '0', '0', '0', '0', '0', '0', '0', '0'};
  1245                           
  1246                           ;incstack = 0
  1247  0010C8  EE21  F038         	lfsr	2,main@F3632
  1248  0010CC  EE11  F049         	lfsr	1,main@sendGetMessageBuffer
  1249  0010D0  0E09               	movlw	9
  1250  0010D2                     u5231:
  1251  0010D2  CFDB FFE3          	movff	plusw2,plusw1
  1252  0010D6  06E8               	decf	wreg,f,c
  1253  0010D8  E2FC               	bc	u5231
  1254                           
  1255                           ;pump_control.c: 259:     init();
  1256  0010DA  ECEE  F007         	call	_init	;wreg free
  1257                           
  1258                           ;pump_control.c: 260:     init_event_timer();
  1259  0010DE  EC99  F009         	call	_init_event_timer	;wreg free
  1260                           
  1261                           ;pump_control.c: 261:     ser_int();
  1262  0010E2  EC2B  F00C         	call	_ser_int	;wreg free
  1263                           
  1264                           ;pump_control.c: 262:     printf("waitingxxxx \n\r");
  1265  0010E6  0E39               	movlw	low STR_18
  1266  0010E8  0100               	movlb	0	; () banked
  1267  0010EA  6FEF               	movwf	printf@fmt& (0+255),b
  1268  0010EC  0E7D               	movlw	high STR_18
  1269  0010EE  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  1270  0010F0  EC04  F00C         	call	_printf	;wreg free
  1271  0010F4                     l5241:
  1272                           
  1273                           ;pump_control.c: 264:             serial_process_loop();
  1274  0010F4  ECBC  F00C         	call	_serial_process_loop	;wreg free
  1275                           
  1276                           ;pump_control.c: 265:             toggleLeds();
  1277  0010F8  EC29  F00D         	call	_toggleLeds	;wreg free
  1278                           
  1279                           ;pump_control.c: 267:             if (has_data(&inbound)) {
  1280  0010FC  0E58               	movlw	low _inbound
  1281  0010FE  6E14               	movwf	has_data@buff,c
  1282  001100  0E02               	movlw	high _inbound
  1283  001102  6E15               	movwf	has_data@buff+1,c
  1284  001104  EC07  F00D         	call	_has_data	;wreg free
  1285  001108  0900               	iorlw	0
  1286  00110A  B4D8               	btfsc	status,2,c
  1287  00110C  D010               	goto	l5249
  1288                           
  1289                           ;pump_control.c: 268:                 char c = pop(&inbound);
  1290  00110E  0E58               	movlw	low _inbound
  1291  001110  6E14               	movwf	pop@buff,c
  1292  001112  0E02               	movlw	high _inbound
  1293  001114  6E15               	movwf	pop@buff+1,c
  1294  001116  EC1A  F007         	call	_pop	;wreg free
  1295  00111A  0101               	movlb	1	; () banked
  1296  00111C  6F53               	movwf	main@c& (0+255),b
  1297                           
  1298                           ;pump_control.c: 270:                 push(&outbound,c );
  1299  00111E  0E54               	movlw	low _outbound
  1300  001120  6E14               	movwf	push@buff,c
  1301  001122  0E01               	movlw	high _outbound
  1302  001124  6E15               	movwf	push@buff+1,c
  1303  001126  C153  F016         	movff	main@c,push@d
  1304  00112A  EC39  F009         	call	_push	;wreg free
  1305  00112E                     l5249:
  1306                           
  1307                           ;pump_control.c: 274:              process_event_timer();
  1308  00112E  ECBF  F004         	call	_process_event_timer	;wreg free
  1309  001132  D7E0               	goto	l5241
  1310  001134                     __end_of_main:
  1311                           	opt callstack 0
  1312                           
  1313 ;; *************** function _toggleLeds *****************
  1314 ;; Defined at:
  1315 ;;		line 250 in file "pump_control.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      void 
  1322 ;; Registers used:
  1323 ;;		status,2, status,0
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1329 ;;      Params:         0       0       0       0       0       0       0       0       0
  1330 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1331 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1332 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1333 ;;Total ram usage:        0 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    5
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text1
  1344  001A52                     __ptext1:
  1345                           	opt callstack 0
  1346  001A52                     _toggleLeds:
  1347                           	opt callstack 25
  1348                           
  1349                           ;pump_control.c: 251:     PORTD++;
  1350                           
  1351                           ;incstack = 0
  1352  001A52  2A83               	incf	3971,f,c	;volatile
  1353  001A54  0012               	return		;funcret
  1354  001A56                     __end_of_toggleLeds:
  1355                           	opt callstack 0
  1356                           
  1357 ;; *************** function _start_pump *****************
  1358 ;; Defined at:
  1359 ;;		line 3 in file "start_pump_state.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;		None
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1373 ;;      Params:         0       0       0       0       0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1376 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1377 ;;Total ram usage:        0 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    7
  1380 ;; This function calls:
  1381 ;;		_clear_callback
  1382 ;;		_clear_callback_for_shutdown
  1383 ;;		_enable_callback
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text2
  1390  000C4E                     __ptext2:
  1391                           	opt callstack 0
  1392  000C4E                     _start_pump:
  1393                           	opt callstack 23
  1394                           
  1395                           ;start_pump_state.c: 8:   if (( PORTAbits.RA4)) {
  1396                           
  1397                           ;incstack = 0
  1398  000C4E  A880               	btfss	3968,4,c	;volatile
  1399  000C50  D009               	goto	l5155
  1400                           
  1401                           ;start_pump_state.c: 9:     fault_flags.lwl_fault = 1;
  1402  000C52  8047               	bsf	_fault_flags,0,c
  1403                           
  1404                           ;start_pump_state.c: 10:     enable_callback (EventLowWaterLevel, (30*(4000000/256/4/256
      +                          )));
  1405  000C54  0E01               	movlw	1
  1406  000C56  6E15               	movwf	enable_callback@time_delay+1,c
  1407  000C58  0EC2               	movlw	194
  1408  000C5A  6E14               	movwf	enable_callback@time_delay,c
  1409  000C5C  0E00               	movlw	0
  1410  000C5E  EC91  F00A         	call	_enable_callback
  1411  000C62  0012               	return	
  1412  000C64                     l5155:
  1413                           
  1414                           ;start_pump_state.c: 16:   if (state != startpumpWaitState) {
  1415  000C64  0E03               	movlw	3
  1416  000C66  184B               	xorwf	_state,w,c
  1417  000C68  B4D8               	btfsc	status,2,c
  1418  000C6A  D002               	goto	l645
  1419                           
  1420                           ;start_pump_state.c: 17:     { PORTBbits.RB5 = (1); fault_flags.boostPumpBit = (1);};
  1421  000C6C  8A81               	bsf	3969,5,c	;volatile
  1422  000C6E  8C47               	bsf	_fault_flags,6,c
  1423  000C70                     l645:
  1424                           
  1425                           ;start_pump_state.c: 20:   if (!( (!PORTBbits.RB3) || (zones != 0) )) {
  1426  000C70  A681               	btfss	3969,3,c	;volatile
  1427  000C72  D009               	goto	l646
  1428  000C74  5045               	movf	_zones,w,c
  1429  000C76  1046               	iorwf	_zones+1,w,c
  1430  000C78  A4D8               	btfss	status,2,c
  1431  000C7A  D005               	goto	l646
  1432                           
  1433                           ;start_pump_state.c: 23:     state = shutdownState;
  1434  000C7C  0E01               	movlw	1
  1435  000C7E  6E4B               	movwf	_state,c
  1436                           
  1437                           ;start_pump_state.c: 24:      clear_callback_for_shutdown();
  1438  000C80  ECC5  F00B         	call	_clear_callback_for_shutdown	;wreg free
  1439  000C84  0012               	return	
  1440  000C86                     l646:
  1441                           
  1442                           ;start_pump_state.c: 41:     if (!fault_flags.wpOkBit) {
  1443  000C86  B847               	btfsc	_fault_flags,4,c
  1444  000C88  D034               	goto	l5199
  1445                           
  1446                           ;start_pump_state.c: 42:       if (state == startpumpInitialState) {
  1447  000C8A  0E02               	movlw	2
  1448  000C8C  184B               	xorwf	_state,w,c
  1449  000C8E  A4D8               	btfss	status,2,c
  1450  000C90  D00C               	goto	l5179
  1451                           
  1452                           ;start_pump_state.c: 46:  timer_events[EventLowWaterPressure].flag_bit = 0;
  1453  000C92  0100               	movlb	0	; () banked
  1454  000C94  936A               	bcf	(_timer_events+10)& (0+255),1,b	;volatile
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;start_pump_state.c: 47:  timer_events[EventLowWaterPressure].next_state = startpumpWait
      +                          State;
  1458  000C96  0E03               	movlw	3
  1459  000C98  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;start_pump_state.c: 48:  enable_callback (EventLowWaterPressure, (30*(4000000/256/4/256
      +                          )));
  1463  000C9A  0E01               	movlw	1
  1464  000C9C  6E15               	movwf	enable_callback@time_delay+1,c
  1465  000C9E  0EC2               	movlw	194
  1466  000CA0  6E14               	movwf	enable_callback@time_delay,c
  1467  000CA2  0E01               	movlw	1
  1468  000CA4  EC91  F00A         	call	_enable_callback
  1469  000CA8  0012               	return	
  1470  000CAA                     l5179:
  1471                           
  1472                           ;start_pump_state.c: 52:       if (state == startpumpWaitState) {
  1473  000CAA  0E03               	movlw	3
  1474  000CAC  184B               	xorwf	_state,w,c
  1475  000CAE  A4D8               	btfss	status,2,c
  1476  000CB0  D00E               	goto	l5189
  1477                           
  1478                           ;start_pump_state.c: 56:  { PORTBbits.RB5 = (0); fault_flags.boostPumpBit = (0);};
  1479  000CB2  9A81               	bcf	3969,5,c	;volatile
  1480  000CB4  9C47               	bcf	_fault_flags,6,c
  1481                           
  1482                           ;start_pump_state.c: 58:  timer_events[EventLowWaterPressure].flag_bit = 0;
  1483  000CB6  0100               	movlb	0	; () banked
  1484  000CB8  936A               	bcf	(_timer_events+10)& (0+255),1,b	;volatile
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;start_pump_state.c: 59:  timer_events[EventLowWaterPressure].next_state = startpumpSeco
      +                          ndLWPCheckState;
  1488  000CBA  0E04               	movlw	4
  1489  000CBC  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;start_pump_state.c: 60:  enable_callback (EventLowWaterPressure, (30*(4000000/256/4/256
      +                          )));
  1493  000CBE  0E01               	movlw	1
  1494  000CC0  6E15               	movwf	enable_callback@time_delay+1,c
  1495  000CC2  0EC2               	movlw	194
  1496  000CC4  6E14               	movwf	enable_callback@time_delay,c
  1497  000CC6  0E01               	movlw	1
  1498  000CC8  EC91  F00A         	call	_enable_callback
  1499  000CCC  0012               	return	
  1500  000CCE                     l5189:
  1501                           
  1502                           ;start_pump_state.c: 64:       if (state == startpumpSecondLWPCheckState) {
  1503  000CCE  0E04               	movlw	4
  1504  000CD0  184B               	xorwf	_state,w,c
  1505  000CD2  A4D8               	btfss	status,2,c
  1506  000CD4  D011               	goto	l5201
  1507                           
  1508                           ;start_pump_state.c: 68:  { PORTBbits.RB5 = (1); fault_flags.boostPumpBit = (1);};
  1509  000CD6  8A81               	bsf	3969,5,c	;volatile
  1510  000CD8  8C47               	bsf	_fault_flags,6,c
  1511                           
  1512                           ;start_pump_state.c: 70:  timer_events[EventLowWaterPressure].flag_bit = 1;
  1513  000CDA  0100               	movlb	0	; () banked
  1514  000CDC  836A               	bsf	(_timer_events+10)& (0+255),1,b	;volatile
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;start_pump_state.c: 71:  timer_events[EventLowWaterPressure].next_state = shutdownState
      +                          ;
  1518  000CDE  0E01               	movlw	1
  1519  000CE0  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;start_pump_state.c: 72:  enable_callback (EventLowWaterPressure, (30*(4000000/256/4/256
      +                          )));
  1523  000CE2  0E01               	movlw	1
  1524  000CE4  6E15               	movwf	enable_callback@time_delay+1,c
  1525  000CE6  0EC2               	movlw	194
  1526  000CE8  6E14               	movwf	enable_callback@time_delay,c
  1527  000CEA  0E01               	movlw	1
  1528  000CEC  EC91  F00A         	call	_enable_callback
  1529  000CF0  0012               	return	
  1530  000CF2                     l5199:
  1531                           
  1532                           ;start_pump_state.c: 79:       clear_callback (EventLowWaterPressure);
  1533  000CF2  0E01               	movlw	1
  1534  000CF4  ECC9  F00C         	call	_clear_callback
  1535  000CF8                     l5201:
  1536                           
  1537                           ;start_pump_state.c: 83:     state = startmainState;
  1538  000CF8  0E05               	movlw	5
  1539  000CFA  6E4B               	movwf	_state,c
  1540  000CFC  0012               	return		;funcret
  1541  000CFE                     __end_of_start_pump:
  1542                           	opt callstack 0
  1543                           
  1544 ;; *************** function _start_main *****************
  1545 ;; Defined at:
  1546 ;;		line 4 in file "start_main.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1560 ;;      Params:         0       0       0       0       0       0       0       0       0
  1561 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1563 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1564 ;;Total ram usage:        0 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    7
  1567 ;; This function calls:
  1568 ;;		_clear_callback
  1569 ;;		_enable_callback
  1570 ;;		_monitor_pump_run
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text3
  1577  0015AA                     __ptext3:
  1578                           	opt callstack 0
  1579  0015AA                     _start_main:
  1580                           	opt callstack 23
  1581                           
  1582                           ;start_main.c: 12:     { PORTBbits.RB5 = (1); fault_flags.boostPumpBit = (1);};
  1583                           
  1584                           ;incstack = 0
  1585  0015AA  8A81               	bsf	3969,5,c	;volatile
  1586  0015AC  8C47               	bsf	_fault_flags,6,c
  1587                           
  1588                           ;start_main.c: 13:     { PORTAbits.RA1 = (1); fault_flags.mainPumpBit = (1);};
  1589  0015AE  8280               	bsf	3968,1,c	;volatile
  1590  0015B0  8A47               	bsf	_fault_flags,5,c
  1591                           
  1592                           ;start_main.c: 14:     monitor_pump_run();
  1593  0015B2  EC7F  F006         	call	_monitor_pump_run	;wreg free
  1594                           
  1595                           ;start_main.c: 16:     if (!( PORTAbits.RA5)) {
  1596  0015B6  BA80               	btfsc	3968,5,c	;volatile
  1597  0015B8  D006               	goto	l619
  1598                           
  1599                           ;start_main.c: 17:         clear_callback(EventLowFogPressure);
  1600  0015BA  0E03               	movlw	3
  1601  0015BC  ECC9  F00C         	call	_clear_callback
  1602                           
  1603                           ;start_main.c: 18:         state = pumprunState;
  1604  0015C0  0E06               	movlw	6
  1605  0015C2  6E4B               	movwf	_state,c
  1606                           
  1607                           ;start_main.c: 19:     } else {
  1608  0015C4  0012               	return	
  1609  0015C6                     l619:
  1610                           
  1611                           ;start_main.c: 20:         if (!timer_events[EventLowFogPressure].active) {
  1612  0015C6  0100               	movlb	0	; () banked
  1613  0015C8  B17A               	btfsc	(_timer_events+26)& (0+255),0,b	;volatile
  1614  0015CA  0012               	return	
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;start_main.c: 21:             timer_events[EventLowFogPressure].flag_bit = 0;
  1618  0015CC  937A               	bcf	(_timer_events+26)& (0+255),1,b	;volatile
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;start_main.c: 22:             timer_events[EventLowFogPressure].flag_data = (3*(4000000
      +                          /256/4/256));
  1622  0015CE  0E00               	movlw	0
  1623  0015D0  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  1624  0015D2  0E2D               	movlw	45
  1625  0015D4  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;start_main.c: 23:             enable_callback(EventLowFogPressure, (30*(4000000/256/4/2
      +                          56)));
  1629  0015D6  0E01               	movlw	1
  1630  0015D8  6E15               	movwf	enable_callback@time_delay+1,c
  1631  0015DA  0EC2               	movlw	194
  1632  0015DC  6E14               	movwf	enable_callback@time_delay,c
  1633  0015DE  0E03               	movlw	3
  1634  0015E0  EC91  F00A         	call	_enable_callback
  1635  0015E4  0012               	return		;funcret
  1636  0015E6                     __end_of_start_main:
  1637                           	opt callstack 0
  1638                           
  1639 ;; *************** function _standby *****************
  1640 ;; Defined at:
  1641 ;;		line 3 in file "standby_state.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;		None
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      void 
  1648 ;; Registers used:
  1649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1655 ;;      Params:         0       0       0       0       0       0       0       0       0
  1656 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1658 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1659 ;;Total ram usage:        0 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    6
  1662 ;; This function calls:
  1663 ;;		_clear_callback
  1664 ;;		_enable_callback
  1665 ;; This function is called by:
  1666 ;;		_main
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text4
  1671  001390                     __ptext4:
  1672                           	opt callstack 0
  1673  001390                     _standby:
  1674                           	opt callstack 24
  1675                           
  1676                           ;standby_state.c: 24:   if (!( PORTAbits.RA4)) {
  1677                           
  1678                           ;incstack = 0
  1679  001390  B880               	btfsc	3968,4,c	;volatile
  1680  001392  D005               	goto	l594
  1681                           
  1682                           ;standby_state.c: 27:     clear_callback (EventLowWaterLevel);
  1683  001394  0E00               	movlw	0
  1684  001396  ECC9  F00C         	call	_clear_callback
  1685                           
  1686                           ;standby_state.c: 28:     fault_flags.lwl_fault = 0;
  1687  00139A  9047               	bcf	_fault_flags,0,c
  1688                           
  1689                           ;standby_state.c: 29:   }
  1690  00139C  D008               	goto	l5117
  1691  00139E                     l594:
  1692                           
  1693                           ;standby_state.c: 31:     fault_flags.lwl_fault = 1;
  1694  00139E  8047               	bsf	_fault_flags,0,c
  1695                           
  1696                           ;standby_state.c: 32:     enable_callback (EventLowWaterLevel, (30*(4000000/256/4/256)))
      +                          ;
  1697  0013A0  0E01               	movlw	1
  1698  0013A2  6E15               	movwf	enable_callback@time_delay+1,c
  1699  0013A4  0EC2               	movlw	194
  1700  0013A6  6E14               	movwf	enable_callback@time_delay,c
  1701  0013A8  0E00               	movlw	0
  1702  0013AA  EC91  F00A         	call	_enable_callback
  1703  0013AE                     l5117:
  1704                           
  1705                           ;standby_state.c: 37:   { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);};
  1706  0013AE  9280               	bcf	3968,1,c	;volatile
  1707  0013B0  9A47               	bcf	_fault_flags,5,c
  1708                           
  1709                           ;standby_state.c: 39:   { PORTBbits.RB5 = (0); fault_flags.boostPumpBit = (0);};
  1710  0013B2  9A81               	bcf	3969,5,c	;volatile
  1711  0013B4  9C47               	bcf	_fault_flags,6,c
  1712                           
  1713                           ;standby_state.c: 40:   if (!inIdleDumpHour){
  1714  0013B6  504A               	movf	_inIdleDumpHour,w,c
  1715  0013B8  A4D8               	btfss	status,2,c
  1716  0013BA  D002               	goto	l596
  1717                           
  1718                           ;standby_state.c: 41:      { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  1719  0013BC  9480               	bcf	3968,2,c	;volatile
  1720  0013BE  9048               	bcf	_fault_flags+1,0,c
  1721  0013C0                     l596:
  1722                           
  1723                           ;standby_state.c: 48:   if (( (!PORTBbits.RB3) || (zones != 0) )
  1724  0013C0  A681               	btfss	3969,3,c	;volatile
  1725  0013C2  D004               	goto	u5060
  1726  0013C4  5045               	movf	_zones,w,c
  1727  0013C6  1046               	iorwf	_zones+1,w,c
  1728  0013C8  B4D8               	btfsc	status,2,c
  1729  0013CA  0012               	return	
  1730  0013CC                     u5060:
  1731  0013CC  B047               	btfsc	_fault_flags,0,c
  1732  0013CE  0012               	return	
  1733  0013D0  B247               	btfsc	_fault_flags,1,c
  1734  0013D2  0012               	return	
  1735  0013D4  B447               	btfsc	_fault_flags,2,c
  1736  0013D6  0012               	return	
  1737  0013D8  B647               	btfsc	_fault_flags,3,c
  1738  0013DA  0012               	return	
  1739                           
  1740                           ;standby_state.c: 52:       && !fault_flags.po_fault) {;standby_state.c: 54:     state =
      +                           startpumpInitialState;
  1741  0013DC  0E02               	movlw	2
  1742  0013DE  6E4B               	movwf	_state,c
  1743                           
  1744                           ;standby_state.c: 55:     inIdleDumpHour = 0;
  1745  0013E0  0E00               	movlw	0
  1746  0013E2  6E4A               	movwf	_inIdleDumpHour,c
  1747                           
  1748                           ;standby_state.c: 56:      { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  1749  0013E4  9480               	bcf	3968,2,c	;volatile
  1750  0013E6  9048               	bcf	_fault_flags+1,0,c
  1751  0013E8  0012               	return		;funcret
  1752  0013EA                     __end_of_standby:
  1753                           	opt callstack 0
  1754                           
  1755 ;; *************** function _shutdown *****************
  1756 ;; Defined at:
  1757 ;;		line 4 in file "shutdown_state.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1771 ;;      Params:         0       0       0       0       0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1774 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1775 ;;Total ram usage:        0 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    6
  1778 ;; This function calls:
  1779 ;;		_enable_callback
  1780 ;; This function is called by:
  1781 ;;		_main
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text5
  1786  001940                     __ptext5:
  1787                           	opt callstack 0
  1788  001940                     _shutdown:
  1789                           	opt callstack 24
  1790                           
  1791                           ;shutdown_state.c: 14:   { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);};
  1792                           
  1793                           ;incstack = 0
  1794  001940  9280               	bcf	3968,1,c	;volatile
  1795  001942  9A47               	bcf	_fault_flags,5,c
  1796                           
  1797                           ;shutdown_state.c: 15:   { PORTBbits.RB5 = (0); fault_flags.boostPumpBit = (0);};
  1798  001944  9A81               	bcf	3969,5,c	;volatile
  1799  001946  9C47               	bcf	_fault_flags,6,c
  1800                           
  1801                           ;shutdown_state.c: 16:   { PORTAbits.RA2 = (1); fault_flags.dumpSolenoidBit = (1);};
  1802  001948  8480               	bsf	3968,2,c	;volatile
  1803  00194A  8048               	bsf	_fault_flags+1,0,c
  1804                           
  1805                           ;shutdown_state.c: 20:   enable_callback (EventDumpSolenoid, (2*(4000000/256/4/256)));
  1806  00194C  0E00               	movlw	0
  1807  00194E  6E15               	movwf	enable_callback@time_delay+1,c
  1808  001950  0E1E               	movlw	30
  1809  001952  6E14               	movwf	enable_callback@time_delay,c
  1810  001954  0E06               	movlw	6
  1811  001956  EC91  F00A         	call	_enable_callback
  1812  00195A  0012               	return		;funcret
  1813  00195C                     __end_of_shutdown:
  1814                           	opt callstack 0
  1815                           
  1816 ;; *************** function _serial_process_loop *****************
  1817 ;; Defined at:
  1818 ;;		line 106 in file "serial.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;		None
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;		None
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1832 ;;      Params:         0       0       0       0       0       0       0       0       0
  1833 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1835 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1836 ;;Total ram usage:        0 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    6
  1839 ;; This function calls:
  1840 ;;		_has_data
  1841 ;; This function is called by:
  1842 ;;		_main
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text6
  1847  001978                     __ptext6:
  1848                           	opt callstack 0
  1849  001978                     _serial_process_loop:
  1850                           	opt callstack 24
  1851                           
  1852                           ;serial.c: 108:     if (TRMT && has_data(&outbound)) {
  1853                           
  1854                           ;incstack = 0
  1855  001978  A2AC               	btfss	4012,1,c	;volatile
  1856  00197A  0012               	return	
  1857  00197C  0E54               	movlw	low _outbound
  1858  00197E  6E14               	movwf	has_data@buff,c
  1859  001980  0E01               	movlw	high _outbound
  1860  001982  6E15               	movwf	has_data@buff+1,c
  1861  001984  EC07  F00D         	call	_has_data	;wreg free
  1862  001988  0900               	iorlw	0
  1863  00198A  B4D8               	btfsc	status,2,c
  1864  00198C  0012               	return	
  1865                           
  1866                           ;serial.c: 110:         TXIE = 1;
  1867  00198E  889D               	bsf	3997,4,c	;volatile
  1868  001990  0012               	return		;funcret
  1869  001992                     __end_of_serial_process_loop:
  1870                           	opt callstack 0
  1871                           
  1872 ;; *************** function _has_data *****************
  1873 ;; Defined at:
  1874 ;;		line 51 in file "serial_buffer.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  buff            2   19[COMRAM] PTR struct .
  1877 ;;		 -> outbound(260), inbound(260), 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      unsigned char 
  1882 ;; Registers used:
  1883 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1889 ;;      Params:         2       0       0       0       0       0       0       0       0
  1890 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1891 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1892 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1893 ;;Total ram usage:        2 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    5
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;;		_serial_process_loop
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text7
  1905  001A0E                     __ptext7:
  1906                           	opt callstack 0
  1907  001A0E                     _has_data:
  1908                           	opt callstack 24
  1909                           
  1910                           ;serial_buffer.c: 52:     return buff->length;
  1911                           
  1912                           ;incstack = 0
  1913  001A0E  EE21 F002          	lfsr	2,258
  1914  001A12  5014               	movf	has_data@buff,w,c
  1915  001A14  26D9               	addwf	fsr2l,f,c
  1916  001A16  5015               	movf	has_data@buff+1,w,c
  1917  001A18  22DA               	addwfc	fsr2h,f,c
  1918  001A1A  50DF               	movf	indf2,w,c
  1919  001A1C  0012               	return		;funcret
  1920  001A1E                     __end_of_has_data:
  1921                           	opt callstack 0
  1922                           
  1923 ;; *************** function _receiveMessage *****************
  1924 ;; Defined at:
  1925 ;;		line 222 in file "serial.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;		None
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  c               1   69[BANK0 ] unsigned char 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  2   67[BANK0 ] PTR unsigned char 
  1932 ;; Registers used:
  1933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1939 ;;      Params:         0       2       0       0       0       0       0       0       0
  1940 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1942 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1943 ;;Total ram usage:        3 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:   14
  1946 ;; This function calls:
  1947 ;;		_getch_timeout
  1948 ;;		_printf
  1949 ;; This function is called by:
  1950 ;;		_main
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text8
  1955  000AEA                     __ptext8:
  1956                           	opt callstack 0
  1957  000AEA                     _receiveMessage:
  1958                           	opt callstack 16
  1959                           
  1960                           ;serial.c: 224:   static char message[10];;serial.c: 225:   char c;;serial.c: 226:   sta
      +                          tic int len = 0;;serial.c: 228:   c = getch_timeout ();
  1961                           
  1962                           ;incstack = 0
  1963  000AEA  ECD5  F00C         	call	_getch_timeout	;wreg free
  1964  000AEE  0100               	movlb	0	; () banked
  1965  000AF0  6FFB               	movwf	receiveMessage@c& (0+255),b
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;serial.c: 229:   if (0 == c) {
  1969  000AF2  51FB               	movf	receiveMessage@c& (0+255),w,b
  1970  000AF4  A4D8               	btfss	status,2,c
  1971  000AF6  D005               	goto	l5047
  1972  000AF8                     u4960:
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;serial.c: 231:     return ((void*)0);
  1976  000AF8  0E00               	movlw	0
  1977  000AFA  6FF9               	movwf	?_receiveMessage& (0+255),b
  1978  000AFC  0E00               	movlw	0
  1979  000AFE  6FFA               	movwf	(?_receiveMessage+1)& (0+255),b
  1980  000B00  0012               	return	
  1981  000B02                     l5047:
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;serial.c: 234:   if ((0 == len) && (c != '{')) {
  1985  000B02  51AA               	movf	receiveMessage@len& (0+255),w,b
  1986  000B04  11AB               	iorwf	(receiveMessage@len+1)& (0+255),w,b
  1987  000B06  A4D8               	btfss	status,2,c
  1988  000B08  D004               	goto	l5055
  1989                           
  1990                           ; BSR set to: 0
  1991  000B0A  0E7B               	movlw	123
  1992  000B0C  19FB               	xorwf	receiveMessage@c& (0+255),w,b
  1993  000B0E  A4D8               	btfss	status,2,c
  1994  000B10  D7F3               	goto	u4960
  1995  000B12                     l5055:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;serial.c: 239:   message[len] = c;
  1999  000B12  0E20               	movlw	low receiveMessage@message
  2000  000B14  25AA               	addwf	receiveMessage@len& (0+255),w,b
  2001  000B16  6ED9               	movwf	fsr2l,c
  2002  000B18  0E01               	movlw	high receiveMessage@message
  2003  000B1A  21AB               	addwfc	(receiveMessage@len+1)& (0+255),w,b
  2004  000B1C  6EDA               	movwf	fsr2h,c
  2005  000B1E  C0FB  FFDF         	movff	receiveMessage@c,indf2
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;serial.c: 240:   printf("%c",c);
  2009  000B22  0EBC               	movlw	low STR_22
  2010  000B24  6FEF               	movwf	printf@fmt& (0+255),b
  2011  000B26  0E7D               	movlw	high STR_22
  2012  000B28  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  2013  000B2A  C0FB  F0F1         	movff	receiveMessage@c,?_printf+2
  2014  000B2E  6BF2               	clrf	(?_printf+3)& (0+255),b
  2015  000B30  EC04  F00C         	call	_printf	;wreg free
  2016                           
  2017                           ;serial.c: 241:   len++;
  2018  000B34  0100               	movlb	0	; () banked
  2019  000B36  4BAA               	infsnz	receiveMessage@len& (0+255),f,b
  2020  000B38  2BAB               	incf	(receiveMessage@len+1)& (0+255),f,b
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;serial.c: 242:   if (len >= 10) {
  2024  000B3A  BFAB               	btfsc	(receiveMessage@len+1)& (0+255),7,b
  2025  000B3C  D00B               	goto	l5069
  2026  000B3E  51AB               	movf	(receiveMessage@len+1)& (0+255),w,b
  2027  000B40  E104               	bnz	u4990
  2028  000B42  0E0A               	movlw	10
  2029  000B44  5DAA               	subwf	receiveMessage@len& (0+255),w,b
  2030  000B46  A0D8               	btfss	status,0,c
  2031  000B48  D005               	goto	l5069
  2032  000B4A                     u4990:
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;serial.c: 244:     len = 0;
  2036  000B4A  0E00               	movlw	0
  2037  000B4C  6FAB               	movwf	(receiveMessage@len+1)& (0+255),b
  2038  000B4E  0E00               	movlw	0
  2039  000B50  6FAA               	movwf	receiveMessage@len& (0+255),b
  2040  000B52  D7D2               	goto	u4960
  2041  000B54                     l5069:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;serial.c: 247:   if ('}' == c) {
  2045  000B54  0E7D               	movlw	125
  2046  000B56  19FB               	xorwf	receiveMessage@c& (0+255),w,b
  2047  000B58  A4D8               	btfss	status,2,c
  2048  000B5A  D7CE               	goto	u4960
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;serial.c: 248:     message[len] = 0;
  2052  000B5C  0E20               	movlw	low receiveMessage@message
  2053  000B5E  25AA               	addwf	receiveMessage@len& (0+255),w,b
  2054  000B60  6ED9               	movwf	fsr2l,c
  2055  000B62  0E01               	movlw	high receiveMessage@message
  2056  000B64  21AB               	addwfc	(receiveMessage@len+1)& (0+255),w,b
  2057  000B66  6EDA               	movwf	fsr2h,c
  2058  000B68  0E00               	movlw	0
  2059  000B6A  6EDF               	movwf	indf2,c
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;serial.c: 249:     printf("Message%s %d\r\n",message,len);
  2063  000B6C  0E2A               	movlw	low STR_23
  2064  000B6E  6FEF               	movwf	printf@fmt& (0+255),b
  2065  000B70  0E7D               	movlw	high STR_23
  2066  000B72  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  2067  000B74  0E20               	movlw	low receiveMessage@message
  2068  000B76  6FF1               	movwf	(?_printf+2)& (0+255),b
  2069  000B78  0E01               	movlw	high receiveMessage@message
  2070  000B7A  6FF2               	movwf	(?_printf+3)& (0+255),b
  2071  000B7C  C0AA  F0F3         	movff	receiveMessage@len,?_printf+4
  2072  000B80  C0AB  F0F4         	movff	receiveMessage@len+1,?_printf+5
  2073  000B84  EC04  F00C         	call	_printf	;wreg free
  2074                           
  2075                           ;serial.c: 250:     len = 0;
  2076  000B88  0E00               	movlw	0
  2077  000B8A  0100               	movlb	0	; () banked
  2078  000B8C  6FAB               	movwf	(receiveMessage@len+1)& (0+255),b
  2079  000B8E  0E00               	movlw	0
  2080  000B90  6FAA               	movwf	receiveMessage@len& (0+255),b
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;serial.c: 252:     return message;
  2084  000B92  0E20               	movlw	low receiveMessage@message
  2085  000B94  6FF9               	movwf	?_receiveMessage& (0+255),b
  2086  000B96  0E01               	movlw	high receiveMessage@message
  2087  000B98  6FFA               	movwf	(?_receiveMessage+1)& (0+255),b
  2088                           
  2089                           ; BSR set to: 0
  2090  000B9A  0012               	return		;funcret
  2091  000B9C                     __end_of_receiveMessage:
  2092                           	opt callstack 0
  2093                           
  2094 ;; *************** function _getch_timeout *****************
  2095 ;; Defined at:
  2096 ;;		line 195 in file "serial.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      unsigned char 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2110 ;;      Params:         0       0       0       0       0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2113 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2114 ;;Total ram usage:        0 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    5
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_receiveMessage
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text9
  2125  0019AA                     __ptext9:
  2126                           	opt callstack 0
  2127  0019AA                     _getch_timeout:
  2128                           	opt callstack 24
  2129                           
  2130                           ;serial.c: 197:   if (OERR) {
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;incstack = 0
  2134  0019AA  A2AB               	btfss	4011,1,c	;volatile
  2135  0019AC  D002               	goto	l445
  2136                           
  2137                           ;serial.c: 198:     CREN = 0;
  2138  0019AE  98AB               	bcf	4011,4,c	;volatile
  2139                           
  2140                           ;serial.c: 199:     CREN = 1;
  2141  0019B0  88AB               	bsf	4011,4,c	;volatile
  2142  0019B2                     l445:
  2143                           
  2144                           ;serial.c: 202:   CREN = 1;
  2145  0019B2  88AB               	bsf	4011,4,c	;volatile
  2146                           
  2147                           ;serial.c: 203:   if (!RCIF) {
  2148  0019B4  BA9E               	btfsc	3998,5,c	;volatile
  2149  0019B6  D002               	goto	l4911
  2150                           
  2151                           ;serial.c: 204:     return 0;
  2152  0019B8  0E00               	movlw	0
  2153  0019BA  0012               	return	
  2154  0019BC                     l4911:
  2155                           
  2156                           ;serial.c: 207:   return (RCREG);
  2157  0019BC  50AE               	movf	4014,w,c	;volatile
  2158  0019BE  0012               	return		;funcret
  2159  0019C0                     __end_of_getch_timeout:
  2160                           	opt callstack 0
  2161                           
  2162 ;; *************** function _pump_run *****************
  2163 ;; Defined at:
  2164 ;;		line 4 in file "pump_run.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;		None
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      void 
  2171 ;; Registers used:
  2172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2178 ;;      Params:         0       0       0       0       0       0       0       0       0
  2179 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2180 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2181 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2182 ;;Total ram usage:        0 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; Hardware stack levels required when called:    7
  2185 ;; This function calls:
  2186 ;;		_clear_callback
  2187 ;;		_enable_callback
  2188 ;;		_monitor_pump_run
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text10
  2195  00175A                     __ptext10:
  2196                           	opt callstack 0
  2197  00175A                     _pump_run:
  2198                           	opt callstack 23
  2199                           
  2200                           ;pump_run.c: 15:    monitor_pump_run();
  2201                           
  2202                           ;incstack = 0
  2203  00175A  EC7F  F006         	call	_monitor_pump_run	;wreg free
  2204                           
  2205                           ;pump_run.c: 17:  if (!( PORTAbits.RA5)) {
  2206  00175E  BA80               	btfsc	3968,5,c	;volatile
  2207  001760  D004               	goto	l309
  2208                           
  2209                           ;pump_run.c: 18:       clear_callback (EventLowFogPressure);
  2210  001762  0E03               	movlw	3
  2211  001764  ECC9  F00C         	call	_clear_callback
  2212                           
  2213                           ;pump_run.c: 19:   } else {
  2214  001768  0012               	return	
  2215  00176A                     l309:
  2216                           
  2217                           ;pump_run.c: 20:     if (!timer_events[EventLowFogPressure].active) {
  2218  00176A  0100               	movlb	0	; () banked
  2219  00176C  B17A               	btfsc	(_timer_events+26)& (0+255),0,b	;volatile
  2220  00176E  0012               	return	
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;pump_run.c: 21:       timer_events[EventLowFogPressure].flag_bit = 1;
  2224  001770  837A               	bsf	(_timer_events+26)& (0+255),1,b	;volatile
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;pump_run.c: 22:       timer_events[EventLowFogPressure].flag_data = (15*(4000000/256/4/
      +                          256));
  2228  001772  0E00               	movlw	0
  2229  001774  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  2230  001776  0EE1               	movlw	225
  2231  001778  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;pump_run.c: 23:       enable_callback (EventLowFogPressure, (15*(4000000/256/4/256)));
  2235  00177A  0E00               	movlw	0
  2236  00177C  6E15               	movwf	enable_callback@time_delay+1,c
  2237  00177E  0EE1               	movlw	225
  2238  001780  6E14               	movwf	enable_callback@time_delay,c
  2239  001782  0E03               	movlw	3
  2240  001784  EC91  F00A         	call	_enable_callback
  2241  001788  0012               	return		;funcret
  2242  00178A                     __end_of_pump_run:
  2243                           	opt callstack 0
  2244                           
  2245 ;; *************** function _monitor_pump_run *****************
  2246 ;; Defined at:
  2247 ;;		line 38 in file "pump_run.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;		None
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0
  2262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2264 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2265 ;;Total ram usage:        0 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    6
  2268 ;; This function calls:
  2269 ;;		_clear_callback
  2270 ;;		_enable_callback
  2271 ;; This function is called by:
  2272 ;;		_pump_run
  2273 ;;		_start_main
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text11
  2278  000CFE                     __ptext11:
  2279                           	opt callstack 0
  2280  000CFE                     _monitor_pump_run:
  2281                           	opt callstack 23
  2282                           
  2283                           ;pump_run.c: 41:     if (( (!PORTBbits.RB3) || (zones != 0) )) {
  2284                           
  2285                           ;incstack = 0
  2286  000CFE  A681               	btfss	3969,3,c	;volatile
  2287  000D00  D004               	goto	u4580
  2288  000D02  5045               	movf	_zones,w,c
  2289  000D04  1046               	iorwf	_zones+1,w,c
  2290  000D06  B4D8               	btfsc	status,2,c
  2291  000D08  D004               	goto	l315
  2292  000D0A                     u4580:
  2293                           
  2294                           ;pump_run.c: 42:       clear_callback (EventRunSignalDebounce);
  2295  000D0A  0E07               	movlw	7
  2296  000D0C  ECC9  F00C         	call	_clear_callback
  2297                           
  2298                           ;pump_run.c: 44:   } else {
  2299  000D10  D00D               	goto	l4871
  2300  000D12                     l315:
  2301                           
  2302                           ;pump_run.c: 46:        if (!timer_events[EventRunSignalDebounce].active) {
  2303  000D12  0100               	movlb	0	; () banked
  2304  000D14  B19A               	btfsc	(_timer_events+58)& (0+255),0,b	;volatile
  2305  000D16  D00A               	goto	l4871
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;pump_run.c: 47:       timer_events[EventRunSignalDebounce].flag_bit = 0;
  2309  000D18  939A               	bcf	(_timer_events+58)& (0+255),1,b	;volatile
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;pump_run.c: 48:       timer_events[EventRunSignalDebounce].next_state = shutdownState;
  2313  000D1A  0E01               	movlw	1
  2314  000D1C  6F9B               	movwf	(_timer_events+59)& (0+255),b	;volatile
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;pump_run.c: 49:       enable_callback (EventRunSignalDebounce, ((4000000/256/4/256)/2))
      +                          ;
  2318  000D1E  0E00               	movlw	0
  2319  000D20  6E15               	movwf	enable_callback@time_delay+1,c
  2320  000D22  0E07               	movlw	7
  2321  000D24  6E14               	movwf	enable_callback@time_delay,c
  2322  000D26  0E07               	movlw	7
  2323  000D28  EC91  F00A         	call	_enable_callback
  2324  000D2C                     l4871:
  2325                           
  2326                           ;pump_run.c: 55:   if (( !PORTBbits.RB4)) {
  2327  000D2C  B881               	btfsc	3969,4,c	;volatile
  2328  000D2E  D00D               	goto	l4881
  2329                           
  2330                           ;pump_run.c: 57:        if (!timer_events[EventPODebounce].active) {
  2331  000D30  0100               	movlb	0	; () banked
  2332  000D32  B1A2               	btfsc	(_timer_events+66)& (0+255),0,b	;volatile
  2333  000D34  D00A               	goto	l4881
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;pump_run.c: 58:       timer_events[EventPODebounce].flag_bit = 0;
  2337  000D36  93A2               	bcf	(_timer_events+66)& (0+255),1,b	;volatile
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;pump_run.c: 59:       timer_events[EventPODebounce].next_state = shutdownState;
  2341  000D38  0E01               	movlw	1
  2342  000D3A  6FA3               	movwf	(_timer_events+67)& (0+255),b	;volatile
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;pump_run.c: 60:       enable_callback (EventPODebounce, ((4000000/256/4/256)/2));
  2346  000D3C  0E00               	movlw	0
  2347  000D3E  6E15               	movwf	enable_callback@time_delay+1,c
  2348  000D40  0E07               	movlw	7
  2349  000D42  6E14               	movwf	enable_callback@time_delay,c
  2350  000D44  0E08               	movlw	8
  2351  000D46  EC91  F00A         	call	_enable_callback
  2352  000D4A                     l4881:
  2353                           
  2354                           ;pump_run.c: 67:   if (!( PORTAbits.RA4)) {
  2355  000D4A  B880               	btfsc	3968,4,c	;volatile
  2356  000D4C  D005               	goto	l322
  2357                           
  2358                           ;pump_run.c: 68:        clear_callback (EventLowWaterLevel);
  2359  000D4E  0E00               	movlw	0
  2360  000D50  ECC9  F00C         	call	_clear_callback
  2361                           
  2362                           ;pump_run.c: 69:       fault_flags.lwl_fault = 0;
  2363  000D54  9047               	bcf	_fault_flags,0,c
  2364                           
  2365                           ;pump_run.c: 70:   } else {
  2366  000D56  D00F               	goto	l4893
  2367  000D58                     l322:
  2368                           
  2369                           ;pump_run.c: 71:     if (!timer_events[EventLowWaterLevel].active) {
  2370  000D58  0100               	movlb	0	; () banked
  2371  000D5A  B162               	btfsc	(_timer_events+2)& (0+255),0,b	;volatile
  2372  000D5C  D00C               	goto	l4893
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;pump_run.c: 72:       timer_events[EventLowWaterLevel].flag_bit = 1;
  2376  000D5E  8362               	bsf	(_timer_events+2)& (0+255),1,b	;volatile
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;pump_run.c: 73:       timer_events[EventLowWaterLevel].flag_data = 0;
  2380  000D60  0E00               	movlw	0
  2381  000D62  6F65               	movwf	(_timer_events+5)& (0+255),b	;volatile
  2382  000D64  0E00               	movlw	0
  2383  000D66  6F64               	movwf	(_timer_events+4)& (0+255),b	;volatile
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;pump_run.c: 74:       enable_callback (EventLowWaterLevel, (3*(4000000/256/4/256)));
  2387  000D68  0E00               	movlw	0
  2388  000D6A  6E15               	movwf	enable_callback@time_delay+1,c
  2389  000D6C  0E2D               	movlw	45
  2390  000D6E  6E14               	movwf	enable_callback@time_delay,c
  2391  000D70  0E00               	movlw	0
  2392  000D72  EC91  F00A         	call	_enable_callback
  2393  000D76                     l4893:
  2394                           
  2395                           ;pump_run.c: 79:   if (fault_flags.wpOkBit) {
  2396  000D76  A847               	btfss	_fault_flags,4,c
  2397  000D78  D004               	goto	l325
  2398                           
  2399                           ;pump_run.c: 80:       clear_callback (EventLowWaterPressure);
  2400  000D7A  0E01               	movlw	1
  2401  000D7C  ECC9  F00C         	call	_clear_callback
  2402                           
  2403                           ;pump_run.c: 81:   }else {
  2404  000D80  0012               	return	
  2405  000D82                     l325:
  2406                           
  2407                           ;pump_run.c: 82:     if (!timer_events[EventLowWaterPressure].active) {
  2408  000D82  0100               	movlb	0	; () banked
  2409  000D84  B16A               	btfsc	(_timer_events+10)& (0+255),0,b	;volatile
  2410  000D86  0012               	return	
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;pump_run.c: 83:       timer_events[EventLowWaterPressure].flag_bit = 1;
  2414  000D88  836A               	bsf	(_timer_events+10)& (0+255),1,b	;volatile
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;pump_run.c: 84:       timer_events[EventLowWaterPressure].next_state = shutdownState;
  2418  000D8A  0E01               	movlw	1
  2419  000D8C  6F6B               	movwf	(_timer_events+11)& (0+255),b	;volatile
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;pump_run.c: 85:       enable_callback (EventLowWaterPressure, (3*(4000000/256/4/256)));
  2423  000D8E  0E00               	movlw	0
  2424  000D90  6E15               	movwf	enable_callback@time_delay+1,c
  2425  000D92  0E2D               	movlw	45
  2426  000D94  6E14               	movwf	enable_callback@time_delay,c
  2427  000D96  0E01               	movlw	1
  2428  000D98  EC91  F00A         	call	_enable_callback
  2429  000D9C  0012               	return		;funcret
  2430  000D9E                     __end_of_monitor_pump_run:
  2431                           	opt callstack 0
  2432                           
  2433 ;; *************** function _process_message *****************
  2434 ;; Defined at:
  2435 ;;		line 102 in file "serial_message.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  inmessage       2   36[COMRAM] PTR unsigned char 
  2438 ;;		 -> receiveMessage@message(10), NULL(0), 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  address         1    0        unsigned char 
  2441 ;;  msgType         1   40[COMRAM] unsigned char 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2451 ;;      Params:         2       0       0       0       0       0       0       0       0
  2452 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2453 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2454 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2455 ;;Total ram usage:        6 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    9
  2458 ;; This function calls:
  2459 ;;		_process_get_status_message
  2460 ;;		_process_reset_pump
  2461 ;;		_process_set_address_message
  2462 ;;		_process_set_zones_message
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text12
  2469  000B9C                     __ptext12:
  2470                           	opt callstack 0
  2471  000B9C                     _process_message:
  2472                           	opt callstack 21
  2473                           
  2474                           ;serial_message.c: 110:     if (inmessage[1] == '0' || inmessage[1] == address) {
  2475                           
  2476                           ;incstack = 0
  2477  000B9C  EE20 F001          	lfsr	2,1
  2478  000BA0  5025               	movf	process_message@inmessage,w,c
  2479  000BA2  26D9               	addwf	fsr2l,f,c
  2480  000BA4  5026               	movf	process_message@inmessage+1,w,c
  2481  000BA6  22DA               	addwfc	fsr2h,f,c
  2482  000BA8  0E30               	movlw	48
  2483  000BAA  18DE               	xorwf	postinc2,w,c
  2484  000BAC  B4D8               	btfsc	status,2,c
  2485  000BAE  D009               	goto	u5020
  2486  000BB0  EE20 F001          	lfsr	2,1
  2487  000BB4  5025               	movf	process_message@inmessage,w,c
  2488  000BB6  26D9               	addwf	fsr2l,f,c
  2489  000BB8  5026               	movf	process_message@inmessage+1,w,c
  2490  000BBA  22DA               	addwfc	fsr2h,f,c
  2491  000BBC  50DF               	movf	indf2,w,c
  2492  000BBE  A4D8               	btfss	status,2,c
  2493  000BC0  0012               	return	
  2494  000BC2                     u5020:
  2495                           
  2496                           ;serial_message.c: 112:         msgType = inmessage[2];
  2497  000BC2  EE20 F002          	lfsr	2,2
  2498  000BC6  5025               	movf	process_message@inmessage,w,c
  2499  000BC8  26D9               	addwf	fsr2l,f,c
  2500  000BCA  5026               	movf	process_message@inmessage+1,w,c
  2501  000BCC  22DA               	addwfc	fsr2h,f,c
  2502  000BCE  50DF               	movf	indf2,w,c
  2503  000BD0  6E29               	movwf	process_message@msgType,c
  2504                           
  2505                           ;serial_message.c: 114:         switch(msgType){
  2506  000BD2  D01C               	goto	l5103
  2507  000BD4                     l5093:
  2508                           
  2509                           ;serial_message.c: 117:                 process_set_zones_message(inmessage);
  2510  000BD4  C025  F020         	movff	process_message@inmessage,process_set_zones_message@inmessage
  2511  000BD8  C026  F021         	movff	process_message@inmessage+1,process_set_zones_message@inmessage+1
  2512  000BDC  EC9A  F008         	call	_process_set_zones_message	;wreg free
  2513                           
  2514                           ;serial_message.c: 118:                 break;
  2515  000BE0  0012               	return	
  2516  000BE2                     l5095:
  2517                           
  2518                           ;serial_message.c: 122:                 process_get_status_message(inmessage);
  2519  000BE2  C025  F020         	movff	process_message@inmessage,process_get_status_message@inmessage
  2520  000BE6  C026  F021         	movff	process_message@inmessage+1,process_get_status_message@inmessage+1
  2521  000BEA  EC50  F00C         	call	_process_get_status_message	;wreg free
  2522                           
  2523                           ;serial_message.c: 123:                 break;
  2524  000BEE  0012               	return	
  2525  000BF0                     l5097:
  2526                           
  2527                           ;serial_message.c: 127:                 process_set_address_message(inmessage);
  2528  000BF0  C025  F020         	movff	process_message@inmessage,process_set_address_message@inmessage
  2529  000BF4  C026  F021         	movff	process_message@inmessage+1,process_set_address_message@inmessage+1
  2530  000BF8  EC3E  F00C         	call	_process_set_address_message	;wreg free
  2531                           
  2532                           ;serial_message.c: 128:                 break;
  2533  000BFC  0012               	return	
  2534  000BFE                     l5099:
  2535                           
  2536                           ;serial_message.c: 139:                 process_reset_pump(inmessage);
  2537  000BFE  C025  F020         	movff	process_message@inmessage,process_reset_pump@inmessage
  2538  000C02  C026  F021         	movff	process_message@inmessage+1,process_reset_pump@inmessage+1
  2539  000C06  ECF0  F00B         	call	_process_reset_pump	;wreg free
  2540                           
  2541                           ;serial_message.c: 140:                 break;
  2542  000C0A  0012               	return	
  2543  000C0C                     l5103:
  2544  000C0C  5029               	movf	process_message@msgType,w,c
  2545  000C0E  6E27               	movwf	??_process_message& (0+255),c
  2546  000C10  6A28               	clrf	(??_process_message+1)& (0+255),c
  2547                           
  2548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2549                           ; Switch size 1, requested type "simple"
  2550                           ; Number of cases is 1, Range of values is 0 to 0
  2551                           ; switch strategies available:
  2552                           ; Name         Instructions Cycles
  2553                           ; simple_byte            4     3 (average)
  2554                           ;	Chosen strategy is simple_byte
  2555  000C12  5028               	movf	??_process_message+1,w,c
  2556  000C14  0A00               	xorlw	0	; case 0
  2557  000C16  A4D8               	btfss	status,2,c
  2558  000C18  0012               	return	
  2559                           
  2560                           ; Switch size 1, requested type "simple"
  2561                           ; Number of cases is 8, Range of values is 65 to 115
  2562                           ; switch strategies available:
  2563                           ; Name         Instructions Cycles
  2564                           ; simple_byte           25    13 (average)
  2565                           ;	Chosen strategy is simple_byte
  2566  000C1A  5027               	movf	??_process_message,w,c
  2567  000C1C  0A41               	xorlw	65	; case 65
  2568  000C1E  B4D8               	btfsc	status,2,c
  2569  000C20  D7E7               	goto	l5097
  2570  000C22  0A06               	xorlw	6	; case 71
  2571  000C24  B4D8               	btfsc	status,2,c
  2572  000C26  D7DD               	goto	l5095
  2573  000C28  0A0A               	xorlw	10	; case 77
  2574  000C2A  B4D8               	btfsc	status,2,c
  2575  000C2C  D7E8               	goto	l5099
  2576  000C2E  0A1E               	xorlw	30	; case 83
  2577  000C30  B4D8               	btfsc	status,2,c
  2578  000C32  D7D0               	goto	l5093
  2579  000C34  0A32               	xorlw	50	; case 97
  2580  000C36  B4D8               	btfsc	status,2,c
  2581  000C38  D7DB               	goto	l5097
  2582  000C3A  0A06               	xorlw	6	; case 103
  2583  000C3C  B4D8               	btfsc	status,2,c
  2584  000C3E  D7D1               	goto	l5095
  2585  000C40  0A0A               	xorlw	10	; case 109
  2586  000C42  B4D8               	btfsc	status,2,c
  2587  000C44  D7DC               	goto	l5099
  2588  000C46  0A1E               	xorlw	30	; case 115
  2589  000C48  A4D8               	btfss	status,2,c
  2590  000C4A  0012               	return	
  2591  000C4C  D7C3               	goto	l5093
  2592  000C4E                     __end_of_process_message:
  2593                           	opt callstack 0
  2594                           
  2595 ;; *************** function _process_set_zones_message *****************
  2596 ;; Defined at:
  2597 ;;		line 65 in file "serial_message.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2600 ;;		 -> receiveMessage@message(10), NULL(0), 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2612 ;;      Params:         2       0       0       0       0       0       0       0       0
  2613 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2614 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2615 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2616 ;;Total ram usage:        5 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    8
  2619 ;; This function calls:
  2620 ;;		_output_message
  2621 ;;		_setBaseMessage
  2622 ;;		_xtochar
  2623 ;; This function is called by:
  2624 ;;		_process_message
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text13
  2629  001134                     __ptext13:
  2630                           	opt callstack 0
  2631  001134                     _process_set_zones_message:
  2632                           	opt callstack 21
  2633                           
  2634                           ;serial_message.c: 66:     zones = (xtochar(inmessage[3]) << 4) + xtochar(inmessage[4]);
  2635                           
  2636                           ;incstack = 0
  2637  001134  EE20 F004          	lfsr	2,4
  2638  001138  5020               	movf	process_set_zones_message@inmessage,w,c
  2639  00113A  26D9               	addwf	fsr2l,f,c
  2640  00113C  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2641  00113E  22DA               	addwfc	fsr2h,f,c
  2642  001140  50DF               	movf	indf2,w,c
  2643  001142  ECF3  F00A         	call	_xtochar
  2644  001146  6E22               	movwf	??_process_set_zones_message& (0+255),c
  2645  001148  EE20 F003          	lfsr	2,3
  2646  00114C  5020               	movf	process_set_zones_message@inmessage,w,c
  2647  00114E  26D9               	addwf	fsr2l,f,c
  2648  001150  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2649  001152  22DA               	addwfc	fsr2h,f,c
  2650  001154  50DF               	movf	indf2,w,c
  2651  001156  ECF3  F00A         	call	_xtochar
  2652  00115A  6E23               	movwf	(??_process_set_zones_message+1)& (0+255),c
  2653  00115C  6A24               	clrf	(??_process_set_zones_message+2)& (0+255),c
  2654  00115E  3A23               	swapf	??_process_set_zones_message+1,f,c
  2655  001160  3A24               	swapf	??_process_set_zones_message+2,f,c
  2656  001162  0EF0               	movlw	240
  2657  001164  1624               	andwf	??_process_set_zones_message+2,f,c
  2658  001166  5023               	movf	??_process_set_zones_message+1,w,c
  2659  001168  0B0F               	andlw	15
  2660  00116A  1224               	iorwf	??_process_set_zones_message+2,f,c
  2661  00116C  0EF0               	movlw	240
  2662  00116E  1623               	andwf	??_process_set_zones_message+1,f,c
  2663  001170  5022               	movf	??_process_set_zones_message,w,c
  2664  001172  2423               	addwf	??_process_set_zones_message+1,w,c
  2665  001174  6E45               	movwf	_zones,c
  2666  001176  0E00               	movlw	0
  2667  001178  2024               	addwfc	??_process_set_zones_message+2,w,c
  2668  00117A  6E46               	movwf	_zones+1,c
  2669                           
  2670                           ;serial_message.c: 67:     setBaseMessage('s', inmessage[1]);
  2671  00117C  EE20 F001          	lfsr	2,1
  2672  001180  5020               	movf	process_set_zones_message@inmessage,w,c
  2673  001182  26D9               	addwf	fsr2l,f,c
  2674  001184  5021               	movf	process_set_zones_message@inmessage+1,w,c
  2675  001186  22DA               	addwfc	fsr2h,f,c
  2676  001188  50DF               	movf	indf2,w,c
  2677  00118A  6E15               	movwf	setBaseMessage@msgAddress,c
  2678  00118C  0E73               	movlw	115
  2679  00118E  ECA8  F007         	call	_setBaseMessage
  2680                           
  2681                           ;serial_message.c: 70:     output_message(outputMessage);
  2682  001192  0EAC               	movlw	low _outputMessage
  2683  001194  6E1C               	movwf	output_message@message,c
  2684  001196  0E00               	movlw	high _outputMessage
  2685  001198  6E1D               	movwf	output_message@message+1,c
  2686  00119A  EC20  F00A         	call	_output_message	;wreg free
  2687  00119E  0012               	return		;funcret
  2688  0011A0                     __end_of_process_set_zones_message:
  2689                           	opt callstack 0
  2690                           
  2691 ;; *************** function _xtochar *****************
  2692 ;; Defined at:
  2693 ;;		line 18 in file "serial_message.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  x               1    wreg     unsigned char 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  x               1   19[COMRAM] unsigned char 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      unsigned char 
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2707 ;;      Params:         0       0       0       0       0       0       0       0       0
  2708 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2709 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2710 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2711 ;;Total ram usage:        1 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    5
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_process_set_zones_message
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text14
  2722  0015E6                     __ptext14:
  2723                           	opt callstack 0
  2724  0015E6                     _xtochar:
  2725                           	opt callstack 23
  2726                           
  2727                           ;incstack = 0
  2728                           ;xtochar@x stored from wreg
  2729  0015E6  6E14               	movwf	xtochar@x,c
  2730                           
  2731                           ;serial_message.c: 19:     if ((x >= '0')
  2732  0015E8  0E2F               	movlw	47
  2733  0015EA  6414               	cpfsgt	xtochar@x,c
  2734  0015EC  D006               	goto	l4673
  2735  0015EE  0E3A               	movlw	58
  2736  0015F0  6014               	cpfslt	xtochar@x,c
  2737  0015F2  D003               	goto	l4673
  2738                           
  2739                           ;serial_message.c: 20:             && (x <= '9')) {;serial_message.c: 21:         return
      +                           (x - '0');
  2740  0015F4  5014               	movf	xtochar@x,w,c
  2741  0015F6  0FD0               	addlw	208
  2742  0015F8  0012               	return	
  2743  0015FA                     l4673:
  2744  0015FA  0E60               	movlw	96
  2745  0015FC  6414               	cpfsgt	xtochar@x,c
  2746  0015FE  D006               	goto	l4683
  2747  001600  0E67               	movlw	103
  2748  001602  6014               	cpfslt	xtochar@x,c
  2749  001604  D003               	goto	l4683
  2750                           
  2751                           ;serial_message.c: 23:             && (x <= 'f')) {;serial_message.c: 24:         return
      +                           (x) - 'a' + 10;
  2752  001606  5014               	movf	xtochar@x,w,c
  2753  001608  0FA9               	addlw	169
  2754  00160A  0012               	return	
  2755  00160C                     l4683:
  2756  00160C  0E40               	movlw	64
  2757  00160E  6414               	cpfsgt	xtochar@x,c
  2758  001610  D006               	goto	l4691
  2759  001612  0E47               	movlw	71
  2760  001614  6014               	cpfslt	xtochar@x,c
  2761  001616  D003               	goto	l4691
  2762                           
  2763                           ;serial_message.c: 27:             && (x <= 'F')) {;serial_message.c: 28:         return
      +                           (x) - 'F' + 10;
  2764  001618  5014               	movf	xtochar@x,w,c
  2765  00161A  0FC4               	addlw	196
  2766  00161C  0012               	return	
  2767  00161E                     l4691:
  2768                           
  2769                           ;serial_message.c: 30:     return 0;
  2770  00161E  0E00               	movlw	0
  2771  001620  0012               	return		;funcret
  2772  001622                     __end_of_xtochar:
  2773                           	opt callstack 0
  2774                           
  2775 ;; *************** function _process_set_address_message *****************
  2776 ;; Defined at:
  2777 ;;		line 86 in file "serial_message.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2780 ;;		 -> receiveMessage@message(10), NULL(0), 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;  new_address     1    0        unsigned char 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2792 ;;      Params:         2       0       0       0       0       0       0       0       0
  2793 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2795 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2796 ;;Total ram usage:        3 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    8
  2799 ;; This function calls:
  2800 ;;		_output_message
  2801 ;;		_setBaseMessage
  2802 ;; This function is called by:
  2803 ;;		_process_message
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text15
  2808  00187C                     __ptext15:
  2809                           	opt callstack 0
  2810  00187C                     _process_set_address_message:
  2811                           	opt callstack 21
  2812                           
  2813                           ;serial_message.c: 90:     setBaseMessage('a', inmessage[1]);
  2814                           
  2815                           ;incstack = 0
  2816  00187C  EE20 F001          	lfsr	2,1
  2817  001880  5020               	movf	process_set_address_message@inmessage,w,c
  2818  001882  26D9               	addwf	fsr2l,f,c
  2819  001884  5021               	movf	process_set_address_message@inmessage+1,w,c
  2820  001886  22DA               	addwfc	fsr2h,f,c
  2821  001888  50DF               	movf	indf2,w,c
  2822  00188A  6E15               	movwf	setBaseMessage@msgAddress,c
  2823  00188C  0E61               	movlw	97
  2824  00188E  ECA8  F007         	call	_setBaseMessage
  2825                           
  2826                           ;serial_message.c: 91:     output_message(outputMessage);
  2827  001892  0EAC               	movlw	low _outputMessage
  2828  001894  6E1C               	movwf	output_message@message,c
  2829  001896  0E00               	movlw	high _outputMessage
  2830  001898  6E1D               	movwf	output_message@message+1,c
  2831  00189A  EC20  F00A         	call	_output_message	;wreg free
  2832  00189E  0012               	return		;funcret
  2833  0018A0                     __end_of_process_set_address_message:
  2834                           	opt callstack 0
  2835                           
  2836 ;; *************** function _process_reset_pump *****************
  2837 ;; Defined at:
  2838 ;;		line 95 in file "serial_message.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2841 ;;		 -> receiveMessage@message(10), NULL(0), 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;		None
  2844 ;; Return value:  Size  Location     Type
  2845 ;;                  1    wreg      void 
  2846 ;; Registers used:
  2847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2853 ;;      Params:         2       0       0       0       0       0       0       0       0
  2854 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2855 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2856 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2857 ;;Total ram usage:        2 bytes
  2858 ;; Hardware stack levels used:    1
  2859 ;; Hardware stack levels required when called:    8
  2860 ;; This function calls:
  2861 ;;		_output_message
  2862 ;;		_resetPump
  2863 ;;		_setBaseMessage
  2864 ;; This function is called by:
  2865 ;;		_process_message
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text16
  2870  0017E0                     __ptext16:
  2871                           	opt callstack 0
  2872  0017E0                     _process_reset_pump:
  2873                           	opt callstack 21
  2874                           
  2875                           ;serial_message.c: 96:     resetPump();
  2876                           
  2877                           ;incstack = 0
  2878  0017E0  EC24  F00D         	call	_resetPump	;wreg free
  2879                           
  2880                           ;serial_message.c: 97:     setBaseMessage('m', inmessage[1]);
  2881  0017E4  EE20 F001          	lfsr	2,1
  2882  0017E8  5020               	movf	process_reset_pump@inmessage,w,c
  2883  0017EA  26D9               	addwf	fsr2l,f,c
  2884  0017EC  5021               	movf	process_reset_pump@inmessage+1,w,c
  2885  0017EE  22DA               	addwfc	fsr2h,f,c
  2886  0017F0  50DF               	movf	indf2,w,c
  2887  0017F2  6E15               	movwf	setBaseMessage@msgAddress,c
  2888  0017F4  0E6D               	movlw	109
  2889  0017F6  ECA8  F007         	call	_setBaseMessage
  2890                           
  2891                           ;serial_message.c: 98:     output_message(outputMessage);
  2892  0017FA  0EAC               	movlw	low _outputMessage
  2893  0017FC  6E1C               	movwf	output_message@message,c
  2894  0017FE  0E00               	movlw	high _outputMessage
  2895  001800  6E1D               	movwf	output_message@message+1,c
  2896  001802  EC20  F00A         	call	_output_message	;wreg free
  2897  001806  0012               	return		;funcret
  2898  001808                     __end_of_process_reset_pump:
  2899                           	opt callstack 0
  2900                           
  2901 ;; *************** function _process_get_status_message *****************
  2902 ;; Defined at:
  2903 ;;		line 75 in file "serial_message.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  inmessage       2   31[COMRAM] PTR unsigned char 
  2906 ;;		 -> receiveMessage@message(10), NULL(0), main@sendGetMessageBuffer(10), 
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;		None
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2918 ;;      Params:         2       0       0       0       0       0       0       0       0
  2919 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2920 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2921 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2922 ;;Total ram usage:        2 bytes
  2923 ;; Hardware stack levels used:    1
  2924 ;; Hardware stack levels required when called:    8
  2925 ;; This function calls:
  2926 ;;		_output_message
  2927 ;;		_setBaseMessage
  2928 ;; This function is called by:
  2929 ;;		_main
  2930 ;;		_process_message
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text17
  2935  0018A0                     __ptext17:
  2936                           	opt callstack 0
  2937  0018A0                     _process_get_status_message:
  2938                           	opt callstack 21
  2939                           
  2940                           ;serial_message.c: 77:     setBaseMessage('g', inmessage[1]);
  2941                           
  2942                           ;incstack = 0
  2943  0018A0  EE20 F001          	lfsr	2,1
  2944  0018A4  5020               	movf	process_get_status_message@inmessage,w,c
  2945  0018A6  26D9               	addwf	fsr2l,f,c
  2946  0018A8  5021               	movf	process_get_status_message@inmessage+1,w,c
  2947  0018AA  22DA               	addwfc	fsr2h,f,c
  2948  0018AC  50DF               	movf	indf2,w,c
  2949  0018AE  6E15               	movwf	setBaseMessage@msgAddress,c
  2950  0018B0  0E67               	movlw	103
  2951  0018B2  ECA8  F007         	call	_setBaseMessage
  2952                           
  2953                           ;serial_message.c: 82:     output_message(outputMessage);
  2954  0018B6  0EAC               	movlw	low _outputMessage
  2955  0018B8  6E1C               	movwf	output_message@message,c
  2956  0018BA  0E00               	movlw	high _outputMessage
  2957  0018BC  6E1D               	movwf	output_message@message+1,c
  2958  0018BE  EC20  F00A         	call	_output_message	;wreg free
  2959  0018C2  0012               	return		;funcret
  2960  0018C4                     __end_of_process_get_status_message:
  2961                           	opt callstack 0
  2962                           
  2963 ;; *************** function _setBaseMessage *****************
  2964 ;; Defined at:
  2965 ;;		line 42 in file "serial_message.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;  messageType     1    wreg     unsigned char 
  2968 ;;  msgAddress      1   20[COMRAM] unsigned char 
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  messageType     1   24[COMRAM] unsigned char 
  2971 ;;  v               1   25[COMRAM] unsigned char 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2981 ;;      Params:         1       0       0       0       0       0       0       0       0
  2982 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2983 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2984 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2985 ;;Total ram usage:        6 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    6
  2988 ;; This function calls:
  2989 ;;		_chartox
  2990 ;; This function is called by:
  2991 ;;		_process_set_zones_message
  2992 ;;		_process_get_status_message
  2993 ;;		_process_set_address_message
  2994 ;;		_process_reset_pump
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text18
  2999  000F50                     __ptext18:
  3000                           	opt callstack 0
  3001  000F50                     _setBaseMessage:
  3002                           	opt callstack 22
  3003                           
  3004                           ;incstack = 0
  3005                           ;setBaseMessage@messageType stored from wreg
  3006  000F50  6E19               	movwf	setBaseMessage@messageType,c
  3007                           
  3008                           ;serial_message.c: 43:     outputMessage[0] = '{';
  3009  000F52  0E7B               	movlw	123
  3010  000F54  0100               	movlb	0	; () banked
  3011  000F56  6FAC               	movwf	_outputMessage& (0+255),b
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;serial_message.c: 45:  outputMessage[1] = msgAddress;
  3015  000F58  C015  F0AD         	movff	setBaseMessage@msgAddress,_outputMessage+1
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;serial_message.c: 46:  outputMessage[2] = messageType;
  3019  000F5C  C019  F0AE         	movff	setBaseMessage@messageType,_outputMessage+2
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;serial_message.c: 47:  outputMessage[3] = chartox(zones >>4);
  3023  000F60  C045  F016         	movff	_zones,??_setBaseMessage
  3024  000F64  C046  F017         	movff	_zones+1,??_setBaseMessage+1
  3025  000F68  0E04               	movlw	4
  3026  000F6A  6E18               	movwf	(??_setBaseMessage+2)& (0+255),c
  3027  000F6C                     u4315:
  3028  000F6C  90D8               	bcf	status,0,c
  3029  000F6E  3217               	rrcf	??_setBaseMessage+1,f,c
  3030  000F70  3216               	rrcf	??_setBaseMessage,f,c
  3031  000F72  2E18               	decfsz	(??_setBaseMessage+2)& (0+255),f,c
  3032  000F74  D7FB               	goto	u4315
  3033  000F76  5016               	movf	??_setBaseMessage,w,c
  3034  000F78  ECE0  F00C         	call	_chartox
  3035  000F7C  0100               	movlb	0	; () banked
  3036  000F7E  6FAF               	movwf	(_outputMessage+3)& (0+255),b
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;serial_message.c: 48:     outputMessage[4] = chartox((zones &15));
  3040  000F80  5045               	movf	_zones,w,c
  3041  000F82  0B0F               	andlw	15
  3042  000F84  ECE0  F00C         	call	_chartox
  3043  000F88  0100               	movlb	0	; () banked
  3044  000F8A  6FB0               	movwf	(_outputMessage+4)& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;serial_message.c: 52:     char v = (fault_flags.value >> 8) &0xf;
  3048  000F8C  5048               	movf	_fault_flags+1,w,c
  3049  000F8E  0B0F               	andlw	15
  3050  000F90  6E1A               	movwf	setBaseMessage@v,c
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;serial_message.c: 53:     outputMessage[5] = chartox(v);
  3054  000F92  501A               	movf	setBaseMessage@v,w,c
  3055  000F94  ECE0  F00C         	call	_chartox
  3056  000F98  0100               	movlb	0	; () banked
  3057  000F9A  6FB1               	movwf	(_outputMessage+5)& (0+255),b
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;serial_message.c: 55:     v = (fault_flags.value >> 4) &0xf;
  3061  000F9C  C047  F016         	movff	_fault_flags,??_setBaseMessage
  3062  000FA0  C048  F017         	movff	_fault_flags+1,??_setBaseMessage+1
  3063  000FA4  0E04               	movlw	4
  3064  000FA6  6E18               	movwf	(??_setBaseMessage+2)& (0+255),c
  3065  000FA8                     u4325:
  3066  000FA8  90D8               	bcf	status,0,c
  3067  000FAA  3217               	rrcf	??_setBaseMessage+1,f,c
  3068  000FAC  3216               	rrcf	??_setBaseMessage,f,c
  3069  000FAE  2E18               	decfsz	(??_setBaseMessage+2)& (0+255),f,c
  3070  000FB0  D7FB               	goto	u4325
  3071  000FB2  5016               	movf	??_setBaseMessage,w,c
  3072  000FB4  0B0F               	andlw	15
  3073  000FB6  6E1A               	movwf	setBaseMessage@v,c
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;serial_message.c: 56:     outputMessage[6] = chartox(v);
  3077  000FB8  501A               	movf	setBaseMessage@v,w,c
  3078  000FBA  ECE0  F00C         	call	_chartox
  3079  000FBE  0100               	movlb	0	; () banked
  3080  000FC0  6FB2               	movwf	(_outputMessage+6)& (0+255),b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;serial_message.c: 58:     v = (fault_flags.value) &0xf;
  3084  000FC2  5047               	movf	_fault_flags,w,c
  3085  000FC4  0B0F               	andlw	15
  3086  000FC6  6E1A               	movwf	setBaseMessage@v,c
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;serial_message.c: 59:     outputMessage[7] = chartox(v);
  3090  000FC8  501A               	movf	setBaseMessage@v,w,c
  3091  000FCA  ECE0  F00C         	call	_chartox
  3092  000FCE  0100               	movlb	0	; () banked
  3093  000FD0  6FB3               	movwf	(_outputMessage+7)& (0+255),b
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;serial_message.c: 61:     outputMessage[8] = '}';
  3097  000FD2  0E7D               	movlw	125
  3098  000FD4  6FB4               	movwf	(_outputMessage+8)& (0+255),b
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;serial_message.c: 62:     outputMessage[9] = 0;
  3102  000FD6  0E00               	movlw	0
  3103  000FD8  6FB5               	movwf	(_outputMessage+9)& (0+255),b
  3104                           
  3105                           ; BSR set to: 0
  3106  000FDA  0012               	return		;funcret
  3107  000FDC                     __end_of_setBaseMessage:
  3108                           	opt callstack 0
  3109                           
  3110 ;; *************** function _chartox *****************
  3111 ;; Defined at:
  3112 ;;		line 33 in file "serial_message.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  c               1    wreg     unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  c               1   19[COMRAM] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      unsigned char 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3126 ;;      Params:         0       0       0       0       0       0       0       0       0
  3127 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3129 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3130 ;;Total ram usage:        1 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    5
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_setBaseMessage
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text19
  3141  0019C0                     __ptext19:
  3142                           	opt callstack 0
  3143  0019C0                     _chartox:
  3144                           	opt callstack 22
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;incstack = 0
  3148                           ;chartox@c stored from wreg
  3149  0019C0  6E14               	movwf	chartox@c,c
  3150                           
  3151                           ;serial_message.c: 34:     if (c > 9) {
  3152  0019C2  0E09               	movlw	9
  3153  0019C4  6414               	cpfsgt	chartox@c,c
  3154  0019C6  D003               	goto	l4571
  3155                           
  3156                           ;serial_message.c: 35:         return 'a' + (c - 10);
  3157  0019C8  5014               	movf	chartox@c,w,c
  3158  0019CA  0F57               	addlw	87
  3159  0019CC  0012               	return	
  3160  0019CE                     l4571:
  3161                           
  3162                           ;serial_message.c: 37:         return '0' + c;
  3163  0019CE  5014               	movf	chartox@c,w,c
  3164  0019D0  0F30               	addlw	48
  3165  0019D2  0012               	return		;funcret
  3166  0019D4                     __end_of_chartox:
  3167                           	opt callstack 0
  3168                           
  3169 ;; *************** function _output_message *****************
  3170 ;; Defined at:
  3171 ;;		line 264 in file "serial.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  message         2   27[COMRAM] PTR unsigned char 
  3174 ;;		 -> outputMessage(10), 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  i               2   29[COMRAM] int 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3186 ;;      Params:         2       0       0       0       0       0       0       0       0
  3187 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3189 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3190 ;;Total ram usage:        4 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    7
  3193 ;; This function calls:
  3194 ;;		_putch
  3195 ;; This function is called by:
  3196 ;;		_process_set_zones_message
  3197 ;;		_process_get_status_message
  3198 ;;		_process_set_address_message
  3199 ;;		_process_reset_pump
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text20
  3204  001440                     __ptext20:
  3205                           	opt callstack 0
  3206  001440                     _output_message:
  3207                           	opt callstack 21
  3208                           
  3209                           ;serial.c: 264: output_message (char *message);serial.c: 265: {;serial.c: 266:   if (((v
      +                          oid*)0) == message) {
  3210                           
  3211                           ;incstack = 0
  3212  001440  501C               	movf	output_message@message,w,c
  3213  001442  101D               	iorwf	output_message@message+1,w,c
  3214  001444  B4D8               	btfsc	status,2,c
  3215  001446  0012               	return	
  3216                           
  3217                           ;serial.c: 270:   for (int i = 0; (i < 10) && (0 != message[i]); i++) {
  3218  001448  0E00               	movlw	0
  3219  00144A  6E1F               	movwf	output_message@i+1,c
  3220  00144C  0E00               	movlw	0
  3221  00144E  6E1E               	movwf	output_message@i,c
  3222  001450  D00B               	goto	l4659
  3223  001452                     l4655:
  3224                           
  3225                           ;serial.c: 271:     putch (message[i]);
  3226  001452  501E               	movf	output_message@i,w,c
  3227  001454  241C               	addwf	output_message@message,w,c
  3228  001456  6ED9               	movwf	fsr2l,c
  3229  001458  501F               	movf	output_message@i+1,w,c
  3230  00145A  201D               	addwfc	output_message@message+1,w,c
  3231  00145C  6EDA               	movwf	fsr2h,c
  3232  00145E  50DF               	movf	indf2,w,c
  3233  001460  ECEA  F00C         	call	_putch
  3234                           
  3235                           ;serial.c: 272:   }
  3236  001464  4A1E               	infsnz	output_message@i,f,c
  3237  001466  2A1F               	incf	output_message@i+1,f,c
  3238  001468                     l4659:
  3239  001468  BE1F               	btfsc	output_message@i+1,7,c
  3240  00146A  D006               	goto	u4230
  3241  00146C  501F               	movf	output_message@i+1,w,c
  3242  00146E  E10E               	bnz	l471
  3243  001470  0E0A               	movlw	10
  3244  001472  5C1E               	subwf	output_message@i,w,c
  3245  001474  B0D8               	btfsc	status,0,c
  3246  001476  0012               	return	
  3247  001478                     u4230:
  3248  001478  501E               	movf	output_message@i,w,c
  3249  00147A  241C               	addwf	output_message@message,w,c
  3250  00147C  6ED9               	movwf	fsr2l,c
  3251  00147E  501F               	movf	output_message@i+1,w,c
  3252  001480  201D               	addwfc	output_message@message+1,w,c
  3253  001482  6EDA               	movwf	fsr2h,c
  3254  001484  50DF               	movf	indf2,w,c
  3255  001486  B4D8               	btfsc	status,2,c
  3256  001488  0012               	return	
  3257  00148A  D7E3               	goto	l4655
  3258  00148C                     l471:
  3259  00148C  0012               	return		;funcret
  3260  00148E                     __end_of_output_message:
  3261                           	opt callstack 0
  3262                           
  3263 ;; *************** function _process_event_timer *****************
  3264 ;; Defined at:
  3265 ;;		line 82 in file "timer_event.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;		None
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  i               1   31[COMRAM] char 
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      void 
  3272 ;; Registers used:
  3273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3279 ;;      Params:         0       0       0       0       0       0       0       0       0
  3280 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3281 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3282 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3283 ;;Total ram usage:        3 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    8
  3286 ;; This function calls:
  3287 ;;		_EventDumpSolenoidCallBack
  3288 ;;		_EventFaultStateLEDCallBack
  3289 ;;		_EventIdleTimeoutCallBack
  3290 ;;		_EventLowFogPressureCallBack
  3291 ;;		_EventLowWaterLevelCallBack
  3292 ;;		_EventLowWaterPressureCallBack
  3293 ;;		_EventLowWaterPressureDebounceCallBack
  3294 ;;		_EventPODebounceCallBack
  3295 ;;		_EventRunSignalDebounceCallBack
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text21
  3302  00097E                     __ptext21:
  3303                           	opt callstack 0
  3304  00097E                     _process_event_timer:
  3305                           	opt callstack 22
  3306                           
  3307                           ;timer_event.c: 83:     TMR0IE = 0;
  3308                           
  3309                           ;incstack = 0
  3310  00097E  9AF2               	bcf	4082,5,c	;volatile
  3311                           
  3312                           ;timer_event.c: 84:     while (timer_count > 0) {
  3313  000980  D054               	goto	u4940
  3314  000982                     l5017:
  3315                           
  3316                           ;timer_event.c: 86:         timer_count--;
  3317  000982  0649               	decf	_timer_count,f,c	;volatile
  3318                           
  3319                           ;timer_event.c: 89:         for (signed char i = 0; i < EventTotalNumber; i++) {
  3320  000984  0E00               	movlw	0
  3321  000986  6E20               	movwf	process_event_timer@i,c
  3322  000988                     l5025:
  3323                           
  3324                           ;timer_event.c: 90:             if (timer_events[i].active) {
  3325  000988  5020               	movf	process_event_timer@i,w,c
  3326  00098A  0D08               	mullw	8
  3327  00098C  0E62               	movlw	low (_timer_events+2)
  3328  00098E  24F3               	addwf	prodl,w,c
  3329  000990  6ED9               	movwf	fsr2l,c
  3330  000992  0E00               	movlw	high (_timer_events+2)
  3331  000994  20F4               	addwfc	prodh,w,c
  3332  000996  6EDA               	movwf	fsr2h,c
  3333  000998  0100               	movlb	0	; () banked
  3334  00099A  A0DF               	btfss	indf2,0,c
  3335  00099C  D040               	goto	u4939
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;timer_event.c: 91:                 timer_events[i].time_left--;
  3339  00099E  5020               	movf	process_event_timer@i,w,c
  3340  0009A0  0D08               	mullw	8
  3341  0009A2  0E60               	movlw	low _timer_events
  3342  0009A4  24F3               	addwf	prodl,w,c
  3343  0009A6  6ED9               	movwf	fsr2l,c
  3344  0009A8  0E00               	movlw	high _timer_events
  3345  0009AA  20F4               	addwfc	prodh,w,c
  3346  0009AC  6EDA               	movwf	fsr2h,c
  3347  0009AE  06DE               	decf	postinc2,f,c
  3348  0009B0  0E00               	movlw	0
  3349  0009B2  5ADD               	subwfb	postdec2,f,c
  3350                           
  3351                           ;timer_event.c: 93:                 if (timer_events[i].time_left == 0) {
  3352  0009B4  5020               	movf	process_event_timer@i,w,c
  3353  0009B6  0D08               	mullw	8
  3354  0009B8  0E60               	movlw	low _timer_events
  3355  0009BA  24F3               	addwf	prodl,w,c
  3356  0009BC  6ED9               	movwf	fsr2l,c
  3357  0009BE  0E00               	movlw	high _timer_events
  3358  0009C0  20F4               	addwfc	prodh,w,c
  3359  0009C2  6EDA               	movwf	fsr2h,c
  3360  0009C4  50DE               	movf	postinc2,w,c
  3361  0009C6  10DE               	iorwf	postinc2,w,c
  3362  0009C8  A4D8               	btfss	status,2,c
  3363  0009CA  D029               	goto	u4939
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;timer_event.c: 94:                     timer_events[i].active = 0;
  3367  0009CC  5020               	movf	process_event_timer@i,w,c
  3368  0009CE  0D08               	mullw	8
  3369  0009D0  0E62               	movlw	low (_timer_events+2)
  3370  0009D2  24F3               	addwf	prodl,w,c
  3371  0009D4  6ED9               	movwf	fsr2l,c
  3372  0009D6  0E00               	movlw	high (_timer_events+2)
  3373  0009D8  20F4               	addwfc	prodh,w,c
  3374  0009DA  6EDA               	movwf	fsr2h,c
  3375  0009DC  90DF               	bcf	indf2,0,c
  3376                           
  3377                           ;timer_event.c: 95:                     if (timer_events[i].callback) {
  3378  0009DE  5020               	movf	process_event_timer@i,w,c
  3379  0009E0  0D08               	mullw	8
  3380  0009E2  0E66               	movlw	low (_timer_events+6)
  3381  0009E4  24F3               	addwf	prodl,w,c
  3382  0009E6  6ED9               	movwf	fsr2l,c
  3383  0009E8  0E00               	movlw	high (_timer_events+6)
  3384  0009EA  20F4               	addwfc	prodh,w,c
  3385  0009EC  6EDA               	movwf	fsr2h,c
  3386  0009EE  50DE               	movf	postinc2,w,c
  3387  0009F0  10DE               	iorwf	postinc2,w,c
  3388  0009F2  B4D8               	btfsc	status,2,c
  3389  0009F4  D014               	goto	u4939
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;timer_event.c: 97:                         (*timer_events[i].callback) ();
  3393  0009F6  5020               	movf	process_event_timer@i,w,c
  3394  0009F8  0D08               	mullw	8
  3395  0009FA  0E66               	movlw	low (_timer_events+6)
  3396  0009FC  24F3               	addwf	prodl,w,c
  3397  0009FE  6ED9               	movwf	fsr2l,c
  3398  000A00  0E00               	movlw	high (_timer_events+6)
  3399  000A02  20F4               	addwfc	prodh,w,c
  3400  000A04  6EDA               	movwf	fsr2h,c
  3401  000A06  D801               	call	u4938
  3402  000A08  D00A               	goto	u4939
  3403  000A0A                     u4938:
  3404  000A0A  0005               	push	
  3405  000A0C  6EFA               	movwf	pclath,c
  3406  000A0E  50DE               	movf	postinc2,w,c
  3407  000A10  6EFD               	movwf	tosl,c
  3408  000A12  50DE               	movf	postinc2,w,c
  3409  000A14  6EFE               	movwf	tosh,c
  3410  000A16  50F8               	movf	tblptru,w,c
  3411  000A18  6EFF               	movwf	tosu,c
  3412  000A1A  50FA               	movf	pclath,w,c
  3413  000A1C  0012               	return		;indir
  3414  000A1E                     u4939:
  3415                           
  3416                           ;timer_event.c: 102:         }
  3417  000A1E  2A20               	incf	process_event_timer@i,f,c
  3418  000A20  5020               	movf	process_event_timer@i,w,c
  3419  000A22  0A80               	xorlw	128
  3420  000A24  0F77               	addlw	-137
  3421  000A26  A0D8               	btfss	status,0,c
  3422  000A28  D7AF               	goto	l5025
  3423  000A2A                     u4940:
  3424                           
  3425                           ;timer_event.c: 84:     while (timer_count > 0) {
  3426  000A2A  5049               	movf	_timer_count,w,c	;volatile
  3427  000A2C  A4D8               	btfss	status,2,c
  3428  000A2E  D7A9               	goto	l5017
  3429                           
  3430                           ;timer_event.c: 104:     TMR0IE = 1;
  3431  000A30  8AF2               	bsf	4082,5,c	;volatile
  3432  000A32  0012               	return		;funcret
  3433  000A34                     __end_of_process_event_timer:
  3434                           	opt callstack 0
  3435                           
  3436 ;; *************** function _EventPODebounceCallBack *****************
  3437 ;; Defined at:
  3438 ;;		line 3 in file "EventPODebounce.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;		None
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;		None
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  1    wreg      void 
  3445 ;; Registers used:
  3446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3452 ;;      Params:         0       0       0       0       0       0       0       0       0
  3453 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3454 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3455 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3456 ;;Total ram usage:        0 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:    7
  3459 ;; This function calls:
  3460 ;;		_clear_callback_for_shutdown
  3461 ;; This function is called by:
  3462 ;;		_init_event_timer
  3463 ;;		_process_event_timer
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text22
  3468  0019FC                     __ptext22:
  3469                           	opt callstack 0
  3470  0019FC                     _EventPODebounceCallBack:
  3471                           	opt callstack 22
  3472                           
  3473                           ;EventPODebounce.c: 9:     state = timer_events[EventPODebounce].next_state;
  3474                           
  3475                           ;incstack = 0
  3476  0019FC  C0A3  F04B         	movff	_timer_events+67,_state	;volatile
  3477                           
  3478                           ;EventPODebounce.c: 10:     fault_flags.po_fault = 1;
  3479  001A00  8647               	bsf	_fault_flags,3,c
  3480                           
  3481                           ;EventPODebounce.c: 11:     if (shutdownState == state) {
  3482  001A02  044B               	decf	_state,w,c
  3483  001A04  A4D8               	btfss	status,2,c
  3484  001A06  0012               	return	
  3485                           
  3486                           ;EventPODebounce.c: 13:         clear_callback_for_shutdown();
  3487  001A08  ECC5  F00B         	call	_clear_callback_for_shutdown	;wreg free
  3488  001A0C  0012               	return		;funcret
  3489  001A0E                     __end_of_EventPODebounceCallBack:
  3490                           	opt callstack 0
  3491                           
  3492 ;; *************** function _EventLowWaterPressureDebounceCallBack *****************
  3493 ;; Defined at:
  3494 ;;		line 32 in file "EventLowWaterPressure.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3508 ;;      Params:         0       0       0       0       0       0       0       0       0
  3509 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3510 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3511 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3512 ;;Total ram usage:        1 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    5
  3515 ;; This function calls:
  3516 ;;		Nothing
  3517 ;; This function is called by:
  3518 ;;		_init_event_timer
  3519 ;;		_process_event_timer
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text23
  3524  001904                     __ptext23:
  3525                           	opt callstack 0
  3526  001904                     _EventLowWaterPressureDebounceCallBack:
  3527                           	opt callstack 24
  3528                           
  3529                           ;EventLowWaterPressure.c: 44:     { PORTAbits.RA0 = (!( PORTBbits.RB2)); fault_flags.wpO
      +                          kBit = (!( PORTBbits.RB2));};
  3530                           
  3531                           ;incstack = 0
  3532  001904  B481               	btfsc	3969,2,c	;volatile
  3533  001906  D003               	goto	u4530
  3534  001908  6A14               	clrf	??_EventLowWaterPressureDebounceCallBack& (0+255),c
  3535  00190A  2A14               	incf	??_EventLowWaterPressureDebounceCallBack& (0+255),f,c
  3536  00190C  D001               	goto	u4548
  3537  00190E                     u4530:
  3538  00190E  6A14               	clrf	??_EventLowWaterPressureDebounceCallBack& (0+255),c
  3539  001910                     u4548:
  3540  001910  5080               	movf	3968,w,c	;volatile
  3541  001912  1814               	xorwf	??_EventLowWaterPressureDebounceCallBack,w,c
  3542  001914  0BFE               	andlw	-2
  3543  001916  1814               	xorwf	??_EventLowWaterPressureDebounceCallBack,w,c
  3544  001918  6E80               	movwf	3968,c	;volatile
  3545  00191A  8847               	bsf	_fault_flags,4,c
  3546  00191C  B481               	btfsc	3969,2,c	;volatile
  3547  00191E  9847               	bcf	_fault_flags,4,c
  3548  001920  0012               	return		;funcret
  3549  001922                     __end_of_EventLowWaterPressureDebounceCallBack:
  3550                           	opt callstack 0
  3551                           
  3552 ;; *************** function _EventLowWaterPressureCallBack *****************
  3553 ;; Defined at:
  3554 ;;		line 4 in file "EventLowWaterPressure.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0
  3569 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3570 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3571 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3572 ;;Total ram usage:        1 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    7
  3575 ;; This function calls:
  3576 ;;		_clear_callback_for_shutdown
  3577 ;; This function is called by:
  3578 ;;		_init_event_timer
  3579 ;;		_process_event_timer
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text24
  3584  001692                     __ptext24:
  3585                           	opt callstack 0
  3586  001692                     _EventLowWaterPressureCallBack:
  3587                           	opt callstack 22
  3588                           
  3589                           ;EventLowWaterPressure.c: 16:     { PORTAbits.RA0 = (!( PORTBbits.RB2)); fault_flags.wpO
      +                          kBit = (!( PORTBbits.RB2));};
  3590                           
  3591                           ;incstack = 0
  3592  001692  B481               	btfsc	3969,2,c	;volatile
  3593  001694  D003               	goto	u4490
  3594  001696  6A15               	clrf	??_EventLowWaterPressureCallBack& (0+255),c
  3595  001698  2A15               	incf	??_EventLowWaterPressureCallBack& (0+255),f,c
  3596  00169A  D001               	goto	u4508
  3597  00169C                     u4490:
  3598  00169C  6A15               	clrf	??_EventLowWaterPressureCallBack& (0+255),c
  3599  00169E                     u4508:
  3600  00169E  5080               	movf	3968,w,c	;volatile
  3601  0016A0  1815               	xorwf	??_EventLowWaterPressureCallBack,w,c
  3602  0016A2  0BFE               	andlw	-2
  3603  0016A4  1815               	xorwf	??_EventLowWaterPressureCallBack,w,c
  3604  0016A6  6E80               	movwf	3968,c	;volatile
  3605  0016A8  8847               	bsf	_fault_flags,4,c
  3606  0016AA  B481               	btfsc	3969,2,c	;volatile
  3607  0016AC  9847               	bcf	_fault_flags,4,c
  3608                           
  3609                           ;EventLowWaterPressure.c: 18:     if (timer_events[EventLowWaterPressure].flag_bit) {
  3610  0016AE  0100               	movlb	0	; () banked
  3611  0016B0  B36A               	btfsc	(_timer_events+10)& (0+255),1,b	;volatile
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;EventLowWaterPressure.c: 20:         fault_flags.lwp_fault = 1;
  3615  0016B2  8247               	bsf	_fault_flags,1,c
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;EventLowWaterPressure.c: 23:     state = timer_events[EventLowWaterPressure].next_state
      +                          ;
  3619                           
  3620                           ;EventLowWaterPressure.c: 22:     }
  3621  0016B4  C06B  F04B         	movff	_timer_events+11,_state	;volatile
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;EventLowWaterPressure.c: 24:  if (shutdownState == state) {
  3625  0016B8  044B               	decf	_state,w,c
  3626  0016BA  A4D8               	btfss	status,2,c
  3627  0016BC  0012               	return	
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;EventLowWaterPressure.c: 26:         clear_callback_for_shutdown();
  3631  0016BE  ECC5  F00B         	call	_clear_callback_for_shutdown	;wreg free
  3632  0016C2  0012               	return		;funcret
  3633  0016C4                     __end_of_EventLowWaterPressureCallBack:
  3634                           	opt callstack 0
  3635                           
  3636 ;; *************** function _EventLowWaterLevelCallBack *****************
  3637 ;; Defined at:
  3638 ;;		line 4 in file "EventLowWaterLevel.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;		None
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3652 ;;      Params:         0       0       0       0       0       0       0       0       0
  3653 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3655 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3656 ;;Total ram usage:        0 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    7
  3659 ;; This function calls:
  3660 ;;		_clear_callback_for_shutdown
  3661 ;;		_enable_callback
  3662 ;; This function is called by:
  3663 ;;		_init_event_timer
  3664 ;;		_process_event_timer
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text25
  3669  001830                     __ptext25:
  3670                           	opt callstack 0
  3671  001830                     _EventLowWaterLevelCallBack:
  3672                           	opt callstack 22
  3673                           
  3674                           ;EventLowWaterLevel.c: 10:     if (!fault_flags.lwl_fault) {
  3675                           
  3676                           ;incstack = 0
  3677  001830  B047               	btfsc	_fault_flags,0,c
  3678  001832  D009               	goto	l4813
  3679                           
  3680                           ;EventLowWaterLevel.c: 14:         fault_flags.lwl_fault = 1;
  3681  001834  8047               	bsf	_fault_flags,0,c
  3682                           
  3683                           ;EventLowWaterLevel.c: 15:         enable_callback(EventLowWaterLevel, (30*(4000000/256/
      +                          4/256)));
  3684  001836  0E01               	movlw	1
  3685  001838  6E15               	movwf	enable_callback@time_delay+1,c
  3686  00183A  0EC2               	movlw	194
  3687  00183C  6E14               	movwf	enable_callback@time_delay,c
  3688  00183E  0E00               	movlw	0
  3689  001840  EC91  F00A         	call	_enable_callback
  3690                           
  3691                           ;EventLowWaterLevel.c: 16:     } else {
  3692  001844  0012               	return	
  3693  001846                     l4813:
  3694                           
  3695                           ;EventLowWaterLevel.c: 20:         if (state != standbyState) {
  3696  001846  504B               	movf	_state,w,c
  3697  001848  B4D8               	btfsc	status,2,c
  3698  00184A  0012               	return	
  3699                           
  3700                           ;EventLowWaterLevel.c: 21:             state = shutdownState;
  3701  00184C  0E01               	movlw	1
  3702  00184E  6E4B               	movwf	_state,c
  3703                           
  3704                           ;EventLowWaterLevel.c: 23:             clear_callback_for_shutdown();
  3705  001850  ECC5  F00B         	call	_clear_callback_for_shutdown	;wreg free
  3706  001854  0012               	return		;funcret
  3707  001856                     __end_of_EventLowWaterLevelCallBack:
  3708                           	opt callstack 0
  3709                           
  3710 ;; *************** function _EventLowFogPressureCallBack *****************
  3711 ;; Defined at:
  3712 ;;		line 4 in file "EventLowFogPressure.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;		None
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;		None
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  1    wreg      void 
  3719 ;; Registers used:
  3720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3726 ;;      Params:         0       0       0       0       0       0       0       0       0
  3727 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3728 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3729 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3730 ;;Total ram usage:        0 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    7
  3733 ;; This function calls:
  3734 ;;		_clear_callback_for_shutdown
  3735 ;;		_enable_callback
  3736 ;; This function is called by:
  3737 ;;		_init_event_timer
  3738 ;;		_process_event_timer
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	text26
  3743  0016C4                     __ptext26:
  3744                           	opt callstack 0
  3745  0016C4                     _EventLowFogPressureCallBack:
  3746                           	opt callstack 22
  3747                           
  3748                           ;EventLowFogPressure.c: 15:     if (timer_events[EventLowFogPressure].flag_data) {
  3749                           
  3750                           ;incstack = 0
  3751  0016C4  0100               	movlb	0	; () banked
  3752  0016C6  517C               	movf	(_timer_events+28)& (0+255),w,b	;volatile
  3753  0016C8  117D               	iorwf	(_timer_events+29)& (0+255),w,b	;volatile
  3754  0016CA  B4D8               	btfsc	status,2,c
  3755  0016CC  D00E               	goto	l67
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;EventLowFogPressure.c: 16:     enable_callback (EventLowFogPressure, timer_events[Event
      +                          LowFogPressure].flag_data);
  3759  0016CE  C07C  F014         	movff	_timer_events+28,enable_callback@time_delay	;volatile
  3760  0016D2  C07D  F015         	movff	_timer_events+29,enable_callback@time_delay+1	;volatile
  3761  0016D6  0E03               	movlw	3
  3762  0016D8  EC91  F00A         	call	_enable_callback
  3763                           
  3764                           ;EventLowFogPressure.c: 17:         timer_events[EventLowFogPressure].flag_data = 0;
  3765  0016DC  0E00               	movlw	0
  3766  0016DE  0100               	movlb	0	; () banked
  3767  0016E0  6F7D               	movwf	(_timer_events+29)& (0+255),b	;volatile
  3768  0016E2  0E00               	movlw	0
  3769  0016E4  6F7C               	movwf	(_timer_events+28)& (0+255),b	;volatile
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;EventLowFogPressure.c: 18:         timer_events[EventLowFogPressure].flag_bit = 1;
  3773  0016E6  837A               	bsf	(_timer_events+26)& (0+255),1,b	;volatile
  3774                           
  3775                           ;EventLowFogPressure.c: 19:   }
  3776  0016E8  0012               	return	
  3777  0016EA                     l67:
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;EventLowFogPressure.c: 21:         fault_flags.lfp_fault = 1;
  3781  0016EA  8447               	bsf	_fault_flags,2,c
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;EventLowFogPressure.c: 22:         state = shutdownState;
  3785  0016EC  0E01               	movlw	1
  3786  0016EE  6E4B               	movwf	_state,c
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;EventLowFogPressure.c: 23:         clear_callback_for_shutdown();
  3790  0016F0  ECC5  F00B         	call	_clear_callback_for_shutdown	;wreg free
  3791  0016F4  0012               	return		;funcret
  3792  0016F6                     __end_of_EventLowFogPressureCallBack:
  3793                           	opt callstack 0
  3794                           
  3795 ;; *************** function _EventIdleTimeoutCallBack *****************
  3796 ;; Defined at:
  3797 ;;		line 5 in file "EventIdleTimeout.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3811 ;;      Params:         0       0       0       0       0       0       0       0       0
  3812 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3814 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3815 ;;Total ram usage:        0 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    6
  3818 ;; This function calls:
  3819 ;;		_enable_callback
  3820 ;; This function is called by:
  3821 ;;		_init_event_timer
  3822 ;;		_process_event_timer
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text27
  3827  0014DC                     __ptext27:
  3828                           	opt callstack 0
  3829  0014DC                     _EventIdleTimeoutCallBack:
  3830                           	opt callstack 23
  3831                           
  3832                           ;EventIdleTimeout.c: 7:   if (!timer_events[EventIdleTimeout].flag_bit) {
  3833                           
  3834                           ;incstack = 0
  3835  0014DC  0100               	movlb	0	; () banked
  3836  0014DE  B38A               	btfsc	(_timer_events+42)& (0+255),1,b	;volatile
  3837  0014E0  D010               	goto	l52
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;EventIdleTimeout.c: 11:     { PORTAbits.RA2 = (1); fault_flags.dumpSolenoidBit = (1);};
  3841  0014E2  8480               	bsf	3968,2,c	;volatile
  3842  0014E4  8048               	bsf	_fault_flags+1,0,c
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;EventIdleTimeout.c: 12:     inIdleDumpHour = 1;
  3846  0014E6  0E01               	movlw	1
  3847  0014E8  6E4A               	movwf	_inIdleDumpHour,c
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;EventIdleTimeout.c: 17:     timer_events[EventIdleTimeout].flag_bit = 1;
  3851  0014EA  838A               	bsf	(_timer_events+42)& (0+255),1,b	;volatile
  3852                           
  3853                           ;EventIdleTimeout.c: 18:     timer_events[EventIdleTimeout].flag_data = 0;
  3854  0014EC  0E00               	movlw	0
  3855  0014EE  6F8D               	movwf	(_timer_events+45)& (0+255),b	;volatile
  3856  0014F0  0E00               	movlw	0
  3857  0014F2  6F8C               	movwf	(_timer_events+44)& (0+255),b	;volatile
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;EventIdleTimeout.c: 19:     enable_callback (EventIdleTimeout, (0x7fff));
  3861  0014F4  0E7F               	movlw	127
  3862  0014F6  6E15               	movwf	enable_callback@time_delay+1,c
  3863  0014F8  6814               	setf	enable_callback@time_delay,c
  3864  0014FA  0E05               	movlw	5
  3865  0014FC  EC91  F00A         	call	_enable_callback
  3866                           
  3867                           ;EventIdleTimeout.c: 21:   }
  3868  001500  0012               	return	
  3869  001502                     l52:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;EventIdleTimeout.c: 26:     { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  3873  001502  9480               	bcf	3968,2,c	;volatile
  3874  001504  9048               	bcf	_fault_flags+1,0,c
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;EventIdleTimeout.c: 27:     inIdleDumpHour = 0;
  3878  001506  0E00               	movlw	0
  3879  001508  6E4A               	movwf	_inIdleDumpHour,c
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;EventIdleTimeout.c: 30:     timer_events[EventIdleTimeout].flag_bit = 1;
  3883  00150A  838A               	bsf	(_timer_events+42)& (0+255),1,b	;volatile
  3884                           
  3885                           ;EventIdleTimeout.c: 31:     timer_events[EventIdleTimeout].flag_data = 0;
  3886  00150C  0E00               	movlw	0
  3887  00150E  6F8D               	movwf	(_timer_events+45)& (0+255),b	;volatile
  3888  001510  0E00               	movlw	0
  3889  001512  6F8C               	movwf	(_timer_events+44)& (0+255),b	;volatile
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;EventIdleTimeout.c: 32:     enable_callback (EventIdleTimeout, (0x7fff));
  3893  001514  0E7F               	movlw	127
  3894  001516  6E15               	movwf	enable_callback@time_delay+1,c
  3895  001518  6814               	setf	enable_callback@time_delay,c
  3896  00151A  0E05               	movlw	5
  3897  00151C  EC91  F00A         	call	_enable_callback
  3898  001520  0012               	return		;funcret
  3899  001522                     __end_of_EventIdleTimeoutCallBack:
  3900                           	opt callstack 0
  3901                           
  3902 ;; *************** function _EventFaultStateLEDCallBack *****************
  3903 ;; Defined at:
  3904 ;;		line 3 in file "EventFaultStateLed.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3918 ;;      Params:         0       0       0       0       0       0       0       0       0
  3919 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3920 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3921 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3922 ;;Total ram usage:        7 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    6
  3925 ;; This function calls:
  3926 ;;		_enable_callback
  3927 ;; This function is called by:
  3928 ;;		_init_event_timer
  3929 ;;		_process_event_timer
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text28
  3934  0008AC                     __ptext28:
  3935                           	opt callstack 0
  3936  0008AC                     _EventFaultStateLEDCallBack:
  3937                           	opt callstack 23
  3938                           
  3939                           ;EventFaultStateLed.c: 13:   if (!(fault_flags.lwl_fault
  3940                           
  3941                           ;incstack = 0
  3942  0008AC  A047               	btfss	_fault_flags,0,c
  3943  0008AE  B247               	btfsc	_fault_flags,1,c
  3944  0008B0  D012               	goto	l20
  3945  0008B2  A447               	btfss	_fault_flags,2,c
  3946  0008B4  B647               	btfsc	_fault_flags,3,c
  3947  0008B6  D00F               	goto	l20
  3948                           
  3949                           ;EventFaultStateLed.c: 16:     || fault_flags.po_fault )) {;EventFaultStateLed.c: 18:   
      +                            { PORTAbits.RA3 = (0);};
  3950  0008B8  9680               	bcf	3968,3,c	;volatile
  3951                           
  3952                           ;EventFaultStateLed.c: 19:     timer_events[EventFaultStateLED].flag_bit = 0;
  3953  0008BA  0100               	movlb	0	; () banked
  3954  0008BC  9382               	bcf	(_timer_events+34)& (0+255),1,b	;volatile
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;EventFaultStateLed.c: 20:     timer_events[EventFaultStateLED].flag_data = 0;
  3958  0008BE  0E00               	movlw	0
  3959  0008C0  6F85               	movwf	(_timer_events+37)& (0+255),b	;volatile
  3960  0008C2  0E00               	movlw	0
  3961  0008C4  6F84               	movwf	(_timer_events+36)& (0+255),b	;volatile
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;EventFaultStateLed.c: 21:     enable_callback (EventFaultStateLED, ((4000000/256/4/256)
      +                          /4));
  3965  0008C6  0E00               	movlw	0
  3966  0008C8  6E15               	movwf	enable_callback@time_delay+1,c
  3967  0008CA  0E03               	movlw	3
  3968  0008CC  6E14               	movwf	enable_callback@time_delay,c
  3969  0008CE  0E04               	movlw	4
  3970  0008D0  EC91  F00A         	call	_enable_callback
  3971                           
  3972                           ;EventFaultStateLed.c: 22:   }
  3973  0008D4  0012               	return	
  3974  0008D6                     l20:
  3975                           
  3976                           ;EventFaultStateLed.c: 29:     if (timer_events[EventFaultStateLED].flag_bit) {
  3977  0008D6  0100               	movlb	0	; () banked
  3978  0008D8  A382               	btfss	(_timer_events+34)& (0+255),1,b	;volatile
  3979  0008DA  D040               	goto	l22
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;EventFaultStateLed.c: 31:       { PORTAbits.RA3 = (0);};
  3983  0008DC  9680               	bcf	3968,3,c	;volatile
  3984                           
  3985                           ;EventFaultStateLed.c: 32:       timer_events[EventFaultStateLED].flag_bit = 0;
  3986  0008DE  9382               	bcf	(_timer_events+34)& (0+255),1,b	;volatile
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;EventFaultStateLed.c: 34:       if (timer_events[EventFaultStateLED].flag_data) {
  3990  0008E0  5184               	movf	(_timer_events+36)& (0+255),w,b	;volatile
  3991  0008E2  1185               	iorwf	(_timer_events+37)& (0+255),w,b	;volatile
  3992  0008E4  B4D8               	btfsc	status,2,c
  3993  0008E6  D008               	goto	l23
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;EventFaultStateLed.c: 36:  enable_callback (EventFaultStateLED, ((4000000/256/4/256)/4)
      +                          );
  3997  0008E8  0E00               	movlw	0
  3998  0008EA  6E15               	movwf	enable_callback@time_delay+1,c
  3999  0008EC  0E03               	movlw	3
  4000  0008EE  6E14               	movwf	enable_callback@time_delay,c
  4001  0008F0  0E04               	movlw	4
  4002  0008F2  EC91  F00A         	call	_enable_callback
  4003                           
  4004                           ;EventFaultStateLed.c: 37:       }
  4005  0008F6  0012               	return	
  4006  0008F8                     l23:
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;EventFaultStateLed.c: 43:  timer_events[EventFaultStateLED].flag_data =
  4010  0008F8  B647               	btfsc	_fault_flags,3,c
  4011  0008FA  D020               	goto	l4767
  4012                           
  4013                           ; BSR set to: 0
  4014  0008FC  B447               	btfsc	_fault_flags,2,c
  4015  0008FE  D015               	goto	l4763
  4016                           
  4017                           ; BSR set to: 0
  4018  000900  B247               	btfsc	_fault_flags,1,c
  4019  000902  D00A               	goto	l4759
  4020                           
  4021                           ; BSR set to: 0
  4022  000904  A047               	btfss	_fault_flags,0,c
  4023  000906  D003               	goto	u4430
  4024  000908  6A17               	clrf	??_EventFaultStateLEDCallBack& (0+255),c
  4025  00090A  2A17               	incf	??_EventFaultStateLEDCallBack& (0+255),f,c
  4026  00090C  D001               	goto	u4438
  4027  00090E                     u4430:
  4028  00090E  6A17               	clrf	??_EventFaultStateLEDCallBack& (0+255),c
  4029  000910                     u4438:
  4030  000910  5017               	movf	??_EventFaultStateLEDCallBack,w,c
  4031  000912  6E1C               	movwf	_EventFaultStateLEDCallBack$219,c
  4032  000914  6A1D               	clrf	_EventFaultStateLEDCallBack$219+1,c
  4033  000916  D004               	goto	l4761
  4034  000918                     l4759:
  4035                           
  4036                           ; BSR set to: 0
  4037  000918  0E00               	movlw	0
  4038  00091A  6E1D               	movwf	_EventFaultStateLEDCallBack$219+1,c
  4039  00091C  0E02               	movlw	2
  4040  00091E  6E1C               	movwf	_EventFaultStateLEDCallBack$219,c
  4041  000920                     l4761:
  4042  000920  C01C  F01A         	movff	_EventFaultStateLEDCallBack$219,_EventFaultStateLEDCallBack$218
  4043  000924  C01D  F01B         	movff	_EventFaultStateLEDCallBack$219+1,_EventFaultStateLEDCallBack$218+1
  4044  000928  D004               	goto	l4765
  4045  00092A                     l4763:
  4046                           
  4047                           ; BSR set to: 0
  4048  00092A  0E00               	movlw	0
  4049  00092C  6E1B               	movwf	_EventFaultStateLEDCallBack$218+1,c
  4050  00092E  0E03               	movlw	3
  4051  000930  6E1A               	movwf	_EventFaultStateLEDCallBack$218,c
  4052  000932                     l4765:
  4053  000932  C01A  F018         	movff	_EventFaultStateLEDCallBack$218,_EventFaultStateLEDCallBack$217
  4054  000936  C01B  F019         	movff	_EventFaultStateLEDCallBack$218+1,_EventFaultStateLEDCallBack$217+1
  4055  00093A  D004               	goto	l4769
  4056  00093C                     l4767:
  4057                           
  4058                           ; BSR set to: 0
  4059  00093C  0E00               	movlw	0
  4060  00093E  6E19               	movwf	_EventFaultStateLEDCallBack$217+1,c
  4061  000940  0E04               	movlw	4
  4062  000942  6E18               	movwf	_EventFaultStateLEDCallBack$217,c
  4063  000944                     l4769:
  4064  000944  C018  F084         	movff	_EventFaultStateLEDCallBack$217,_timer_events+36	;volatile
  4065  000948  C019  F085         	movff	_EventFaultStateLEDCallBack$217+1,_timer_events+37	;volatile
  4066                           
  4067                           ;EventFaultStateLed.c: 50:  enable_callback (EventFaultStateLED, ((4000000/256/4/256)*1)
      +                          );
  4068  00094C  0E00               	movlw	0
  4069  00094E  6E15               	movwf	enable_callback@time_delay+1,c
  4070  000950  0E0F               	movlw	15
  4071  000952  6E14               	movwf	enable_callback@time_delay,c
  4072  000954  0E04               	movlw	4
  4073  000956  EC91  F00A         	call	_enable_callback
  4074  00095A  0012               	return	
  4075  00095C                     l22:
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;EventFaultStateLed.c: 55:       { PORTAbits.RA3 = (1);};
  4079  00095C  8680               	bsf	3968,3,c	;volatile
  4080                           
  4081                           ;EventFaultStateLed.c: 56:       timer_events[EventFaultStateLED].flag_bit = 1;
  4082  00095E  8382               	bsf	(_timer_events+34)& (0+255),1,b	;volatile
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;EventFaultStateLed.c: 57:       if (timer_events[EventFaultStateLED].flag_data) {
  4086  000960  5184               	movf	(_timer_events+36)& (0+255),w,b	;volatile
  4087  000962  1185               	iorwf	(_timer_events+37)& (0+255),w,b	;volatile
  4088  000964  B4D8               	btfsc	status,2,c
  4089  000966  D003               	goto	l4777
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;EventFaultStateLed.c: 58:  timer_events[EventFaultStateLED].flag_data--;
  4093  000968  0784               	decf	(_timer_events+36)& (0+255),f,b	;volatile
  4094  00096A  A0D8               	btfss	status,0,c
  4095  00096C  0785               	decf	(_timer_events+37)& (0+255),f,b	;volatile
  4096  00096E                     l4777:
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;EventFaultStateLed.c: 60:       enable_callback (EventFaultStateLED, ((4000000/256/4/25
      +                          6)/4));
  4100  00096E  0E00               	movlw	0
  4101  000970  6E15               	movwf	enable_callback@time_delay+1,c
  4102  000972  0E03               	movlw	3
  4103  000974  6E14               	movwf	enable_callback@time_delay,c
  4104  000976  0E04               	movlw	4
  4105  000978  EC91  F00A         	call	_enable_callback
  4106  00097C  0012               	return		;funcret
  4107  00097E                     __end_of_EventFaultStateLEDCallBack:
  4108                           	opt callstack 0
  4109                           
  4110 ;; *************** function _EventDumpSolenoidCallBack *****************
  4111 ;; Defined at:
  4112 ;;		line 3 in file "EventDumpsolenoid.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;		None
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;		None
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      void 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4126 ;;      Params:         0       0       0       0       0       0       0       0       0
  4127 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4129 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4130 ;;Total ram usage:        0 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    5
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_init_event_timer
  4137 ;;		_process_event_timer
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           	psect	text29
  4142  001A3E                     __ptext29:
  4143                           	opt callstack 0
  4144  001A3E                     _EventDumpSolenoidCallBack:
  4145                           	opt callstack 24
  4146                           
  4147                           ;EventDumpsolenoid.c: 5:   { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  4148                           
  4149                           ;incstack = 0
  4150  001A3E  9480               	bcf	3968,2,c	;volatile
  4151  001A40  9048               	bcf	_fault_flags+1,0,c
  4152                           
  4153                           ;EventDumpsolenoid.c: 7:   state = standbyState;
  4154  001A42  0E00               	movlw	0
  4155  001A44  6E4B               	movwf	_state,c
  4156  001A46  0012               	return		;funcret
  4157  001A48                     __end_of_EventDumpSolenoidCallBack:
  4158                           	opt callstack 0
  4159                           
  4160 ;; *************** function _EventRunSignalDebounceCallBack *****************
  4161 ;; Defined at:
  4162 ;;		line 4 in file "EventRunSignalDebounce.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4176 ;;      Params:         0       0       0       0       0       0       0       0       0
  4177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4179 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4180 ;;Total ram usage:        0 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:    7
  4183 ;; This function calls:
  4184 ;;		_clear_callback_for_shutdown
  4185 ;; This function is called by:
  4186 ;;		_init_event_timer
  4187 ;;		_process_event_timer
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text30
  4192  001A1E                     __ptext30:
  4193                           	opt callstack 0
  4194  001A1E                     _EventRunSignalDebounceCallBack:
  4195                           	opt callstack 22
  4196                           
  4197                           ;EventRunSignalDebounce.c: 9:     state = timer_events[EventRunSignalDebounce].next_stat
      +                          e;
  4198                           
  4199                           ;incstack = 0
  4200  001A1E  C09B  F04B         	movff	_timer_events+59,_state	;volatile
  4201                           
  4202                           ;EventRunSignalDebounce.c: 10:     if (shutdownState == state) {
  4203  001A22  044B               	decf	_state,w,c
  4204  001A24  A4D8               	btfss	status,2,c
  4205  001A26  0012               	return	
  4206                           
  4207                           ;EventRunSignalDebounce.c: 12:         clear_callback_for_shutdown();
  4208  001A28  ECC5  F00B         	call	_clear_callback_for_shutdown	;wreg free
  4209  001A2C  0012               	return		;funcret
  4210  001A2E                     __end_of_EventRunSignalDebounceCallBack:
  4211                           	opt callstack 0
  4212                           
  4213 ;; *************** function _clear_callback_for_shutdown *****************
  4214 ;; Defined at:
  4215 ;;		line 30 in file "timer_event.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4229 ;;      Params:         0       0       0       0       0       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4232 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4233 ;;Total ram usage:        0 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    6
  4236 ;; This function calls:
  4237 ;;		_clear_callback
  4238 ;; This function is called by:
  4239 ;;		_EventLowFogPressureCallBack
  4240 ;;		_EventLowWaterLevelCallBack
  4241 ;;		_EventLowWaterPressureCallBack
  4242 ;;		_EventPODebounceCallBack
  4243 ;;		_EventRunSignalDebounceCallBack
  4244 ;;		_start_pump
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text31
  4249  00178A                     __ptext31:
  4250                           	opt callstack 0
  4251  00178A                     _clear_callback_for_shutdown:
  4252                           	opt callstack 23
  4253                           
  4254                           ;timer_event.c: 31:     clear_callback(EventLowWaterLevel);
  4255                           
  4256                           ;incstack = 0
  4257  00178A  0E00               	movlw	0
  4258  00178C  ECC9  F00C         	call	_clear_callback
  4259                           
  4260                           ;timer_event.c: 32:     clear_callback(EventLowWaterPressure);
  4261  001790  0E01               	movlw	1
  4262  001792  ECC9  F00C         	call	_clear_callback
  4263                           
  4264                           ;timer_event.c: 33:     clear_callback(EventLowWaterPressureDebounce);
  4265  001796  0E02               	movlw	2
  4266  001798  ECC9  F00C         	call	_clear_callback
  4267                           
  4268                           ;timer_event.c: 34:     clear_callback(EventLowFogPressure);
  4269  00179C  0E03               	movlw	3
  4270  00179E  ECC9  F00C         	call	_clear_callback
  4271                           
  4272                           ;timer_event.c: 35:     clear_callback(EventDumpSolenoid);
  4273  0017A2  0E06               	movlw	6
  4274  0017A4  ECC9  F00C         	call	_clear_callback
  4275                           
  4276                           ;timer_event.c: 36:     clear_callback(EventPODebounce);
  4277  0017A8  0E08               	movlw	8
  4278  0017AA  ECC9  F00C         	call	_clear_callback
  4279                           
  4280                           ;timer_event.c: 37:     clear_callback(EventRunSignalDebounce);
  4281  0017AE  0E07               	movlw	7
  4282  0017B0  ECC9  F00C         	call	_clear_callback
  4283  0017B4  0012               	return		;funcret
  4284  0017B6                     __end_of_clear_callback_for_shutdown:
  4285                           	opt callstack 0
  4286                           
  4287 ;; *************** function _printPumpState *****************
  4288 ;; Defined at:
  4289 ;;		line 98 in file "pump_control.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;		None
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4303 ;;      Params:         0       0       0       0       0       0       0       0       0
  4304 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4306 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4307 ;;Total ram usage:        0 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:   14
  4310 ;; This function calls:
  4311 ;;		_printf
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text32
  4318  001922                     __ptext32:
  4319                           	opt callstack 0
  4320  001922                     _printPumpState:
  4321                           	opt callstack 16
  4322                           
  4323                           ;pump_control.c: 99:     printf(PumpStateMappings[state]);
  4324                           
  4325                           ;incstack = 0
  4326  001922  504B               	movf	_state,w,c
  4327  001924  0D02               	mullw	2
  4328  001926  0E2A               	movlw	low _PumpStateMappings
  4329  001928  24F3               	addwf	prodl,w,c
  4330  00192A  6ED9               	movwf	fsr2l,c
  4331  00192C  0E01               	movlw	high _PumpStateMappings
  4332  00192E  20F4               	addwfc	prodh,w,c
  4333  001930  6EDA               	movwf	fsr2h,c
  4334  001932  CFDE F0EF          	movff	postinc2,printf@fmt
  4335  001936  CFDD F0F0          	movff	postdec2,printf@fmt+1
  4336  00193A  EC04  F00C         	call	_printf	;wreg free
  4337  00193E  0012               	return		;funcret
  4338  001940                     __end_of_printPumpState:
  4339                           	opt callstack 0
  4340                           
  4341 ;; *************** function _printFaultState *****************
  4342 ;; Defined at:
  4343 ;;		line 102 in file "pump_control.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;		None
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;		None
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4357 ;;      Params:         0       0       0       0       0       0       0       0       0
  4358 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4360 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4361 ;;Total ram usage:        0 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:   14
  4364 ;; This function calls:
  4365 ;;		_printf
  4366 ;; This function is called by:
  4367 ;;		_main
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text33
  4372  000A34                     __ptext33:
  4373                           	opt callstack 0
  4374  000A34                     _printFaultState:
  4375                           	opt callstack 16
  4376                           
  4377                           ;pump_control.c: 103:     if (fault_flags . boostPumpBit) {
  4378                           
  4379                           ;incstack = 0
  4380  000A34  AC47               	btfss	_fault_flags,6,c
  4381  000A36  D007               	goto	l4943
  4382                           
  4383                           ;pump_control.c: 104:         printf("boostPumpBit\n\r");
  4384  000A38  0E66               	movlw	low STR_8
  4385  000A3A  0100               	movlb	0	; () banked
  4386  000A3C  6FEF               	movwf	printf@fmt& (0+255),b
  4387  000A3E  0E7D               	movlw	high STR_8
  4388  000A40  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4389  000A42  EC04  F00C         	call	_printf	;wreg free
  4390  000A46                     l4943:
  4391                           
  4392                           ;pump_control.c: 106:     if (fault_flags . lwl_fault) {
  4393  000A46  A047               	btfss	_fault_flags,0,c
  4394  000A48  D007               	goto	l4947
  4395                           
  4396                           ;pump_control.c: 107:         printf("lwl_fault\n\r");
  4397  000A4A  0E83               	movlw	low STR_9
  4398  000A4C  0100               	movlb	0	; () banked
  4399  000A4E  6FEF               	movwf	printf@fmt& (0+255),b
  4400  000A50  0E7D               	movlw	high STR_9
  4401  000A52  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4402  000A54  EC04  F00C         	call	_printf	;wreg free
  4403  000A58                     l4947:
  4404                           
  4405                           ;pump_control.c: 109:     if (fault_flags . lwp_fault) {
  4406  000A58  A247               	btfss	_fault_flags,1,c
  4407  000A5A  D007               	goto	l4951
  4408                           
  4409                           ;pump_control.c: 110:         printf("lwp_fault\n\r");
  4410  000A5C  0E9B               	movlw	low STR_10
  4411  000A5E  0100               	movlb	0	; () banked
  4412  000A60  6FEF               	movwf	printf@fmt& (0+255),b
  4413  000A62  0E7D               	movlw	high STR_10
  4414  000A64  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4415  000A66  EC04  F00C         	call	_printf	;wreg free
  4416  000A6A                     l4951:
  4417                           
  4418                           ;pump_control.c: 112:     if (fault_flags . lfp_fault) {
  4419  000A6A  A447               	btfss	_fault_flags,2,c
  4420  000A6C  D007               	goto	l4955
  4421                           
  4422                           ;pump_control.c: 113:         printf("lfp_fault\n\r");
  4423  000A6E  0E8F               	movlw	low STR_11
  4424  000A70  0100               	movlb	0	; () banked
  4425  000A72  6FEF               	movwf	printf@fmt& (0+255),b
  4426  000A74  0E7D               	movlw	high STR_11
  4427  000A76  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4428  000A78  EC04  F00C         	call	_printf	;wreg free
  4429  000A7C                     l4955:
  4430                           
  4431                           ;pump_control.c: 115:     if (fault_flags . po_fault) {
  4432  000A7C  A647               	btfss	_fault_flags,3,c
  4433  000A7E  D007               	goto	l4959
  4434                           
  4435                           ;pump_control.c: 116:         printf("po_fault\n\r");
  4436  000A80  0EA7               	movlw	low STR_12
  4437  000A82  0100               	movlb	0	; () banked
  4438  000A84  6FEF               	movwf	printf@fmt& (0+255),b
  4439  000A86  0E7D               	movlw	high STR_12
  4440  000A88  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4441  000A8A  EC04  F00C         	call	_printf	;wreg free
  4442  000A8E                     l4959:
  4443                           
  4444                           ;pump_control.c: 118:     if (fault_flags . wpOkBit) {
  4445  000A8E  A847               	btfss	_fault_flags,4,c
  4446  000A90  D007               	goto	l4963
  4447                           
  4448                           ;pump_control.c: 119:         printf("wpOkBit\n\r");
  4449  000A92  0EB2               	movlw	low STR_13
  4450  000A94  0100               	movlb	0	; () banked
  4451  000A96  6FEF               	movwf	printf@fmt& (0+255),b
  4452  000A98  0E7D               	movlw	high STR_13
  4453  000A9A  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4454  000A9C  EC04  F00C         	call	_printf	;wreg free
  4455  000AA0                     l4963:
  4456                           
  4457                           ;pump_control.c: 121:     if (fault_flags . mainPumpBit) {
  4458  000AA0  AA47               	btfss	_fault_flags,5,c
  4459  000AA2  D007               	goto	l4967
  4460                           
  4461                           ;pump_control.c: 122:         printf("mainPumpBit\n\r");
  4462  000AA4  0E75               	movlw	low STR_14
  4463  000AA6  0100               	movlb	0	; () banked
  4464  000AA8  6FEF               	movwf	printf@fmt& (0+255),b
  4465  000AAA  0E7D               	movlw	high STR_14
  4466  000AAC  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4467  000AAE  EC04  F00C         	call	_printf	;wreg free
  4468  000AB2                     l4967:
  4469                           
  4470                           ;pump_control.c: 124:     if (fault_flags . boostPumpBit) {
  4471  000AB2  AC47               	btfss	_fault_flags,6,c
  4472  000AB4  D007               	goto	l4971
  4473                           
  4474                           ;pump_control.c: 125:         printf("boostPumpBit\n\r");
  4475  000AB6  0E66               	movlw	low STR_8
  4476  000AB8  0100               	movlb	0	; () banked
  4477  000ABA  6FEF               	movwf	printf@fmt& (0+255),b
  4478  000ABC  0E7D               	movlw	high STR_8
  4479  000ABE  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4480  000AC0  EC04  F00C         	call	_printf	;wreg free
  4481  000AC4                     l4971:
  4482                           
  4483                           ;pump_control.c: 127:     if (fault_flags . pumpOverloadBit) {
  4484  000AC4  AE47               	btfss	_fault_flags,7,c
  4485  000AC6  D007               	goto	l4975
  4486                           
  4487                           ;pump_control.c: 128:         printf("pumpOverloadBit\n\r");
  4488  000AC8  0ED5               	movlw	low STR_16
  4489  000ACA  0100               	movlb	0	; () banked
  4490  000ACC  6FEF               	movwf	printf@fmt& (0+255),b
  4491  000ACE  0E7C               	movlw	high STR_16
  4492  000AD0  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4493  000AD2  EC04  F00C         	call	_printf	;wreg free
  4494  000AD6                     l4975:
  4495                           
  4496                           ;pump_control.c: 130:     if (fault_flags . dumpSolenoidBit) {
  4497  000AD6  A048               	btfss	_fault_flags+1,0,c
  4498  000AD8  0012               	return	
  4499                           
  4500                           ;pump_control.c: 131:         printf("dumpSolenoidBit\n\r");
  4501  000ADA  0EE7               	movlw	low STR_17
  4502  000ADC  0100               	movlb	0	; () banked
  4503  000ADE  6FEF               	movwf	printf@fmt& (0+255),b
  4504  000AE0  0E7C               	movlw	high STR_17
  4505  000AE2  6FF0               	movwf	(printf@fmt+1)& (0+255),b
  4506  000AE4  EC04  F00C         	call	_printf	;wreg free
  4507  000AE8  0012               	return		;funcret
  4508  000AEA                     __end_of_printFaultState:
  4509                           	opt callstack 0
  4510                           
  4511 ;; *************** function _printf *****************
  4512 ;; Defined at:
  4513 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  fmt             2   57[BANK0 ] PTR const unsigned char 
  4516 ;;		 -> STR_23(15), STR_22(3), STR_19(23), STR_18(15), 
  4517 ;;		 -> STR_17(18), STR_16(18), STR_15(15), STR_14(14), 
  4518 ;;		 -> STR_13(10), STR_12(11), STR_11(12), STR_10(12), 
  4519 ;;		 -> STR_9(12), STR_8(15), STR_7(15), STR_6(17), 
  4520 ;;		 -> STR_5(31), STR_4(21), STR_3(24), STR_2(16), 
  4521 ;;		 -> STR_1(15), 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  ap              2   65[BANK0 ] PTR void [1]
  4524 ;;		 -> ?_printf(2), 
  4525 ;;  ret             2    0        int 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  2   57[BANK0 ] int 
  4528 ;; Registers used:
  4529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4535 ;;      Params:         0       6       0       0       0       0       0       0       0
  4536 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4537 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4538 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4539 ;;Total ram usage:       10 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:   13
  4542 ;; This function calls:
  4543 ;;		_vfprintf
  4544 ;; This function is called by:
  4545 ;;		_printPumpState
  4546 ;;		_printFaultState
  4547 ;;		_main
  4548 ;;		_receiveMessage
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text34
  4553  001808                     __ptext34:
  4554                           	opt callstack 0
  4555  001808                     _printf:
  4556                           	opt callstack 16
  4557                           
  4558                           ;incstack = 0
  4559  001808  0EF1               	movlw	low (?_printf+2)
  4560  00180A  0100               	movlb	0	; () banked
  4561  00180C  6FF7               	movwf	printf@ap& (0+255),b
  4562  00180E  0E00               	movlw	high (?_printf+2)
  4563  001810  6FF8               	movwf	(printf@ap+1)& (0+255),b
  4564                           
  4565                           ; BSR set to: 0
  4566  001812  0E00               	movlw	0
  4567  001814  6FE7               	movwf	vfprintf@fp& (0+255),b
  4568  001816  0E00               	movlw	0
  4569  001818  6FE8               	movwf	(vfprintf@fp+1)& (0+255),b
  4570  00181A  C0EF  F0E9         	movff	printf@fmt,vfprintf@fmt
  4571  00181E  C0F0  F0EA         	movff	printf@fmt+1,vfprintf@fmt+1
  4572  001822  0EF7               	movlw	low printf@ap
  4573  001824  6FEB               	movwf	vfprintf@ap& (0+255),b
  4574  001826  0E00               	movlw	high printf@ap
  4575  001828  6FEC               	movwf	(vfprintf@ap+1)& (0+255),b
  4576  00182A  ECF5  F009         	call	_vfprintf	;wreg free
  4577  00182E  0012               	return		;funcret
  4578  001830                     __end_of_printf:
  4579                           	opt callstack 0
  4580                           
  4581 ;; *************** function _vfprintf *****************
  4582 ;; Defined at:
  4583 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  fp              2   49[BANK0 ] PTR struct _IO_FILE
  4586 ;;		 -> NULL(0), 
  4587 ;;  fmt             2   51[BANK0 ] PTR const unsigned char 
  4588 ;;		 -> STR_23(15), STR_22(3), STR_19(23), STR_18(15), 
  4589 ;;		 -> STR_17(18), STR_16(18), STR_15(15), STR_14(14), 
  4590 ;;		 -> STR_13(10), STR_12(11), STR_11(12), STR_10(12), 
  4591 ;;		 -> STR_9(12), STR_8(15), STR_7(15), STR_6(17), 
  4592 ;;		 -> STR_5(31), STR_4(21), STR_3(24), STR_2(16), 
  4593 ;;		 -> STR_1(15), 
  4594 ;;  ap              2   53[BANK0 ] PTR PTR void 
  4595 ;;		 -> printf@ap(2), 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;  cfmt            2   55[BANK0 ] PTR unsigned char 
  4598 ;;		 -> STR_23(15), STR_22(3), STR_19(23), STR_18(15), 
  4599 ;;		 -> STR_17(18), STR_16(18), STR_15(15), STR_14(14), 
  4600 ;;		 -> STR_13(10), STR_12(11), STR_11(12), STR_10(12), 
  4601 ;;		 -> STR_9(12), STR_8(15), STR_7(15), STR_6(17), 
  4602 ;;		 -> STR_5(31), STR_4(21), STR_3(24), STR_2(16), 
  4603 ;;		 -> STR_1(15), 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  2   49[BANK0 ] int 
  4606 ;; Registers used:
  4607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4613 ;;      Params:         0       6       0       0       0       0       0       0       0
  4614 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4616 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4617 ;;Total ram usage:        8 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; Hardware stack levels required when called:   12
  4620 ;; This function calls:
  4621 ;;		_vfpfcnvrt
  4622 ;; This function is called by:
  4623 ;;		_printf
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text35
  4628  0013EA                     __ptext35:
  4629                           	opt callstack 0
  4630  0013EA                     _vfprintf:
  4631                           	opt callstack 16
  4632                           
  4633                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  4634                           
  4635                           ;incstack = 0
  4636  0013EA  C0E9  F0ED         	movff	vfprintf@fmt,vfprintf@cfmt
  4637  0013EE  C0EA  F0EE         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4638                           
  4639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  4640  0013F2  0E00               	movlw	0
  4641  0013F4  0100               	movlb	0	; () banked
  4642  0013F6  6FA9               	movwf	(_nout+1)& (0+255),b
  4643  0013F8  0E00               	movlw	0
  4644  0013FA  6FA8               	movwf	_nout& (0+255),b
  4645                           
  4646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4647  0013FC  D013               	goto	l4727
  4648  0013FE                     l4725:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  4652  0013FE  C0E7  F0D2         	movff	vfprintf@fp,vfpfcnvrt@fp
  4653  001402  C0E8  F0D3         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4654  001406  0EED               	movlw	low vfprintf@cfmt
  4655  001408  6FD4               	movwf	vfpfcnvrt@fmt& (0+255),b
  4656  00140A  0E00               	movlw	high vfprintf@cfmt
  4657  00140C  6FD5               	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  4658  00140E  C0EB  F0D6         	movff	vfprintf@ap,vfpfcnvrt@ap
  4659  001412  C0EC  F0D7         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4660  001416  EC09  F000         	call	_vfpfcnvrt	;wreg free
  4661  00141A  0100               	movlb	0	; () banked
  4662  00141C  51D2               	movf	?_vfpfcnvrt& (0+255),w,b
  4663  00141E  27A8               	addwf	_nout& (0+255),f,b
  4664  001420  51D3               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
  4665  001422  23A9               	addwfc	(_nout+1)& (0+255),f,b
  4666  001424                     l4727:
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4670  001424  C0ED  FFF6         	movff	vfprintf@cfmt,tblptrl
  4671  001428  C0EE  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4672  00142C                     	if	0	;tblptru may be non-zero
  4673  00142C                     	endif
  4674  00142C                     	if	0	;tblptru may be non-zero
  4675  00142C                     	endif
  4676  00142C  0008               	tblrd		*
  4677  00142E  50F5               	movf	tablat,w,c
  4678  001430  0900               	iorlw	0
  4679  001432  A4D8               	btfss	status,2,c
  4680  001434  D7E4               	goto	l4725
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  4684  001436  C0A8  F0E7         	movff	_nout,?_vfprintf
  4685  00143A  C0A9  F0E8         	movff	_nout+1,?_vfprintf+1
  4686                           
  4687                           ; BSR set to: 0
  4688  00143E  0012               	return		;funcret
  4689  001440                     __end_of_vfprintf:
  4690                           	opt callstack 0
  4691                           
  4692 ;; *************** function _vfpfcnvrt *****************
  4693 ;; Defined at:
  4694 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  fp              2   28[BANK0 ] PTR struct _IO_FILE
  4697 ;;		 -> NULL(0), 
  4698 ;;  fmt             2   30[BANK0 ] PTR PTR unsigned char 
  4699 ;;		 -> vfprintf@cfmt(2), 
  4700 ;;  ap              2   32[BANK0 ] PTR PTR void 
  4701 ;;		 -> printf@ap(2), 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  ll              8   36[BANK0 ] long long 
  4704 ;;  llu             8    0        unsigned long long 
  4705 ;;  f               4    0        unsigned long long 
  4706 ;;  ct              3    0        unsigned char [3]
  4707 ;;  vp              2   46[BANK0 ] PTR void 
  4708 ;;		 -> ?_printf(2), receiveMessage@message(10), NULL(0), 
  4709 ;;  cp              2   44[BANK0 ] PTR unsigned char 
  4710 ;;		 -> ?_printf(2), receiveMessage@message(10), NULL(0), 
  4711 ;;  i               2    0        int 
  4712 ;;  done            2    0        int 
  4713 ;;  c               1   48[BANK0 ] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  2   28[BANK0 ] int 
  4716 ;; Registers used:
  4717 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4723 ;;      Params:         0       6       0       0       0       0       0       0       0
  4724 ;;      Locals:         0      13       0       0       0       0       0       0       0
  4725 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4726 ;;      Totals:         0      21       0       0       0       0       0       0       0
  4727 ;;Total ram usage:       21 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:   11
  4730 ;; This function calls:
  4731 ;;		_ctoa
  4732 ;;		_dtoa
  4733 ;;		_fputc
  4734 ;;		_stoa
  4735 ;; This function is called by:
  4736 ;;		_vfprintf
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text36
  4741  000012                     __ptext36:
  4742                           	opt callstack 0
  4743  000012                     _vfpfcnvrt:
  4744                           	opt callstack 16
  4745                           
  4746                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;incstack = 0
  4750  000012  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4751  000016  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4752  00001A  CFDE FFF6          	movff	postinc2,tblptrl
  4753  00001E  CFDD FFF7          	movff	postdec2,tblptrh
  4754  000022                     	if	0	;tblptru may be non-zero
  4755  000022                     	endif
  4756  000022                     	if	0	;tblptru may be non-zero
  4757  000022                     	endif
  4758  000022  0008               	tblrd		*
  4759  000024  50F5               	movf	tablat,w,c
  4760  000026  0A25               	xorlw	37
  4761  000028  A4D8               	btfss	status,2,c
  4762  00002A  D138               	goto	l4635
  4763                           
  4764                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  4765  00002C  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4766  000030  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4767  000034  2ADE               	incf	postinc2,f,c
  4768  000036  0E00               	movlw	0
  4769  000038  22DD               	addwfc	postdec2,f,c
  4770                           
  4771                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  4772  00003A  0E00               	movlw	0
  4773  00003C  6E40               	movwf	_width+1,c
  4774  00003E  0E00               	movlw	0
  4775  000040  6E3F               	movwf	_width,c
  4776  000042  C03F  F043         	movff	_width,_flags
  4777  000046  C040  F044         	movff	_width+1,_flags+1
  4778                           
  4779                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  4780  00004A  6841               	setf	_prec,c
  4781  00004C  6842               	setf	_prec+1,c
  4782                           
  4783                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  4784  00004E  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4785  000052  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4786  000056  CFDE FFF6          	movff	postinc2,tblptrl
  4787  00005A  CFDD FFF7          	movff	postdec2,tblptrh
  4788  00005E                     	if	0	;tblptru may be non-zero
  4789  00005E                     	endif
  4790  00005E                     	if	0	;tblptru may be non-zero
  4791  00005E                     	endif
  4792  00005E  0008               	tblrd		*
  4793  000060  50F5               	movf	tablat,w,c
  4794  000062  0A63               	xorlw	99
  4795  000064  A4D8               	btfss	status,2,c
  4796  000066  D027               	goto	l4591
  4797                           
  4798                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  4799  000068  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4800  00006C  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4801  000070  2ADE               	incf	postinc2,f,c
  4802  000072  0E00               	movlw	0
  4803  000074  22DD               	addwfc	postdec2,f,c
  4804                           
  4805                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  4806  000076  C0D6  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4807  00007A  C0D7  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4808  00007E  CFDF F0D8          	movff	indf2,??_vfpfcnvrt
  4809  000082  0E02               	movlw	2
  4810  000084  26DE               	addwf	postinc2,f,c
  4811  000086  CFDF F0D9          	movff	indf2,??_vfpfcnvrt+1
  4812  00008A  0E00               	movlw	0
  4813  00008C  22DD               	addwfc	postdec2,f,c
  4814  00008E  C0D8  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4815  000092  C0D9  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4816  000096  50DF               	movf	indf2,w,c
  4817  000098  0100               	movlb	0	; () banked
  4818  00009A  6FE6               	movwf	vfpfcnvrt@c& (0+255),b
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  4822  00009C  C0D2  F037         	movff	vfpfcnvrt@fp,ctoa@fp
  4823  0000A0  C0D3  F038         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  4824  0000A4  C0E6  F039         	movff	vfpfcnvrt@c,ctoa@c
  4825  0000A8  EC47  F00A         	call	_ctoa	;wreg free
  4826  0000AC  C037  F0D2         	movff	?_ctoa,?_vfpfcnvrt
  4827  0000B0  C038  F0D3         	movff	?_ctoa+1,?_vfpfcnvrt+1
  4828  0000B4  0012               	return	
  4829  0000B6                     l4591:
  4830                           
  4831                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  4832  0000B6  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4833  0000BA  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4834  0000BE  CFDE FFF6          	movff	postinc2,tblptrl
  4835  0000C2  CFDD FFF7          	movff	postdec2,tblptrh
  4836  0000C6                     	if	0	;tblptru may be non-zero
  4837  0000C6                     	endif
  4838  0000C6                     	if	0	;tblptru may be non-zero
  4839  0000C6                     	endif
  4840  0000C6  0008               	tblrd		*
  4841  0000C8  50F5               	movf	tablat,w,c
  4842  0000CA  0A64               	xorlw	100
  4843  0000CC  B4D8               	btfsc	status,2,c
  4844  0000CE  D00D               	goto	u4180
  4845  0000D0  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4846  0000D4  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4847  0000D8  CFDE FFF6          	movff	postinc2,tblptrl
  4848  0000DC  CFDD FFF7          	movff	postdec2,tblptrh
  4849  0000E0                     	if	0	;tblptru may be non-zero
  4850  0000E0                     	endif
  4851  0000E0                     	if	0	;tblptru may be non-zero
  4852  0000E0                     	endif
  4853  0000E0  0008               	tblrd		*
  4854  0000E2  50F5               	movf	tablat,w,c
  4855  0000E4  0A69               	xorlw	105
  4856  0000E6  A4D8               	btfss	status,2,c
  4857  0000E8  D040               	goto	l4601
  4858  0000EA                     u4180:
  4859                           
  4860                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  4861  0000EA  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4862  0000EE  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4863  0000F2  2ADE               	incf	postinc2,f,c
  4864  0000F4  0E00               	movlw	0
  4865  0000F6  22DD               	addwfc	postdec2,f,c
  4866                           
  4867                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  4868  0000F8  C0D6  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4869  0000FC  C0D7  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4870  000100  CFDF F0D8          	movff	indf2,??_vfpfcnvrt
  4871  000104  0E02               	movlw	2
  4872  000106  26DE               	addwf	postinc2,f,c
  4873  000108  CFDF F0D9          	movff	indf2,??_vfpfcnvrt+1
  4874  00010C  0E00               	movlw	0
  4875  00010E  22DD               	addwfc	postdec2,f,c
  4876  000110  C0D8  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4877  000114  C0D9  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4878  000118  CFDE F0DA          	movff	postinc2,vfpfcnvrt@ll
  4879  00011C  CFDD F0DB          	movff	postdec2,vfpfcnvrt@ll+1
  4880  000120  0100               	movlb	0	; () banked
  4881  000122  0E00               	movlw	0
  4882  000124  BFDB               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  4883  000126  0EFF               	movlw	-1
  4884  000128  6FDC               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  4885  00012A  6FDD               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  4886  00012C  6FDE               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  4887  00012E  6FDF               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  4888  000130  6FE0               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  4889  000132  6FE1               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  4893  000134  C0D2  F0B6         	movff	vfpfcnvrt@fp,dtoa@fp
  4894  000138  C0D3  F0B7         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4895  00013C  C0DA  F0B8         	movff	vfpfcnvrt@ll,dtoa@d
  4896  000140  C0DB  F0B9         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  4897  000144  C0DC  F0BA         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  4898  000148  C0DD  F0BB         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  4899  00014C  C0DE  F0BC         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  4900  000150  C0DF  F0BD         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  4901  000154  C0E0  F0BE         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  4902  000158  C0E1  F0BF         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  4903  00015C  EC68  F001         	call	_dtoa	;wreg free
  4904  000160  C0B6  F0D2         	movff	?_dtoa,?_vfpfcnvrt
  4905  000164  C0B7  F0D3         	movff	?_dtoa+1,?_vfpfcnvrt+1
  4906  000168  0012               	return	
  4907  00016A                     l4601:
  4908                           
  4909                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1077:      
      +                             if (*fmt[0] == 'n') {
  4910  00016A  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4911  00016E  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4912  000172  CFDE FFF6          	movff	postinc2,tblptrl
  4913  000176  CFDD FFF7          	movff	postdec2,tblptrh
  4914  00017A                     	if	0	;tblptru may be non-zero
  4915  00017A                     	endif
  4916  00017A                     	if	0	;tblptru may be non-zero
  4917  00017A                     	endif
  4918  00017A  0008               	tblrd		*
  4919  00017C  50F5               	movf	tablat,w,c
  4920  00017E  0A6E               	xorlw	110
  4921  000180  A4D8               	btfss	status,2,c
  4922  000182  D029               	goto	l4611
  4923                           
  4924                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1078:      
      +                                 ++*fmt;
  4925  000184  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4926  000188  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4927  00018C  2ADE               	incf	postinc2,f,c
  4928  00018E  0E00               	movlw	0
  4929  000190  22DD               	addwfc	postdec2,f,c
  4930                           
  4931                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1079:      
      +                                 vp = (void *)(*(int * *)__va_arg(*(int * **)ap, (int *)0));
  4932  000192  C0D6  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4933  000196  C0D7  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4934  00019A  CFDF F0D8          	movff	indf2,??_vfpfcnvrt
  4935  00019E  0E02               	movlw	2
  4936  0001A0  26DE               	addwf	postinc2,f,c
  4937  0001A2  CFDF F0D9          	movff	indf2,??_vfpfcnvrt+1
  4938  0001A6  0E00               	movlw	0
  4939  0001A8  22DD               	addwfc	postdec2,f,c
  4940  0001AA  C0D8  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4941  0001AE  C0D9  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4942  0001B2  CFDE F0E4          	movff	postinc2,vfpfcnvrt@vp
  4943  0001B6  CFDD F0E5          	movff	postdec2,vfpfcnvrt@vp+1
  4944                           
  4945                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1080:      
      +                                 *(int *)vp = nout;
  4946  0001BA  C0E4  FFD9         	movff	vfpfcnvrt@vp,fsr2l
  4947  0001BE  C0E5  FFDA         	movff	vfpfcnvrt@vp+1,fsr2h
  4948  0001C2  C0A8  FFDE         	movff	_nout,postinc2
  4949  0001C6  C0A9  FFDD         	movff	_nout+1,postdec2
  4950  0001CA                     l4607:
  4951                           
  4952                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1081:      
      +                                 return 0;
  4953  0001CA  0E00               	movlw	0
  4954  0001CC  0100               	movlb	0	; () banked
  4955  0001CE  6FD3               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  4956  0001D0  0E00               	movlw	0
  4957  0001D2  6FD2               	movwf	?_vfpfcnvrt& (0+255),b
  4958  0001D4  0012               	return	
  4959  0001D6                     l4611:
  4960                           
  4961                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
  4962  0001D6  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4963  0001DA  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4964  0001DE  CFDE FFF6          	movff	postinc2,tblptrl
  4965  0001E2  CFDD FFF7          	movff	postdec2,tblptrh
  4966  0001E6                     	if	0	;tblptru may be non-zero
  4967  0001E6                     	endif
  4968  0001E6                     	if	0	;tblptru may be non-zero
  4969  0001E6                     	endif
  4970  0001E6  0008               	tblrd		*
  4971  0001E8  50F5               	movf	tablat,w,c
  4972  0001EA  0A73               	xorlw	115
  4973  0001EC  A4D8               	btfss	status,2,c
  4974  0001EE  D02A               	goto	l4619
  4975                           
  4976                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
  4977  0001F0  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4978  0001F4  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4979  0001F8  2ADE               	incf	postinc2,f,c
  4980  0001FA  0E00               	movlw	0
  4981  0001FC  22DD               	addwfc	postdec2,f,c
  4982                           
  4983                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  4984  0001FE  C0D6  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4985  000202  C0D7  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4986  000206  CFDF F0D8          	movff	indf2,??_vfpfcnvrt
  4987  00020A  0E02               	movlw	2
  4988  00020C  26DE               	addwf	postinc2,f,c
  4989  00020E  CFDF F0D9          	movff	indf2,??_vfpfcnvrt+1
  4990  000212  0E00               	movlw	0
  4991  000214  22DD               	addwfc	postdec2,f,c
  4992  000216  C0D8  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4993  00021A  C0D9  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4994  00021E  CFDE F0E2          	movff	postinc2,vfpfcnvrt@cp
  4995  000222  CFDD F0E3          	movff	postdec2,vfpfcnvrt@cp+1
  4996                           
  4997                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
  4998  000226  C0D2  F025         	movff	vfpfcnvrt@fp,stoa@fp
  4999  00022A  C0D3  F026         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  5000  00022E  C0E2  F027         	movff	vfpfcnvrt@cp,stoa@s
  5001  000232  C0E3  F028         	movff	vfpfcnvrt@cp+1,stoa@s+1
  5002  000236  EC30  F003         	call	_stoa	;wreg free
  5003  00023A  C025  F0D2         	movff	?_stoa,?_vfpfcnvrt
  5004  00023E  C026  F0D3         	movff	?_stoa+1,?_vfpfcnvrt+1
  5005  000242  0012               	return	
  5006  000244                     l4619:
  5007                           
  5008                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5009  000244  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5010  000248  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5011  00024C  CFDE FFF6          	movff	postinc2,tblptrl
  5012  000250  CFDD FFF7          	movff	postdec2,tblptrh
  5013  000254                     	if	0	;tblptru may be non-zero
  5014  000254                     	endif
  5015  000254                     	if	0	;tblptru may be non-zero
  5016  000254                     	endif
  5017  000254  0008               	tblrd		*
  5018  000256  50F5               	movf	tablat,w,c
  5019  000258  0A25               	xorlw	37
  5020  00025A  A4D8               	btfss	status,2,c
  5021  00025C  D017               	goto	l4629
  5022                           
  5023                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5024  00025E  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5025  000262  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5026  000266  2ADE               	incf	postinc2,f,c
  5027  000268  0E00               	movlw	0
  5028  00026A  22DD               	addwfc	postdec2,f,c
  5029                           
  5030                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5031  00026C  0E00               	movlw	0
  5032  00026E  6E1D               	movwf	fputc@c+1,c
  5033  000270  0E25               	movlw	37
  5034  000272  6E1C               	movwf	fputc@c,c
  5035  000274  C0D2  F01E         	movff	vfpfcnvrt@fp,fputc@fp
  5036  000278  C0D3  F01F         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  5037  00027C  ECD0  F008         	call	_fputc	;wreg free
  5038  000280                     l4625:
  5039                           
  5040                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5041  000280  0E00               	movlw	0
  5042  000282  0100               	movlb	0	; () banked
  5043  000284  6FD3               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  5044  000286  0E01               	movlw	1
  5045  000288  6FD2               	movwf	?_vfpfcnvrt& (0+255),b
  5046  00028A  0012               	return	
  5047  00028C                     l4629:
  5048                           
  5049                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5050  00028C  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5051  000290  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5052  000294  2ADE               	incf	postinc2,f,c
  5053  000296  0E00               	movlw	0
  5054  000298  22DD               	addwfc	postdec2,f,c
  5055  00029A  D797               	goto	l4607
  5056  00029C                     l4635:
  5057                           
  5058                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5059  00029C  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5060  0002A0  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5061  0002A4  CFDE FFF6          	movff	postinc2,tblptrl
  5062  0002A8  CFDD FFF7          	movff	postdec2,tblptrh
  5063  0002AC                     	if	0	;tblptru may be non-zero
  5064  0002AC                     	endif
  5065  0002AC                     	if	0	;tblptru may be non-zero
  5066  0002AC                     	endif
  5067  0002AC  0008               	tblrd		*
  5068  0002AE  50F5               	movf	tablat,w,c
  5069  0002B0  6E1C               	movwf	fputc@c,c
  5070  0002B2  6A1D               	clrf	fputc@c+1,c
  5071  0002B4  C0D2  F01E         	movff	vfpfcnvrt@fp,fputc@fp
  5072  0002B8  C0D3  F01F         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  5073  0002BC  ECD0  F008         	call	_fputc	;wreg free
  5074                           
  5075                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5076  0002C0  C0D4  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5077  0002C4  C0D5  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5078  0002C8  2ADE               	incf	postinc2,f,c
  5079  0002CA  0E00               	movlw	0
  5080  0002CC  22DD               	addwfc	postdec2,f,c
  5081  0002CE  D7D8               	goto	l4625
  5082  0002D0                     __end_of_vfpfcnvrt:
  5083                           	opt callstack 0
  5084                           
  5085 ;; *************** function _stoa *****************
  5086 ;; Defined at:
  5087 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
  5090 ;;		 -> NULL(0), 
  5091 ;;  s               2   38[COMRAM] PTR unsigned char 
  5092 ;;		 -> ?_printf(2), receiveMessage@message(10), NULL(0), 
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;  nuls            7   41[COMRAM] unsigned char [7]
  5095 ;;  l               2   56[COMRAM] int 
  5096 ;;  p               2   54[COMRAM] int 
  5097 ;;  cp              2   52[COMRAM] PTR unsigned char 
  5098 ;;		 -> ?_printf(2), stoa@nuls(7), receiveMessage@message(10), NULL(0), 
  5099 ;;  w               2   50[COMRAM] int 
  5100 ;;  i               2   48[COMRAM] int 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  2   36[COMRAM] int 
  5103 ;; Registers used:
  5104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5110 ;;      Params:         4       0       0       0       0       0       0       0       0
  5111 ;;      Locals:        17       0       0       0       0       0       0       0       0
  5112 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5113 ;;      Totals:        22       0       0       0       0       0       0       0       0
  5114 ;;Total ram usage:       22 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    8
  5117 ;; This function calls:
  5118 ;;		_fputc
  5119 ;;		_strlen
  5120 ;; This function is called by:
  5121 ;;		_vfpfcnvrt
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text37
  5126  000660                     __ptext37:
  5127                           	opt callstack 0
  5128  000660                     _stoa:
  5129                           	opt callstack 18
  5130                           
  5131                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
  5132                           
  5133                           ;incstack = 0
  5134  000660  EE21  F042         	lfsr	2,stoa@F1144
  5135  000664  EE10  F02A         	lfsr	1,stoa@nuls
  5136  000668  0E06               	movlw	6
  5137  00066A                     u4051:
  5138  00066A  CFDB FFE3          	movff	plusw2,plusw1
  5139  00066E  06E8               	decf	wreg,f,c
  5140  000670  E2FC               	bc	u4051
  5141                           
  5142                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
  5143  000672  C027  F035         	movff	stoa@s,stoa@cp
  5144  000676  C028  F036         	movff	stoa@s+1,stoa@cp+1
  5145                           
  5146                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
  5147  00067A  5035               	movf	stoa@cp,w,c
  5148  00067C  1036               	iorwf	stoa@cp+1,w,c
  5149  00067E  A4D8               	btfss	status,2,c
  5150  000680  D004               	goto	l4433
  5151                           
  5152                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
  5153  000682  0E2A               	movlw	low stoa@nuls
  5154  000684  6E35               	movwf	stoa@cp,c
  5155  000686  0E00               	movlw	high stoa@nuls
  5156  000688  6E36               	movwf	stoa@cp+1,c
  5157  00068A                     l4433:
  5158                           
  5159                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
  5160  00068A  C035  F014         	movff	stoa@cp,strlen@s
  5161  00068E  C036  F015         	movff	stoa@cp+1,strlen@s+1
  5162  000692  ECDB  F00B         	call	_strlen	;wreg free
  5163  000696  C014  F039         	movff	?_strlen,stoa@l
  5164  00069A  C015  F03A         	movff	?_strlen+1,stoa@l+1
  5165                           
  5166                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
  5167  00069E  C041  F037         	movff	_prec,stoa@p
  5168  0006A2  C042  F038         	movff	_prec+1,stoa@p+1
  5169                           
  5170                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
  5171  0006A6  BE38               	btfsc	stoa@p+1,7,c
  5172  0006A8  D00E               	goto	l786
  5173  0006AA  5039               	movf	stoa@l,w,c
  5174  0006AC  5C37               	subwf	stoa@p,w,c
  5175  0006AE  5038               	movf	stoa@p+1,w,c
  5176  0006B0  0A80               	xorlw	128
  5177  0006B2  6E29               	movwf	??_stoa& (0+255),c
  5178  0006B4  503A               	movf	stoa@l+1,w,c
  5179  0006B6  0A80               	xorlw	128
  5180  0006B8  5829               	subwfb	??_stoa& (0+255),w,c
  5181  0006BA  B0D8               	btfsc	status,0,c
  5182  0006BC  D004               	goto	l786
  5183  0006BE  C037  F039         	movff	stoa@p,stoa@l
  5184  0006C2  C038  F03A         	movff	stoa@p+1,stoa@l+1
  5185  0006C6                     l786:
  5186                           
  5187                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
  5188  0006C6  C039  F037         	movff	stoa@l,stoa@p
  5189  0006CA  C03A  F038         	movff	stoa@l+1,stoa@p+1
  5190                           
  5191                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
  5192  0006CE  C03F  F033         	movff	_width,stoa@w
  5193  0006D2  C040  F034         	movff	_width+1,stoa@w+1
  5194                           
  5195                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
  5196  0006D6  A043               	btfss	_flags,0,c
  5197  0006D8  D00D               	goto	l4447
  5198  0006DA  D016               	goto	u4100
  5199  0006DC                     l4443:
  5200                           
  5201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
  5202  0006DC  0E00               	movlw	0
  5203  0006DE  6E1D               	movwf	fputc@c+1,c
  5204  0006E0  0E20               	movlw	32
  5205  0006E2  6E1C               	movwf	fputc@c,c
  5206  0006E4  C025  F01E         	movff	stoa@fp,fputc@fp
  5207  0006E8  C026  F01F         	movff	stoa@fp+1,fputc@fp+1
  5208  0006EC  ECD0  F008         	call	_fputc	;wreg free
  5209                           
  5210                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
  5211  0006F0  4A39               	infsnz	stoa@l,f,c
  5212  0006F2  2A3A               	incf	stoa@l+1,f,c
  5213  0006F4                     l4447:
  5214                           
  5215                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
  5216  0006F4  5033               	movf	stoa@w,w,c
  5217  0006F6  5C39               	subwf	stoa@l,w,c
  5218  0006F8  503A               	movf	stoa@l+1,w,c
  5219  0006FA  0A80               	xorlw	128
  5220  0006FC  6E29               	movwf	??_stoa& (0+255),c
  5221  0006FE  5034               	movf	stoa@w+1,w,c
  5222  000700  0A80               	xorlw	128
  5223  000702  5829               	subwfb	??_stoa& (0+255),w,c
  5224  000704  A0D8               	btfss	status,0,c
  5225  000706  D7EA               	goto	l4443
  5226  000708                     u4100:
  5227                           
  5228                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
  5229  000708  0E00               	movlw	0
  5230  00070A  6E32               	movwf	stoa@i+1,c
  5231  00070C  0E00               	movlw	0
  5232  00070E  6E31               	movwf	stoa@i,c
  5233                           
  5234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  5235  000710  D013               	goto	l4457
  5236  000712                     l4451:
  5237                           
  5238                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
  5239  000712  C035  FFD9         	movff	stoa@cp,fsr2l
  5240  000716  C036  FFDA         	movff	stoa@cp+1,fsr2h
  5241  00071A  50DF               	movf	indf2,w,c
  5242  00071C  6E29               	movwf	??_stoa& (0+255),c
  5243  00071E  5029               	movf	??_stoa,w,c
  5244  000720  6E1C               	movwf	fputc@c,c
  5245  000722  6A1D               	clrf	fputc@c+1,c
  5246  000724  C025  F01E         	movff	stoa@fp,fputc@fp
  5247  000728  C026  F01F         	movff	stoa@fp+1,fputc@fp+1
  5248  00072C  ECD0  F008         	call	_fputc	;wreg free
  5249                           
  5250                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
  5251  000730  4A35               	infsnz	stoa@cp,f,c
  5252  000732  2A36               	incf	stoa@cp+1,f,c
  5253                           
  5254                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
  5255  000734  4A31               	infsnz	stoa@i,f,c
  5256  000736  2A32               	incf	stoa@i+1,f,c
  5257  000738                     l4457:
  5258                           
  5259                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  5260  000738  5037               	movf	stoa@p,w,c
  5261  00073A  5C31               	subwf	stoa@i,w,c
  5262  00073C  5032               	movf	stoa@i+1,w,c
  5263  00073E  0A80               	xorlw	128
  5264  000740  6E29               	movwf	??_stoa& (0+255),c
  5265  000742  5038               	movf	stoa@p+1,w,c
  5266  000744  0A80               	xorlw	128
  5267  000746  5829               	subwfb	??_stoa& (0+255),w,c
  5268  000748  A0D8               	btfss	status,0,c
  5269  00074A  D7E3               	goto	l4451
  5270                           
  5271                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
  5272  00074C  B043               	btfsc	_flags,0,c
  5273  00074E  D00D               	goto	l4465
  5274  000750  D016               	goto	u4130
  5275  000752                     l4461:
  5276                           
  5277                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
  5278  000752  0E00               	movlw	0
  5279  000754  6E1D               	movwf	fputc@c+1,c
  5280  000756  0E20               	movlw	32
  5281  000758  6E1C               	movwf	fputc@c,c
  5282  00075A  C025  F01E         	movff	stoa@fp,fputc@fp
  5283  00075E  C026  F01F         	movff	stoa@fp+1,fputc@fp+1
  5284  000762  ECD0  F008         	call	_fputc	;wreg free
  5285                           
  5286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
  5287  000766  4A39               	infsnz	stoa@l,f,c
  5288  000768  2A3A               	incf	stoa@l+1,f,c
  5289  00076A                     l4465:
  5290                           
  5291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
  5292  00076A  5033               	movf	stoa@w,w,c
  5293  00076C  5C39               	subwf	stoa@l,w,c
  5294  00076E  503A               	movf	stoa@l+1,w,c
  5295  000770  0A80               	xorlw	128
  5296  000772  6E29               	movwf	??_stoa& (0+255),c
  5297  000774  5034               	movf	stoa@w+1,w,c
  5298  000776  0A80               	xorlw	128
  5299  000778  5829               	subwfb	??_stoa& (0+255),w,c
  5300  00077A  A0D8               	btfss	status,0,c
  5301  00077C  D7EA               	goto	l4461
  5302  00077E                     u4130:
  5303                           
  5304                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
  5305                           
  5306                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 586:     }
  5307  00077E  C039  F025         	movff	stoa@l,?_stoa
  5308  000782  C03A  F026         	movff	stoa@l+1,?_stoa+1
  5309  000786  0012               	return		;funcret
  5310  000788                     __end_of_stoa:
  5311                           	opt callstack 0
  5312                           
  5313 ;; *************** function _dtoa *****************
  5314 ;; Defined at:
  5315 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  5318 ;;		 -> NULL(0), 
  5319 ;;  d               8    2[BANK0 ] long long 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  n               8   18[BANK0 ] long long 
  5322 ;;  i               2   26[BANK0 ] int 
  5323 ;;  s               2   16[BANK0 ] int 
  5324 ;;  w               2   14[BANK0 ] int 
  5325 ;;  p               2   12[BANK0 ] int 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  2    0[BANK0 ] int 
  5328 ;; Registers used:
  5329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5335 ;;      Params:         0      10       0       0       0       0       0       0       0
  5336 ;;      Locals:         0      18       0       0       0       0       0       0       0
  5337 ;;      Temps:          8       0       0       0       0       0       0       0       0
  5338 ;;      Totals:         8      28       0       0       0       0       0       0       0
  5339 ;;Total ram usage:       36 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:   10
  5342 ;; This function calls:
  5343 ;;		___aodiv
  5344 ;;		___aomod
  5345 ;;		_abs
  5346 ;;		_pad
  5347 ;; This function is called by:
  5348 ;;		_vfpfcnvrt
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text38
  5353  0002D0                     __ptext38:
  5354                           	opt callstack 0
  5355  0002D0                     _dtoa:
  5356                           	opt callstack 16
  5357                           
  5358                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  5359                           
  5360                           ;incstack = 0
  5361  0002D0  C0B8  F0C8         	movff	dtoa@d,dtoa@n
  5362  0002D4  C0B9  F0C9         	movff	dtoa@d+1,dtoa@n+1
  5363  0002D8  C0BA  F0CA         	movff	dtoa@d+2,dtoa@n+2
  5364  0002DC  C0BB  F0CB         	movff	dtoa@d+3,dtoa@n+3
  5365  0002E0  C0BC  F0CC         	movff	dtoa@d+4,dtoa@n+4
  5366  0002E4  C0BD  F0CD         	movff	dtoa@d+5,dtoa@n+5
  5367  0002E8  C0BE  F0CE         	movff	dtoa@d+6,dtoa@n+6
  5368  0002EC  C0BF  F0CF         	movff	dtoa@d+7,dtoa@n+7
  5369                           
  5370                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  5371  0002F0  0100               	movlb	0	; () banked
  5372  0002F2  AFCF               	btfss	(dtoa@n+7)& (0+255),7,b
  5373  0002F4  D002               	goto	u3900
  5374  0002F6  0E01               	movlw	1
  5375  0002F8  D001               	goto	u3910
  5376  0002FA                     u3900:
  5377  0002FA  0E00               	movlw	0
  5378  0002FC                     u3910:
  5379  0002FC  6FC6               	movwf	dtoa@s& (0+255),b
  5380  0002FE  6BC7               	clrf	(dtoa@s+1)& (0+255),b
  5381                           
  5382                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  5383  000300  51C6               	movf	dtoa@s& (0+255),w,b
  5384  000302  11C7               	iorwf	(dtoa@s+1)& (0+255),w,b
  5385  000304  B4D8               	btfsc	status,2,c
  5386  000306  D010               	goto	l4369
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  5390  000308  1FCF               	comf	(dtoa@n+7)& (0+255),f,b
  5391  00030A  1FCE               	comf	(dtoa@n+6)& (0+255),f,b
  5392  00030C  1FCD               	comf	(dtoa@n+5)& (0+255),f,b
  5393  00030E  1FCC               	comf	(dtoa@n+4)& (0+255),f,b
  5394  000310  1FCB               	comf	(dtoa@n+3)& (0+255),f,b
  5395  000312  1FCA               	comf	(dtoa@n+2)& (0+255),f,b
  5396  000314  1FC9               	comf	(dtoa@n+1)& (0+255),f,b
  5397  000316  6DC8               	negf	dtoa@n& (0+255),b
  5398  000318  0E00               	movlw	0
  5399  00031A  23C9               	addwfc	(dtoa@n+1)& (0+255),f,b
  5400  00031C  23CA               	addwfc	(dtoa@n+2)& (0+255),f,b
  5401  00031E  23CB               	addwfc	(dtoa@n+3)& (0+255),f,b
  5402  000320  23CC               	addwfc	(dtoa@n+4)& (0+255),f,b
  5403  000322  23CD               	addwfc	(dtoa@n+5)& (0+255),f,b
  5404  000324  23CE               	addwfc	(dtoa@n+6)& (0+255),f,b
  5405  000326  23CF               	addwfc	(dtoa@n+7)& (0+255),f,b
  5406  000328                     l4369:
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  5410  000328  AE42               	btfss	_prec+1,7,c
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  5414  00032A  9243               	bcf	_flags,1,c
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  5418  00032C  BE42               	btfsc	_prec+1,7,c
  5419  00032E  D005               	goto	u3940
  5420  000330  5042               	movf	_prec+1,w,c
  5421  000332  E108               	bnz	l757
  5422  000334  0441               	decf	_prec,w,c
  5423  000336  B0D8               	btfsc	status,0,c
  5424  000338  D005               	goto	l757
  5425  00033A                     u3940:
  5426                           
  5427                           ; BSR set to: 0
  5428  00033A  0E00               	movlw	0
  5429  00033C  6FC3               	movwf	(dtoa@p+1)& (0+255),b
  5430  00033E  0E01               	movlw	1
  5431  000340  6FC2               	movwf	dtoa@p& (0+255),b
  5432  000342  D004               	goto	l759
  5433  000344                     l757:
  5434                           
  5435                           ; BSR set to: 0
  5436  000344  C041  F0C2         	movff	_prec,dtoa@p
  5437  000348  C042  F0C3         	movff	_prec+1,dtoa@p+1
  5438  00034C                     l759:
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  5442  00034C  C03F  F0C4         	movff	_width,dtoa@w
  5443  000350  C040  F0C5         	movff	_width+1,dtoa@w+1
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  5447  000354  51C6               	movf	dtoa@s& (0+255),w,b
  5448  000356  11C7               	iorwf	(dtoa@s+1)& (0+255),w,b
  5449  000358  A4D8               	btfss	status,2,c
  5450  00035A  D002               	goto	u3960
  5451                           
  5452                           ; BSR set to: 0
  5453  00035C  A443               	btfss	_flags,2,c
  5454  00035E  D003               	goto	l4383
  5455  000360                     u3960:
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  5459  000360  07C4               	decf	dtoa@w& (0+255),f,b
  5460  000362  A0D8               	btfss	status,0,c
  5461  000364  07C5               	decf	(dtoa@w+1)& (0+255),f,b
  5462  000366                     l4383:
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  5466  000366  0E00               	movlw	0
  5467  000368  6FD1               	movwf	(dtoa@i+1)& (0+255),b
  5468  00036A  0E1F               	movlw	31
  5469  00036C  6FD0               	movwf	dtoa@i& (0+255),b
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  5473  00036E  0E00               	movlw	0
  5474  000370  0101               	movlb	1	; () banked
  5475  000372  6F1F               	movwf	(_dbuf+31)& (0+255),b
  5476                           
  5477                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  5478  000374  D07D               	goto	l4397
  5479  000376                     l4387:
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  5483  000376  07D0               	decf	dtoa@i& (0+255),f,b
  5484  000378  A0D8               	btfss	status,0,c
  5485  00037A  07D1               	decf	(dtoa@i+1)& (0+255),f,b
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  5489  00037C  0E00               	movlw	low _dbuf
  5490  00037E  25D0               	addwf	dtoa@i& (0+255),w,b
  5491  000380  6ED9               	movwf	fsr2l,c
  5492  000382  0E01               	movlw	high _dbuf
  5493  000384  21D1               	addwfc	(dtoa@i+1)& (0+255),w,b
  5494  000386  6EDA               	movwf	fsr2h,c
  5495  000388  C0C8  F014         	movff	dtoa@n,___aomod@dividend
  5496  00038C  C0C9  F015         	movff	dtoa@n+1,___aomod@dividend+1
  5497  000390  C0CA  F016         	movff	dtoa@n+2,___aomod@dividend+2
  5498  000394  C0CB  F017         	movff	dtoa@n+3,___aomod@dividend+3
  5499  000398  C0CC  F018         	movff	dtoa@n+4,___aomod@dividend+4
  5500  00039C  C0CD  F019         	movff	dtoa@n+5,___aomod@dividend+5
  5501  0003A0  C0CE  F01A         	movff	dtoa@n+6,___aomod@dividend+6
  5502  0003A4  C0CF  F01B         	movff	dtoa@n+7,___aomod@dividend+7
  5503  0003A8  0E0A               	movlw	10
  5504  0003AA  6E1C               	movwf	___aomod@divisor,c
  5505  0003AC  0E00               	movlw	0
  5506  0003AE  6E1D               	movwf	___aomod@divisor+1,c
  5507  0003B0  0E00               	movlw	0
  5508  0003B2  6E1E               	movwf	___aomod@divisor+2,c
  5509  0003B4  0E00               	movlw	0
  5510  0003B6  6E1F               	movwf	___aomod@divisor+3,c
  5511  0003B8  0E00               	movlw	0
  5512  0003BA  6E20               	movwf	___aomod@divisor+4,c
  5513  0003BC  0E00               	movlw	0
  5514  0003BE  6E21               	movwf	___aomod@divisor+5,c
  5515  0003C0  0E00               	movlw	0
  5516  0003C2  6E22               	movwf	___aomod@divisor+6,c
  5517  0003C4  0E00               	movlw	0
  5518  0003C6  6E23               	movwf	___aomod@divisor+7,c
  5519  0003C8  ECC4  F003         	call	___aomod	;wreg free
  5520  0003CC  C014  F037         	movff	?___aomod,??_dtoa
  5521  0003D0  C015  F038         	movff	?___aomod+1,??_dtoa+1
  5522  0003D4  C016  F039         	movff	?___aomod+2,??_dtoa+2
  5523  0003D8  C017  F03A         	movff	?___aomod+3,??_dtoa+3
  5524  0003DC  C018  F03B         	movff	?___aomod+4,??_dtoa+4
  5525  0003E0  C019  F03C         	movff	?___aomod+5,??_dtoa+5
  5526  0003E4  C01A  F03D         	movff	?___aomod+6,??_dtoa+6
  5527  0003E8  C01B  F03E         	movff	?___aomod+7,??_dtoa+7
  5528  0003EC  C037  F026         	movff	??_dtoa,abs@a
  5529  0003F0  C039  F027         	movff	??_dtoa+2,abs@a+1
  5530  0003F4  EC7B  F00B         	call	_abs	;wreg free
  5531  0003F8  5026               	movf	?_abs,w,c
  5532  0003FA  0F30               	addlw	48
  5533  0003FC  6EDF               	movwf	indf2,c
  5534                           
  5535                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  5536  0003FE  0100               	movlb	0	; () banked
  5537  000400  07C2               	decf	dtoa@p& (0+255),f,b
  5538  000402  A0D8               	btfss	status,0,c
  5539  000404  07C3               	decf	(dtoa@p+1)& (0+255),f,b
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  5543  000406  07C4               	decf	dtoa@w& (0+255),f,b
  5544  000408  A0D8               	btfss	status,0,c
  5545  00040A  07C5               	decf	(dtoa@w+1)& (0+255),f,b
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  5549  00040C  C0C8  F014         	movff	dtoa@n,___aodiv@dividend
  5550  000410  C0C9  F015         	movff	dtoa@n+1,___aodiv@dividend+1
  5551  000414  C0CA  F016         	movff	dtoa@n+2,___aodiv@dividend+2
  5552  000418  C0CB  F017         	movff	dtoa@n+3,___aodiv@dividend+3
  5553  00041C  C0CC  F018         	movff	dtoa@n+4,___aodiv@dividend+4
  5554  000420  C0CD  F019         	movff	dtoa@n+5,___aodiv@dividend+5
  5555  000424  C0CE  F01A         	movff	dtoa@n+6,___aodiv@dividend+6
  5556  000428  C0CF  F01B         	movff	dtoa@n+7,___aodiv@dividend+7
  5557  00042C  0E0A               	movlw	10
  5558  00042E  6E1C               	movwf	___aodiv@divisor,c
  5559  000430  0E00               	movlw	0
  5560  000432  6E1D               	movwf	___aodiv@divisor+1,c
  5561  000434  0E00               	movlw	0
  5562  000436  6E1E               	movwf	___aodiv@divisor+2,c
  5563  000438  0E00               	movlw	0
  5564  00043A  6E1F               	movwf	___aodiv@divisor+3,c
  5565  00043C  0E00               	movlw	0
  5566  00043E  6E20               	movwf	___aodiv@divisor+4,c
  5567  000440  0E00               	movlw	0
  5568  000442  6E21               	movwf	___aodiv@divisor+5,c
  5569  000444  0E00               	movlw	0
  5570  000446  6E22               	movwf	___aodiv@divisor+6,c
  5571  000448  0E00               	movlw	0
  5572  00044A  6E23               	movwf	___aodiv@divisor+7,c
  5573  00044C  EC8C  F002         	call	___aodiv	;wreg free
  5574  000450  C014  F0C8         	movff	?___aodiv,dtoa@n
  5575  000454  C015  F0C9         	movff	?___aodiv+1,dtoa@n+1
  5576  000458  C016  F0CA         	movff	?___aodiv+2,dtoa@n+2
  5577  00045C  C017  F0CB         	movff	?___aodiv+3,dtoa@n+3
  5578  000460  C018  F0CC         	movff	?___aodiv+4,dtoa@n+4
  5579  000464  C019  F0CD         	movff	?___aodiv+5,dtoa@n+5
  5580  000468  C01A  F0CE         	movff	?___aodiv+6,dtoa@n+6
  5581  00046C  C01B  F0CF         	movff	?___aodiv+7,dtoa@n+7
  5582  000470                     l4397:
  5583                           
  5584                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  5585  000470  0100               	movlb	0	; () banked
  5586  000472  BFD1               	btfsc	(dtoa@i+1)& (0+255),7,b
  5587  000474  D01F               	goto	u4010
  5588  000476  51D1               	movf	(dtoa@i+1)& (0+255),w,b
  5589  000478  E103               	bnz	u3970
  5590  00047A  05D0               	decf	dtoa@i& (0+255),w,b
  5591  00047C  A0D8               	btfss	status,0,c
  5592  00047E  D01A               	goto	u4010
  5593  000480                     u3970:
  5594                           
  5595                           ; BSR set to: 0
  5596  000480  51C8               	movf	dtoa@n& (0+255),w,b
  5597  000482  11C9               	iorwf	(dtoa@n+1)& (0+255),w,b
  5598  000484  11CA               	iorwf	(dtoa@n+2)& (0+255),w,b
  5599  000486  11CB               	iorwf	(dtoa@n+3)& (0+255),w,b
  5600  000488  11CC               	iorwf	(dtoa@n+4)& (0+255),w,b
  5601  00048A  11CD               	iorwf	(dtoa@n+5)& (0+255),w,b
  5602  00048C  11CE               	iorwf	(dtoa@n+6)& (0+255),w,b
  5603  00048E  11CF               	iorwf	(dtoa@n+7)& (0+255),w,b
  5604  000490  A4D8               	btfss	status,2,c
  5605  000492  D771               	goto	l4387
  5606                           
  5607                           ; BSR set to: 0
  5608  000494  BFC3               	btfsc	(dtoa@p+1)& (0+255),7,b
  5609  000496  D005               	goto	u3990
  5610  000498  51C3               	movf	(dtoa@p+1)& (0+255),w,b
  5611  00049A  E102               	bnz	u3991
  5612  00049C  05C2               	decf	dtoa@p& (0+255),w,b
  5613  00049E  B0D8               	btfsc	status,0,c
  5614  0004A0                     u3991:
  5615  0004A0  D76A               	goto	l4387
  5616  0004A2                     u3990:
  5617                           
  5618                           ; BSR set to: 0
  5619  0004A2  BFC5               	btfsc	(dtoa@w+1)& (0+255),7,b
  5620  0004A4  D007               	goto	u4010
  5621  0004A6  51C5               	movf	(dtoa@w+1)& (0+255),w,b
  5622  0004A8  E103               	bnz	u4000
  5623  0004AA  05C4               	decf	dtoa@w& (0+255),w,b
  5624  0004AC  A0D8               	btfss	status,0,c
  5625  0004AE  D002               	goto	u4010
  5626  0004B0                     u4000:
  5627                           
  5628                           ; BSR set to: 0
  5629  0004B0  B243               	btfsc	_flags,1,c
  5630  0004B2  D761               	goto	l4387
  5631  0004B4                     u4010:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  5635  0004B4  51C6               	movf	dtoa@s& (0+255),w,b
  5636  0004B6  11C7               	iorwf	(dtoa@s+1)& (0+255),w,b
  5637  0004B8  A4D8               	btfss	status,2,c
  5638  0004BA  D002               	goto	u4030
  5639                           
  5640                           ; BSR set to: 0
  5641  0004BC  A443               	btfss	_flags,2,c
  5642  0004BE  D017               	goto	l4421
  5643  0004C0                     u4030:
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  5647  0004C0  07D0               	decf	dtoa@i& (0+255),f,b
  5648  0004C2  A0D8               	btfss	status,0,c
  5649  0004C4  07D1               	decf	(dtoa@i+1)& (0+255),f,b
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  5653  0004C6  51C6               	movf	dtoa@s& (0+255),w,b
  5654  0004C8  11C7               	iorwf	(dtoa@s+1)& (0+255),w,b
  5655  0004CA  A4D8               	btfss	status,2,c
  5656  0004CC  D004               	goto	l4417
  5657                           
  5658                           ; BSR set to: 0
  5659  0004CE  0E00               	movlw	0
  5660  0004D0  6FC1               	movwf	(_dtoa$1827+1)& (0+255),b
  5661  0004D2  0E2B               	movlw	43
  5662  0004D4  D003               	goto	L1
  5663  0004D6                     l4417:
  5664                           
  5665                           ; BSR set to: 0
  5666  0004D6  0E00               	movlw	0
  5667  0004D8  6FC1               	movwf	(_dtoa$1827+1)& (0+255),b
  5668  0004DA  0E2D               	movlw	45
  5669  0004DC                     L1:
  5670  0004DC  6FC0               	movwf	_dtoa$1827& (0+255),b
  5671                           
  5672                           ; BSR set to: 0
  5673  0004DE  0E00               	movlw	low _dbuf
  5674  0004E0  25D0               	addwf	dtoa@i& (0+255),w,b
  5675  0004E2  6ED9               	movwf	fsr2l,c
  5676  0004E4  0E01               	movlw	high _dbuf
  5677  0004E6  21D1               	addwfc	(dtoa@i+1)& (0+255),w,b
  5678  0004E8  6EDA               	movwf	fsr2h,c
  5679  0004EA  C0C0  FFDF         	movff	_dtoa$1827,indf2
  5680  0004EE                     l4421:
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  5684  0004EE  C0B6  F02C         	movff	dtoa@fp,pad@fp
  5685  0004F2  C0B7  F02D         	movff	dtoa@fp+1,pad@fp+1
  5686  0004F6  0E00               	movlw	low _dbuf
  5687  0004F8  25D0               	addwf	dtoa@i& (0+255),w,b
  5688  0004FA  6E2E               	movwf	pad@buf,c
  5689  0004FC  0E01               	movlw	high _dbuf
  5690  0004FE  21D1               	addwfc	(dtoa@i+1)& (0+255),w,b
  5691  000500  6E2F               	movwf	pad@buf+1,c
  5692  000502  C0C4  F030         	movff	dtoa@w,pad@p
  5693  000506  C0C5  F031         	movff	dtoa@w+1,pad@p+1
  5694  00050A  ECCF  F006         	call	_pad	;wreg free
  5695  00050E  C02C  F0B6         	movff	?_pad,?_dtoa
  5696  000512  C02D  F0B7         	movff	?_pad+1,?_dtoa+1
  5697  000516  0012               	return		;funcret
  5698  000518                     __end_of_dtoa:
  5699                           	opt callstack 0
  5700                           
  5701 ;; *************** function _abs *****************
  5702 ;; Defined at:
  5703 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;  a               2   37[COMRAM] int 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;		None
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  2   37[COMRAM] int 
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, status,0
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5717 ;;      Params:         2       0       0       0       0       0       0       0       0
  5718 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5719 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5720 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5721 ;;Total ram usage:        4 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    5
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_dtoa
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	text39
  5732  0016F6                     __ptext39:
  5733                           	opt callstack 0
  5734  0016F6                     _abs:
  5735                           	opt callstack 20
  5736                           
  5737                           ;incstack = 0
  5738  0016F6  BE27               	btfsc	abs@a+1,7,c
  5739  0016F8  D005               	goto	u3740
  5740  0016FA  5027               	movf	abs@a+1,w,c
  5741  0016FC  E110               	bnz	l1495
  5742  0016FE  0426               	decf	abs@a,w,c
  5743  001700  B0D8               	btfsc	status,0,c
  5744  001702  D00D               	goto	l1495
  5745  001704                     u3740:
  5746  001704  C026  F028         	movff	abs@a,??_abs
  5747  001708  C027  F029         	movff	abs@a+1,??_abs+1
  5748  00170C  1E28               	comf	??_abs,f,c
  5749  00170E  1E29               	comf	??_abs+1,f,c
  5750  001710  4A28               	infsnz	??_abs,f,c
  5751  001712  2A29               	incf	??_abs+1,f,c
  5752  001714  C028  F026         	movff	??_abs,?_abs
  5753  001718  C029  F027         	movff	??_abs+1,?_abs+1
  5754  00171C  0012               	return	
  5755  00171E                     l1495:
  5756  00171E  C026  F026         	movff	abs@a,?_abs
  5757  001722  C027  F027         	movff	abs@a+1,?_abs+1
  5758  001726  0012               	return		;funcret
  5759  001728                     __end_of_abs:
  5760                           	opt callstack 0
  5761                           
  5762 ;; *************** function ___aomod *****************
  5763 ;; Defined at:
  5764 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  dividend        8   19[COMRAM] long long 
  5767 ;;  divisor         8   27[COMRAM] long long 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  sign            1   36[COMRAM] unsigned char 
  5770 ;;  counter         1   35[COMRAM] unsigned char 
  5771 ;; Return value:  Size  Location     Type
  5772 ;;                  8   19[COMRAM] long long 
  5773 ;; Registers used:
  5774 ;;		wreg, status,2, status,0
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5780 ;;      Params:        16       0       0       0       0       0       0       0       0
  5781 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5783 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5784 ;;Total ram usage:       18 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; Hardware stack levels required when called:    5
  5787 ;; This function calls:
  5788 ;;		Nothing
  5789 ;; This function is called by:
  5790 ;;		_dtoa
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text40
  5795  000788                     __ptext40:
  5796                           	opt callstack 0
  5797  000788                     ___aomod:
  5798                           	opt callstack 20
  5799                           
  5800                           ;incstack = 0
  5801  000788  0E00               	movlw	0
  5802  00078A  6E25               	movwf	___aomod@sign,c
  5803  00078C  AE1B               	btfss	___aomod@dividend+7,7,c
  5804  00078E  D012               	goto	l4295
  5805  000790  1E1B               	comf	___aomod@dividend+7,f,c
  5806  000792  1E1A               	comf	___aomod@dividend+6,f,c
  5807  000794  1E19               	comf	___aomod@dividend+5,f,c
  5808  000796  1E18               	comf	___aomod@dividend+4,f,c
  5809  000798  1E17               	comf	___aomod@dividend+3,f,c
  5810  00079A  1E16               	comf	___aomod@dividend+2,f,c
  5811  00079C  1E15               	comf	___aomod@dividend+1,f,c
  5812  00079E  6C14               	negf	___aomod@dividend,c
  5813  0007A0  0E00               	movlw	0
  5814  0007A2  2215               	addwfc	___aomod@dividend+1,f,c
  5815  0007A4  2216               	addwfc	___aomod@dividend+2,f,c
  5816  0007A6  2217               	addwfc	___aomod@dividend+3,f,c
  5817  0007A8  2218               	addwfc	___aomod@dividend+4,f,c
  5818  0007AA  2219               	addwfc	___aomod@dividend+5,f,c
  5819  0007AC  221A               	addwfc	___aomod@dividend+6,f,c
  5820  0007AE  221B               	addwfc	___aomod@dividend+7,f,c
  5821  0007B0  0E01               	movlw	1
  5822  0007B2  6E25               	movwf	___aomod@sign,c
  5823  0007B4                     l4295:
  5824  0007B4  AE23               	btfss	___aomod@divisor+7,7,c
  5825  0007B6  D010               	goto	l4299
  5826  0007B8  1E23               	comf	___aomod@divisor+7,f,c
  5827  0007BA  1E22               	comf	___aomod@divisor+6,f,c
  5828  0007BC  1E21               	comf	___aomod@divisor+5,f,c
  5829  0007BE  1E20               	comf	___aomod@divisor+4,f,c
  5830  0007C0  1E1F               	comf	___aomod@divisor+3,f,c
  5831  0007C2  1E1E               	comf	___aomod@divisor+2,f,c
  5832  0007C4  1E1D               	comf	___aomod@divisor+1,f,c
  5833  0007C6  6C1C               	negf	___aomod@divisor,c
  5834  0007C8  0E00               	movlw	0
  5835  0007CA  221D               	addwfc	___aomod@divisor+1,f,c
  5836  0007CC  221E               	addwfc	___aomod@divisor+2,f,c
  5837  0007CE  221F               	addwfc	___aomod@divisor+3,f,c
  5838  0007D0  2220               	addwfc	___aomod@divisor+4,f,c
  5839  0007D2  2221               	addwfc	___aomod@divisor+5,f,c
  5840  0007D4  2222               	addwfc	___aomod@divisor+6,f,c
  5841  0007D6  2223               	addwfc	___aomod@divisor+7,f,c
  5842  0007D8                     l4299:
  5843  0007D8  501C               	movf	___aomod@divisor,w,c
  5844  0007DA  101D               	iorwf	___aomod@divisor+1,w,c
  5845  0007DC  101E               	iorwf	___aomod@divisor+2,w,c
  5846  0007DE  101F               	iorwf	___aomod@divisor+3,w,c
  5847  0007E0  1020               	iorwf	___aomod@divisor+4,w,c
  5848  0007E2  1021               	iorwf	___aomod@divisor+5,w,c
  5849  0007E4  1022               	iorwf	___aomod@divisor+6,w,c
  5850  0007E6  1023               	iorwf	___aomod@divisor+7,w,c
  5851  0007E8  B4D8               	btfsc	status,2,c
  5852  0007EA  D03C               	goto	l4315
  5853  0007EC  0E01               	movlw	1
  5854  0007EE  6E24               	movwf	___aomod@counter,c
  5855  0007F0  D00A               	goto	l4305
  5856  0007F2                     l4303:
  5857  0007F2  90D8               	bcf	status,0,c
  5858  0007F4  361C               	rlcf	___aomod@divisor,f,c
  5859  0007F6  361D               	rlcf	___aomod@divisor+1,f,c
  5860  0007F8  361E               	rlcf	___aomod@divisor+2,f,c
  5861  0007FA  361F               	rlcf	___aomod@divisor+3,f,c
  5862  0007FC  3620               	rlcf	___aomod@divisor+4,f,c
  5863  0007FE  3621               	rlcf	___aomod@divisor+5,f,c
  5864  000800  3622               	rlcf	___aomod@divisor+6,f,c
  5865  000802  3623               	rlcf	___aomod@divisor+7,f,c
  5866  000804  2A24               	incf	___aomod@counter,f,c
  5867  000806                     l4305:
  5868  000806  AE23               	btfss	___aomod@divisor+7,7,c
  5869  000808  D7F4               	goto	l4303
  5870  00080A                     u3850:
  5871  00080A  501C               	movf	___aomod@divisor,w,c
  5872  00080C  5C14               	subwf	___aomod@dividend,w,c
  5873  00080E  501D               	movf	___aomod@divisor+1,w,c
  5874  000810  5815               	subwfb	___aomod@dividend+1,w,c
  5875  000812  501E               	movf	___aomod@divisor+2,w,c
  5876  000814  5816               	subwfb	___aomod@dividend+2,w,c
  5877  000816  501F               	movf	___aomod@divisor+3,w,c
  5878  000818  5817               	subwfb	___aomod@dividend+3,w,c
  5879  00081A  5020               	movf	___aomod@divisor+4,w,c
  5880  00081C  5818               	subwfb	___aomod@dividend+4,w,c
  5881  00081E  5021               	movf	___aomod@divisor+5,w,c
  5882  000820  5819               	subwfb	___aomod@dividend+5,w,c
  5883  000822  5022               	movf	___aomod@divisor+6,w,c
  5884  000824  581A               	subwfb	___aomod@dividend+6,w,c
  5885  000826  5023               	movf	___aomod@divisor+7,w,c
  5886  000828  581B               	subwfb	___aomod@dividend+7,w,c
  5887  00082A  A0D8               	btfss	status,0,c
  5888  00082C  D010               	goto	l4311
  5889  00082E  501C               	movf	___aomod@divisor,w,c
  5890  000830  5E14               	subwf	___aomod@dividend,f,c
  5891  000832  501D               	movf	___aomod@divisor+1,w,c
  5892  000834  5A15               	subwfb	___aomod@dividend+1,f,c
  5893  000836  501E               	movf	___aomod@divisor+2,w,c
  5894  000838  5A16               	subwfb	___aomod@dividend+2,f,c
  5895  00083A  501F               	movf	___aomod@divisor+3,w,c
  5896  00083C  5A17               	subwfb	___aomod@dividend+3,f,c
  5897  00083E  5020               	movf	___aomod@divisor+4,w,c
  5898  000840  5A18               	subwfb	___aomod@dividend+4,f,c
  5899  000842  5021               	movf	___aomod@divisor+5,w,c
  5900  000844  5A19               	subwfb	___aomod@dividend+5,f,c
  5901  000846  5022               	movf	___aomod@divisor+6,w,c
  5902  000848  5A1A               	subwfb	___aomod@dividend+6,f,c
  5903  00084A  5023               	movf	___aomod@divisor+7,w,c
  5904  00084C  5A1B               	subwfb	___aomod@dividend+7,f,c
  5905  00084E                     l4311:
  5906  00084E  90D8               	bcf	status,0,c
  5907  000850  3223               	rrcf	___aomod@divisor+7,f,c
  5908  000852  3222               	rrcf	___aomod@divisor+6,f,c
  5909  000854  3221               	rrcf	___aomod@divisor+5,f,c
  5910  000856  3220               	rrcf	___aomod@divisor+4,f,c
  5911  000858  321F               	rrcf	___aomod@divisor+3,f,c
  5912  00085A  321E               	rrcf	___aomod@divisor+2,f,c
  5913  00085C  321D               	rrcf	___aomod@divisor+1,f,c
  5914  00085E  321C               	rrcf	___aomod@divisor,f,c
  5915  000860  2E24               	decfsz	___aomod@counter,f,c
  5916  000862  D7D3               	goto	u3850
  5917  000864                     l4315:
  5918  000864  5025               	movf	___aomod@sign,w,c
  5919  000866  B4D8               	btfsc	status,2,c
  5920  000868  D010               	goto	l4319
  5921  00086A  1E1B               	comf	___aomod@dividend+7,f,c
  5922  00086C  1E1A               	comf	___aomod@dividend+6,f,c
  5923  00086E  1E19               	comf	___aomod@dividend+5,f,c
  5924  000870  1E18               	comf	___aomod@dividend+4,f,c
  5925  000872  1E17               	comf	___aomod@dividend+3,f,c
  5926  000874  1E16               	comf	___aomod@dividend+2,f,c
  5927  000876  1E15               	comf	___aomod@dividend+1,f,c
  5928  000878  6C14               	negf	___aomod@dividend,c
  5929  00087A  0E00               	movlw	0
  5930  00087C  2215               	addwfc	___aomod@dividend+1,f,c
  5931  00087E  2216               	addwfc	___aomod@dividend+2,f,c
  5932  000880  2217               	addwfc	___aomod@dividend+3,f,c
  5933  000882  2218               	addwfc	___aomod@dividend+4,f,c
  5934  000884  2219               	addwfc	___aomod@dividend+5,f,c
  5935  000886  221A               	addwfc	___aomod@dividend+6,f,c
  5936  000888  221B               	addwfc	___aomod@dividend+7,f,c
  5937  00088A                     l4319:
  5938  00088A  C014  F014         	movff	___aomod@dividend,?___aomod
  5939  00088E  C015  F015         	movff	___aomod@dividend+1,?___aomod+1
  5940  000892  C016  F016         	movff	___aomod@dividend+2,?___aomod+2
  5941  000896  C017  F017         	movff	___aomod@dividend+3,?___aomod+3
  5942  00089A  C018  F018         	movff	___aomod@dividend+4,?___aomod+4
  5943  00089E  C019  F019         	movff	___aomod@dividend+5,?___aomod+5
  5944  0008A2  C01A  F01A         	movff	___aomod@dividend+6,?___aomod+6
  5945  0008A6  C01B  F01B         	movff	___aomod@dividend+7,?___aomod+7
  5946  0008AA  0012               	return		;funcret
  5947  0008AC                     __end_of___aomod:
  5948                           	opt callstack 0
  5949                           
  5950 ;; *************** function ___aodiv *****************
  5951 ;; Defined at:
  5952 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  dividend        8   19[COMRAM] long long 
  5955 ;;  divisor         8   27[COMRAM] long long 
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;  quotient        8   37[COMRAM] long long 
  5958 ;;  sign            1   36[COMRAM] unsigned char 
  5959 ;;  counter         1   35[COMRAM] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  8   19[COMRAM] long long 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5969 ;;      Params:        16       0       0       0       0       0       0       0       0
  5970 ;;      Locals:        10       0       0       0       0       0       0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5972 ;;      Totals:        26       0       0       0       0       0       0       0       0
  5973 ;;Total ram usage:       26 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    5
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_dtoa
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text41
  5984  000518                     __ptext41:
  5985                           	opt callstack 0
  5986  000518                     ___aodiv:
  5987                           	opt callstack 20
  5988                           
  5989                           ;incstack = 0
  5990  000518  0E00               	movlw	0
  5991  00051A  6E25               	movwf	___aodiv@sign,c
  5992  00051C  AE23               	btfss	___aodiv@divisor+7,7,c
  5993  00051E  D012               	goto	l4251
  5994  000520  1E23               	comf	___aodiv@divisor+7,f,c
  5995  000522  1E22               	comf	___aodiv@divisor+6,f,c
  5996  000524  1E21               	comf	___aodiv@divisor+5,f,c
  5997  000526  1E20               	comf	___aodiv@divisor+4,f,c
  5998  000528  1E1F               	comf	___aodiv@divisor+3,f,c
  5999  00052A  1E1E               	comf	___aodiv@divisor+2,f,c
  6000  00052C  1E1D               	comf	___aodiv@divisor+1,f,c
  6001  00052E  6C1C               	negf	___aodiv@divisor,c
  6002  000530  0E00               	movlw	0
  6003  000532  221D               	addwfc	___aodiv@divisor+1,f,c
  6004  000534  221E               	addwfc	___aodiv@divisor+2,f,c
  6005  000536  221F               	addwfc	___aodiv@divisor+3,f,c
  6006  000538  2220               	addwfc	___aodiv@divisor+4,f,c
  6007  00053A  2221               	addwfc	___aodiv@divisor+5,f,c
  6008  00053C  2222               	addwfc	___aodiv@divisor+6,f,c
  6009  00053E  2223               	addwfc	___aodiv@divisor+7,f,c
  6010  000540  0E01               	movlw	1
  6011  000542  6E25               	movwf	___aodiv@sign,c
  6012  000544                     l4251:
  6013  000544  AE1B               	btfss	___aodiv@dividend+7,7,c
  6014  000546  D012               	goto	l4257
  6015  000548  1E1B               	comf	___aodiv@dividend+7,f,c
  6016  00054A  1E1A               	comf	___aodiv@dividend+6,f,c
  6017  00054C  1E19               	comf	___aodiv@dividend+5,f,c
  6018  00054E  1E18               	comf	___aodiv@dividend+4,f,c
  6019  000550  1E17               	comf	___aodiv@dividend+3,f,c
  6020  000552  1E16               	comf	___aodiv@dividend+2,f,c
  6021  000554  1E15               	comf	___aodiv@dividend+1,f,c
  6022  000556  6C14               	negf	___aodiv@dividend,c
  6023  000558  0E00               	movlw	0
  6024  00055A  2215               	addwfc	___aodiv@dividend+1,f,c
  6025  00055C  2216               	addwfc	___aodiv@dividend+2,f,c
  6026  00055E  2217               	addwfc	___aodiv@dividend+3,f,c
  6027  000560  2218               	addwfc	___aodiv@dividend+4,f,c
  6028  000562  2219               	addwfc	___aodiv@dividend+5,f,c
  6029  000564  221A               	addwfc	___aodiv@dividend+6,f,c
  6030  000566  221B               	addwfc	___aodiv@dividend+7,f,c
  6031  000568  0E01               	movlw	1
  6032  00056A  1A25               	xorwf	___aodiv@sign,f,c
  6033  00056C                     l4257:
  6034  00056C  EE20  F026         	lfsr	2,___aodiv@quotient
  6035  000570  0E07               	movlw	7
  6036  000572                     u3771:
  6037  000572  6ADE               	clrf	postinc2,c
  6038  000574  06E8               	decf	wreg,f,c
  6039  000576  E2FD               	bc	u3771
  6040  000578  501C               	movf	___aodiv@divisor,w,c
  6041  00057A  101D               	iorwf	___aodiv@divisor+1,w,c
  6042  00057C  101E               	iorwf	___aodiv@divisor+2,w,c
  6043  00057E  101F               	iorwf	___aodiv@divisor+3,w,c
  6044  000580  1020               	iorwf	___aodiv@divisor+4,w,c
  6045  000582  1021               	iorwf	___aodiv@divisor+5,w,c
  6046  000584  1022               	iorwf	___aodiv@divisor+6,w,c
  6047  000586  1023               	iorwf	___aodiv@divisor+7,w,c
  6048  000588  B4D8               	btfsc	status,2,c
  6049  00058A  D046               	goto	l4279
  6050  00058C  0E01               	movlw	1
  6051  00058E  6E24               	movwf	___aodiv@counter,c
  6052  000590  D00A               	goto	l4265
  6053  000592                     l4263:
  6054  000592  90D8               	bcf	status,0,c
  6055  000594  361C               	rlcf	___aodiv@divisor,f,c
  6056  000596  361D               	rlcf	___aodiv@divisor+1,f,c
  6057  000598  361E               	rlcf	___aodiv@divisor+2,f,c
  6058  00059A  361F               	rlcf	___aodiv@divisor+3,f,c
  6059  00059C  3620               	rlcf	___aodiv@divisor+4,f,c
  6060  00059E  3621               	rlcf	___aodiv@divisor+5,f,c
  6061  0005A0  3622               	rlcf	___aodiv@divisor+6,f,c
  6062  0005A2  3623               	rlcf	___aodiv@divisor+7,f,c
  6063  0005A4  2A24               	incf	___aodiv@counter,f,c
  6064  0005A6                     l4265:
  6065  0005A6  AE23               	btfss	___aodiv@divisor+7,7,c
  6066  0005A8  D7F4               	goto	l4263
  6067  0005AA                     u3790:
  6068  0005AA  90D8               	bcf	status,0,c
  6069  0005AC  3626               	rlcf	___aodiv@quotient,f,c
  6070  0005AE  3627               	rlcf	___aodiv@quotient+1,f,c
  6071  0005B0  3628               	rlcf	___aodiv@quotient+2,f,c
  6072  0005B2  3629               	rlcf	___aodiv@quotient+3,f,c
  6073  0005B4  362A               	rlcf	___aodiv@quotient+4,f,c
  6074  0005B6  362B               	rlcf	___aodiv@quotient+5,f,c
  6075  0005B8  362C               	rlcf	___aodiv@quotient+6,f,c
  6076  0005BA  362D               	rlcf	___aodiv@quotient+7,f,c
  6077  0005BC  501C               	movf	___aodiv@divisor,w,c
  6078  0005BE  5C14               	subwf	___aodiv@dividend,w,c
  6079  0005C0  501D               	movf	___aodiv@divisor+1,w,c
  6080  0005C2  5815               	subwfb	___aodiv@dividend+1,w,c
  6081  0005C4  501E               	movf	___aodiv@divisor+2,w,c
  6082  0005C6  5816               	subwfb	___aodiv@dividend+2,w,c
  6083  0005C8  501F               	movf	___aodiv@divisor+3,w,c
  6084  0005CA  5817               	subwfb	___aodiv@dividend+3,w,c
  6085  0005CC  5020               	movf	___aodiv@divisor+4,w,c
  6086  0005CE  5818               	subwfb	___aodiv@dividend+4,w,c
  6087  0005D0  5021               	movf	___aodiv@divisor+5,w,c
  6088  0005D2  5819               	subwfb	___aodiv@dividend+5,w,c
  6089  0005D4  5022               	movf	___aodiv@divisor+6,w,c
  6090  0005D6  581A               	subwfb	___aodiv@dividend+6,w,c
  6091  0005D8  5023               	movf	___aodiv@divisor+7,w,c
  6092  0005DA  581B               	subwfb	___aodiv@dividend+7,w,c
  6093  0005DC  A0D8               	btfss	status,0,c
  6094  0005DE  D011               	goto	l4275
  6095  0005E0  501C               	movf	___aodiv@divisor,w,c
  6096  0005E2  5E14               	subwf	___aodiv@dividend,f,c
  6097  0005E4  501D               	movf	___aodiv@divisor+1,w,c
  6098  0005E6  5A15               	subwfb	___aodiv@dividend+1,f,c
  6099  0005E8  501E               	movf	___aodiv@divisor+2,w,c
  6100  0005EA  5A16               	subwfb	___aodiv@dividend+2,f,c
  6101  0005EC  501F               	movf	___aodiv@divisor+3,w,c
  6102  0005EE  5A17               	subwfb	___aodiv@dividend+3,f,c
  6103  0005F0  5020               	movf	___aodiv@divisor+4,w,c
  6104  0005F2  5A18               	subwfb	___aodiv@dividend+4,f,c
  6105  0005F4  5021               	movf	___aodiv@divisor+5,w,c
  6106  0005F6  5A19               	subwfb	___aodiv@dividend+5,f,c
  6107  0005F8  5022               	movf	___aodiv@divisor+6,w,c
  6108  0005FA  5A1A               	subwfb	___aodiv@dividend+6,f,c
  6109  0005FC  5023               	movf	___aodiv@divisor+7,w,c
  6110  0005FE  5A1B               	subwfb	___aodiv@dividend+7,f,c
  6111  000600  8026               	bsf	___aodiv@quotient,0,c
  6112  000602                     l4275:
  6113  000602  90D8               	bcf	status,0,c
  6114  000604  3223               	rrcf	___aodiv@divisor+7,f,c
  6115  000606  3222               	rrcf	___aodiv@divisor+6,f,c
  6116  000608  3221               	rrcf	___aodiv@divisor+5,f,c
  6117  00060A  3220               	rrcf	___aodiv@divisor+4,f,c
  6118  00060C  321F               	rrcf	___aodiv@divisor+3,f,c
  6119  00060E  321E               	rrcf	___aodiv@divisor+2,f,c
  6120  000610  321D               	rrcf	___aodiv@divisor+1,f,c
  6121  000612  321C               	rrcf	___aodiv@divisor,f,c
  6122  000614  2E24               	decfsz	___aodiv@counter,f,c
  6123  000616  D7C9               	goto	u3790
  6124  000618                     l4279:
  6125  000618  5025               	movf	___aodiv@sign,w,c
  6126  00061A  B4D8               	btfsc	status,2,c
  6127  00061C  D010               	goto	l4283
  6128  00061E  1E2D               	comf	___aodiv@quotient+7,f,c
  6129  000620  1E2C               	comf	___aodiv@quotient+6,f,c
  6130  000622  1E2B               	comf	___aodiv@quotient+5,f,c
  6131  000624  1E2A               	comf	___aodiv@quotient+4,f,c
  6132  000626  1E29               	comf	___aodiv@quotient+3,f,c
  6133  000628  1E28               	comf	___aodiv@quotient+2,f,c
  6134  00062A  1E27               	comf	___aodiv@quotient+1,f,c
  6135  00062C  6C26               	negf	___aodiv@quotient,c
  6136  00062E  0E00               	movlw	0
  6137  000630  2227               	addwfc	___aodiv@quotient+1,f,c
  6138  000632  2228               	addwfc	___aodiv@quotient+2,f,c
  6139  000634  2229               	addwfc	___aodiv@quotient+3,f,c
  6140  000636  222A               	addwfc	___aodiv@quotient+4,f,c
  6141  000638  222B               	addwfc	___aodiv@quotient+5,f,c
  6142  00063A  222C               	addwfc	___aodiv@quotient+6,f,c
  6143  00063C  222D               	addwfc	___aodiv@quotient+7,f,c
  6144  00063E                     l4283:
  6145  00063E  C026  F014         	movff	___aodiv@quotient,?___aodiv
  6146  000642  C027  F015         	movff	___aodiv@quotient+1,?___aodiv+1
  6147  000646  C028  F016         	movff	___aodiv@quotient+2,?___aodiv+2
  6148  00064A  C029  F017         	movff	___aodiv@quotient+3,?___aodiv+3
  6149  00064E  C02A  F018         	movff	___aodiv@quotient+4,?___aodiv+4
  6150  000652  C02B  F019         	movff	___aodiv@quotient+5,?___aodiv+5
  6151  000656  C02C  F01A         	movff	___aodiv@quotient+6,?___aodiv+6
  6152  00065A  C02D  F01B         	movff	___aodiv@quotient+7,?___aodiv+7
  6153  00065E  0012               	return		;funcret
  6154  000660                     __end_of___aodiv:
  6155                           	opt callstack 0
  6156                           
  6157 ;; *************** function _ctoa *****************
  6158 ;; Defined at:
  6159 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  fp              2   54[COMRAM] PTR struct _IO_FILE
  6162 ;;		 -> NULL(0), 
  6163 ;;  c               1   56[COMRAM] unsigned char 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;  w               2   57[COMRAM] int 
  6166 ;;  l               2    0        int 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  2   54[COMRAM] int 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6176 ;;      Params:         3       0       0       0       0       0       0       0       0
  6177 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6179 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6180 ;;Total ram usage:        5 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:   10
  6183 ;; This function calls:
  6184 ;;		_pad
  6185 ;; This function is called by:
  6186 ;;		_vfpfcnvrt
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text42
  6191  00148E                     __ptext42:
  6192                           	opt callstack 0
  6193  00148E                     _ctoa:
  6194                           	opt callstack 16
  6195                           
  6196                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  6197                           
  6198                           ;incstack = 0
  6199  00148E  503F               	movf	_width,w,c
  6200  001490  1040               	iorwf	_width+1,w,c
  6201  001492  A4D8               	btfss	status,2,c
  6202  001494  D005               	goto	l4353
  6203  001496  C03F  F03A         	movff	_width,ctoa@w
  6204  00149A  C040  F03B         	movff	_width+1,ctoa@w+1
  6205  00149E  D006               	goto	l4355
  6206  0014A0                     l4353:
  6207  0014A0  0EFF               	movlw	255
  6208  0014A2  243F               	addwf	_width,w,c
  6209  0014A4  6E3A               	movwf	ctoa@w,c
  6210  0014A6  0EFF               	movlw	255
  6211  0014A8  2040               	addwfc	_width+1,w,c
  6212  0014AA  6E3B               	movwf	ctoa@w+1,c
  6213  0014AC                     l4355:
  6214                           
  6215                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  6216  0014AC  C039  F100         	movff	ctoa@c,_dbuf
  6217                           
  6218                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  6219  0014B0  0E00               	movlw	0
  6220  0014B2  0101               	movlb	1	; () banked
  6221  0014B4  6F01               	movwf	(_dbuf+1)& (0+255),b
  6222                           
  6223                           ; BSR set to: 1
  6224                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  6225  0014B6  C037  F02C         	movff	ctoa@fp,pad@fp
  6226  0014BA  C038  F02D         	movff	ctoa@fp+1,pad@fp+1
  6227  0014BE  0E00               	movlw	low _dbuf
  6228  0014C0  6E2E               	movwf	pad@buf,c
  6229  0014C2  0E01               	movlw	high _dbuf
  6230  0014C4  6E2F               	movwf	pad@buf+1,c
  6231  0014C6  C03A  F030         	movff	ctoa@w,pad@p
  6232  0014CA  C03B  F031         	movff	ctoa@w+1,pad@p+1
  6233  0014CE  ECCF  F006         	call	_pad	;wreg free
  6234  0014D2  C02C  F037         	movff	?_pad,?_ctoa
  6235  0014D6  C02D  F038         	movff	?_pad+1,?_ctoa+1
  6236  0014DA  0012               	return		;funcret
  6237  0014DC                     __end_of_ctoa:
  6238                           	opt callstack 0
  6239                           
  6240 ;; *************** function _pad *****************
  6241 ;; Defined at:
  6242 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  fp              2   43[COMRAM] PTR struct _IO_FILE
  6245 ;;		 -> NULL(0), 
  6246 ;;  buf             2   45[COMRAM] PTR unsigned char 
  6247 ;;		 -> dbuf(32), 
  6248 ;;  p               2   47[COMRAM] int 
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;  w               2   52[COMRAM] int 
  6251 ;;  i               2   50[COMRAM] int 
  6252 ;; Return value:  Size  Location     Type
  6253 ;;                  2   43[COMRAM] int 
  6254 ;; Registers used:
  6255 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6261 ;;      Params:         6       0       0       0       0       0       0       0       0
  6262 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6263 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6264 ;;      Totals:        11       0       0       0       0       0       0       0       0
  6265 ;;Total ram usage:       11 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; Hardware stack levels required when called:    9
  6268 ;; This function calls:
  6269 ;;		_fputc
  6270 ;;		_fputs
  6271 ;;		_strlen
  6272 ;; This function is called by:
  6273 ;;		_ctoa
  6274 ;;		_dtoa
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text43
  6279  000D9E                     __ptext43:
  6280                           	opt callstack 0
  6281  000D9E                     _pad:
  6282                           	opt callstack 16
  6283                           
  6284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  6285                           
  6286                           ;incstack = 0
  6287  000D9E  A043               	btfss	_flags,0,c
  6288  000DA0  D00A               	goto	l4221
  6289                           
  6290                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  6291  000DA2  C02E  F025         	movff	pad@buf,fputs@s
  6292  000DA6  C02F  F026         	movff	pad@buf+1,fputs@s+1
  6293  000DAA  C02C  F027         	movff	pad@fp,fputs@fp
  6294  000DAE  C02D  F028         	movff	pad@fp+1,fputs@fp+1
  6295  000DB2  EC11  F00B         	call	_fputs	;wreg free
  6296  000DB6                     l4221:
  6297                           
  6298                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  6299  000DB6  BE31               	btfsc	pad@p+1,7,c
  6300  000DB8  D005               	goto	l4225
  6301  000DBA  C030  F035         	movff	pad@p,pad@w
  6302  000DBE  C031  F036         	movff	pad@p+1,pad@w+1
  6303  000DC2  D004               	goto	l739
  6304  000DC4                     l4225:
  6305  000DC4  0E00               	movlw	0
  6306  000DC6  6E36               	movwf	pad@w+1,c
  6307  000DC8  0E00               	movlw	0
  6308  000DCA  6E35               	movwf	pad@w,c
  6309  000DCC                     l739:
  6310                           
  6311                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  6312  000DCC  0E00               	movlw	0
  6313  000DCE  6E34               	movwf	pad@i+1,c
  6314  000DD0  0E00               	movlw	0
  6315  000DD2  6E33               	movwf	pad@i,c
  6316                           
  6317                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  6318  000DD4  D00C               	goto	l4231
  6319  000DD6                     l4227:
  6320                           
  6321                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  6322  000DD6  0E00               	movlw	0
  6323  000DD8  6E1D               	movwf	fputc@c+1,c
  6324  000DDA  0E20               	movlw	32
  6325  000DDC  6E1C               	movwf	fputc@c,c
  6326  000DDE  C02C  F01E         	movff	pad@fp,fputc@fp
  6327  000DE2  C02D  F01F         	movff	pad@fp+1,fputc@fp+1
  6328  000DE6  ECD0  F008         	call	_fputc	;wreg free
  6329                           
  6330                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  6331  000DEA  4A33               	infsnz	pad@i,f,c
  6332  000DEC  2A34               	incf	pad@i+1,f,c
  6333  000DEE                     l4231:
  6334                           
  6335                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  6336  000DEE  5035               	movf	pad@w,w,c
  6337  000DF0  5C33               	subwf	pad@i,w,c
  6338  000DF2  5034               	movf	pad@i+1,w,c
  6339  000DF4  0A80               	xorlw	128
  6340  000DF6  6E32               	movwf	??_pad& (0+255),c
  6341  000DF8  5036               	movf	pad@w+1,w,c
  6342  000DFA  0A80               	xorlw	128
  6343  000DFC  5832               	subwfb	??_pad& (0+255),w,c
  6344  000DFE  A0D8               	btfss	status,0,c
  6345  000E00  D7EA               	goto	l4227
  6346                           
  6347                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  6348  000E02  B043               	btfsc	_flags,0,c
  6349  000E04  D00A               	goto	l4235
  6350                           
  6351                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  6352  000E06  C02E  F025         	movff	pad@buf,fputs@s
  6353  000E0A  C02F  F026         	movff	pad@buf+1,fputs@s+1
  6354  000E0E  C02C  F027         	movff	pad@fp,fputs@fp
  6355  000E12  C02D  F028         	movff	pad@fp+1,fputs@fp+1
  6356  000E16  EC11  F00B         	call	_fputs	;wreg free
  6357  000E1A                     l4235:
  6358                           
  6359                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  6360  000E1A  C02E  F014         	movff	pad@buf,strlen@s
  6361  000E1E  C02F  F015         	movff	pad@buf+1,strlen@s+1
  6362  000E22  ECDB  F00B         	call	_strlen	;wreg free
  6363  000E26  5035               	movf	pad@w,w,c
  6364  000E28  2414               	addwf	?_strlen,w,c
  6365  000E2A  6E2C               	movwf	?_pad,c
  6366  000E2C  5036               	movf	pad@w+1,w,c
  6367  000E2E  2015               	addwfc	?_strlen+1,w,c
  6368  000E30  6E2D               	movwf	?_pad+1,c
  6369  000E32  0012               	return		;funcret
  6370  000E34                     __end_of_pad:
  6371                           	opt callstack 0
  6372                           
  6373 ;; *************** function _strlen *****************
  6374 ;; Defined at:
  6375 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  s               2   19[COMRAM] PTR const unsigned char 
  6378 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), receiveMessage@message(10), 
  6379 ;;		 -> NULL(0), 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  a               2   21[COMRAM] PTR const unsigned char 
  6382 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), receiveMessage@message(10), 
  6383 ;;		 -> NULL(0), 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;                  2   19[COMRAM] unsigned int 
  6386 ;; Registers used:
  6387 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6393 ;;      Params:         2       0       0       0       0       0       0       0       0
  6394 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6396 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6397 ;;Total ram usage:        4 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    5
  6400 ;; This function calls:
  6401 ;;		Nothing
  6402 ;; This function is called by:
  6403 ;;		_pad
  6404 ;;		_stoa
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           	psect	text44
  6409  0017B6                     __ptext44:
  6410                           	opt callstack 0
  6411  0017B6                     _strlen:
  6412                           	opt callstack 20
  6413                           
  6414                           ;incstack = 0
  6415  0017B6  C014  F016         	movff	strlen@s,strlen@a
  6416  0017BA  C015  F017         	movff	strlen@s+1,strlen@a+1
  6417  0017BE  D002               	goto	l4211
  6418  0017C0                     l4209:
  6419  0017C0  4A14               	infsnz	strlen@s,f,c
  6420  0017C2  2A15               	incf	strlen@s+1,f,c
  6421  0017C4                     l4211:
  6422  0017C4  C014  FFD9         	movff	strlen@s,fsr2l
  6423  0017C8  C015  FFDA         	movff	strlen@s+1,fsr2h
  6424  0017CC  50DF               	movf	indf2,w,c
  6425  0017CE  A4D8               	btfss	status,2,c
  6426  0017D0  D7F7               	goto	l4209
  6427  0017D2  5016               	movf	strlen@a,w,c
  6428  0017D4  5C14               	subwf	strlen@s,w,c
  6429  0017D6  6E14               	movwf	?_strlen,c
  6430  0017D8  5017               	movf	strlen@a+1,w,c
  6431  0017DA  5815               	subwfb	strlen@s+1,w,c
  6432  0017DC  6E15               	movwf	?_strlen+1,c
  6433  0017DE  0012               	return		;funcret
  6434  0017E0                     __end_of_strlen:
  6435                           	opt callstack 0
  6436                           
  6437 ;; *************** function _fputs *****************
  6438 ;; Defined at:
  6439 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;  s               2   36[COMRAM] PTR const unsigned char 
  6442 ;;		 -> dbuf(32), 
  6443 ;;  fp              2   38[COMRAM] PTR struct _IO_FILE
  6444 ;;		 -> NULL(0), 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  i               2   41[COMRAM] int 
  6447 ;;  c               1   40[COMRAM] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  2   36[COMRAM] int 
  6450 ;; Registers used:
  6451 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6457 ;;      Params:         4       0       0       0       0       0       0       0       0
  6458 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6460 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6461 ;;Total ram usage:        7 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    8
  6464 ;; This function calls:
  6465 ;;		_fputc
  6466 ;; This function is called by:
  6467 ;;		_pad
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text45
  6472  001622                     __ptext45:
  6473                           	opt callstack 0
  6474  001622                     _fputs:
  6475                           	opt callstack 16
  6476                           
  6477                           ;incstack = 0
  6478  001622  0E00               	movlw	0
  6479  001624  6E2B               	movwf	fputs@i+1,c
  6480  001626  0E00               	movlw	0
  6481  001628  6E2A               	movwf	fputs@i,c
  6482  00162A  D00B               	goto	l4205
  6483  00162C                     l4201:
  6484  00162C  C029  F01C         	movff	fputs@c,fputc@c
  6485  001630  6A1D               	clrf	fputc@c+1,c
  6486  001632  C027  F01E         	movff	fputs@fp,fputc@fp
  6487  001636  C028  F01F         	movff	fputs@fp+1,fputc@fp+1
  6488  00163A  ECD0  F008         	call	_fputc	;wreg free
  6489  00163E  4A2A               	infsnz	fputs@i,f,c
  6490  001640  2A2B               	incf	fputs@i+1,f,c
  6491  001642                     l4205:
  6492  001642  502A               	movf	fputs@i,w,c
  6493  001644  2425               	addwf	fputs@s,w,c
  6494  001646  6ED9               	movwf	fsr2l,c
  6495  001648  502B               	movf	fputs@i+1,w,c
  6496  00164A  2026               	addwfc	fputs@s+1,w,c
  6497  00164C  6EDA               	movwf	fsr2h,c
  6498  00164E  50DF               	movf	indf2,w,c
  6499  001650  6E29               	movwf	fputs@c,c
  6500  001652  5029               	movf	fputs@c,w,c
  6501  001654  B4D8               	btfsc	status,2,c
  6502  001656  0012               	return	
  6503  001658  D7E9               	goto	l4201
  6504  00165A                     __end_of_fputs:
  6505                           	opt callstack 0
  6506                           
  6507 ;; *************** function _fputc *****************
  6508 ;; Defined at:
  6509 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;  c               2   27[COMRAM] int 
  6512 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  6513 ;;		 -> NULL(0), 
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;		None
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  2   27[COMRAM] int 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6525 ;;      Params:         4       0       0       0       0       0       0       0       0
  6526 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6527 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6528 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6529 ;;Total ram usage:        9 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    7
  6532 ;; This function calls:
  6533 ;;		_putch
  6534 ;; This function is called by:
  6535 ;;		_pad
  6536 ;;		_stoa
  6537 ;;		_vfpfcnvrt
  6538 ;;		_fputs
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           	psect	text46
  6543  0011A0                     __ptext46:
  6544                           	opt callstack 0
  6545  0011A0                     _fputc:
  6546                           	opt callstack 18
  6547                           
  6548                           ;incstack = 0
  6549  0011A0  501E               	movf	fputc@fp,w,c
  6550  0011A2  101F               	iorwf	fputc@fp+1,w,c
  6551  0011A4  B4D8               	btfsc	status,2,c
  6552  0011A6  D004               	goto	u3650
  6553  0011A8  501E               	movf	fputc@fp,w,c
  6554  0011AA  101F               	iorwf	fputc@fp+1,w,c
  6555  0011AC  A4D8               	btfss	status,2,c
  6556  0011AE  D004               	goto	l4191
  6557  0011B0                     u3650:
  6558  0011B0  501C               	movf	fputc@c,w,c
  6559  0011B2  ECEA  F00C         	call	_putch
  6560  0011B6  0012               	return	
  6561  0011B8                     l4191:
  6562  0011B8  EE20 F004          	lfsr	2,4
  6563  0011BC  501E               	movf	fputc@fp,w,c
  6564  0011BE  26D9               	addwf	fsr2l,f,c
  6565  0011C0  501F               	movf	fputc@fp+1,w,c
  6566  0011C2  22DA               	addwfc	fsr2h,f,c
  6567  0011C4  50DE               	movf	postinc2,w,c
  6568  0011C6  10DE               	iorwf	postinc2,w,c
  6569  0011C8  B4D8               	btfsc	status,2,c
  6570  0011CA  D016               	goto	u3670
  6571  0011CC  EE20 F004          	lfsr	2,4
  6572  0011D0  501E               	movf	fputc@fp,w,c
  6573  0011D2  26D9               	addwf	fsr2l,f,c
  6574  0011D4  501F               	movf	fputc@fp+1,w,c
  6575  0011D6  22DA               	addwfc	fsr2h,f,c
  6576  0011D8  EE10 F002          	lfsr	1,2
  6577  0011DC  501E               	movf	fputc@fp,w,c
  6578  0011DE  26E1               	addwf	fsr1l,f,c
  6579  0011E0  501F               	movf	fputc@fp+1,w,c
  6580  0011E2  22E2               	addwfc	fsr1h,f,c
  6581  0011E4  50DE               	movf	postinc2,w,c
  6582  0011E6  5CE6               	subwf	postinc1,w,c
  6583  0011E8  50E6               	movf	postinc1,w,c
  6584  0011EA  0A80               	xorlw	128
  6585  0011EC  6E24               	movwf	(??_fputc+4)& (0+255),c
  6586  0011EE  50DE               	movf	postinc2,w,c
  6587  0011F0  0A80               	xorlw	128
  6588  0011F2  5824               	subwfb	(??_fputc+4)& (0+255),w,c
  6589  0011F4  B0D8               	btfsc	status,0,c
  6590  0011F6  0012               	return	
  6591  0011F8                     u3670:
  6592  0011F8  EE20 F002          	lfsr	2,2
  6593  0011FC  501E               	movf	fputc@fp,w,c
  6594  0011FE  26D9               	addwf	fsr2l,f,c
  6595  001200  501F               	movf	fputc@fp+1,w,c
  6596  001202  22DA               	addwfc	fsr2h,f,c
  6597  001204  2ADE               	incf	postinc2,f,c
  6598  001206  0E00               	movlw	0
  6599  001208  22DD               	addwfc	postdec2,f,c
  6600  00120A  0012               	return		;funcret
  6601  00120C                     __end_of_fputc:
  6602                           	opt callstack 0
  6603                           
  6604 ;; *************** function _putch *****************
  6605 ;; Defined at:
  6606 ;;		line 209 in file "serial.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  c               1    wreg     unsigned char 
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  c               1   26[COMRAM] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0
  6621 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6623 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6624 ;;Total ram usage:        1 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    6
  6627 ;; This function calls:
  6628 ;;		_push
  6629 ;; This function is called by:
  6630 ;;		_output_message
  6631 ;;		_fputc
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text47
  6636  0019D4                     __ptext47:
  6637                           	opt callstack 0
  6638  0019D4                     _putch:
  6639                           	opt callstack 18
  6640                           
  6641                           ;incstack = 0
  6642                           ;putch@c stored from wreg
  6643  0019D4  6E1B               	movwf	putch@c,c
  6644                           
  6645                           ;serial.c: 210:     push(&outbound, c);
  6646  0019D6  0E54               	movlw	low _outbound
  6647  0019D8  6E14               	movwf	push@buff,c
  6648  0019DA  0E01               	movlw	high _outbound
  6649  0019DC  6E15               	movwf	push@buff+1,c
  6650  0019DE  C01B  F016         	movff	putch@c,push@d
  6651  0019E2  EC39  F009         	call	_push	;wreg free
  6652  0019E6  0012               	return		;funcret
  6653  0019E8                     __end_of_putch:
  6654                           	opt callstack 0
  6655                           
  6656 ;; *************** function _push *****************
  6657 ;; Defined at:
  6658 ;;		line 10 in file "serial_buffer.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  buff            2   19[COMRAM] PTR struct .
  6661 ;;		 -> outbound(260), inbound(260), 
  6662 ;;  d               1   21[COMRAM] unsigned char 
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;		None
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6674 ;;      Params:         3       0       0       0       0       0       0       0       0
  6675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6676 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6677 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6678 ;;Total ram usage:        7 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    5
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		_main
  6685 ;;		_putch
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           	psect	text48
  6690  001272                     __ptext48:
  6691                           	opt callstack 0
  6692  001272                     _push:
  6693                           	opt callstack 18
  6694                           
  6695                           ;serial_buffer.c: 14:     GIE = 0;
  6696                           
  6697                           ;incstack = 0
  6698  001272  9EF2               	bcf	4082,7,c	;volatile
  6699                           
  6700                           ;serial_buffer.c: 15:     buff->data[(buff->start + buff->length) % 256] = d;
  6701  001274  EE21 F002          	lfsr	2,258
  6702  001278  5014               	movf	push@buff,w,c
  6703  00127A  26D9               	addwf	fsr2l,f,c
  6704  00127C  5015               	movf	push@buff+1,w,c
  6705  00127E  22DA               	addwfc	fsr2h,f,c
  6706  001280  CFDE F017          	movff	postinc2,??_push
  6707  001284  CFDD F018          	movff	postdec2,??_push+1
  6708  001288  EE21 F000          	lfsr	2,256
  6709  00128C  5014               	movf	push@buff,w,c
  6710  00128E  26D9               	addwf	fsr2l,f,c
  6711  001290  5015               	movf	push@buff+1,w,c
  6712  001292  22DA               	addwfc	fsr2h,f,c
  6713  001294  CFDE F019          	movff	postinc2,??_push+2
  6714  001298  CFDD F01A          	movff	postdec2,??_push+3
  6715  00129C  5017               	movf	??_push,w,c
  6716  00129E  2619               	addwf	??_push+2,f,c
  6717  0012A0  5018               	movf	??_push+1,w,c
  6718  0012A2  221A               	addwfc	??_push+3,f,c
  6719  0012A4  0EFF               	movlw	255
  6720  0012A6  1619               	andwf	??_push+2,f,c
  6721  0012A8  0E00               	movlw	0
  6722  0012AA  161A               	andwf	??_push+3,f,c
  6723  0012AC  5019               	movf	??_push+2,w,c
  6724  0012AE  2414               	addwf	push@buff,w,c
  6725  0012B0  6ED9               	movwf	fsr2l,c
  6726  0012B2  501A               	movf	??_push+3,w,c
  6727  0012B4  2015               	addwfc	push@buff+1,w,c
  6728  0012B6  6EDA               	movwf	fsr2h,c
  6729  0012B8  C016  FFDF         	movff	push@d,indf2
  6730                           
  6731                           ;serial_buffer.c: 16:     buff->length++;
  6732  0012BC  EE21 F002          	lfsr	2,258
  6733  0012C0  5014               	movf	push@buff,w,c
  6734  0012C2  26D9               	addwf	fsr2l,f,c
  6735  0012C4  5015               	movf	push@buff+1,w,c
  6736  0012C6  22DA               	addwfc	fsr2h,f,c
  6737  0012C8  2ADE               	incf	postinc2,f,c
  6738  0012CA  0E00               	movlw	0
  6739  0012CC  22DD               	addwfc	postdec2,f,c
  6740                           
  6741                           ;serial_buffer.c: 17:     GIE = 1;
  6742  0012CE  8EF2               	bsf	4082,7,c	;volatile
  6743  0012D0  0012               	return		;funcret
  6744  0012D2                     __end_of_push:
  6745                           	opt callstack 0
  6746                           
  6747 ;; *************** function _pop *****************
  6748 ;; Defined at:
  6749 ;;		line 27 in file "serial_buffer.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  buff            2   19[COMRAM] PTR struct .
  6752 ;;		 -> outbound(260), inbound(260), 
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  d               1   23[COMRAM] unsigned char 
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  1    wreg      unsigned char 
  6757 ;; Registers used:
  6758 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6764 ;;      Params:         2       0       0       0       0       0       0       0       0
  6765 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6766 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6767 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6768 ;;Total ram usage:        5 bytes
  6769 ;; Hardware stack levels used:    1
  6770 ;; Hardware stack levels required when called:    5
  6771 ;; This function calls:
  6772 ;;		Nothing
  6773 ;; This function is called by:
  6774 ;;		_main
  6775 ;;		_sendChars
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           	psect	text49
  6780  000E34                     __ptext49:
  6781                           	opt callstack 0
  6782  000E34                     _pop:
  6783                           	opt callstack 25
  6784                           
  6785                           ;serial_buffer.c: 28:     unsigned char d;;serial_buffer.c: 32:     if (buff->length == 
      +                          0) {
  6786                           
  6787                           ;incstack = 0
  6788  000E34  EE21 F002          	lfsr	2,258
  6789  000E38  5014               	movf	pop@buff,w,c
  6790  000E3A  26D9               	addwf	fsr2l,f,c
  6791  000E3C  5015               	movf	pop@buff+1,w,c
  6792  000E3E  22DA               	addwfc	fsr2h,f,c
  6793  000E40  50DE               	movf	postinc2,w,c
  6794  000E42  10DE               	iorwf	postinc2,w,c
  6795  000E44  A4D8               	btfss	status,2,c
  6796  000E46  D002               	goto	l497
  6797                           
  6798                           ;serial_buffer.c: 34:         return 0;
  6799  000E48  0E00               	movlw	0
  6800  000E4A  0012               	return	
  6801  000E4C                     l497:
  6802                           
  6803                           ;serial_buffer.c: 37:     GIE = 0;
  6804  000E4C  9EF2               	bcf	4082,7,c	;volatile
  6805                           
  6806                           ;serial_buffer.c: 38:     d = buff->data[buff->start];
  6807  000E4E  EE21 F000          	lfsr	2,256
  6808  000E52  5014               	movf	pop@buff,w,c
  6809  000E54  26D9               	addwf	fsr2l,f,c
  6810  000E56  5015               	movf	pop@buff+1,w,c
  6811  000E58  22DA               	addwfc	fsr2h,f,c
  6812  000E5A  CFDE F016          	movff	postinc2,??_pop
  6813  000E5E  CFDD F017          	movff	postdec2,??_pop+1
  6814  000E62  5016               	movf	??_pop,w,c
  6815  000E64  2414               	addwf	pop@buff,w,c
  6816  000E66  6ED9               	movwf	fsr2l,c
  6817  000E68  5017               	movf	??_pop+1,w,c
  6818  000E6A  2015               	addwfc	pop@buff+1,w,c
  6819  000E6C  6EDA               	movwf	fsr2h,c
  6820  000E6E  50DF               	movf	indf2,w,c
  6821  000E70  6E18               	movwf	pop@d,c
  6822                           
  6823                           ;serial_buffer.c: 39:     buff->length--;
  6824  000E72  EE21 F002          	lfsr	2,258
  6825  000E76  5014               	movf	pop@buff,w,c
  6826  000E78  26D9               	addwf	fsr2l,f,c
  6827  000E7A  5015               	movf	pop@buff+1,w,c
  6828  000E7C  22DA               	addwfc	fsr2h,f,c
  6829  000E7E  06DE               	decf	postinc2,f,c
  6830  000E80  0E00               	movlw	0
  6831  000E82  5ADD               	subwfb	postdec2,f,c
  6832                           
  6833                           ;serial_buffer.c: 40:     buff->start = (buff->start + 1) % 256;
  6834  000E84  EE21 F000          	lfsr	2,256
  6835  000E88  5014               	movf	pop@buff,w,c
  6836  000E8A  26D9               	addwf	fsr2l,f,c
  6837  000E8C  5015               	movf	pop@buff+1,w,c
  6838  000E8E  22DA               	addwfc	fsr2h,f,c
  6839  000E90  CFDE F016          	movff	postinc2,??_pop
  6840  000E94  CFDD F017          	movff	postdec2,??_pop+1
  6841  000E98  0E01               	movlw	1
  6842  000E9A  2616               	addwf	??_pop,f,c
  6843  000E9C  0E00               	movlw	0
  6844  000E9E  2217               	addwfc	??_pop+1,f,c
  6845  000EA0  0EFF               	movlw	255
  6846  000EA2  1616               	andwf	??_pop,f,c
  6847  000EA4  0E00               	movlw	0
  6848  000EA6  1617               	andwf	??_pop+1,f,c
  6849  000EA8  EE21 F000          	lfsr	2,256
  6850  000EAC  5014               	movf	pop@buff,w,c
  6851  000EAE  26D9               	addwf	fsr2l,f,c
  6852  000EB0  5015               	movf	pop@buff+1,w,c
  6853  000EB2  22DA               	addwfc	fsr2h,f,c
  6854  000EB4  C016  FFDE         	movff	??_pop,postinc2
  6855  000EB8  C017  FFDD         	movff	??_pop+1,postdec2
  6856                           
  6857                           ;serial_buffer.c: 41:     GIE = 1;
  6858  000EBC  8EF2               	bsf	4082,7,c	;volatile
  6859                           
  6860                           ;serial_buffer.c: 43:     return d;
  6861  000EBE  5018               	movf	pop@d,w,c
  6862  000EC0  0012               	return		;funcret
  6863  000EC2                     __end_of_pop:
  6864                           	opt callstack 0
  6865                           
  6866 ;; *************** function _monitor_water_pressure *****************
  6867 ;; Defined at:
  6868 ;;		line 4 in file "MonitorWaterPressure.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;		None
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;		None
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  1    wreg      void 
  6875 ;; Registers used:
  6876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6882 ;;      Params:         0       0       0       0       0       0       0       0       0
  6883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6884 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6885 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6886 ;;Total ram usage:        1 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    6
  6889 ;; This function calls:
  6890 ;;		_clear_callback
  6891 ;;		_enable_callback
  6892 ;; This function is called by:
  6893 ;;		_main
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text50
  6898  00165A                     __ptext50:
  6899                           	opt callstack 0
  6900  00165A                     _monitor_water_pressure:
  6901                           	opt callstack 24
  6902                           
  6903                           ;MonitorWaterPressure.c: 8:   if (( PORTBbits.RB2) == fault_flags.wpOkBit){
  6904                           
  6905                           ;incstack = 0
  6906  00165A  A847               	btfss	_fault_flags,4,c
  6907  00165C  D002               	goto	u4680
  6908  00165E  0E01               	movlw	1
  6909  001660  D001               	goto	u4682
  6910  001662                     u4680:
  6911  001662  0E00               	movlw	0
  6912  001664                     u4682:
  6913  001664  6E17               	movwf	??_monitor_water_pressure& (0+255),c
  6914  001666  A481               	btfss	3969,2,c	;volatile
  6915  001668  D002               	goto	u4690
  6916  00166A  0E01               	movlw	1
  6917  00166C  D001               	goto	u4692
  6918  00166E                     u4690:
  6919  00166E  0E00               	movlw	0
  6920  001670                     u4692:
  6921  001670  1A17               	xorwf	??_monitor_water_pressure,f,c
  6922  001672  A4D8               	btfss	status,2,c
  6923  001674  D00A               	goto	l4935
  6924                           
  6925                           ;MonitorWaterPressure.c: 12:        timer_events[EventLowWaterPressureDebounce].flag_bit
      +                           = 0;
  6926  001676  0100               	movlb	0	; () banked
  6927  001678  9372               	bcf	(_timer_events+18)& (0+255),1,b	;volatile
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;MonitorWaterPressure.c: 14:     enable_callback (EventLowWaterPressureDebounce, (3*(400
      +                          0000/256/4/256)));
  6931  00167A  0E00               	movlw	0
  6932  00167C  6E15               	movwf	enable_callback@time_delay+1,c
  6933  00167E  0E2D               	movlw	45
  6934  001680  6E14               	movwf	enable_callback@time_delay,c
  6935  001682  0E02               	movlw	2
  6936  001684  EC91  F00A         	call	_enable_callback
  6937                           
  6938                           ;MonitorWaterPressure.c: 15:   } else{
  6939  001688  0012               	return	
  6940  00168A                     l4935:
  6941                           
  6942                           ;MonitorWaterPressure.c: 17:     clear_callback(EventLowWaterPressureDebounce);
  6943  00168A  0E02               	movlw	2
  6944  00168C  ECC9  F00C         	call	_clear_callback
  6945  001690  0012               	return		;funcret
  6946  001692                     __end_of_monitor_water_pressure:
  6947                           	opt callstack 0
  6948                           
  6949 ;; *************** function _clear_callback *****************
  6950 ;; Defined at:
  6951 ;;		line 25 in file "timer_event.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;  callback        1    wreg     unsigned char 
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;  callback        1   19[COMRAM] unsigned char 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      void 
  6958 ;; Registers used:
  6959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0
  6966 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6968 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6969 ;;Total ram usage:        1 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    5
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_monitor_water_pressure
  6976 ;;		_main
  6977 ;;		_pump_run
  6978 ;;		_monitor_pump_run
  6979 ;;		_standby
  6980 ;;		_start_main
  6981 ;;		_start_pump
  6982 ;;		_clear_callback_for_shutdown
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985                           
  6986                           	psect	text51
  6987  001992                     __ptext51:
  6988                           	opt callstack 0
  6989  001992                     _clear_callback:
  6990                           	opt callstack 23
  6991                           
  6992                           ;incstack = 0
  6993                           ;clear_callback@callback stored from wreg
  6994  001992  6E14               	movwf	clear_callback@callback,c
  6995                           
  6996                           ;timer_event.c: 26:     timer_events[callback].active = 0;
  6997  001994  5014               	movf	clear_callback@callback,w,c
  6998  001996  0D08               	mullw	8
  6999  001998  0E62               	movlw	low (_timer_events+2)
  7000  00199A  24F3               	addwf	prodl,w,c
  7001  00199C  6ED9               	movwf	fsr2l,c
  7002  00199E  0E00               	movlw	high (_timer_events+2)
  7003  0019A0  20F4               	addwfc	prodh,w,c
  7004  0019A2  6EDA               	movwf	fsr2h,c
  7005  0019A4  0100               	movlb	0	; () banked
  7006  0019A6  90DF               	bcf	indf2,0,c
  7007                           
  7008                           ; BSR set to: 0
  7009  0019A8  0012               	return		;funcret
  7010  0019AA                     __end_of_clear_callback:
  7011                           	opt callstack 0
  7012                           
  7013 ;; *************** function _checkIfShoudReset *****************
  7014 ;; Defined at:
  7015 ;;		line 219 in file "pump_control.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;		None
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      void 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7029 ;;      Params:         0       0       0       0       0       0       0       0       0
  7030 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7032 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7033 ;;Total ram usage:        0 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    8
  7036 ;; This function calls:
  7037 ;;		_resetPump
  7038 ;; This function is called by:
  7039 ;;		_main
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           	psect	text52
  7044  0018C4                     __ptext52:
  7045                           	opt callstack 0
  7046  0018C4                     _checkIfShoudReset:
  7047                           	opt callstack 22
  7048                           
  7049                           ;pump_control.c: 221:     if (!( (!PORTBbits.RB3) || (zones != 0) )
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;incstack = 0
  7053  0018C4  A681               	btfss	3969,3,c	;volatile
  7054  0018C6  0012               	return	
  7055  0018C8  5045               	movf	_zones,w,c
  7056  0018CA  1046               	iorwf	_zones+1,w,c
  7057  0018CC  A4D8               	btfss	status,2,c
  7058  0018CE  0012               	return	
  7059  0018D0  A047               	btfss	_fault_flags,0,c
  7060  0018D2  B247               	btfsc	_fault_flags,1,c
  7061  0018D4  D004               	goto	u4860
  7062  0018D6  B447               	btfsc	_fault_flags,2,c
  7063  0018D8  D002               	goto	u4860
  7064  0018DA  A647               	btfss	_fault_flags,3,c
  7065  0018DC  0012               	return	
  7066  0018DE                     u4860:
  7067                           
  7068                           ;pump_control.c: 226:             ) {;pump_control.c: 228:         resetPump();
  7069  0018DE  EC24  F00D         	call	_resetPump	;wreg free
  7070  0018E2  0012               	return		;funcret
  7071  0018E4                     __end_of_checkIfShoudReset:
  7072                           	opt callstack 0
  7073                           
  7074 ;; *************** function _resetPump *****************
  7075 ;; Defined at:
  7076 ;;		line 207 in file "pump_control.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;		None
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      void 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7090 ;;      Params:         0       0       0       0       0       0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7093 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7094 ;;Total ram usage:        0 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    7
  7097 ;; This function calls:
  7098 ;;		_init
  7099 ;;		_init_event_timer
  7100 ;; This function is called by:
  7101 ;;		_checkIfShoudReset
  7102 ;;		_process_reset_pump
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           	psect	text53
  7107  001A48                     __ptext53:
  7108                           	opt callstack 0
  7109  001A48                     _resetPump:
  7110                           	opt callstack 21
  7111                           
  7112                           ;pump_control.c: 208:     init();
  7113                           
  7114                           ;incstack = 0
  7115  001A48  ECEE  F007         	call	_init	;wreg free
  7116                           
  7117                           ;pump_control.c: 209:     init_event_timer();
  7118  001A4C  EC99  F009         	call	_init_event_timer	;wreg free
  7119  001A50  0012               	return		;funcret
  7120  001A52                     __end_of_resetPump:
  7121                           	opt callstack 0
  7122                           
  7123 ;; *************** function _init_event_timer *****************
  7124 ;; Defined at:
  7125 ;;		line 41 in file "timer_event.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;		None
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;		None
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0
  7140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7142 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7143 ;;Total ram usage:        0 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    6
  7146 ;; This function calls:
  7147 ;;		_enable_callback
  7148 ;; This function is called by:
  7149 ;;		_resetPump
  7150 ;;		_main
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text54
  7155  001332                     __ptext54:
  7156                           	opt callstack 0
  7157  001332                     _init_event_timer:
  7158                           	opt callstack 21
  7159                           
  7160                           ;timer_event.c: 45:     timer_events[EventLowWaterLevel].callback = EventLowWaterLevelCa
      +                          llBack;;
  7161                           
  7162                           ;incstack = 0
  7163  001332  0E30               	movlw	low _EventLowWaterLevelCallBack
  7164  001334  0100               	movlb	0	; () banked
  7165  001336  6F66               	movwf	(_timer_events+6)& (0+255),b	;volatile
  7166  001338  0E18               	movlw	high _EventLowWaterLevelCallBack
  7167  00133A  6F67               	movwf	(_timer_events+7)& (0+255),b	;volatile
  7168                           
  7169                           ;timer_event.c: 47:     timer_events[EventLowWaterPressure].callback = EventLowWaterPres
      +                          sureCallBack;;
  7170  00133C  0E92               	movlw	low _EventLowWaterPressureCallBack
  7171  00133E  6F6E               	movwf	(_timer_events+14)& (0+255),b	;volatile
  7172  001340  0E16               	movlw	high _EventLowWaterPressureCallBack
  7173  001342  6F6F               	movwf	(_timer_events+15)& (0+255),b	;volatile
  7174                           
  7175                           ;timer_event.c: 48:     timer_events[EventLowWaterPressureDebounce].callback = EventLowW
      +                          aterPressureDebounceCallBack;;
  7176  001344  0E04               	movlw	low _EventLowWaterPressureDebounceCallBack
  7177  001346  6F76               	movwf	(_timer_events+22)& (0+255),b	;volatile
  7178  001348  0E19               	movlw	high _EventLowWaterPressureDebounceCallBack
  7179  00134A  6F77               	movwf	(_timer_events+23)& (0+255),b	;volatile
  7180                           
  7181                           ;timer_event.c: 50:     timer_events[EventLowFogPressure].callback = EventLowFogPressure
      +                          CallBack;;
  7182  00134C  0EC4               	movlw	low _EventLowFogPressureCallBack
  7183  00134E  6F7E               	movwf	(_timer_events+30)& (0+255),b	;volatile
  7184  001350  0E16               	movlw	high _EventLowFogPressureCallBack
  7185  001352  6F7F               	movwf	(_timer_events+31)& (0+255),b	;volatile
  7186                           
  7187                           ;timer_event.c: 51:     timer_events[EventFaultStateLED].callback = EventFaultStateLEDCa
      +                          llBack;;
  7188  001354  0EAC               	movlw	low _EventFaultStateLEDCallBack
  7189  001356  6F86               	movwf	(_timer_events+38)& (0+255),b	;volatile
  7190  001358  0E08               	movlw	high _EventFaultStateLEDCallBack
  7191  00135A  6F87               	movwf	(_timer_events+39)& (0+255),b	;volatile
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;timer_event.c: 52:     enable_callback(EventFaultStateLED, 1);
  7195  00135C  0E00               	movlw	0
  7196  00135E  6E15               	movwf	enable_callback@time_delay+1,c
  7197  001360  0E01               	movlw	1
  7198  001362  6E14               	movwf	enable_callback@time_delay,c
  7199  001364  0E04               	movlw	4
  7200  001366  EC91  F00A         	call	_enable_callback
  7201                           
  7202                           ;timer_event.c: 53:     timer_events[EventIdleTimeout].callback = EventIdleTimeoutCallBa
      +                          ck;;
  7203  00136A  0EDC               	movlw	low _EventIdleTimeoutCallBack
  7204  00136C  0100               	movlb	0	; () banked
  7205  00136E  6F8E               	movwf	(_timer_events+46)& (0+255),b	;volatile
  7206  001370  0E14               	movlw	high _EventIdleTimeoutCallBack
  7207  001372  6F8F               	movwf	(_timer_events+47)& (0+255),b	;volatile
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;timer_event.c: 54:     timer_events[EventDumpSolenoid].callback = EventDumpSolenoidCall
      +                          Back;;
  7211  001374  0E3E               	movlw	low _EventDumpSolenoidCallBack
  7212  001376  6F96               	movwf	(_timer_events+54)& (0+255),b	;volatile
  7213  001378  0E1A               	movlw	high _EventDumpSolenoidCallBack
  7214  00137A  6F97               	movwf	(_timer_events+55)& (0+255),b	;volatile
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;timer_event.c: 55:     timer_events[EventPODebounce].callback = EventPODebounceCallBack
      +                          ;;
  7218  00137C  0EFC               	movlw	low _EventPODebounceCallBack
  7219  00137E  6FA6               	movwf	(_timer_events+70)& (0+255),b	;volatile
  7220  001380  0E19               	movlw	high _EventPODebounceCallBack
  7221  001382  6FA7               	movwf	(_timer_events+71)& (0+255),b	;volatile
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;timer_event.c: 56:     timer_events[EventRunSignalDebounce].callback = EventRunSignalDe
      +                          bounceCallBack;;
  7225  001384  0E1E               	movlw	low _EventRunSignalDebounceCallBack
  7226  001386  6F9E               	movwf	(_timer_events+62)& (0+255),b	;volatile
  7227  001388  0E1A               	movlw	high _EventRunSignalDebounceCallBack
  7228  00138A  6F9F               	movwf	(_timer_events+63)& (0+255),b	;volatile
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;timer_event.c: 58:     TMR0IE = 1;
  7232  00138C  8AF2               	bsf	4082,5,c	;volatile
  7233                           
  7234                           ; BSR set to: 0
  7235  00138E  0012               	return		;funcret
  7236  001390                     __end_of_init_event_timer:
  7237                           	opt callstack 0
  7238                           
  7239 ;; *************** function _enable_callback *****************
  7240 ;; Defined at:
  7241 ;;		line 16 in file "timer_event.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;  callback        1    wreg     unsigned char 
  7244 ;;  time_delay      2   19[COMRAM] int 
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  callback        1   21[COMRAM] unsigned char 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      void 
  7249 ;; Registers used:
  7250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7256 ;;      Params:         2       0       0       0       0       0       0       0       0
  7257 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7259 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7260 ;;Total ram usage:        3 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    5
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_EventFaultStateLEDCallBack
  7267 ;;		_EventIdleTimeoutCallBack
  7268 ;;		_EventLowFogPressureCallBack
  7269 ;;		_EventLowWaterLevelCallBack
  7270 ;;		_monitor_water_pressure
  7271 ;;		_main
  7272 ;;		_pump_run
  7273 ;;		_monitor_pump_run
  7274 ;;		_shutdown
  7275 ;;		_standby
  7276 ;;		_start_main
  7277 ;;		_start_pump
  7278 ;;		_init_event_timer
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text55
  7283  001522                     __ptext55:
  7284                           	opt callstack 0
  7285  001522                     _enable_callback:
  7286                           	opt callstack 24
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;incstack = 0
  7290                           ;enable_callback@callback stored from wreg
  7291  001522  6E16               	movwf	enable_callback@callback,c
  7292                           
  7293                           ;timer_event.c: 17:     if (!timer_events[callback].active) {
  7294  001524  5016               	movf	enable_callback@callback,w,c
  7295  001526  0D08               	mullw	8
  7296  001528  0E62               	movlw	low (_timer_events+2)
  7297  00152A  24F3               	addwf	prodl,w,c
  7298  00152C  6ED9               	movwf	fsr2l,c
  7299  00152E  0E00               	movlw	high (_timer_events+2)
  7300  001530  20F4               	addwfc	prodh,w,c
  7301  001532  6EDA               	movwf	fsr2h,c
  7302  001534  0100               	movlb	0	; () banked
  7303  001536  B0DF               	btfsc	indf2,0,c
  7304  001538  0012               	return	
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;timer_event.c: 18:         timer_events[callback].time_left = time_delay;
  7308  00153A  5016               	movf	enable_callback@callback,w,c
  7309  00153C  0D08               	mullw	8
  7310  00153E  0E60               	movlw	low _timer_events
  7311  001540  24F3               	addwf	prodl,w,c
  7312  001542  6ED9               	movwf	fsr2l,c
  7313  001544  0E00               	movlw	high _timer_events
  7314  001546  20F4               	addwfc	prodh,w,c
  7315  001548  6EDA               	movwf	fsr2h,c
  7316  00154A  C014  FFDE         	movff	enable_callback@time_delay,postinc2
  7317  00154E  C015  FFDD         	movff	enable_callback@time_delay+1,postdec2
  7318                           
  7319                           ;timer_event.c: 19:         timer_events[callback].active = 1;
  7320  001552  5016               	movf	enable_callback@callback,w,c
  7321  001554  0D08               	mullw	8
  7322  001556  0E62               	movlw	low (_timer_events+2)
  7323  001558  24F3               	addwf	prodl,w,c
  7324  00155A  6ED9               	movwf	fsr2l,c
  7325  00155C  0E00               	movlw	high (_timer_events+2)
  7326  00155E  20F4               	addwfc	prodh,w,c
  7327  001560  6EDA               	movwf	fsr2h,c
  7328  001562  80DF               	bsf	indf2,0,c
  7329                           
  7330                           ; BSR set to: 0
  7331  001564  0012               	return		;funcret
  7332  001566                     __end_of_enable_callback:
  7333                           	opt callstack 0
  7334                           
  7335 ;; *************** function _init *****************
  7336 ;; Defined at:
  7337 ;;		line 137 in file "pump_control.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;		None
  7340 ;; Auto vars:     Size  Location     Type
  7341 ;;		None
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  1    wreg      void 
  7344 ;; Registers used:
  7345 ;;		wreg, status,2, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7351 ;;      Params:         0       0       0       0       0       0       0       0       0
  7352 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7353 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7354 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7355 ;;Total ram usage:        0 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    6
  7358 ;; This function calls:
  7359 ;;		_ser_int
  7360 ;; This function is called by:
  7361 ;;		_resetPump
  7362 ;;		_main
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text56
  7367  000FDC                     __ptext56:
  7368                           	opt callstack 0
  7369  000FDC                     _init:
  7370                           	opt callstack 21
  7371                           
  7372                           ;pump_control.c: 142:     T0CS = 0;
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;incstack = 0
  7376  000FDC  9AD5               	bcf	4053,5,c	;volatile
  7377                           
  7378                           ;pump_control.c: 144:     ADCON1 = 0x7f;
  7379  000FDE  0E7F               	movlw	127
  7380  000FE0  6EC1               	movwf	4033,c	;volatile
  7381                           
  7382                           ;pump_control.c: 148:     PCFG3 = 1;
  7383  000FE2  86C1               	bsf	4033,3,c	;volatile
  7384                           
  7385                           ;pump_control.c: 152:     RBPU = 0;
  7386  000FE4  9EF1               	bcf	4081,7,c	;volatile
  7387                           
  7388                           ;pump_control.c: 165: IRCF2 = 1;
  7389  000FE6  8CD3               	bsf	4051,6,c	;volatile
  7390                           
  7391                           ;pump_control.c: 166: IRCF1 = 1;
  7392  000FE8  8AD3               	bsf	4051,5,c	;volatile
  7393                           
  7394                           ;pump_control.c: 167: IRCF0 = 0;
  7395  000FEA  98D3               	bcf	4051,4,c	;volatile
  7396                           
  7397                           ;pump_control.c: 170:     PORTA = 0;
  7398  000FEC  0E00               	movlw	0
  7399  000FEE  6E80               	movwf	3968,c	;volatile
  7400                           
  7401                           ;pump_control.c: 171:     PORTB = 0;
  7402  000FF0  0E00               	movlw	0
  7403  000FF2  6E81               	movwf	3969,c	;volatile
  7404                           
  7405                           ;pump_control.c: 172:     TRISA = 0;
  7406  000FF4  0E00               	movlw	0
  7407  000FF6  6E92               	movwf	3986,c	;volatile
  7408                           
  7409                           ;pump_control.c: 173:     TRISB = 0;
  7410  000FF8  0E00               	movlw	0
  7411  000FFA  6E93               	movwf	3987,c	;volatile
  7412                           
  7413                           ;pump_control.c: 176:     { PORTAbits.RA3 = (0);}; { PORTAbits.RA0 = (0); fault_flags.wp
      +                          OkBit = (0);}; { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);}; { PORTBbits.RB5 =
      +                           (0); fault_flags.boostPumpBit = (0);}; { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidB
      +                          it = (0);}; { PORTBbits.RB0 = (0);}; TRISD = 0; PORTD = 0x00; TRISAbits.RA0 = 0; TRISAbi
      +                          ts.RA1 = 0; TRISAbits.RA2 = 0; TRISAbits.RA3 = 0; TRISBbits.RB5 = 0; TRISBbits.RB0 = 0;;
  7414  000FFC  9680               	bcf	3968,3,c	;volatile
  7415  000FFE  9080               	bcf	3968,0,c	;volatile
  7416  001000  9847               	bcf	_fault_flags,4,c
  7417  001002  9280               	bcf	3968,1,c	;volatile
  7418  001004  9A47               	bcf	_fault_flags,5,c
  7419  001006  9A81               	bcf	3969,5,c	;volatile
  7420  001008  9C47               	bcf	_fault_flags,6,c
  7421  00100A  9480               	bcf	3968,2,c	;volatile
  7422  00100C  9048               	bcf	_fault_flags+1,0,c
  7423  00100E  9081               	bcf	3969,0,c	;volatile
  7424  001010  0E00               	movlw	0
  7425  001012  6E95               	movwf	3989,c	;volatile
  7426  001014  0E00               	movlw	0
  7427  001016  6E83               	movwf	3971,c	;volatile
  7428  001018  9092               	bcf	3986,0,c	;volatile
  7429  00101A  9292               	bcf	3986,1,c	;volatile
  7430  00101C  9492               	bcf	3986,2,c	;volatile
  7431  00101E  9692               	bcf	3986,3,c	;volatile
  7432  001020  9A93               	bcf	3987,5,c	;volatile
  7433  001022  9093               	bcf	3987,0,c	;volatile
  7434                           
  7435                           ;pump_control.c: 177:     TRISBbits.RB2 = 1; TRISBbits.RB3 = 1; TRISAbits.RA4 = 1; TRISA
      +                          bits.RA5 = 1; TRISBbits.RB4 = 1;;
  7436  001024  8493               	bsf	3987,2,c	;volatile
  7437  001026  8693               	bsf	3987,3,c	;volatile
  7438  001028  8892               	bsf	3986,4,c	;volatile
  7439  00102A  8A92               	bsf	3986,5,c	;volatile
  7440  00102C  8893               	bsf	3987,4,c	;volatile
  7441                           
  7442                           ;pump_control.c: 180:     fault_flags.boostPumpBit = 0;
  7443  00102E  9C47               	bcf	_fault_flags,6,c
  7444                           
  7445                           ;pump_control.c: 181:     fault_flags.lwl_fault = 0;
  7446  001030  9047               	bcf	_fault_flags,0,c
  7447                           
  7448                           ;pump_control.c: 182:     fault_flags.lwp_fault = 0;
  7449  001032  9247               	bcf	_fault_flags,1,c
  7450                           
  7451                           ;pump_control.c: 183:     fault_flags.lfp_fault = 0;
  7452  001034  9447               	bcf	_fault_flags,2,c
  7453                           
  7454                           ;pump_control.c: 184:     fault_flags.po_fault = 0;
  7455  001036  9647               	bcf	_fault_flags,3,c
  7456                           
  7457                           ;pump_control.c: 186:     fault_flags.wpOkBit = 0;
  7458  001038  9847               	bcf	_fault_flags,4,c
  7459                           
  7460                           ;pump_control.c: 187:     fault_flags.mainPumpBit = 0;
  7461  00103A  9A47               	bcf	_fault_flags,5,c
  7462                           
  7463                           ;pump_control.c: 188:     fault_flags.boostPumpBit = 0;
  7464  00103C  9C47               	bcf	_fault_flags,6,c
  7465                           
  7466                           ;pump_control.c: 189:     fault_flags.pumpOverloadBit = 0;
  7467  00103E  9E47               	bcf	_fault_flags,7,c
  7468                           
  7469                           ;pump_control.c: 190:     fault_flags.dumpSolenoidBit = 0;
  7470  001040  9048               	bcf	_fault_flags+1,0,c
  7471                           
  7472                           ;pump_control.c: 194:     GIE = 1;
  7473  001042  8EF2               	bsf	4082,7,c	;volatile
  7474                           
  7475                           ;pump_control.c: 195:     state = standbyState;
  7476  001044  0E00               	movlw	0
  7477  001046  6E4B               	movwf	_state,c
  7478                           
  7479                           ;pump_control.c: 196:     zones = 0;
  7480  001048  0E00               	movlw	0
  7481  00104A  6E46               	movwf	_zones+1,c
  7482  00104C  0E00               	movlw	0
  7483  00104E  6E45               	movwf	_zones,c
  7484                           
  7485                           ;pump_control.c: 197:     inIdleDumpHour = 0;
  7486  001050  0E00               	movlw	0
  7487  001052  6E4A               	movwf	_inIdleDumpHour,c
  7488                           
  7489                           ;pump_control.c: 202:     ser_int();
  7490  001054  EC2B  F00C         	call	_ser_int	;wreg free
  7491  001058  0012               	return		;funcret
  7492  00105A                     __end_of_init:
  7493                           	opt callstack 0
  7494                           
  7495 ;; *************** function _ser_int *****************
  7496 ;; Defined at:
  7497 ;;		line 51 in file "serial.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;		None
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;		None
  7502 ;; Return value:  Size  Location     Type
  7503 ;;                  1    wreg      void 
  7504 ;; Registers used:
  7505 ;;		wreg, status,2
  7506 ;; Tracked objects:
  7507 ;;		On entry : 0/0
  7508 ;;		On exit  : 0/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7511 ;;      Params:         0       0       0       0       0       0       0       0       0
  7512 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7513 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7514 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7515 ;;Total ram usage:        0 bytes
  7516 ;; Hardware stack levels used:    1
  7517 ;; Hardware stack levels required when called:    5
  7518 ;; This function calls:
  7519 ;;		Nothing
  7520 ;; This function is called by:
  7521 ;;		_init
  7522 ;;		_main
  7523 ;;		_mainserial3
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text57
  7528  001856                     __ptext57:
  7529                           	opt callstack 0
  7530  001856                     _ser_int:
  7531                           	opt callstack 25
  7532                           
  7533                           ;serial.c: 52:     RCSTA = 0X90;
  7534                           
  7535                           ;incstack = 0
  7536  001856  0E90               	movlw	144
  7537  001858  6EAB               	movwf	4011,c	;volatile
  7538                           
  7539                           ;serial.c: 53:     TRISC6 = 0;
  7540  00185A  9C94               	bcf	3988,6,c	;volatile
  7541                           
  7542                           ;serial.c: 54:     TRISC7 = 1;
  7543  00185C  8E94               	bsf	3988,7,c	;volatile
  7544                           
  7545                           ;serial.c: 55:     TXSTA = 0x24;
  7546  00185E  0E24               	movlw	36
  7547  001860  6EAC               	movwf	4012,c	;volatile
  7548                           
  7549                           ;serial.c: 56:     SYNC = 0;
  7550  001862  98AC               	bcf	4012,4,c	;volatile
  7551                           
  7552                           ;serial.c: 57:     SPEN = 1;
  7553  001864  8EAB               	bsf	4011,7,c	;volatile
  7554                           
  7555                           ;serial.c: 58:     TX9 = 0;
  7556  001866  9CAC               	bcf	4012,6,c	;volatile
  7557                           
  7558                           ;serial.c: 60:     RCSTA = 0b10010000;
  7559  001868  0E90               	movlw	144
  7560  00186A  6EAB               	movwf	4011,c	;volatile
  7561                           
  7562                           ;serial.c: 61:     SPBRG = 25;
  7563  00186C  0E19               	movlw	25
  7564  00186E  6EAF               	movwf	4015,c	;volatile
  7565                           
  7566                           ;serial.c: 63:     CREN = 1;
  7567  001870  88AB               	bsf	4011,4,c	;volatile
  7568                           
  7569                           ;serial.c: 64:     TXIE = 1;
  7570  001872  889D               	bsf	3997,4,c	;volatile
  7571                           
  7572                           ;serial.c: 65:     RCIE = 1;
  7573  001874  8A9D               	bsf	3997,5,c	;volatile
  7574                           
  7575                           ;serial.c: 66:     GIE = 1;
  7576  001876  8EF2               	bsf	4082,7,c	;volatile
  7577                           
  7578                           ;serial.c: 67:     PEIE = 1;
  7579  001878  8CF2               	bsf	4082,6,c	;volatile
  7580  00187A  0012               	return		;funcret
  7581  00187C                     __end_of_ser_int:
  7582                           	opt callstack 0
  7583                           
  7584 ;; *************** function _event_timer_isr *****************
  7585 ;; Defined at:
  7586 ;;		line 64 in file "timer_event.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;		None
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;		None
  7591 ;; Return value:  Size  Location     Type
  7592 ;;                  1    wreg      void 
  7593 ;; Registers used:
  7594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0
  7601 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7602 ;;      Temps:          6       0       0       0       0       0       0       0       0
  7603 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7604 ;;Total ram usage:        6 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    4
  7607 ;; This function calls:
  7608 ;;		_usart_interrupt
  7609 ;; This function is called by:
  7610 ;;		Interrupt level 2
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           	psect	intcode
  7615  000008                     __pintcode:
  7616                           	opt callstack 0
  7617  000008                     _event_timer_isr:
  7618                           	opt callstack 16
  7619                           
  7620                           ;incstack = 0
  7621  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7622  00000A  EDB3  F00A         	call	int_func,f	;refresh shadow registers
  7623                           
  7624                           	psect	intcode_body
  7625  001566                     __pintcode_body:
  7626                           	opt callstack 16
  7627  001566                     int_func:
  7628                           	opt callstack 16
  7629  001566  0006               	pop		; remove dummy address from shadow register refresh
  7630  001568  CFD9 F00E          	movff	fsr2l,??_event_timer_isr
  7631  00156C  CFDA F00F          	movff	fsr2h,??_event_timer_isr+1
  7632  001570  CFF6 F010          	movff	tblptrl,??_event_timer_isr+2
  7633  001574  CFF7 F011          	movff	tblptrh,??_event_timer_isr+3
  7634  001578  CFF8 F012          	movff	tblptru,??_event_timer_isr+4
  7635  00157C  CFF5 F013          	movff	tablat,??_event_timer_isr+5
  7636                           
  7637                           ;timer_event.c: 65:     if ((TMR0IE) && (TMR0IF)) {
  7638  001580  BAF2               	btfsc	4082,5,c	;volatile
  7639  001582  A4F2               	btfss	4082,2,c	;volatile
  7640  001584  D002               	goto	i2l4155
  7641                           
  7642                           ;timer_event.c: 66:         timer_count++;
  7643  001586  2A49               	incf	_timer_count,f,c	;volatile
  7644                           
  7645                           ;timer_event.c: 68:         TMR0IF = 0;
  7646  001588  94F2               	bcf	4082,2,c	;volatile
  7647  00158A                     i2l4155:
  7648                           
  7649                           ;timer_event.c: 70:     usart_interrupt();
  7650  00158A  EC2D  F008         	call	_usart_interrupt	;wreg free
  7651  00158E  C013  FFF5         	movff	??_event_timer_isr+5,tablat
  7652  001592  C012  FFF8         	movff	??_event_timer_isr+4,tblptru
  7653  001596  C011  FFF7         	movff	??_event_timer_isr+3,tblptrh
  7654  00159A  C010  FFF6         	movff	??_event_timer_isr+2,tblptrl
  7655  00159E  C00F  FFDA         	movff	??_event_timer_isr+1,fsr2h
  7656  0015A2  C00E  FFD9         	movff	??_event_timer_isr,fsr2l
  7657  0015A6  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7658  0015A8  0011               	retfie		f
  7659  0015AA                     __end_of_event_timer_isr:
  7660                           	opt callstack 0
  7661                           
  7662 ;; *************** function _usart_interrupt *****************
  7663 ;; Defined at:
  7664 ;;		line 136 in file "serial.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;		None
  7667 ;; Auto vars:     Size  Location     Type
  7668 ;;  a               1   12[COMRAM] unsigned char 
  7669 ;; Return value:  Size  Location     Type
  7670 ;;                  1    wreg      void 
  7671 ;; Registers used:
  7672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7673 ;; Tracked objects:
  7674 ;;		On entry : 0/0
  7675 ;;		On exit  : 0/0
  7676 ;;		Unchanged: 0/0
  7677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7678 ;;      Params:         0       0       0       0       0       0       0       0       0
  7679 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7681 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7682 ;;Total ram usage:        1 bytes
  7683 ;; Hardware stack levels used:    1
  7684 ;; Hardware stack levels required when called:    3
  7685 ;; This function calls:
  7686 ;;		_not_full
  7687 ;;		_puts
  7688 ;;		i2_has_data
  7689 ;;		i2_pop
  7690 ;;		i2_push
  7691 ;; This function is called by:
  7692 ;;		_event_timer_isr
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696                           	psect	text59
  7697  00105A                     __ptext59:
  7698                           	opt callstack 0
  7699  00105A                     _usart_interrupt:
  7700                           	opt callstack 16
  7701                           
  7702                           ;serial.c: 138:     if (TXIE && TXIF) {
  7703                           
  7704                           ;incstack = 0
  7705  00105A  B89D               	btfsc	3997,4,c	;volatile
  7706  00105C  A89E               	btfss	3998,4,c	;volatile
  7707  00105E  D012               	goto	i2l4007
  7708                           
  7709                           ;serial.c: 139:         TXIE = 0;
  7710  001060  989D               	bcf	3997,4,c	;volatile
  7711                           
  7712                           ;serial.c: 140:         if ( has_data(&outbound)) {
  7713  001062  0E54               	movlw	low _outbound
  7714  001064  6E01               	movwf	i2has_data@buff,c
  7715  001066  0E01               	movlw	high _outbound
  7716  001068  6E02               	movwf	i2has_data@buff+1,c
  7717  00106A  EC17  F00D         	call	i2_has_data	;wreg free
  7718  00106E  0900               	iorlw	0
  7719  001070  B4D8               	btfsc	status,2,c
  7720  001072  D008               	goto	i2l4007
  7721                           
  7722                           ;serial.c: 141:             TXREG = pop(&outbound);
  7723  001074  0E54               	movlw	low _outbound
  7724  001076  6E01               	movwf	i2pop@buff,c
  7725  001078  0E01               	movlw	high _outbound
  7726  00107A  6E02               	movwf	i2pop@buff+1,c
  7727  00107C  EC61  F007         	call	i2_pop	;wreg free
  7728  001080  6EAD               	movwf	4013,c	;volatile
  7729                           
  7730                           ;serial.c: 142:             TXIE = 1;
  7731  001082  889D               	bsf	3997,4,c	;volatile
  7732  001084                     i2l4007:
  7733                           
  7734                           ;serial.c: 145:     if (RCIE && RCIF) {
  7735  001084  AA9D               	btfss	3997,5,c	;volatile
  7736  001086  0012               	return	
  7737  001088  AA9E               	btfss	3998,5,c	;volatile
  7738  00108A  0012               	return	
  7739                           
  7740                           ;serial.c: 146:         if (OERR) {
  7741  00108C  A2AB               	btfss	4011,1,c	;volatile
  7742  00108E  D008               	goto	i2l4017
  7743                           
  7744                           ;serial.c: 147:             CREN = 0;
  7745  001090  98AB               	bcf	4011,4,c	;volatile
  7746                           
  7747                           ;serial.c: 148:             CREN = 1;
  7748  001092  88AB               	bsf	4011,4,c	;volatile
  7749                           
  7750                           ;serial.c: 149:              puts("serial overflow");
  7751  001094  0E0A               	movlw	low STR_21
  7752  001096  6E09               	movwf	puts@str,c
  7753  001098  0E7D               	movlw	high STR_21
  7754  00109A  6E0A               	movwf	puts@str+1,c
  7755  00109C  EC94  F00B         	call	_puts	;wreg free
  7756  0010A0                     i2l4017:
  7757                           
  7758                           ;serial.c: 151:         unsigned char a = RCREG;
  7759  0010A0  CFAE F00D          	movff	4014,usart_interrupt@a	;volatile
  7760                           
  7761                           ;serial.c: 152:         if (not_full(&inbound)) {
  7762  0010A4  0E58               	movlw	low _inbound
  7763  0010A6  6E01               	movwf	not_full@buff,c
  7764  0010A8  0E02               	movlw	high _inbound
  7765  0010AA  6E02               	movwf	not_full@buff+1,c
  7766  0010AC  ECAE  F00C         	call	_not_full	;wreg free
  7767  0010B0  0900               	iorlw	0
  7768  0010B2  B4D8               	btfsc	status,2,c
  7769  0010B4  0012               	return	
  7770                           
  7771                           ;serial.c: 153:             push(&inbound, a);
  7772  0010B6  0E58               	movlw	low _inbound
  7773  0010B8  6E01               	movwf	i2push@buff,c
  7774  0010BA  0E02               	movlw	high _inbound
  7775  0010BC  6E02               	movwf	i2push@buff+1,c
  7776  0010BE  C00D  F003         	movff	usart_interrupt@a,i2push@d
  7777  0010C2  EC69  F009         	call	i2_push	;wreg free
  7778  0010C6  0012               	return		;funcret
  7779  0010C8                     __end_of_usart_interrupt:
  7780                           	opt callstack 0
  7781                           
  7782 ;; *************** function i2_pop *****************
  7783 ;; Defined at:
  7784 ;;		line 27 in file "serial_buffer.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;  buff            2    0[COMRAM] PTR struct .
  7787 ;;		 -> outbound(260), inbound(260), 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  pop             1    4[COMRAM] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      unsigned char 
  7792 ;; Registers used:
  7793 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7799 ;;      Params:         2       0       0       0       0       0       0       0       0
  7800 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7801 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7802 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7803 ;;Total ram usage:        5 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_usart_interrupt
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text60
  7813  000EC2                     __ptext60:
  7814                           	opt callstack 0
  7815  000EC2                     i2_pop:
  7816                           	opt callstack 18
  7817                           
  7818                           ;serial_buffer.c: 28:     unsigned char d;;serial_buffer.c: 32:     if (buff->length == 
      +                          0) {
  7819                           
  7820                           ;incstack = 0
  7821  000EC2  EE21 F002          	lfsr	2,258
  7822  000EC6  5001               	movf	i2pop@buff,w,c
  7823  000EC8  26D9               	addwf	fsr2l,f,c
  7824  000ECA  5002               	movf	i2pop@buff+1,w,c
  7825  000ECC  22DA               	addwfc	fsr2h,f,c
  7826  000ECE  50DE               	movf	postinc2,w,c
  7827  000ED0  10DE               	iorwf	postinc2,w,c
  7828  000ED2  A4D8               	btfss	status,2,c
  7829  000ED4  D002               	goto	i2l497
  7830                           
  7831                           ;serial_buffer.c: 34:         return 0;
  7832  000ED6  0E00               	movlw	0
  7833  000ED8  0012               	return	
  7834  000EDA                     i2l497:
  7835                           
  7836                           ;serial_buffer.c: 37:     GIE = 0;
  7837  000EDA  9EF2               	bcf	4082,7,c	;volatile
  7838                           
  7839                           ;serial_buffer.c: 38:     d = buff->data[buff->start];
  7840  000EDC  EE21 F000          	lfsr	2,256
  7841  000EE0  5001               	movf	i2pop@buff,w,c
  7842  000EE2  26D9               	addwf	fsr2l,f,c
  7843  000EE4  5002               	movf	i2pop@buff+1,w,c
  7844  000EE6  22DA               	addwfc	fsr2h,f,c
  7845  000EE8  CFDE F003          	movff	postinc2,??i2_pop
  7846  000EEC  CFDD F004          	movff	postdec2,??i2_pop+1
  7847  000EF0  5003               	movf	??i2_pop,w,c
  7848  000EF2  2401               	addwf	i2pop@buff,w,c
  7849  000EF4  6ED9               	movwf	fsr2l,c
  7850  000EF6  5004               	movf	??i2_pop+1,w,c
  7851  000EF8  2002               	addwfc	i2pop@buff+1,w,c
  7852  000EFA  6EDA               	movwf	fsr2h,c
  7853  000EFC  50DF               	movf	indf2,w,c
  7854  000EFE  6E05               	movwf	i2pop@d,c
  7855                           
  7856                           ;serial_buffer.c: 39:     buff->length--;
  7857  000F00  EE21 F002          	lfsr	2,258
  7858  000F04  5001               	movf	i2pop@buff,w,c
  7859  000F06  26D9               	addwf	fsr2l,f,c
  7860  000F08  5002               	movf	i2pop@buff+1,w,c
  7861  000F0A  22DA               	addwfc	fsr2h,f,c
  7862  000F0C  06DE               	decf	postinc2,f,c
  7863  000F0E  0E00               	movlw	0
  7864  000F10  5ADD               	subwfb	postdec2,f,c
  7865                           
  7866                           ;serial_buffer.c: 40:     buff->start = (buff->start + 1) % 256;
  7867  000F12  EE21 F000          	lfsr	2,256
  7868  000F16  5001               	movf	i2pop@buff,w,c
  7869  000F18  26D9               	addwf	fsr2l,f,c
  7870  000F1A  5002               	movf	i2pop@buff+1,w,c
  7871  000F1C  22DA               	addwfc	fsr2h,f,c
  7872  000F1E  CFDE F003          	movff	postinc2,??i2_pop
  7873  000F22  CFDD F004          	movff	postdec2,??i2_pop+1
  7874  000F26  0E01               	movlw	1
  7875  000F28  2603               	addwf	??i2_pop,f,c
  7876  000F2A  0E00               	movlw	0
  7877  000F2C  2204               	addwfc	??i2_pop+1,f,c
  7878  000F2E  0EFF               	movlw	255
  7879  000F30  1603               	andwf	??i2_pop,f,c
  7880  000F32  0E00               	movlw	0
  7881  000F34  1604               	andwf	??i2_pop+1,f,c
  7882  000F36  EE21 F000          	lfsr	2,256
  7883  000F3A  5001               	movf	i2pop@buff,w,c
  7884  000F3C  26D9               	addwf	fsr2l,f,c
  7885  000F3E  5002               	movf	i2pop@buff+1,w,c
  7886  000F40  22DA               	addwfc	fsr2h,f,c
  7887  000F42  C003  FFDE         	movff	??i2_pop,postinc2
  7888  000F46  C004  FFDD         	movff	??i2_pop+1,postdec2
  7889                           
  7890                           ;serial_buffer.c: 41:     GIE = 1;
  7891  000F4A  8EF2               	bsf	4082,7,c	;volatile
  7892                           
  7893                           ;serial_buffer.c: 43:     return d;
  7894  000F4C  5005               	movf	i2pop@d,w,c
  7895  000F4E  0012               	return		;funcret
  7896  000F50                     __end_ofi2_pop:
  7897                           	opt callstack 0
  7898                           
  7899 ;; *************** function i2_has_data *****************
  7900 ;; Defined at:
  7901 ;;		line 51 in file "serial_buffer.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  buff            2    0[COMRAM] PTR struct .
  7904 ;;		 -> outbound(260), inbound(260), 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;		None
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  1    wreg      unsigned char 
  7909 ;; Registers used:
  7910 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7911 ;; Tracked objects:
  7912 ;;		On entry : 0/0
  7913 ;;		On exit  : 0/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7916 ;;      Params:         2       0       0       0       0       0       0       0       0
  7917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7919 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7920 ;;Total ram usage:        2 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; This function calls:
  7923 ;;		Nothing
  7924 ;; This function is called by:
  7925 ;;		_usart_interrupt
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	text61
  7930  001A2E                     __ptext61:
  7931                           	opt callstack 0
  7932  001A2E                     i2_has_data:
  7933                           	opt callstack 18
  7934                           
  7935                           ;serial_buffer.c: 52:     return buff->length;
  7936                           
  7937                           ;incstack = 0
  7938  001A2E  EE21 F002          	lfsr	2,258
  7939  001A32  5001               	movf	i2has_data@buff,w,c
  7940  001A34  26D9               	addwf	fsr2l,f,c
  7941  001A36  5002               	movf	i2has_data@buff+1,w,c
  7942  001A38  22DA               	addwfc	fsr2h,f,c
  7943  001A3A  50DF               	movf	indf2,w,c
  7944  001A3C  0012               	return		;funcret
  7945  001A3E                     __end_ofi2_has_data:
  7946                           	opt callstack 0
  7947                           
  7948 ;; *************** function _puts *****************
  7949 ;; Defined at:
  7950 ;;		line 213 in file "serial.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;  str             2    8[COMRAM] PTR const unsigned char 
  7953 ;;		 -> STR_21(16), 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  c               2   10[COMRAM] PTR const unsigned char 
  7956 ;;		 -> STR_21(16), 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  2    8[COMRAM] int 
  7959 ;; Registers used:
  7960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7966 ;;      Params:         2       0       0       0       0       0       0       0       0
  7967 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7968 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7969 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7970 ;;Total ram usage:        4 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    2
  7973 ;; This function calls:
  7974 ;;		i2_putch
  7975 ;; This function is called by:
  7976 ;;		_usart_interrupt
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           	psect	text62
  7981  001728                     __ptext62:
  7982                           	opt callstack 0
  7983  001728                     _puts:
  7984                           	opt callstack 16
  7985                           
  7986                           ;serial.c: 214:     for ( const char * c = str; *c != 0; c++){
  7987                           
  7988                           ;incstack = 0
  7989  001728  C009  F00B         	movff	puts@str,puts@c
  7990  00172C  C00A  F00C         	movff	puts@str+1,puts@c+1
  7991  001730  D00A               	goto	i2l3643
  7992  001732                     i2l3639:
  7993                           
  7994                           ;serial.c: 215:         putch(*c);
  7995  001732  C00B  FFF6         	movff	puts@c,tblptrl
  7996  001736  C00C  FFF7         	movff	puts@c+1,tblptrh
  7997  00173A                     	if	0	;tblptru may be non-zero
  7998  00173A                     	endif
  7999  00173A                     	if	0	;tblptru may be non-zero
  8000  00173A                     	endif
  8001  00173A  0008               	tblrd		*
  8002  00173C  50F5               	movf	tablat,w,c
  8003  00173E  ECF4  F00C         	call	i2_putch
  8004                           
  8005                           ;serial.c: 216:     }
  8006  001742  4A0B               	infsnz	puts@c,f,c
  8007  001744  2A0C               	incf	puts@c+1,f,c
  8008  001746                     i2l3643:
  8009  001746  C00B  FFF6         	movff	puts@c,tblptrl
  8010  00174A  C00C  FFF7         	movff	puts@c+1,tblptrh
  8011  00174E                     	if	0	;tblptru may be non-zero
  8012  00174E                     	endif
  8013  00174E                     	if	0	;tblptru may be non-zero
  8014  00174E                     	endif
  8015  00174E  0008               	tblrd		*
  8016  001750  50F5               	movf	tablat,w,c
  8017  001752  0900               	iorlw	0
  8018  001754  B4D8               	btfsc	status,2,c
  8019  001756  0012               	return	
  8020  001758  D7EC               	goto	i2l3639
  8021  00175A                     __end_of_puts:
  8022                           	opt callstack 0
  8023                           
  8024 ;; *************** function i2_putch *****************
  8025 ;; Defined at:
  8026 ;;		line 209 in file "serial.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;  c               1    wreg     unsigned char 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  c               1    7[COMRAM] unsigned char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0
  8041 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8042 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8043 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8044 ;;Total ram usage:        1 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    1
  8047 ;; This function calls:
  8048 ;;		i2_push
  8049 ;; This function is called by:
  8050 ;;		_puts
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           	psect	text63
  8055  0019E8                     __ptext63:
  8056                           	opt callstack 0
  8057  0019E8                     i2_putch:
  8058                           	opt callstack 16
  8059                           
  8060                           ;incstack = 0
  8061                           ;i2putch@c stored from wreg
  8062  0019E8  6E08               	movwf	i2putch@c,c
  8063                           
  8064                           ;serial.c: 210:     push(&outbound, c);
  8065  0019EA  0E54               	movlw	low _outbound
  8066  0019EC  6E01               	movwf	i2push@buff,c
  8067  0019EE  0E01               	movlw	high _outbound
  8068  0019F0  6E02               	movwf	i2push@buff+1,c
  8069  0019F2  C008  F003         	movff	i2putch@c,i2push@d
  8070  0019F6  EC69  F009         	call	i2_push	;wreg free
  8071  0019FA  0012               	return		;funcret
  8072  0019FC                     __end_ofi2_putch:
  8073                           	opt callstack 0
  8074                           
  8075 ;; *************** function i2_push *****************
  8076 ;; Defined at:
  8077 ;;		line 10 in file "serial_buffer.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  buff            2    0[COMRAM] PTR struct .
  8080 ;;		 -> outbound(260), inbound(260), 
  8081 ;;  d               1    2[COMRAM] unsigned char 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;		None
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  1    wreg      void 
  8086 ;; Registers used:
  8087 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8093 ;;      Params:         3       0       0       0       0       0       0       0       0
  8094 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8095 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8096 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8097 ;;Total ram usage:        7 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; This function calls:
  8100 ;;		Nothing
  8101 ;; This function is called by:
  8102 ;;		_usart_interrupt
  8103 ;;		i2_putch
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           	psect	text64
  8108  0012D2                     __ptext64:
  8109                           	opt callstack 0
  8110  0012D2                     i2_push:
  8111                           	opt callstack 18
  8112                           
  8113                           ;serial_buffer.c: 14:     GIE = 0;
  8114                           
  8115                           ;incstack = 0
  8116  0012D2  9EF2               	bcf	4082,7,c	;volatile
  8117                           
  8118                           ;serial_buffer.c: 15:     buff->data[(buff->start + buff->length) % 256] = d;
  8119  0012D4  EE21 F002          	lfsr	2,258
  8120  0012D8  5001               	movf	i2push@buff,w,c
  8121  0012DA  26D9               	addwf	fsr2l,f,c
  8122  0012DC  5002               	movf	i2push@buff+1,w,c
  8123  0012DE  22DA               	addwfc	fsr2h,f,c
  8124  0012E0  CFDE F004          	movff	postinc2,??i2_push
  8125  0012E4  CFDD F005          	movff	postdec2,??i2_push+1
  8126  0012E8  EE21 F000          	lfsr	2,256
  8127  0012EC  5001               	movf	i2push@buff,w,c
  8128  0012EE  26D9               	addwf	fsr2l,f,c
  8129  0012F0  5002               	movf	i2push@buff+1,w,c
  8130  0012F2  22DA               	addwfc	fsr2h,f,c
  8131  0012F4  CFDE F006          	movff	postinc2,??i2_push+2
  8132  0012F8  CFDD F007          	movff	postdec2,??i2_push+3
  8133  0012FC  5004               	movf	??i2_push,w,c
  8134  0012FE  2606               	addwf	??i2_push+2,f,c
  8135  001300  5005               	movf	??i2_push+1,w,c
  8136  001302  2207               	addwfc	??i2_push+3,f,c
  8137  001304  0EFF               	movlw	255
  8138  001306  1606               	andwf	??i2_push+2,f,c
  8139  001308  0E00               	movlw	0
  8140  00130A  1607               	andwf	??i2_push+3,f,c
  8141  00130C  5006               	movf	??i2_push+2,w,c
  8142  00130E  2401               	addwf	i2push@buff,w,c
  8143  001310  6ED9               	movwf	fsr2l,c
  8144  001312  5007               	movf	??i2_push+3,w,c
  8145  001314  2002               	addwfc	i2push@buff+1,w,c
  8146  001316  6EDA               	movwf	fsr2h,c
  8147  001318  C003  FFDF         	movff	i2push@d,indf2
  8148                           
  8149                           ;serial_buffer.c: 16:     buff->length++;
  8150  00131C  EE21 F002          	lfsr	2,258
  8151  001320  5001               	movf	i2push@buff,w,c
  8152  001322  26D9               	addwf	fsr2l,f,c
  8153  001324  5002               	movf	i2push@buff+1,w,c
  8154  001326  22DA               	addwfc	fsr2h,f,c
  8155  001328  2ADE               	incf	postinc2,f,c
  8156  00132A  0E00               	movlw	0
  8157  00132C  22DD               	addwfc	postdec2,f,c
  8158                           
  8159                           ;serial_buffer.c: 17:     GIE = 1;
  8160  00132E  8EF2               	bsf	4082,7,c	;volatile
  8161  001330  0012               	return		;funcret
  8162  001332                     __end_ofi2_push:
  8163                           	opt callstack 0
  8164                           
  8165 ;; *************** function _not_full *****************
  8166 ;; Defined at:
  8167 ;;		line 60 in file "serial_buffer.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  buff            2    0[COMRAM] PTR struct .
  8170 ;;		 -> inbound(260), 
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;		None
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  1    wreg      unsigned char 
  8175 ;; Registers used:
  8176 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8182 ;;      Params:         2       0       0       0       0       0       0       0       0
  8183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8184 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8185 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8186 ;;Total ram usage:        4 bytes
  8187 ;; Hardware stack levels used:    1
  8188 ;; This function calls:
  8189 ;;		Nothing
  8190 ;; This function is called by:
  8191 ;;		_usart_interrupt
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           	psect	text65
  8196  00195C                     __ptext65:
  8197                           	opt callstack 0
  8198  00195C                     _not_full:
  8199                           	opt callstack 18
  8200                           
  8201                           ;serial_buffer.c: 61:     return buff->length < 256;
  8202                           
  8203                           ;incstack = 0
  8204  00195C  EE21 F002          	lfsr	2,258
  8205  001960  5001               	movf	not_full@buff,w,c
  8206  001962  26D9               	addwf	fsr2l,f,c
  8207  001964  5002               	movf	not_full@buff+1,w,c
  8208  001966  22DA               	addwfc	fsr2h,f,c
  8209  001968  52DE               	movf	postinc2,f,c
  8210  00196A  04DE               	decf	postinc2,w,c
  8211  00196C  B0D8               	btfsc	status,0,c
  8212  00196E  D002               	goto	i2u287_40
  8213  001970  0E01               	movlw	1
  8214  001972  0012               	return	
  8215  001974                     i2u287_40:
  8216  001974  0E00               	movlw	0
  8217  001976  0012               	return		;funcret
  8218  001978                     __end_of_not_full:
  8219                           	opt callstack 0
  8220                           
  8221                           	psect	text66
  8222  000000                     __ptext66:
  8223                           	opt callstack 0
  8224                           
  8225                           	psect	rparam
  8226  0000                     
  8227                           	psect	temp
  8228  00004C                     btemp:
  8229                           	opt callstack 0
  8230  00004C                     	ds	1
  8231  0000                     int$flags	set	btemp
  8232  0000                     wtemp8	set	btemp+1
  8233  0000                     ttemp5	set	btemp+1
  8234  0000                     ttemp6	set	btemp+4
  8235  0000                     ttemp7	set	btemp+8
  8236                           tosu	equ	0xFFF
  8237                           tosh	equ	0xFFE
  8238                           tosl	equ	0xFFD
  8239                           stkptr	equ	0xFFC
  8240                           pclatu	equ	0xFFB
  8241                           pclath	equ	0xFFA
  8242                           pcl	equ	0xFF9
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           indf0	equ	0xFEF
  8250                           postinc0	equ	0xFEE
  8251                           postdec0	equ	0xFED
  8252                           preinc0	equ	0xFEC
  8253                           plusw0	equ	0xFEB
  8254                           fsr0h	equ	0xFEA
  8255                           fsr0l	equ	0xFE9
  8256                           wreg	equ	0xFE8
  8257                           indf1	equ	0xFE7
  8258                           postinc1	equ	0xFE6
  8259                           postdec1	equ	0xFE5
  8260                           preinc1	equ	0xFE4
  8261                           plusw1	equ	0xFE3
  8262                           fsr1h	equ	0xFE2
  8263                           fsr1l	equ	0xFE1
  8264                           bsr	equ	0xFE0
  8265                           indf2	equ	0xFDF
  8266                           postinc2	equ	0xFDE
  8267                           postdec2	equ	0xFDD
  8268                           preinc2	equ	0xFDC
  8269                           plusw2	equ	0xFDB
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8


Data Sizes:
    Strings     362
    Constant    0
    Data        31
    BSS         661
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      75
    BANK0           160     70     156
    BANK1           256     15      88
    BANK2           256      0       0
    BANK3           244      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printPumpState$2598	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), 
		 -> STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK1[32]), receiveMessage@message(BANK1[10]), 
		 -> NULL(NULL[0]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK1[32]), receiveMessage@message(BANK1[10]), 
		 -> NULL(NULL[0]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_23(CODE[15]), STR_22(CODE[3]), STR_19(CODE[23]), STR_18(CODE[15]), 
		 -> STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[15]), STR_14(CODE[14]), 
		 -> STR_13(CODE[10]), STR_12(CODE[11]), STR_11(CODE[12]), STR_10(CODE[12]), 
		 -> STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[17]), 
		 -> STR_5(CODE[31]), STR_4(CODE[21]), STR_3(CODE[24]), STR_2(CODE[16]), 
		 -> STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2299_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_23(CODE[15]), STR_22(CODE[3]), STR_19(CODE[23]), STR_18(CODE[15]), 
		 -> STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[15]), STR_14(CODE[14]), 
		 -> STR_13(CODE[10]), STR_12(CODE[11]), STR_11(CODE[12]), STR_10(CODE[12]), 
		 -> STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[17]), 
		 -> STR_5(CODE[31]), STR_4(CODE[21]), STR_3(CODE[24]), STR_2(CODE[16]), 
		 -> STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 31
		 -> STR_23(CODE[15]), STR_22(CODE[3]), STR_19(CODE[23]), STR_18(CODE[15]), 
		 -> STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[15]), STR_14(CODE[14]), 
		 -> STR_13(CODE[10]), STR_12(CODE[11]), STR_11(CODE[12]), STR_10(CODE[12]), 
		 -> STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[17]), 
		 -> STR_5(CODE[31]), STR_4(CODE[21]), STR_3(CODE[24]), STR_2(CODE[16]), 
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    vfpfcnvrt@vp	PTR void  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    process_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_reset_pump@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_set_address_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_get_status_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), main@sendGetMessageBuffer(BANK1[10]), 

    process_set_zones_message@inmessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    not_full@buff	PTR struct . size(2) Largest target is 260
		 -> inbound(BIGRAM_1[260]), 

    has_data@buff	PTR struct . size(2) Largest target is 260
		 -> outbound(BIGRAM_1[260]), inbound(BIGRAM_1[260]), 

    pop@buff	PTR struct . size(2) Largest target is 260
		 -> outbound(BIGRAM_1[260]), inbound(BIGRAM_1[260]), 

    push@buff	PTR struct . size(2) Largest target is 260
		 -> outbound(BIGRAM_1[260]), inbound(BIGRAM_1[260]), 

    output_message@message	PTR unsigned char  size(2) Largest target is 10
		 -> outputMessage(BANK0[10]), 

    puts@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_21(CODE[16]), 

    puts@c	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_21(CODE[16]), 

    sp__receiveMessage	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    main@message	PTR unsigned char  size(2) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    PumpStateMappings	PTR unsigned char [7] size(2) Largest target is 31
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), 
		 -> STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    S185timer_event$callback	PTR FTN()void  size(2) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 

    timer_events.callback	PTR FTN()void  size(2) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 


Critical Paths under _main in COMRAM

    _start_pump->_enable_callback
    _start_main->_enable_callback
    _standby->_enable_callback
    _shutdown->_enable_callback
    _serial_process_loop->_has_data
    _pump_run->_enable_callback
    _monitor_pump_run->_enable_callback
    _process_message->_process_set_zones_message
    _process_set_zones_message->_output_message
    _process_set_address_message->_output_message
    _process_reset_pump->_output_message
    _process_get_status_message->_output_message
    _setBaseMessage->_chartox
    _output_message->_putch
    _process_event_timer->_EventFaultStateLEDCallBack
    _EventLowWaterLevelCallBack->_enable_callback
    _EventLowFogPressureCallBack->_enable_callback
    _clear_callback_for_shutdown->_clear_callback
    _EventIdleTimeoutCallBack->_enable_callback
    _EventFaultStateLEDCallBack->_enable_callback
    _vfpfcnvrt->_dtoa
    _stoa->_fputc
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_push
    _monitor_water_pressure->_enable_callback
    _init_event_timer->_enable_callback

Critical Paths under _event_timer_isr in COMRAM

    _event_timer_isr->_usart_interrupt
    _usart_interrupt->_puts
    _puts->i2_putch
    i2_putch->i2_push

Critical Paths under _main in BANK0

    _main->_receiveMessage
    _receiveMessage->_printf
    _printPumpState->_printf
    _printFaultState->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa

Critical Paths under _event_timer_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _event_timer_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _event_timer_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _event_timer_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _event_timer_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _event_timer_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _event_timer_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _event_timer_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0  140813
                                              0 BANK1     15    15      0
                  _checkIfShoudReset
                     _clear_callback
                    _enable_callback
                           _has_data
                               _init
                   _init_event_timer
             _monitor_water_pressure
                                _pop
                    _printFaultState
                     _printPumpState
                             _printf
                _process_event_timer
         _process_get_status_message
                    _process_message
                           _pump_run
                               _push
                     _receiveMessage
                            _ser_int
                _serial_process_loop
                           _shutdown
                            _standby
                         _start_main
                         _start_pump
                         _toggleLeds
 ---------------------------------------------------------------------------------
 (1) _toggleLeds                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_pump                                           0     0      0    2256
                     _clear_callback
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _start_main                                           0     0      0    4450
                     _clear_callback
                    _enable_callback
                   _monitor_pump_run
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    2225
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _shutdown                                             0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _serial_process_loop                                  0     0      0     266
                           _has_data
 ---------------------------------------------------------------------------------
 (2) _has_data                                             2     0      2     266
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _receiveMessage                                       3     1      2   23234
                                             67 BANK0      3     1      2
                      _getch_timeout
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getch_timeout                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pump_run                                             0     0      0    4450
                     _clear_callback
                    _enable_callback
                   _monitor_pump_run
 ---------------------------------------------------------------------------------
 (2) _monitor_pump_run                                     0     0      0    2225
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _process_message                                      6     4      2   10818
                                             36 COMRAM     6     4      2
         _process_get_status_message
                 _process_reset_pump
        _process_set_address_message
          _process_set_zones_message
 ---------------------------------------------------------------------------------
 (2) _process_set_zones_message                            5     3      2    2287
                                             31 COMRAM     5     3      2
                     _output_message
                     _setBaseMessage
                            _xtochar
 ---------------------------------------------------------------------------------
 (3) _xtochar                                              1     1      0     279
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _process_set_address_message                          3     1      2    1980
                                             31 COMRAM     3     1      2
                     _output_message
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (2) _process_reset_pump                                   2     0      2    4140
                                             31 COMRAM     2     0      2
                     _output_message
                          _resetPump
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (2) _process_get_status_message                           2     0      2    2036
                                             31 COMRAM     2     0      2
                     _output_message
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (3) _setBaseMessage                                       6     5      1     617
                                             20 COMRAM     6     5      1
                            _chartox
 ---------------------------------------------------------------------------------
 (4) _chartox                                              1     1      0      93
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _output_message                                       4     2      2    1208
                                             27 COMRAM     4     2      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _process_event_timer                                  3     3      0    9296
                                             29 COMRAM     3     3      0
          _EventDumpSolenoidCallBack *
         _EventFaultStateLEDCallBack *
           _EventIdleTimeoutCallBack *
        _EventLowFogPressureCallBack *
         _EventLowWaterLevelCallBack *
      _EventLowWaterPressureCallBack *
_EventLowWaterPressureDebounceCallBa *
            _EventPODebounceCallBack *
     _EventRunSignalDebounceCallBack *
 ---------------------------------------------------------------------------------
 (2) _EventRunSignalDebounceCallBack                       0     0      0      31
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventPODebounceCallBack                              0     0      0      31
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterPressureDebounceCallBack                1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterPressureCallBack                        1     1      0      31
                                             20 COMRAM     1     1      0
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterLevelCallBack                           0     0      0    2225
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventLowFogPressureCallBack                          0     0      0    2225
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _clear_callback_for_shutdown                          0     0      0      31
                     _clear_callback
 ---------------------------------------------------------------------------------
 (2) _EventIdleTimeoutCallBack                             0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventFaultStateLEDCallBack                           7     7      0    2305
                                             22 COMRAM     7     7      0
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventDumpSolenoidCallBack                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printPumpState                                       0     0      0   23076
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printFaultState                                      0     0      0   23076
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              10     4      6   23076
                                             57 BANK0     10     4      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   21627
                                             49 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    34      6   21127
                                             28 BANK0     21    15      6
                               _ctoa
                               _dtoa
                              _fputc
                               _stoa
 ---------------------------------------------------------------------------------
 (5) _stoa                                                22    18      4    3295
                                             36 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    8249
                                             54 COMRAM     8     8      0
                                              0 BANK0     28    18     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             37 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                             19 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                             19 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 7     4      3    6262
                                             54 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    5983
                                             43 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     310
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    2640
                                             36 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                9     5      4    2140
                                             27 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0     656
                                             26 COMRAM     1     1      0
                               _push
 ---------------------------------------------------------------------------------
 (8) _push                                                 7     4      3     625
                                             19 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _pop                                                  5     3      2     455
                                             19 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _monitor_water_pressure                               1     1      0    2225
                                             22 COMRAM     1     1      0
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (3) _clear_callback                                       1     1      0      31
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkIfShoudReset                                    0     0      0    2194
                          _resetPump
 ---------------------------------------------------------------------------------
 (3) _resetPump                                            0     0      0    2194
                               _init
                   _init_event_timer
 ---------------------------------------------------------------------------------
 (4) _init_event_timer                                     0     0      0    2194
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _enable_callback                                      3     1      2    2194
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _init                                                 0     0      0       0
                            _ser_int
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _event_timer_isr                                     6     6      0     944
                                             13 COMRAM     6     6      0
                    _usart_interrupt
 ---------------------------------------------------------------------------------
 (12) _usart_interrupt                                     1     1      0     944
                                             12 COMRAM     1     1      0
                           _not_full
                               _puts
                         i2_has_data
                              i2_pop
                             i2_push
 ---------------------------------------------------------------------------------
 (13) i2_pop                                               5     3      2     181
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (13) i2_has_data                                          2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) _puts                                                4     2      2     380
                                              8 COMRAM     4     2      2
                            i2_putch
 ---------------------------------------------------------------------------------
 (14) i2_putch                                             1     1      0     236
                                              7 COMRAM     1     1      0
                             i2_push
 ---------------------------------------------------------------------------------
 (13) i2_push                                              7     4      3     214
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (13) _not_full                                            4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkIfShoudReset
     _resetPump
       _init
         _ser_int
       _init_event_timer
         _enable_callback
   _clear_callback
   _enable_callback
   _has_data
   _init
     _ser_int
   _init_event_timer
     _enable_callback
   _monitor_water_pressure
     _clear_callback
     _enable_callback
   _pop
   _printFaultState
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _fputc
             _putch
               _push
           _stoa
             _fputc
               _putch
                 _push
             _strlen
   _printPumpState
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _fputc
             _putch
               _push
           _stoa
             _fputc
               _putch
                 _push
             _strlen
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _push
             _fputs
               _fputc
                 _putch
                   _push
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _push
             _fputs
               _fputc
                 _putch
                   _push
             _strlen
         _fputc
           _putch
             _push
         _stoa
           _fputc
             _putch
               _push
           _strlen
   _process_event_timer
     _EventDumpSolenoidCallBack *
     _EventFaultStateLEDCallBack *
       _enable_callback
     _EventIdleTimeoutCallBack *
       _enable_callback
     _EventLowFogPressureCallBack *
       _clear_callback_for_shutdown
         _clear_callback
       _enable_callback
     _EventLowWaterLevelCallBack *
       _clear_callback_for_shutdown
         _clear_callback
       _enable_callback
     _EventLowWaterPressureCallBack *
       _clear_callback_for_shutdown
         _clear_callback
     _EventLowWaterPressureDebounceCallBack *
     _EventPODebounceCallBack *
       _clear_callback_for_shutdown
         _clear_callback
     _EventRunSignalDebounceCallBack *
       _clear_callback_for_shutdown
         _clear_callback
   _process_get_status_message
     _output_message
       _putch
         _push
     _setBaseMessage
       _chartox
   _process_message
     _process_get_status_message
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
     _process_reset_pump
       _output_message
         _putch
           _push
       _resetPump
         _init
           _ser_int
         _init_event_timer
           _enable_callback
       _setBaseMessage
         _chartox
     _process_set_address_message
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
     _process_set_zones_message
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
       _xtochar
   _pump_run
     _clear_callback
     _enable_callback
     _monitor_pump_run
       _clear_callback
       _enable_callback
   _push
   _receiveMessage
     _getch_timeout
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _push
               _fputs
                 _fputc
                   _putch
                     _push
               _strlen
           _fputc
             _putch
               _push
           _stoa
             _fputc
               _putch
                 _push
             _strlen
   _ser_int
   _serial_process_loop
     _has_data
   _shutdown
     _enable_callback
   _standby
     _clear_callback
     _enable_callback
   _start_main
     _clear_callback
     _enable_callback
     _monitor_pump_run
       _clear_callback
       _enable_callback
   _start_pump
     _clear_callback
     _clear_callback_for_shutdown
       _clear_callback
     _enable_callback
   _toggleLeds

 _event_timer_isr (ROOT)
   _usart_interrupt
     _not_full
     _puts
       i2_putch
         i2_push
     i2_has_data
     i2_pop
     i2_push

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0     208      21       50.8%
BIGRAM             3F3      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      F      58       8       34.4%
BITBANK3            F4      0       0      11        0.0%
BANK3               F4      0       0      12        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     46      9C       6       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      4B       1       79.8%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13F       3        0.0%
DATA                 0      0     347       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Feb 03 11:46:06 2025

                   __size_of_process_reset_pump 0028                                              l20 08D6  
                                            l22 095C                                              l23 08F8  
                                            l52 1502                                              l67 16EA  
                                   __CFG_BOR$ON 000000                                     __CFG_BORV$1 000000  
                                  __CFG_CP0$OFF 000000                                    __CFG_CP1$OFF 000000  
                                  __CFG_CP2$OFF 000000                                    __CFG_CP3$OFF 000000  
                                   __CFG_LVP$ON 000000                        _EventIdleTimeoutCallBack 14DC  
                                           l322 0D58                                             l315 0D12  
                                           l325 0D82                                             l309 176A  
                                           l445 19B2                                             l471 148C  
                                           l619 15C6                                             l645 0C70  
                                           l646 0C86                                             l497 0E4C  
                                           l594 139E                                             l739 0DCC  
                                           l596 13C0                                             l757 0344  
                                           l759 034C                                             l786 06C6  
                                           _GIE 007F97                                    __CFG_CPB$OFF 000000  
                                  __CFG_CPD$OFF 000000                                             _TX9 007D66  
                                           _abs 16F6                                             _pad 0D9E  
                                           _pop 0E34                                 ?_setBaseMessage 0015  
                                           prod 000FF3                                             tosl 000FFD  
                                           wreg 000FE8                                      i2_has_data 1A2E  
                                  __CFG_WDT$OFF 000000                                            ?_abs 0026  
                                          l4201 162C                                            l4211 17C4  
                                          l4205 1642                                            l4221 0DB6  
                                          l4231 0DEE                                            l4311 084E  
                                          l4303 07F2                                            l1495 171E  
                                          l5103 0C0C                                            l4209 17C0  
                                          l4225 0DC4                                            l4305 0806  
                                          l5025 0988                                            l5017 0982  
                                          l5201 0CF8                                            l4235 0E1A  
                                          l4227 0DD6                                            l4251 0544  
                                          l4315 0864                                            l4421 04EE  
                                          l5117 13AE                                            l4191 11B8  
                                          l4263 0592                                            l4319 088A  
                                          l5055 0B12                                            l5047 0B02  
                                          l4353 14A0                                            l4265 05A6  
                                          l4257 056C                                            l4417 04D6  
                                          l4433 068A                                            l4601 016A  
                                          l5241 10F4                                            l4355 14AC  
                                          l4283 063E                                            l4275 0602  
                                          l4451 0712                                            l4443 06DC  
                                          l4611 01D6                                            l5155 0C64  
                                          l4461 0752                                            l5093 0BD4  
                                          l5069 0B54                                            ?_pad 002C  
                                          l4279 0618                                            l4295 07B4  
                                          l4383 0366                                            l4447 06F4  
                                          l4607 01CA                                            l5095 0BE2  
                                          l4369 0328                                            l4465 076A  
                                          l4457 0738                                            l4625 0280  
                                          l5097 0BF0                                            l5249 112E  
                                          l4299 07D8                                            l4387 0376  
                                          l4619 0244                                            l4635 029C  
                                          l4571 19CE                                            l5099 0BFE  
                                          l5179 0CAA                                            l4397 0470  
                                          l4629 028C                                            l4725 13FE  
                                          l4813 1846                                            l5189 0CCE  
                                          l4591 00B6                                            l4727 1424  
                                          l4655 1452                                            l4911 19BC  
                                          l5199 0CF2                                            l4761 0920  
                                          l4673 15FA                                            l4763 092A  
                                          l4659 1468                                            l4691 161E  
                                          l4683 160C                                            l4765 0932  
                                          l4935 168A                                            l4951 0A6A  
                                          l4943 0A46                                            l4759 0918  
                                          l4767 093C                                            l4871 0D2C  
                                          l4777 096E                                            l4769 0944  
                                          l4881 0D4A                                            l4971 0AC4  
                                          l4963 0AA0                                            l4955 0A7C  
                                          l4947 0A58                                            l4893 0D76  
                                          l4975 0AD6                                            l4967 0AB2  
                                          l4959 0A8E                                            ?_pop 0014  
                                          STR_1 7D57                                            STR_2 7D1A  
                                          STR_3 7C91                                            STR_4 7CC0  
                                          STR_5 7C55                                            STR_6 7CF9  
                                          STR_7 7D48                                            STR_8 7D66  
                                          STR_9 7D83                                            _CREN 007D5C  
                                          _T0CS 007EAD                                            u4000 04B0  
                                          u4010 04B4                                            u4100 0708  
                                          u4030 04C0                                            u4130 077E  
                                          u4051 066A                                            u5020 0BC2  
                                          u4230 1478                                            u4315 0F6C  
                                          u4180 00EA                                            u5060 13CC  
                                          u4325 0FA8                                            u4430 090E  
                                          u5231 10D2                                            u3650 11B0  
                                          u4530 190E                                            _PEIE 007F96  
                                          u3740 1704                                            u3900 02FA  
                                          u4508 169E                                            u3670 11F8  
                                          u3910 02FC                                            u4438 0910  
                                          u3850 080A                                            u4490 169C  
                                          u3771 0572                                            _RCIE 007CED  
                                          u3940 033A                                            u4548 1910  
                                          u4580 0D0A                                            _RCIF 007CF5  
                                          u3790 05AA                                            u4680 1662  
                                          u3960 0360                                            u4690 166E  
                                          u4682 1664                                            u3970 0480  
                                          u4860 18DE                                            u4692 1670  
                                          u4940 0A2A                                            u3990 04A2  
                                          u3991 04A0                                            u4960 0AF8  
                                          u4938 0A0A                                            _OERR 007D59  
                                          u4939 0A1E                                            u4990 0B4A  
                                          _RBPU 007F8F                                            _SPEN 007D5F  
                                          _TRMT 007D61                                            _TXIE 007CEC  
                                          _TXIF 007CF4                                            _TXEN 007D65  
                                          _SYNC 007D64                                            abs@a 0026  
                                          _dbuf 0100                                            _ctoa 148E  
                                          _main 10C8                                            _dtoa 02D0  
                                          _init 0FDC                                            _prec 0041  
                                          _nout 00A8                                            pad@i 0033  
                                          pad@p 0030                                            fsr1h 000FE2  
                                          fsr2h 000FDA                                            indf2 000FDF  
                                          fsr1l 000FE1                                            pad@w 0035  
                                          fsr2l 000FD9                                            _push 1272  
                                          _stoa 0660                                            btemp 004C  
                                          _puts 1728                                            pop@d 0018  
                                          prodl 000FF3                                            start 000E  
                                 __CFG_IESO$OFF 000000              __size_of_EventDumpSolenoidCallBack 000A  
                               _event_timer_isr 0008                            process_event_timer@i 0020  
                               __end_ofi2_putch 19FC                                   __CFG_MCLRE$ON 000000  
                      ??_monitor_water_pressure 0017                                    ___param_bank 000000  
               ??_EventLowWaterPressureCallBack 0015                                           ??_abs 0028  
                                         ??_pad 0032                                           ??_pop 0016  
                                 __CFG_PLLDIV$1 000000                                ?_usart_interrupt 0001  
                                __CFG_CCP2MX$ON 000000                                 __end_of___aodiv 0660  
                                         ?_ctoa 0037                                           ?_main 0001  
                                         ?_dtoa 00B6                                 __end_of___aomod 08AC  
                                         ?_init 0001                                           STR_10 7D9B  
                                         STR_11 7D8F                                           STR_12 7DA7  
                                         STR_20 7C74                                           STR_13 7DB2  
                                         STR_21 7D0A                                           STR_22 7DBC  
                                         STR_14 7D75                                           STR_15 7D66  
                                         STR_23 7D2A                                           STR_16 7CD5  
                                         STR_17 7CE7                                           STR_18 7D39  
                                         STR_19 7CA9                                           ?_push 0014  
                                         ?_stoa 0025                                           ?_puts 0009  
                                         _IRCF0 007E9C                                           _IRCF1 007E9D  
                                         _IRCF2 007E9E                                           _PCFG3 007E0B  
                                         i2l497 0EDA                                           _RCREG 000FAE  
                                         _RCSTA 000FAB                                    vfpfcnvrt@fmt 00D4  
                                         _SPBRG 000FAF                                           _PORTA 000F80  
                                         _PORTB 000F81                                           _PORTD 000F83  
                                 __CFG_USBDIV$1 000000                                           _TRISA 000F92  
                                         _TRISB 000F93                                           _TRISD 000F95  
                                         _TXREG 000FAD                                           _TXSTA 000FAC  
                                 __CFG_PWRT$OFF 000000                                           i2_pop 0EC2  
                               __end_of_chartox 19D4                                   __CFG_WRT0$OFF 000000  
                                 __CFG_WRT1$OFF 000000                                   __CFG_WRT2$OFF 000000  
                                 __CFG_WRT3$OFF 000000                                  __CFG_EBTR0$OFF 000000  
                                __CFG_FCMEN$OFF 000000                                  __CFG_EBTR1$OFF 000000  
                                __CFG_EBTR2$OFF 000000                                  __CFG_EBTR3$OFF 000000  
                                 __CFG_WRTB$OFF 000000                                   __CFG_WRTC$OFF 000000  
                                 __CFG_WRTD$OFF 000000                                  __CFG_EBTRB$OFF 000000  
                       __size_of_clear_callback 0018                                           _flags 0043  
                               _enable_callback 1522                                           _fputc 11A0  
                                         _fputs 1622                           receiveMessage@message 0120  
                                         pad@fp 002C                                           _width 003F  
                                         ctoa@c 0039                                           _state 004B  
                                         _putch 19D4                                           ctoa@w 003A  
                                         main@c 0153                                           dtoa@d 00B8  
                                         dtoa@i 00D0                                           dtoa@n 00C8  
                                         dtoa@p 00C2                                           dtoa@s 00C6  
                                         dtoa@w 00C4                                           _zones 0045  
                      __size_of_printFaultState 00B6                                 __end_of_ser_int 187C  
                                         pclath 000FFA                                           tablat 000FF5  
                                         plusw1 000FE3                                           plusw2 000FDB  
                                         push@d 0016                                 __end_of_standby 13EA  
                                         stoa@i 0031                                           stoa@l 0039  
                                         stoa@p 0037                                           stoa@s 0027  
                                         stoa@w 0033                                           puts@c 000B  
                                         ttemp5 004D                                           ttemp6 0050  
                                         ttemp7 0054                                           status 000FD8  
                                         wtemp8 004D                                  __CFG_ICPRT$OFF 000000  
                           _process_event_timer 097E                                 ??_getch_timeout 0014  
                               __end_of_xtochar 1622                    ?_clear_callback_for_shutdown 0001  
                             receiveMessage@len 00AA                                  i2has_data@buff 0001  
                               __initialization 120C                                    __end_of_ctoa 14DC  
                                  __end_of_main 1134                                    __end_of_dtoa 0518  
                                  __end_of_init 105A                                    __end_of_push 12D2  
                                  __end_of_stoa 0788                                    __end_of_puts 175A  
                                    i2push@buff 0001                                          ??_ctoa 003A  
                                        ??_main 003F                                          ??_dtoa 0037  
                                        ??_init 0014                                          ??_push 0017  
                                        ??_stoa 0029                                          ??_puts 000B  
                          ?_process_event_timer 0001                                   __activetblptr 000002  
                                        ?i2_pop 0001                                     ?i2_has_data 0001  
                                        _ADCON1 000FC1                                          ?_fputc 001C  
                                        ?_fputs 0025                                          ?_putch 0001  
                                        i2l4007 1084                                          i2l4017 10A0  
                                        i2l4155 158A                                          i2l3643 1746  
                                        i2l3639 1732                         __end_of_event_timer_isr 15AA  
                                        _TMR0IE 007F95                                          _TMR0IF 007F92  
                                     ??i2_putch 0008                               ?_monitor_pump_run 0001  
                                        _TRISC6 007CA6                                          _TRISC7 007CA7  
                                 _outputMessage 00AC                                          i2_push 12D2  
                            ??_monitor_pump_run 0017                                          i2pop@d 0005  
                              __end_of_has_data 1A1E                                  __CFG_XINST$OFF 000000  
                   __end_of_serial_process_loop 1992                                    vfprintf@cfmt 00ED  
               __size_of_monitor_water_pressure 0038                                ??_printPumpState 003F  
                                     ??___aodiv 0024                                       ??___aomod 0024  
                                __CFG_STVREN$ON 000000                                          clear_0 1234  
                                        clear_1 1246                                          clear_2 1252  
                                        clear_3 125E                                       ??_chartox 0014  
                                        _printf 1808                                          pad@buf 002E  
                       __size_of_output_message 004E                                          ctoa@fp 0037  
                         ??_process_event_timer 001E                     ?_EventLowWaterLevelCallBack 0001  
         __end_of_EventLowWaterPressureCallBack 16C4          __size_of_EventLowWaterPressureCallBack 0032  
                 _EventLowWaterPressureCallBack 1692                                          dtoa@fp 00B6  
                                        _strlen 17B6            process_set_address_message@inmessage 0020  
                       __end_of_enable_callback 1566                                          fputc@c 001C  
                                        fputs@c 0029                                          fputs@i 002A  
                                        fputs@s 0025                                __end_of_not_full 1978  
                   ??_process_set_zones_message 0022                                    __mediumconst 7C54  
                                        tblptrh 000FF7                                       ??_ser_int 0014  
                                        tblptrl 000FF6                                          tblptru 000FF8  
                             _checkIfShoudReset 18C4                                __end_of_shutdown 195C  
                                        stoa@cp 0035                                          stoa@fp 0025  
                                        putch@c 001B                                       ??_standby 0017  
                              __end_of_vfprintf 1440                                __end_of_pump_run 178A  
                              ??_receiveMessage 003F                              ?_checkIfShoudReset 0001  
                                     ??_xtochar 0014                                      __accesstop 0060  
                       __end_of__initialization 1264                                 __CFG_PBADEN$OFF 000000  
                      ?_EventPODebounceCallBack 0001                        main@sendGetMessageBuffer 0149  
                                 ___rparam_used 000001                             ??_checkIfShoudReset 0017  
                             ??_printFaultState 003F                                   __end_ofi2_pop 0F50  
                    ??_EventIdleTimeoutCallBack 0017                                  __pcstackCOMRAM 0001  
                                  __pidataBANK1 18E4                             __size_ofi2_has_data 0010  
                                 __end_of_fputc 120C                    ??_EventFaultStateLEDCallBack 0017  
                                 __end_of_fputs 165A                                ??_setBaseMessage 0016  
                     __size_of_init_event_timer 005E                                   __end_of_putch 19E8  
                                _inIdleDumpHour 004A                       __end_of_checkIfShoudReset 18E4  
                                       ??i2_pop 0003            __size_of_clear_callback_for_shutdown 002C  
                                _clear_callback 1992                          _monitor_water_pressure 165A  
                      __size_of_process_message 00B2                                         ??_fputc 0020  
                                       ??_fputs 0029                                         ??_putch 001B  
                                    __pbssBANK0 0060                                      __pbssBANK1 0100  
                              ?_event_timer_isr 0001                       setBaseMessage@messageType 0019  
                  ??_process_get_status_message 0022                       _process_set_zones_message 1134  
                                       ?i2_push 0001                      __end_of_process_reset_pump 1808  
           __end_of_EventLowFogPressureCallBack 16F6                     _EventLowFogPressureCallBack 16C4  
                            __size_of_resetPump 000A                                         ?_printf 00EF  
                                       ?_strlen 0014                                ?_enable_callback 0014  
                      process_message@inmessage 0025                          __end_of_clear_callback 19AA  
                            __size_of_vfpfcnvrt 02BE                                       ?_has_data 0014  
           __size_of_process_get_status_message 0024                 __end_of_EventPODebounceCallBack 1A0E  
                               __CFG_VREGEN$OFF 000000                                         i2_putch 19E8  
                                       i2push@d 0003             __size_of_EventLowWaterLevelCallBack 0026  
                               __size_ofi2_push 0060                                         __Hparam 0000  
                                       __Lparam 0000                                       ?_not_full 0001  
                                       ___aodiv 0518                                         ___aomod 0788  
                                     ?_shutdown 0001                                       ?_vfprintf 00E7  
                                     ?_pump_run 0001                                         __pcinit 120C  
                                       _chartox 19C0                                  _output_message 1440  
                                       __ramtop 0800                                         __ptext0 10C8  
                                       __ptext1 1A52                                         __ptext2 0C4E  
                                       __ptext3 15AA                                         __ptext4 1390  
                                       __ptext5 1940                                         __ptext6 1978  
                                       __ptext7 1A0E                                         __ptext8 0AEA  
                                       __ptext9 19AA                                 __size_of_printf 0028  
                               __size_of_strlen 002A                                         _inbound 0258  
                                  __size_of_abs 0032                                    __size_of_pad 0096  
                               ?_clear_callback 0001                                    __size_of_pop 008E  
                    __size_of_checkIfShoudReset 0020                                         _ser_int 1856  
                      __size_of_usart_interrupt 006E                                    ??i2_has_data 0003  
                                    ??_has_data 0016                                         _standby 1390  
                        clear_callback@callback 0014                                  __pintcode_body 1566  
                          end_of_initialization 1264                                         _xtochar 15E6  
                                       fputc@fp 001E                               __end_of_resetPump 1A52  
                                 __Lmediumconst 7C54                                         int_func 1566  
                                       fputs@fp 0027                               ??_process_message 0027  
                                       pop@buff 0014                    ?_process_set_address_message 0020  
                         __end_of_getch_timeout 19C0                                      ??_not_full 0003  
                             __end_of_vfpfcnvrt 02D0                                         postdec1 000FE5  
                                       postdec2 000FDD              __end_of_EventFaultStateLEDCallBack 097E  
                    _EventFaultStateLEDCallBack 08AC                                         postinc0 000FEE  
                                       postinc1 000FE6                                         postinc2 000FDE  
                        __end_of_output_message 148E                      ?_EventDumpSolenoidCallBack 0001  
                                    ??_shutdown 0017                                         puts@str 0009  
                                    ??_vfprintf 003F                                      ??_pump_run 0017  
                              _init_event_timer 1332                              __end_ofi2_has_data 1A3E  
                              usart_interrupt@a 000D                                         strlen@a 0016  
                                       strlen@s 0014                       __size_of_monitor_pump_run 00A0  
                                     _PORTAbits 000F80                                       _PORTBbits 000F81  
                                    _toggleLeds 1A52                                       _TRISAbits 000F92  
                                     _TRISBbits 000F93                                   __pbssBIGRAM_1 0154  
                               _printFaultState 0A34                                      _start_main 15AA  
                                    _start_pump 0C4E              __end_of_process_get_status_message 18C4  
                    _process_get_status_message 18A0                         enable_callback@callback 0016  
              ??_EventRunSignalDebounceCallBack 0015                 ?_EventRunSignalDebounceCallBack 0001  
                 ??_process_set_address_message 0022                                  __end_ofi2_push 1332  
                               receiveMessage@c 00FB                     __end_of_process_event_timer 0A34  
                               ?_output_message 001C                                     vfpfcnvrt@ap 00D6  
                                   vfpfcnvrt@cp 00E2                                     vfpfcnvrt@fp 00D2  
                                   vfpfcnvrt@ll 00DA               __end_of_EventDumpSolenoidCallBack 1A48  
                                   vfpfcnvrt@vp 00E4              __size_of_process_set_zones_message 006C  
                  __size_of_serial_process_loop 001A                __size_of_EventPODebounceCallBack 0012  
                             _PumpStateMappings 012A                         ?_monitor_water_pressure 0001  
                                     i2pop@buff 0001                                  __end_of_printf 1830  
                                __end_of_strlen 17E0                             start_initialization 120C  
 __end_of_EventLowWaterPressureDebounceCallBack 1922  __size_of_EventLowWaterPressureDebounceCallBack 001E  
       ??_EventLowWaterPressureDebounceCallBack 0014          ?_EventLowWaterPressureDebounceCallBack 0001  
         _EventLowWaterPressureDebounceCallBack 1904                                     __end_of_abs 1728  
                                   __end_of_pad 0E34                                     __end_of_pop 0EC2  
                   process_reset_pump@inmessage 0020                               ??_usart_interrupt 000D  
                                      ??i2_push 0004             __end_of_clear_callback_for_shutdown 17B6  
                   _clear_callback_for_shutdown 178A                                     vfprintf@fmt 00E9  
                                   __pdataBANK1 012A                                __CFG_LPT1OSC$OFF 000000  
                 ??_clear_callback_for_shutdown 0015                  __end_of_monitor_water_pressure 1692  
                                      ??_printf 003F                              _process_reset_pump 17E0  
             __end_of_process_set_zones_message 11A0                                        ??_strlen 0016  
          __size_of_EventLowFogPressureCallBack 0032                         __end_of_printFaultState 0AEA  
          __size_of_process_set_address_message 0024                                     ?_toggleLeds 0001  
                       __size_of_printPumpState 001E                                     __pbssCOMRAM 003F  
             __size_of_EventIdleTimeoutCallBack 0046                                   __pcstackBANK0 00B6  
                                 __pcstackBANK1 0149                                ___aodiv@dividend 0014  
                     ?_EventIdleTimeoutCallBack 0001                             ?_process_reset_pump 0020  
                                   ?_start_main 0001                               __size_of_has_data 0010  
                                   ?_start_pump 0001                                        ?i2_putch 0001  
                                     _dtoa$1827 00C0                         __size_of_receiveMessage 00B2  
                          ??_process_reset_pump 0022                        __size_of_event_timer_isr 15A2  
                                     __pintcode 0008                                   __pmediumconst 7C54  
                                      ?___aodiv 0014                                        ?___aomod 0014  
                              ___aodiv@quotient 0026                               __size_of_not_full 001C  
                              ??_clear_callback 0014                                _monitor_pump_run 0CFE  
                                      ?_chartox 0001                                 setBaseMessage@v 001A  
                             __size_of_shutdown 001C                               __size_of_vfprintf 0056  
                             __size_of_pump_run 0030                                  __size_ofi2_pop 008E  
                               _process_message 0B9C                                        ?_ser_int 0001  
                         output_message@message 001C                         __size_of_setBaseMessage 008C  
                                      ?_standby 0001                                  __size_of_fputc 006C  
                                __size_of_fputs 0038                                  __size_of_putch 0014  
                      __size_of_enable_callback 0044                                        ?_xtochar 0001  
                      __end_of_init_event_timer 1390                                     _fault_flags 0047  
           process_get_status_message@inmessage 0020                                       _resetPump 1A48  
                           __size_of_toggleLeds 0004                                        i2u287_40 1974  
                              __CFG_WDTPS$32768 000000                                       main@F3632 0138  
            process_set_zones_message@inmessage 0020                     ?_EventFaultStateLEDCallBack 0001  
                   ??_EventDumpSolenoidCallBack 0014                                 output_message@i 001E  
                       _EventPODebounceCallBack 19FC                                       _vfpfcnvrt 0012  
                           __size_of_start_main 003C                             __size_of_start_pump 00B0  
                  ??_EventLowWaterLevelCallBack 0017                                ?_printFaultState 0001  
                                    vfpfcnvrt@c 00E6                                       copy_data0 1220  
                ?_EventLowWaterPressureCallBack 0001                             _serial_process_loop 1978  
                                      i2putch@c 0008                     ?_process_get_status_message 0020  
                              __size_ofi2_putch 0014                                ??_output_message 001E  
                                      __Hrparam 0000                  _EventFaultStateLEDCallBack$217 0018  
                _EventFaultStateLEDCallBack$218 001A                  _EventFaultStateLEDCallBack$219 001C  
                                    ?_resetPump 0001                                      vfprintf@ap 00EB  
                                      __Lrparam 0000                                      vfprintf@fp 00E7  
                              __size_of___aodiv 0148                                __size_of___aomod 0124  
                                    ?_vfpfcnvrt 00D2                         __end_of_process_message 0C4E  
                          ?_serial_process_loop 0001                                 ___aodiv@divisor 001C  
                             ??_event_timer_isr 000E                           __CFG_FOSC$INTOSCIO_EC 000000  
                               ___aodiv@counter 0024                                __size_of_chartox 0014  
                                _printPumpState 1922          __end_of_EventRunSignalDebounceCallBack 1A2E  
       __size_of_EventRunSignalDebounceCallBack 0010                  _EventRunSignalDebounceCallBack 1A1E  
                               _usart_interrupt 105A                                        __ptext10 175A  
                                      __ptext11 0CFE                                        __ptext20 1440  
                                      __ptext12 0B9C                                        __ptext21 097E  
                                      __ptext13 1134                                        __ptext30 1A1E  
                                      __ptext22 19FC                                        __ptext14 15E6  
                                      __ptext31 178A                                        __ptext23 1904  
                                      __ptext15 187C                                        __ptext40 0788  
                                      __ptext32 1922                                        __ptext24 1692  
                                      __ptext16 17E0                                        __ptext41 0518  
                                      __ptext33 0A34                                        __ptext25 1830  
                                      __ptext17 18A0                                        __ptext50 165A  
                                      __ptext42 148E                                        __ptext34 1808  
                                      __ptext26 16C4                                        __ptext18 0F50  
                                      __ptext51 1992                                        __ptext43 0D9E  
                                      __ptext35 13EA                                        __ptext27 14DC  
                                      __ptext19 19C0                                        __ptext60 0EC2  
                                      __ptext52 18C4                                        __ptext44 17B6  
                                      __ptext36 0012                                        __ptext28 08AC  
                                      __ptext61 1A2E                                        __ptext53 1A48  
                                      __ptext45 1622                                        __ptext37 0660  
                                      __ptext29 1A3E                                        _has_data 1A0E  
                                      __ptext62 1728                                        __ptext54 1332  
                                      __ptext46 11A0                                        __ptext38 02D0  
                                      __ptext63 19E8                                        __ptext55 1522  
                                      __ptext47 19D4                                        __ptext39 16F6  
                                      __ptext64 12D2                                        __ptext56 0FDC  
                                      __ptext48 1272                                        __ptext65 195C  
                                      __ptext57 1856                                        __ptext49 0E34  
                                      __ptext66 0000                                        __ptext59 105A  
                              __size_of_ser_int 0026                          __size_of_getch_timeout 0016  
                     _EventDumpSolenoidCallBack 1A3E                                __size_of_standby 005A  
                        process_message@msgType 0029                                __size_of_xtochar 003C  
                      setBaseMessage@msgAddress 0015                                   __size_of_ctoa 004E  
                                 __size_of_main 006C                                   __size_of_dtoa 0248  
                                 __size_of_init 007E                                   __size_of_push 0060  
                                 __size_of_stoa 0128                                   __size_of_puts 0032  
                                      chartox@c 0014                               ??_enable_callback 0016  
                                _receiveMessage 0AEA                    ?_EventLowFogPressureCallBack 0001  
                                      _not_full 195C                                       stoa@F1144 0142  
                                  not_full@buff 0001                       ??_EventPODebounceCallBack 0015  
                                      int$flags 004C                __end_of_EventIdleTimeoutCallBack 1522  
                                      _shutdown 1940                       enable_callback@time_delay 0014  
                                      _outbound 0154                                        _vfprintf 13EA  
                                      _pump_run 175A                                       printf@fmt 00EF  
                         ??_serial_process_loop 0016                          __end_of_printPumpState 1940  
                              ___aomod@dividend 0014                           __CFG_CPUDIV$OSC1_PLL2 000000  
                  __size_of_process_event_timer 00B6                                    ??_toggleLeds 0014  
                                _setBaseMessage 0F50                                    ??_start_main 0017  
                                      intlevel2 0000                                    ??_start_pump 0017  
           __size_of_EventFaultStateLEDCallBack 00D2                        __end_of_monitor_pump_run 0D9E  
           __end_of_process_set_address_message 18A0                     _process_set_address_message 187C  
                        __end_of_receiveMessage 0B9C                                    has_data@buff 0014  
                                   ??_resetPump 0017                              __end_of_toggleLeds 1A56  
                                 _getch_timeout 19AA                   ??_EventLowFogPressureCallBack 0017  
                                      printf@ap 00F7                                    _timer_events 0060  
                                      push@buff 0014                                 ___aomod@divisor 001C  
                                   ??_vfpfcnvrt 00D8                                        stoa@nuls 002A  
                               ___aomod@counter 0024                         __end_of_usart_interrupt 10C8  
                              ?_process_message 0025              __end_of_EventLowWaterLevelCallBack 1856  
                    _EventLowWaterLevelCallBack 1830                                 ?_printPumpState 0001  
                            __end_of_start_main 15E6                              __end_of_start_pump 0CFE  
                    ?_process_set_zones_message 0020                          __end_of_setBaseMessage 0FDC  
                                   _timer_count 0049                                        xtochar@x 0014  
                                  ___aodiv@sign 0025                               ?_init_event_timer 0001  
                               ?_receiveMessage 00F9                              ??_init_event_timer 0017  
                                  ___aomod@sign 0025                                  ?_getch_timeout 0001  

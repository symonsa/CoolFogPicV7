

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Feb 12 12:47:06 2025

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	functab,global,class=ENTRY,delta=2
    76                           	dabs	1,0x7E,2
    77  0000                     
    78                           ; Version 2.05
    79                           ; Generated 20/12/2018 GMT
    80                           ; 
    81                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC16F877A Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  009F                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232  0000                     	;# 
   233  0001                     	;# 
   234  0002                     	;# 
   235  0003                     	;# 
   236  0004                     	;# 
   237  0005                     	;# 
   238  0006                     	;# 
   239  0007                     	;# 
   240  0008                     	;# 
   241  0009                     	;# 
   242  000A                     	;# 
   243  000B                     	;# 
   244  000C                     	;# 
   245  000D                     	;# 
   246  000E                     	;# 
   247  000E                     	;# 
   248  000F                     	;# 
   249  0010                     	;# 
   250  0011                     	;# 
   251  0012                     	;# 
   252  0013                     	;# 
   253  0014                     	;# 
   254  0015                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0017                     	;# 
   258  0018                     	;# 
   259  0019                     	;# 
   260  001A                     	;# 
   261  001B                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  001D                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  0081                     	;# 
   268  0085                     	;# 
   269  0086                     	;# 
   270  0087                     	;# 
   271  0088                     	;# 
   272  0089                     	;# 
   273  008C                     	;# 
   274  008D                     	;# 
   275  008E                     	;# 
   276  0091                     	;# 
   277  0092                     	;# 
   278  0093                     	;# 
   279  0094                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0008                     	;# 
   301  0009                     	;# 
   302  000A                     	;# 
   303  000B                     	;# 
   304  000C                     	;# 
   305  000D                     	;# 
   306  000E                     	;# 
   307  000E                     	;# 
   308  000F                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0014                     	;# 
   314  0015                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0017                     	;# 
   318  0018                     	;# 
   319  0019                     	;# 
   320  001A                     	;# 
   321  001B                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001D                     	;# 
   325  001E                     	;# 
   326  001F                     	;# 
   327  0081                     	;# 
   328  0085                     	;# 
   329  0086                     	;# 
   330  0087                     	;# 
   331  0088                     	;# 
   332  0089                     	;# 
   333  008C                     	;# 
   334  008D                     	;# 
   335  008E                     	;# 
   336  0091                     	;# 
   337  0092                     	;# 
   338  0093                     	;# 
   339  0094                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009E                     	;# 
   345  009F                     	;# 
   346  010C                     	;# 
   347  010D                     	;# 
   348  010E                     	;# 
   349  010F                     	;# 
   350  018C                     	;# 
   351  018D                     	;# 
   352  0000                     	;# 
   353  0001                     	;# 
   354  0002                     	;# 
   355  0003                     	;# 
   356  0004                     	;# 
   357  0005                     	;# 
   358  0006                     	;# 
   359  0007                     	;# 
   360  0008                     	;# 
   361  0009                     	;# 
   362  000A                     	;# 
   363  000B                     	;# 
   364  000C                     	;# 
   365  000D                     	;# 
   366  000E                     	;# 
   367  000E                     	;# 
   368  000F                     	;# 
   369  0010                     	;# 
   370  0011                     	;# 
   371  0012                     	;# 
   372  0013                     	;# 
   373  0014                     	;# 
   374  0015                     	;# 
   375  0015                     	;# 
   376  0016                     	;# 
   377  0017                     	;# 
   378  0018                     	;# 
   379  0019                     	;# 
   380  001A                     	;# 
   381  001B                     	;# 
   382  001B                     	;# 
   383  001C                     	;# 
   384  001D                     	;# 
   385  001E                     	;# 
   386  001F                     	;# 
   387  0081                     	;# 
   388  0085                     	;# 
   389  0086                     	;# 
   390  0087                     	;# 
   391  0088                     	;# 
   392  0089                     	;# 
   393  008C                     	;# 
   394  008D                     	;# 
   395  008E                     	;# 
   396  0091                     	;# 
   397  0092                     	;# 
   398  0093                     	;# 
   399  0094                     	;# 
   400  0098                     	;# 
   401  0099                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  009F                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  010F                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  0000                     	;# 
   413  0001                     	;# 
   414  0002                     	;# 
   415  0003                     	;# 
   416  0004                     	;# 
   417  0005                     	;# 
   418  0006                     	;# 
   419  0007                     	;# 
   420  0008                     	;# 
   421  0009                     	;# 
   422  000A                     	;# 
   423  000B                     	;# 
   424  000C                     	;# 
   425  000D                     	;# 
   426  000E                     	;# 
   427  000E                     	;# 
   428  000F                     	;# 
   429  0010                     	;# 
   430  0011                     	;# 
   431  0012                     	;# 
   432  0013                     	;# 
   433  0014                     	;# 
   434  0015                     	;# 
   435  0015                     	;# 
   436  0016                     	;# 
   437  0017                     	;# 
   438  0018                     	;# 
   439  0019                     	;# 
   440  001A                     	;# 
   441  001B                     	;# 
   442  001B                     	;# 
   443  001C                     	;# 
   444  001D                     	;# 
   445  001E                     	;# 
   446  001F                     	;# 
   447  0081                     	;# 
   448  0085                     	;# 
   449  0086                     	;# 
   450  0087                     	;# 
   451  0088                     	;# 
   452  0089                     	;# 
   453  008C                     	;# 
   454  008D                     	;# 
   455  008E                     	;# 
   456  0091                     	;# 
   457  0092                     	;# 
   458  0093                     	;# 
   459  0094                     	;# 
   460  0098                     	;# 
   461  0099                     	;# 
   462  009C                     	;# 
   463  009D                     	;# 
   464  009E                     	;# 
   465  009F                     	;# 
   466  010C                     	;# 
   467  010D                     	;# 
   468  010E                     	;# 
   469  010F                     	;# 
   470  018C                     	;# 
   471  018D                     	;# 
   472  0000                     	;# 
   473  0001                     	;# 
   474  0002                     	;# 
   475  0003                     	;# 
   476  0004                     	;# 
   477  0005                     	;# 
   478  0006                     	;# 
   479  0007                     	;# 
   480  0008                     	;# 
   481  0009                     	;# 
   482  000A                     	;# 
   483  000B                     	;# 
   484  000C                     	;# 
   485  000D                     	;# 
   486  000E                     	;# 
   487  000E                     	;# 
   488  000F                     	;# 
   489  0010                     	;# 
   490  0011                     	;# 
   491  0012                     	;# 
   492  0013                     	;# 
   493  0014                     	;# 
   494  0015                     	;# 
   495  0015                     	;# 
   496  0016                     	;# 
   497  0017                     	;# 
   498  0018                     	;# 
   499  0019                     	;# 
   500  001A                     	;# 
   501  001B                     	;# 
   502  001B                     	;# 
   503  001C                     	;# 
   504  001D                     	;# 
   505  001E                     	;# 
   506  001F                     	;# 
   507  0081                     	;# 
   508  0085                     	;# 
   509  0086                     	;# 
   510  0087                     	;# 
   511  0088                     	;# 
   512  0089                     	;# 
   513  008C                     	;# 
   514  008D                     	;# 
   515  008E                     	;# 
   516  0091                     	;# 
   517  0092                     	;# 
   518  0093                     	;# 
   519  0094                     	;# 
   520  0098                     	;# 
   521  0099                     	;# 
   522  009C                     	;# 
   523  009D                     	;# 
   524  009E                     	;# 
   525  009F                     	;# 
   526  010C                     	;# 
   527  010D                     	;# 
   528  010E                     	;# 
   529  010F                     	;# 
   530  018C                     	;# 
   531  018D                     	;# 
   532  0000                     	;# 
   533  0001                     	;# 
   534  0002                     	;# 
   535  0003                     	;# 
   536  0004                     	;# 
   537  0005                     	;# 
   538  0006                     	;# 
   539  0007                     	;# 
   540  0008                     	;# 
   541  0009                     	;# 
   542  000A                     	;# 
   543  000B                     	;# 
   544  000C                     	;# 
   545  000D                     	;# 
   546  000E                     	;# 
   547  000E                     	;# 
   548  000F                     	;# 
   549  0010                     	;# 
   550  0011                     	;# 
   551  0012                     	;# 
   552  0013                     	;# 
   553  0014                     	;# 
   554  0015                     	;# 
   555  0015                     	;# 
   556  0016                     	;# 
   557  0017                     	;# 
   558  0018                     	;# 
   559  0019                     	;# 
   560  001A                     	;# 
   561  001B                     	;# 
   562  001B                     	;# 
   563  001C                     	;# 
   564  001D                     	;# 
   565  001E                     	;# 
   566  001F                     	;# 
   567  0081                     	;# 
   568  0085                     	;# 
   569  0086                     	;# 
   570  0087                     	;# 
   571  0088                     	;# 
   572  0089                     	;# 
   573  008C                     	;# 
   574  008D                     	;# 
   575  008E                     	;# 
   576  0091                     	;# 
   577  0092                     	;# 
   578  0093                     	;# 
   579  0094                     	;# 
   580  0098                     	;# 
   581  0099                     	;# 
   582  009C                     	;# 
   583  009D                     	;# 
   584  009E                     	;# 
   585  009F                     	;# 
   586  010C                     	;# 
   587  010D                     	;# 
   588  010E                     	;# 
   589  010F                     	;# 
   590  018C                     	;# 
   591  018D                     	;# 
   592  0000                     	;# 
   593  0001                     	;# 
   594  0002                     	;# 
   595  0003                     	;# 
   596  0004                     	;# 
   597  0005                     	;# 
   598  0006                     	;# 
   599  0007                     	;# 
   600  0008                     	;# 
   601  0009                     	;# 
   602  000A                     	;# 
   603  000B                     	;# 
   604  000C                     	;# 
   605  000D                     	;# 
   606  000E                     	;# 
   607  000E                     	;# 
   608  000F                     	;# 
   609  0010                     	;# 
   610  0011                     	;# 
   611  0012                     	;# 
   612  0013                     	;# 
   613  0014                     	;# 
   614  0015                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0017                     	;# 
   618  0018                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  001D                     	;# 
   625  001E                     	;# 
   626  001F                     	;# 
   627  0081                     	;# 
   628  0085                     	;# 
   629  0086                     	;# 
   630  0087                     	;# 
   631  0088                     	;# 
   632  0089                     	;# 
   633  008C                     	;# 
   634  008D                     	;# 
   635  008E                     	;# 
   636  0091                     	;# 
   637  0092                     	;# 
   638  0093                     	;# 
   639  0094                     	;# 
   640  0098                     	;# 
   641  0099                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  009F                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  010F                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  0000                     	;# 
   653  0001                     	;# 
   654  0002                     	;# 
   655  0003                     	;# 
   656  0004                     	;# 
   657  0005                     	;# 
   658  0006                     	;# 
   659  0007                     	;# 
   660  0008                     	;# 
   661  0009                     	;# 
   662  000A                     	;# 
   663  000B                     	;# 
   664  000C                     	;# 
   665  000D                     	;# 
   666  000E                     	;# 
   667  000E                     	;# 
   668  000F                     	;# 
   669  0010                     	;# 
   670  0011                     	;# 
   671  0012                     	;# 
   672  0013                     	;# 
   673  0014                     	;# 
   674  0015                     	;# 
   675  0015                     	;# 
   676  0016                     	;# 
   677  0017                     	;# 
   678  0018                     	;# 
   679  0019                     	;# 
   680  001A                     	;# 
   681  001B                     	;# 
   682  001B                     	;# 
   683  001C                     	;# 
   684  001D                     	;# 
   685  001E                     	;# 
   686  001F                     	;# 
   687  0081                     	;# 
   688  0085                     	;# 
   689  0086                     	;# 
   690  0087                     	;# 
   691  0088                     	;# 
   692  0089                     	;# 
   693  008C                     	;# 
   694  008D                     	;# 
   695  008E                     	;# 
   696  0091                     	;# 
   697  0092                     	;# 
   698  0093                     	;# 
   699  0094                     	;# 
   700  0098                     	;# 
   701  0099                     	;# 
   702  009C                     	;# 
   703  009D                     	;# 
   704  009E                     	;# 
   705  009F                     	;# 
   706  010C                     	;# 
   707  010D                     	;# 
   708  010E                     	;# 
   709  010F                     	;# 
   710  018C                     	;# 
   711  018D                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0008                     	;# 
   721  0009                     	;# 
   722  000A                     	;# 
   723  000B                     	;# 
   724  000C                     	;# 
   725  000D                     	;# 
   726  000E                     	;# 
   727  000E                     	;# 
   728  000F                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0013                     	;# 
   733  0014                     	;# 
   734  0015                     	;# 
   735  0015                     	;# 
   736  0016                     	;# 
   737  0017                     	;# 
   738  0018                     	;# 
   739  0019                     	;# 
   740  001A                     	;# 
   741  001B                     	;# 
   742  001B                     	;# 
   743  001C                     	;# 
   744  001D                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  0081                     	;# 
   748  0085                     	;# 
   749  0086                     	;# 
   750  0087                     	;# 
   751  0088                     	;# 
   752  0089                     	;# 
   753  008C                     	;# 
   754  008D                     	;# 
   755  008E                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0094                     	;# 
   760  0098                     	;# 
   761  0099                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  009F                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  010F                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  0000                     	;# 
   773  0001                     	;# 
   774  0002                     	;# 
   775  0003                     	;# 
   776  0004                     	;# 
   777  0005                     	;# 
   778  0006                     	;# 
   779  0007                     	;# 
   780  0008                     	;# 
   781  0009                     	;# 
   782  000A                     	;# 
   783  000B                     	;# 
   784  000C                     	;# 
   785  000D                     	;# 
   786  000E                     	;# 
   787  000E                     	;# 
   788  000F                     	;# 
   789  0010                     	;# 
   790  0011                     	;# 
   791  0012                     	;# 
   792  0013                     	;# 
   793  0014                     	;# 
   794  0015                     	;# 
   795  0015                     	;# 
   796  0016                     	;# 
   797  0017                     	;# 
   798  0018                     	;# 
   799  0019                     	;# 
   800  001A                     	;# 
   801  001B                     	;# 
   802  001B                     	;# 
   803  001C                     	;# 
   804  001D                     	;# 
   805  001E                     	;# 
   806  001F                     	;# 
   807  0081                     	;# 
   808  0085                     	;# 
   809  0086                     	;# 
   810  0087                     	;# 
   811  0088                     	;# 
   812  0089                     	;# 
   813  008C                     	;# 
   814  008D                     	;# 
   815  008E                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0098                     	;# 
   821  0099                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  009F                     	;# 
   826  010C                     	;# 
   827  010D                     	;# 
   828  010E                     	;# 
   829  010F                     	;# 
   830  018C                     	;# 
   831  018D                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  000E                     	;# 
   848  000F                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0013                     	;# 
   853  0014                     	;# 
   854  0015                     	;# 
   855  0015                     	;# 
   856  0016                     	;# 
   857  0017                     	;# 
   858  0018                     	;# 
   859  0019                     	;# 
   860  001A                     	;# 
   861  001B                     	;# 
   862  001B                     	;# 
   863  001C                     	;# 
   864  001D                     	;# 
   865  001E                     	;# 
   866  001F                     	;# 
   867  0081                     	;# 
   868  0085                     	;# 
   869  0086                     	;# 
   870  0087                     	;# 
   871  0088                     	;# 
   872  0089                     	;# 
   873  008C                     	;# 
   874  008D                     	;# 
   875  008E                     	;# 
   876  0091                     	;# 
   877  0092                     	;# 
   878  0093                     	;# 
   879  0094                     	;# 
   880  0098                     	;# 
   881  0099                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  009F                     	;# 
   886  010C                     	;# 
   887  010D                     	;# 
   888  010E                     	;# 
   889  010F                     	;# 
   890  018C                     	;# 
   891  018D                     	;# 
   892  0000                     	;# 
   893  0001                     	;# 
   894  0002                     	;# 
   895  0003                     	;# 
   896  0004                     	;# 
   897  0005                     	;# 
   898  0006                     	;# 
   899  0007                     	;# 
   900  0008                     	;# 
   901  0009                     	;# 
   902  000A                     	;# 
   903  000B                     	;# 
   904  000C                     	;# 
   905  000D                     	;# 
   906  000E                     	;# 
   907  000E                     	;# 
   908  000F                     	;# 
   909  0010                     	;# 
   910  0011                     	;# 
   911  0012                     	;# 
   912  0013                     	;# 
   913  0014                     	;# 
   914  0015                     	;# 
   915  0015                     	;# 
   916  0016                     	;# 
   917  0017                     	;# 
   918  0018                     	;# 
   919  0019                     	;# 
   920  001A                     	;# 
   921  001B                     	;# 
   922  001B                     	;# 
   923  001C                     	;# 
   924  001D                     	;# 
   925  001E                     	;# 
   926  001F                     	;# 
   927  0081                     	;# 
   928  0085                     	;# 
   929  0086                     	;# 
   930  0087                     	;# 
   931  0088                     	;# 
   932  0089                     	;# 
   933  008C                     	;# 
   934  008D                     	;# 
   935  008E                     	;# 
   936  0091                     	;# 
   937  0092                     	;# 
   938  0093                     	;# 
   939  0094                     	;# 
   940  0098                     	;# 
   941  0099                     	;# 
   942  009C                     	;# 
   943  009D                     	;# 
   944  009E                     	;# 
   945  009F                     	;# 
   946  010C                     	;# 
   947  010D                     	;# 
   948  010E                     	;# 
   949  010F                     	;# 
   950  018C                     	;# 
   951  018D                     	;# 
   952                           
   953                           	psect	eeprom_data
   954  0000  0030 0031 0000 0000 0000 0000 0000 0000 	db	48,49,0,0,0,0,0,0	;# 
   955  0000                     	;# 
   956  0001                     	;# 
   957  0002                     	;# 
   958  0003                     	;# 
   959  0004                     	;# 
   960  0005                     	;# 
   961  0006                     	;# 
   962  0007                     	;# 
   963  0008                     	;# 
   964  0009                     	;# 
   965  000A                     	;# 
   966  000B                     	;# 
   967  000C                     	;# 
   968  000D                     	;# 
   969  000E                     	;# 
   970  000E                     	;# 
   971  000F                     	;# 
   972  0010                     	;# 
   973  0011                     	;# 
   974  0012                     	;# 
   975  0013                     	;# 
   976  0014                     	;# 
   977  0015                     	;# 
   978  0015                     	;# 
   979  0016                     	;# 
   980  0017                     	;# 
   981  0018                     	;# 
   982  0019                     	;# 
   983  001A                     	;# 
   984  001B                     	;# 
   985  001B                     	;# 
   986  001C                     	;# 
   987  001D                     	;# 
   988  001E                     	;# 
   989  001F                     	;# 
   990  0081                     	;# 
   991  0085                     	;# 
   992  0086                     	;# 
   993  0087                     	;# 
   994  0088                     	;# 
   995  0089                     	;# 
   996  008C                     	;# 
   997  008D                     	;# 
   998  008E                     	;# 
   999  0091                     	;# 
  1000  0092                     	;# 
  1001  0093                     	;# 
  1002  0094                     	;# 
  1003  0098                     	;# 
  1004  0099                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  009F                     	;# 
  1009  010C                     	;# 
  1010  010D                     	;# 
  1011  010E                     	;# 
  1012  010F                     	;# 
  1013  018C                     	;# 
  1014  018D                     	;# 
  1015  0000                     	;# 
  1016  0001                     	;# 
  1017  0002                     	;# 
  1018  0003                     	;# 
  1019  0004                     	;# 
  1020  0005                     	;# 
  1021  0006                     	;# 
  1022  0007                     	;# 
  1023  0008                     	;# 
  1024  0009                     	;# 
  1025  000A                     	;# 
  1026  000B                     	;# 
  1027  000C                     	;# 
  1028  000D                     	;# 
  1029  000E                     	;# 
  1030  000E                     	;# 
  1031  000F                     	;# 
  1032  0010                     	;# 
  1033  0011                     	;# 
  1034  0012                     	;# 
  1035  0013                     	;# 
  1036  0014                     	;# 
  1037  0015                     	;# 
  1038  0015                     	;# 
  1039  0016                     	;# 
  1040  0017                     	;# 
  1041  0018                     	;# 
  1042  0019                     	;# 
  1043  001A                     	;# 
  1044  001B                     	;# 
  1045  001B                     	;# 
  1046  001C                     	;# 
  1047  001D                     	;# 
  1048  001E                     	;# 
  1049  001F                     	;# 
  1050  0081                     	;# 
  1051  0085                     	;# 
  1052  0086                     	;# 
  1053  0087                     	;# 
  1054  0088                     	;# 
  1055  0089                     	;# 
  1056  008C                     	;# 
  1057  008D                     	;# 
  1058  008E                     	;# 
  1059  0091                     	;# 
  1060  0092                     	;# 
  1061  0093                     	;# 
  1062  0094                     	;# 
  1063  0098                     	;# 
  1064  0099                     	;# 
  1065  009C                     	;# 
  1066  009D                     	;# 
  1067  009E                     	;# 
  1068  009F                     	;# 
  1069  010C                     	;# 
  1070  010D                     	;# 
  1071  010E                     	;# 
  1072  010F                     	;# 
  1073  018C                     	;# 
  1074  018D                     	;# 
  1075  0000                     	;# 
  1076  0001                     	;# 
  1077  0002                     	;# 
  1078  0003                     	;# 
  1079  0004                     	;# 
  1080  0005                     	;# 
  1081  0006                     	;# 
  1082  0007                     	;# 
  1083  0008                     	;# 
  1084  0009                     	;# 
  1085  000A                     	;# 
  1086  000B                     	;# 
  1087  000C                     	;# 
  1088  000D                     	;# 
  1089  000E                     	;# 
  1090  000E                     	;# 
  1091  000F                     	;# 
  1092  0010                     	;# 
  1093  0011                     	;# 
  1094  0012                     	;# 
  1095  0013                     	;# 
  1096  0014                     	;# 
  1097  0015                     	;# 
  1098  0015                     	;# 
  1099  0016                     	;# 
  1100  0017                     	;# 
  1101  0018                     	;# 
  1102  0019                     	;# 
  1103  001A                     	;# 
  1104  001B                     	;# 
  1105  001B                     	;# 
  1106  001C                     	;# 
  1107  001D                     	;# 
  1108  001E                     	;# 
  1109  001F                     	;# 
  1110  0081                     	;# 
  1111  0085                     	;# 
  1112  0086                     	;# 
  1113  0087                     	;# 
  1114  0088                     	;# 
  1115  0089                     	;# 
  1116  008C                     	;# 
  1117  008D                     	;# 
  1118  008E                     	;# 
  1119  0091                     	;# 
  1120  0092                     	;# 
  1121  0093                     	;# 
  1122  0094                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009C                     	;# 
  1126  009D                     	;# 
  1127  009E                     	;# 
  1128  009F                     	;# 
  1129  010C                     	;# 
  1130  010D                     	;# 
  1131  010E                     	;# 
  1132  010F                     	;# 
  1133  018C                     	;# 
  1134  018D                     	;# 
  1135  0000                     	;# 
  1136  0001                     	;# 
  1137  0002                     	;# 
  1138  0003                     	;# 
  1139  0004                     	;# 
  1140  0005                     	;# 
  1141  0006                     	;# 
  1142  0007                     	;# 
  1143  0008                     	;# 
  1144  0009                     	;# 
  1145  000A                     	;# 
  1146  000B                     	;# 
  1147  000C                     	;# 
  1148  000D                     	;# 
  1149  000E                     	;# 
  1150  000E                     	;# 
  1151  000F                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0013                     	;# 
  1156  0014                     	;# 
  1157  0015                     	;# 
  1158  0015                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  0019                     	;# 
  1163  001A                     	;# 
  1164  001B                     	;# 
  1165  001B                     	;# 
  1166  001C                     	;# 
  1167  001D                     	;# 
  1168  001E                     	;# 
  1169  001F                     	;# 
  1170  0081                     	;# 
  1171  0085                     	;# 
  1172  0086                     	;# 
  1173  0087                     	;# 
  1174  0088                     	;# 
  1175  0089                     	;# 
  1176  008C                     	;# 
  1177  008D                     	;# 
  1178  008E                     	;# 
  1179  0091                     	;# 
  1180  0092                     	;# 
  1181  0093                     	;# 
  1182  0094                     	;# 
  1183  0098                     	;# 
  1184  0099                     	;# 
  1185  009C                     	;# 
  1186  009D                     	;# 
  1187  009E                     	;# 
  1188  009F                     	;# 
  1189  010C                     	;# 
  1190  010D                     	;# 
  1191  010E                     	;# 
  1192  010F                     	;# 
  1193  018C                     	;# 
  1194  018D                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0008                     	;# 
  1204  0009                     	;# 
  1205  000A                     	;# 
  1206  000B                     	;# 
  1207  000C                     	;# 
  1208  000D                     	;# 
  1209  000E                     	;# 
  1210  000E                     	;# 
  1211  000F                     	;# 
  1212  0010                     	;# 
  1213  0011                     	;# 
  1214  0012                     	;# 
  1215  0013                     	;# 
  1216  0014                     	;# 
  1217  0015                     	;# 
  1218  0015                     	;# 
  1219  0016                     	;# 
  1220  0017                     	;# 
  1221  0018                     	;# 
  1222  0019                     	;# 
  1223  001A                     	;# 
  1224  001B                     	;# 
  1225  001B                     	;# 
  1226  001C                     	;# 
  1227  001D                     	;# 
  1228  001E                     	;# 
  1229  001F                     	;# 
  1230  0081                     	;# 
  1231  0085                     	;# 
  1232  0086                     	;# 
  1233  0087                     	;# 
  1234  0088                     	;# 
  1235  0089                     	;# 
  1236  008C                     	;# 
  1237  008D                     	;# 
  1238  008E                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0094                     	;# 
  1243  0098                     	;# 
  1244  0099                     	;# 
  1245  009C                     	;# 
  1246  009D                     	;# 
  1247  009E                     	;# 
  1248  009F                     	;# 
  1249  010C                     	;# 
  1250  010D                     	;# 
  1251  010E                     	;# 
  1252  010F                     	;# 
  1253  018C                     	;# 
  1254  018D                     	;# 
  1255  0000                     	;# 
  1256  0001                     	;# 
  1257  0002                     	;# 
  1258  0003                     	;# 
  1259  0004                     	;# 
  1260  0005                     	;# 
  1261  0006                     	;# 
  1262  0007                     	;# 
  1263  0008                     	;# 
  1264  0009                     	;# 
  1265  000A                     	;# 
  1266  000B                     	;# 
  1267  000C                     	;# 
  1268  000D                     	;# 
  1269  000E                     	;# 
  1270  000E                     	;# 
  1271  000F                     	;# 
  1272  0010                     	;# 
  1273  0011                     	;# 
  1274  0012                     	;# 
  1275  0013                     	;# 
  1276  0014                     	;# 
  1277  0015                     	;# 
  1278  0015                     	;# 
  1279  0016                     	;# 
  1280  0017                     	;# 
  1281  0018                     	;# 
  1282  0019                     	;# 
  1283  001A                     	;# 
  1284  001B                     	;# 
  1285  001B                     	;# 
  1286  001C                     	;# 
  1287  001D                     	;# 
  1288  001E                     	;# 
  1289  001F                     	;# 
  1290  0081                     	;# 
  1291  0085                     	;# 
  1292  0086                     	;# 
  1293  0087                     	;# 
  1294  0088                     	;# 
  1295  0089                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0093                     	;# 
  1302  0094                     	;# 
  1303  0098                     	;# 
  1304  0099                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  009F                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  010F                     	;# 
  1313  018C                     	;# 
  1314  018D                     	;# 
  1315                           
  1316                           	psect	idataBANK3
  1317  0CE5                     __pidataBANK3:	
  1318                           
  1319                           ;initializer for _PumpStateMappings
  1320  0CE5  34DC               	retlw	low (STR_1| (0+32768))
  1321  0CE6  3481               	retlw	high (STR_1| (0+32768))
  1322  0CE7  34AE               	retlw	low (STR_2| (0+32768))
  1323  0CE8  3481               	retlw	high (STR_2| (0+32768))
  1324  0CE9  343C               	retlw	low (STR_3| (0+32768))
  1325  0CEA  3481               	retlw	high (STR_3| (0+32768))
  1326  0CEB  3454               	retlw	low (STR_4| (0+32768))
  1327  0CEC  3481               	retlw	high (STR_4| (0+32768))
  1328  0CED  3400               	retlw	low (STR_5| (0+32768))
  1329  0CEE  3481               	retlw	high (STR_5| (0+32768))
  1330  0CEF  348D               	retlw	low (STR_6| (0+32768))
  1331  0CF0  3481               	retlw	high (STR_6| (0+32768))
  1332  0CF1  34CD               	retlw	low (STR_7| (0+32768))
  1333  0CF2  3481               	retlw	high (STR_7| (0+32768))
  1334                           
  1335                           ;initializer for main@F1063
  1336  0CF3  3430               	retlw	48
  1337  0CF4  3430               	retlw	48
  1338  0CF5  3430               	retlw	48
  1339  0CF6  3430               	retlw	48
  1340  0CF7  3430               	retlw	48
  1341  0CF8  3430               	retlw	48
  1342  0CF9  3430               	retlw	48
  1343  0CFA  3430               	retlw	48
  1344  0CFB  3430               	retlw	48
  1345  0CFC  3400               	retlw	0
  1346                           
  1347                           	psect	nvBANK0
  1348  005F                     __pnvBANK0:	
  1349  005F                     _combinedZones:	
  1350  005F                     	ds	1
  1351  001A                     _RCREG	set	26
  1352  0019                     _TXREG	set	25
  1353  0018                     _RCSTA	set	24
  1354  0009                     _PORTEbits	set	9
  1355  0005                     _PORTA	set	5
  1356  0008                     _PORTD	set	8
  1357  0006                     _PORTB	set	6
  1358  0007                     _PORTCbits	set	7
  1359  0005                     _PORTAbits	set	5
  1360  005A                     _TMR0IF	set	90
  1361  005D                     _TMR0IE	set	93
  1362  0064                     _TXIF	set	100
  1363  00C2                     _FERR	set	194
  1364  00C1                     _OERR	set	193
  1365  0065                     _RCIF	set	101
  1366  005E                     _PEIE	set	94
  1367  00C4                     _CREN	set	196
  1368  00C7                     _SPEN	set	199
  1369  005F                     _GIE	set	95
  1370  0099                     _SPBRG	set	153
  1371  0098                     _TXSTA	set	152
  1372  0087                     _TRISCbits	set	135
  1373  0089                     _TRISEbits	set	137
  1374  0085                     _TRISAbits	set	133
  1375  0088                     _TRISD	set	136
  1376  0086                     _TRISB	set	134
  1377  0085                     _TRISA	set	133
  1378  009F                     _ADCON1	set	159
  1379  04C5                     _TXEN	set	1221
  1380  04C1                     _TRMT	set	1217
  1381  0465                     _RCIE	set	1125
  1382  0464                     _TXIE	set	1124
  1383  04C6                     _TX9	set	1222
  1384  04C4                     _SYNC	set	1220
  1385  043F                     _TRISC7	set	1087
  1386  043E                     _TRISC6	set	1086
  1387  04FB                     _PCFG3	set	1275
  1388  040D                     _T0CS	set	1037
  1389                           
  1390                           	psect	strings
  1391  0800                     __pstrings:	
  1392  0800                     stringtab:	
  1393  0800                     __stringtab:	
  1394                           
  1395                           ;	String table - string pointers are 2 bytes each
  1396  0800  1BFF               	btfsc	btemp+1,7
  1397  0801  280A               	ljmp	stringcode
  1398  0802  1383               	bcf	3,7
  1399  0803  187F               	btfsc	btemp+1,0
  1400  0804  1783               	bsf	3,7
  1401  0805  0800               	movf	0,w
  1402  0806  0A84               	incf	4,f
  1403  0807  1903               	skipnz
  1404  0808  0AFF               	incf	btemp+1,f
  1405  0809  0008               	return
  1406  080A                     stringcode:	
  1407  080A  087F               	movf	btemp+1,w
  1408  080B  397F               	andlw	127
  1409  080C  008A               	movwf	10
  1410  080D  0804               	movf	4,w
  1411  080E  0A84               	incf	4,f
  1412  080F  1903               	skipnz
  1413  0810  0AFF               	incf	btemp+1,f
  1414  0811  0082               	movwf	2
  1415  0812                     __stringbase:	
  1416  0812                     __end_of__stringtab:	
  1417                           
  1418                           	psect	stringtext
  1419  0100                     __pstringtext:	
  1420  0100                     STR_5:	
  1421  0100  3473               	retlw	115	;'s'
  1422  0101  3474               	retlw	116	;'t'
  1423  0102  3461               	retlw	97	;'a'
  1424  0103  3472               	retlw	114	;'r'
  1425  0104  3474               	retlw	116	;'t'
  1426  0105  3470               	retlw	112	;'p'
  1427  0106  3475               	retlw	117	;'u'
  1428  0107  346D               	retlw	109	;'m'
  1429  0108  3470               	retlw	112	;'p'
  1430  0109  3453               	retlw	83	;'S'
  1431  010A  3465               	retlw	101	;'e'
  1432  010B  3463               	retlw	99	;'c'
  1433  010C  346F               	retlw	111	;'o'
  1434  010D  346E               	retlw	110	;'n'
  1435  010E  3464               	retlw	100	;'d'
  1436  010F  344C               	retlw	76	;'L'
  1437  0110  3457               	retlw	87	;'W'
  1438  0111  3450               	retlw	80	;'P'
  1439  0112  3443               	retlw	67	;'C'
  1440  0113  3468               	retlw	104	;'h'
  1441  0114  3465               	retlw	101	;'e'
  1442  0115  3463               	retlw	99	;'c'
  1443  0116  346B               	retlw	107	;'k'
  1444  0117  3453               	retlw	83	;'S'
  1445  0118  3474               	retlw	116	;'t'
  1446  0119  3461               	retlw	97	;'a'
  1447  011A  3474               	retlw	116	;'t'
  1448  011B  3465               	retlw	101	;'e'
  1449  011C  340A               	retlw	10
  1450  011D  340D               	retlw	13
  1451  011E  3400               	retlw	0
  1452  011F                     STR_19:	
  1453  011F  3461               	retlw	97	;'a'
  1454  0120  3462               	retlw	98	;'b'
  1455  0121  3463               	retlw	99	;'c'
  1456  0122  3464               	retlw	100	;'d'
  1457  0123  3465               	retlw	101	;'e'
  1458  0124  3466               	retlw	102	;'f'
  1459  0125  3467               	retlw	103	;'g'
  1460  0126  3468               	retlw	104	;'h'
  1461  0127  3469               	retlw	105	;'i'
  1462  0128  346A               	retlw	106	;'j'
  1463  0129  346B               	retlw	107	;'k'
  1464  012A  346C               	retlw	108	;'l'
  1465  012B  346D               	retlw	109	;'m'
  1466  012C  346E               	retlw	110	;'n'
  1467  012D  346F               	retlw	111	;'o'
  1468  012E  3470               	retlw	112	;'p'
  1469  012F  3471               	retlw	113	;'q'
  1470  0130  3472               	retlw	114	;'r'
  1471  0131  3473               	retlw	115	;'s'
  1472  0132  3474               	retlw	116	;'t'
  1473  0133  3475               	retlw	117	;'u'
  1474  0134  3476               	retlw	118	;'v'
  1475  0135  3477               	retlw	119	;'w'
  1476  0136  3478               	retlw	120	;'x'
  1477  0137  3479               	retlw	121	;'y'
  1478  0138  347A               	retlw	122	;'z'
  1479  0139  340A               	retlw	10
  1480  013A  340D               	retlw	13
  1481  013B  3400               	retlw	0
  1482  013C                     STR_3:	
  1483  013C  3473               	retlw	115	;'s'
  1484  013D  3474               	retlw	116	;'t'
  1485  013E  3461               	retlw	97	;'a'
  1486  013F  3472               	retlw	114	;'r'
  1487  0140  3474               	retlw	116	;'t'
  1488  0141  3470               	retlw	112	;'p'
  1489  0142  3475               	retlw	117	;'u'
  1490  0143  346D               	retlw	109	;'m'
  1491  0144  3470               	retlw	112	;'p'
  1492  0145  3449               	retlw	73	;'I'
  1493  0146  346E               	retlw	110	;'n'
  1494  0147  3469               	retlw	105	;'i'
  1495  0148  3474               	retlw	116	;'t'
  1496  0149  3469               	retlw	105	;'i'
  1497  014A  3461               	retlw	97	;'a'
  1498  014B  346C               	retlw	108	;'l'
  1499  014C  3453               	retlw	83	;'S'
  1500  014D  3474               	retlw	116	;'t'
  1501  014E  3461               	retlw	97	;'a'
  1502  014F  3474               	retlw	116	;'t'
  1503  0150  3465               	retlw	101	;'e'
  1504  0151  340A               	retlw	10
  1505  0152  340D               	retlw	13
  1506  0153  3400               	retlw	0
  1507  0154                     STR_4:	
  1508  0154  3473               	retlw	115	;'s'
  1509  0155  3474               	retlw	116	;'t'
  1510  0156  3461               	retlw	97	;'a'
  1511  0157  3472               	retlw	114	;'r'
  1512  0158  3474               	retlw	116	;'t'
  1513  0159  3470               	retlw	112	;'p'
  1514  015A  3475               	retlw	117	;'u'
  1515  015B  346D               	retlw	109	;'m'
  1516  015C  3470               	retlw	112	;'p'
  1517  015D  3457               	retlw	87	;'W'
  1518  015E  3461               	retlw	97	;'a'
  1519  015F  3469               	retlw	105	;'i'
  1520  0160  3474               	retlw	116	;'t'
  1521  0161  3453               	retlw	83	;'S'
  1522  0162  3474               	retlw	116	;'t'
  1523  0163  3461               	retlw	97	;'a'
  1524  0164  3474               	retlw	116	;'t'
  1525  0165  3465               	retlw	101	;'e'
  1526  0166  340A               	retlw	10
  1527  0167  340D               	retlw	13
  1528  0168  3400               	retlw	0
  1529  0169                     STR_16:	
  1530  0169  3470               	retlw	112	;'p'
  1531  016A  3475               	retlw	117	;'u'
  1532  016B  346D               	retlw	109	;'m'
  1533  016C  3470               	retlw	112	;'p'
  1534  016D  344F               	retlw	79	;'O'
  1535  016E  3476               	retlw	118	;'v'
  1536  016F  3465               	retlw	101	;'e'
  1537  0170  3472               	retlw	114	;'r'
  1538  0171  346C               	retlw	108	;'l'
  1539  0172  346F               	retlw	111	;'o'
  1540  0173  3461               	retlw	97	;'a'
  1541  0174  3464               	retlw	100	;'d'
  1542  0175  3442               	retlw	66	;'B'
  1543  0176  3469               	retlw	105	;'i'
  1544  0177  3474               	retlw	116	;'t'
  1545  0178  340A               	retlw	10
  1546  0179  340D               	retlw	13
  1547  017A  3400               	retlw	0
  1548  017B                     STR_17:	
  1549  017B  3464               	retlw	100	;'d'
  1550  017C  3475               	retlw	117	;'u'
  1551  017D  346D               	retlw	109	;'m'
  1552  017E  3470               	retlw	112	;'p'
  1553  017F  3453               	retlw	83	;'S'
  1554  0180  346F               	retlw	111	;'o'
  1555  0181  346C               	retlw	108	;'l'
  1556  0182  3465               	retlw	101	;'e'
  1557  0183  346E               	retlw	110	;'n'
  1558  0184  346F               	retlw	111	;'o'
  1559  0185  3469               	retlw	105	;'i'
  1560  0186  3464               	retlw	100	;'d'
  1561  0187  3442               	retlw	66	;'B'
  1562  0188  3469               	retlw	105	;'i'
  1563  0189  3474               	retlw	116	;'t'
  1564  018A  340A               	retlw	10
  1565  018B  340D               	retlw	13
  1566  018C  3400               	retlw	0
  1567  018D                     STR_6:	
  1568  018D  3473               	retlw	115	;'s'
  1569  018E  3474               	retlw	116	;'t'
  1570  018F  3461               	retlw	97	;'a'
  1571  0190  3472               	retlw	114	;'r'
  1572  0191  3474               	retlw	116	;'t'
  1573  0192  346D               	retlw	109	;'m'
  1574  0193  3461               	retlw	97	;'a'
  1575  0194  3469               	retlw	105	;'i'
  1576  0195  346E               	retlw	110	;'n'
  1577  0196  3453               	retlw	83	;'S'
  1578  0197  3474               	retlw	116	;'t'
  1579  0198  3461               	retlw	97	;'a'
  1580  0199  3474               	retlw	116	;'t'
  1581  019A  3465               	retlw	101	;'e'
  1582  019B  340A               	retlw	10
  1583  019C  340D               	retlw	13
  1584  019D  3400               	retlw	0
  1585  019E                     STR_20:	
  1586  019E  3473               	retlw	115	;'s'
  1587  019F  3465               	retlw	101	;'e'
  1588  01A0  3472               	retlw	114	;'r'
  1589  01A1  3469               	retlw	105	;'i'
  1590  01A2  3461               	retlw	97	;'a'
  1591  01A3  346C               	retlw	108	;'l'
  1592  01A4  3420               	retlw	32	;' '
  1593  01A5  346F               	retlw	111	;'o'
  1594  01A6  3476               	retlw	118	;'v'
  1595  01A7  3465               	retlw	101	;'e'
  1596  01A8  3472               	retlw	114	;'r'
  1597  01A9  3466               	retlw	102	;'f'
  1598  01AA  346C               	retlw	108	;'l'
  1599  01AB  346F               	retlw	111	;'o'
  1600  01AC  3477               	retlw	119	;'w'
  1601  01AD  3400               	retlw	0
  1602  01AE                     STR_2:	
  1603  01AE  3473               	retlw	115	;'s'
  1604  01AF  3468               	retlw	104	;'h'
  1605  01B0  3475               	retlw	117	;'u'
  1606  01B1  3474               	retlw	116	;'t'
  1607  01B2  3464               	retlw	100	;'d'
  1608  01B3  346F               	retlw	111	;'o'
  1609  01B4  3477               	retlw	119	;'w'
  1610  01B5  346E               	retlw	110	;'n'
  1611  01B6  3453               	retlw	83	;'S'
  1612  01B7  3474               	retlw	116	;'t'
  1613  01B8  3461               	retlw	97	;'a'
  1614  01B9  3474               	retlw	116	;'t'
  1615  01BA  3465               	retlw	101	;'e'
  1616  01BB  340A               	retlw	10
  1617  01BC  340D               	retlw	13
  1618  01BD  3400               	retlw	0
  1619  01BE                     STR_18:	
  1620  01BE  3477               	retlw	119	;'w'
  1621  01BF  3461               	retlw	97	;'a'
  1622  01C0  3469               	retlw	105	;'i'
  1623  01C1  3474               	retlw	116	;'t'
  1624  01C2  3469               	retlw	105	;'i'
  1625  01C3  346E               	retlw	110	;'n'
  1626  01C4  3467               	retlw	103	;'g'
  1627  01C5  3478               	retlw	120	;'x'
  1628  01C6  3478               	retlw	120	;'x'
  1629  01C7  3478               	retlw	120	;'x'
  1630  01C8  3478               	retlw	120	;'x'
  1631  01C9  3420               	retlw	32	;' '
  1632  01CA  340A               	retlw	10
  1633  01CB  340D               	retlw	13
  1634  01CC  3400               	retlw	0
  1635  01CD                     STR_7:	
  1636  01CD  3470               	retlw	112	;'p'
  1637  01CE  3475               	retlw	117	;'u'
  1638  01CF  346D               	retlw	109	;'m'
  1639  01D0  3470               	retlw	112	;'p'
  1640  01D1  3472               	retlw	114	;'r'
  1641  01D2  3475               	retlw	117	;'u'
  1642  01D3  346E               	retlw	110	;'n'
  1643  01D4  3453               	retlw	83	;'S'
  1644  01D5  3474               	retlw	116	;'t'
  1645  01D6  3461               	retlw	97	;'a'
  1646  01D7  3474               	retlw	116	;'t'
  1647  01D8  3465               	retlw	101	;'e'
  1648  01D9  340A               	retlw	10
  1649  01DA  340D               	retlw	13
  1650  01DB  3400               	retlw	0
  1651  01DC                     STR_1:	
  1652  01DC  3473               	retlw	115	;'s'
  1653  01DD  3474               	retlw	116	;'t'
  1654  01DE  3461               	retlw	97	;'a'
  1655  01DF  346E               	retlw	110	;'n'
  1656  01E0  3464               	retlw	100	;'d'
  1657  01E1  3462               	retlw	98	;'b'
  1658  01E2  3479               	retlw	121	;'y'
  1659  01E3  3453               	retlw	83	;'S'
  1660  01E4  3474               	retlw	116	;'t'
  1661  01E5  3461               	retlw	97	;'a'
  1662  01E6  3474               	retlw	116	;'t'
  1663  01E7  3465               	retlw	101	;'e'
  1664  01E8  340A               	retlw	10
  1665  01E9  340D               	retlw	13
  1666  01EA  3400               	retlw	0
  1667  01EB                     STR_8:	
  1668  01EB  3462               	retlw	98	;'b'
  1669  01EC  346F               	retlw	111	;'o'
  1670  01ED  346F               	retlw	111	;'o'
  1671  01EE  3473               	retlw	115	;'s'
  1672  01EF  3474               	retlw	116	;'t'
  1673  01F0  3450               	retlw	80	;'P'
  1674  01F1  3475               	retlw	117	;'u'
  1675  01F2  346D               	retlw	109	;'m'
  1676  01F3  3470               	retlw	112	;'p'
  1677  01F4  3442               	retlw	66	;'B'
  1678  01F5  3469               	retlw	105	;'i'
  1679  01F6  3474               	retlw	116	;'t'
  1680  01F7  340A               	retlw	10
  1681  01F8  340D               	retlw	13
  1682  01F9  3400               	retlw	0
  1683  01FA                     STR_14:	
  1684  01FA  346D               	retlw	109	;'m'
  1685  01FB  3461               	retlw	97	;'a'
  1686  01FC  3469               	retlw	105	;'i'
  1687  01FD  346E               	retlw	110	;'n'
  1688  01FE  3450               	retlw	80	;'P'
  1689  01FF  3475               	retlw	117	;'u'
  1690  0200  346D               	retlw	109	;'m'
  1691  0201  3470               	retlw	112	;'p'
  1692  0202  3442               	retlw	66	;'B'
  1693  0203  3469               	retlw	105	;'i'
  1694  0204  3474               	retlw	116	;'t'
  1695  0205  340A               	retlw	10
  1696  0206  340D               	retlw	13
  1697  0207  3400               	retlw	0
  1698  0208                     STR_9:	
  1699  0208  346C               	retlw	108	;'l'
  1700  0209  3477               	retlw	119	;'w'
  1701  020A  346C               	retlw	108	;'l'
  1702  020B  345F               	retlw	95	;'_'
  1703  020C  3466               	retlw	102	;'f'
  1704  020D  3461               	retlw	97	;'a'
  1705  020E  3475               	retlw	117	;'u'
  1706  020F  346C               	retlw	108	;'l'
  1707  0210  3474               	retlw	116	;'t'
  1708  0211  340A               	retlw	10
  1709  0212  340D               	retlw	13
  1710  0213  3400               	retlw	0
  1711  0214                     STR_11:	
  1712  0214  346C               	retlw	108	;'l'
  1713  0215  3466               	retlw	102	;'f'
  1714  0216  3470               	retlw	112	;'p'
  1715  0217  345F               	retlw	95	;'_'
  1716  0218  3466               	retlw	102	;'f'
  1717  0219  3461               	retlw	97	;'a'
  1718  021A  3475               	retlw	117	;'u'
  1719  021B  346C               	retlw	108	;'l'
  1720  021C  3474               	retlw	116	;'t'
  1721  021D  340A               	retlw	10
  1722  021E  340D               	retlw	13
  1723  021F  3400               	retlw	0
  1724  0220                     STR_10:	
  1725  0220  346C               	retlw	108	;'l'
  1726  0221  3477               	retlw	119	;'w'
  1727  0222  3470               	retlw	112	;'p'
  1728  0223  345F               	retlw	95	;'_'
  1729  0224  3466               	retlw	102	;'f'
  1730  0225  3461               	retlw	97	;'a'
  1731  0226  3475               	retlw	117	;'u'
  1732  0227  346C               	retlw	108	;'l'
  1733  0228  3474               	retlw	116	;'t'
  1734  0229  340A               	retlw	10
  1735  022A  340D               	retlw	13
  1736  022B  3400               	retlw	0
  1737  022C                     STR_12:	
  1738  022C  3470               	retlw	112	;'p'
  1739  022D  346F               	retlw	111	;'o'
  1740  022E  345F               	retlw	95	;'_'
  1741  022F  3466               	retlw	102	;'f'
  1742  0230  3461               	retlw	97	;'a'
  1743  0231  3475               	retlw	117	;'u'
  1744  0232  346C               	retlw	108	;'l'
  1745  0233  3474               	retlw	116	;'t'
  1746  0234  340A               	retlw	10
  1747  0235  340D               	retlw	13
  1748  0236  3400               	retlw	0
  1749  0237                     STR_13:	
  1750  0237  3477               	retlw	119	;'w'
  1751  0238  3470               	retlw	112	;'p'
  1752  0239  344F               	retlw	79	;'O'
  1753  023A  346B               	retlw	107	;'k'
  1754  023B  3442               	retlw	66	;'B'
  1755  023C  3469               	retlw	105	;'i'
  1756  023D  3474               	retlw	116	;'t'
  1757  023E  340A               	retlw	10
  1758  023F  340D               	retlw	13
  1759  0240  3400               	retlw	0
  1760  01EB                     
  1761                           ; #config settings
  1762  0000                     
  1763                           	psect	cinit
  1764  0015                     start_initialization:	
  1765  0015                     __initialization:	
  1766                           
  1767                           ; Initialize objects allocated to BANK3
  1768  0015  1783               	bsf	3,7	;select IRP bank2
  1769  0016  30F0               	movlw	low (__pdataBANK3+24)
  1770  0017  00FD               	movwf	btemp+-1
  1771  0018  300C               	movlw	high __pidataBANK3
  1772  0019  00FE               	movwf	btemp
  1773  001A  30E5               	movlw	low __pidataBANK3
  1774  001B  00FF               	movwf	btemp+1
  1775  001C  30D8               	movlw	low __pdataBANK3
  1776  001D  0084               	movwf	4
  1777  001E  120A  158A  245B  120A  118A  	fcall	init_ram0
  1778                           
  1779                           ; Clear objects allocated to BANK3
  1780  0023  3090               	movlw	low __pbssBANK3
  1781  0024  0084               	movwf	4
  1782  0025  30D8               	movlw	low (__pbssBANK3+72)
  1783  0026  120A  158A  23D0  120A  118A  	fcall	clear_ram0
  1784                           
  1785                           ; Clear objects allocated to BANK1
  1786  002B  1383               	bcf	3,7	;select IRP bank0
  1787  002C  30A0               	movlw	low __pbssBANK1
  1788  002D  0084               	movwf	4
  1789  002E  30E9               	movlw	low (__pbssBANK1+73)
  1790  002F  120A  158A  23D0  120A  118A  	fcall	clear_ram0
  1791                           
  1792                           ; Clear objects allocated to BANK0
  1793  0034  304D               	movlw	low __pbssBANK0
  1794  0035  0084               	movwf	4
  1795  0036  305F               	movlw	low (__pbssBANK0+18)
  1796  0037  120A  158A  23D0   	fcall	clear_ram0
  1797  003A                     end_of_initialization:	
  1798                           ;End of C runtime variable initialization code
  1799                           
  1800  003A                     __end_of__initialization:	
  1801  003A  0183               	clrf	3
  1802  003B  120A  118A  2A41   	ljmp	_main	;jump to C main() function
  1803                           
  1804                           	psect	bssBANK0
  1805  004D                     __pbssBANK0:	
  1806  004D                     receiveMessage@len:	
  1807  004D                     	ds	2
  1808  004F                     _fault_flags:	
  1809  004F                     	ds	2
  1810  0051                     _timer_count:	
  1811  0051                     	ds	1
  1812  0052                     _commsZones:	
  1813  0052                     	ds	1
  1814  0053                     _inIdleDumpHour:	
  1815  0053                     	ds	1
  1816  0054                     _state:	
  1817  0054                     	ds	1
  1818  0055                     _outputMessage:	
  1819  0055                     	ds	10
  1820                           
  1821                           	psect	bssBANK1
  1822  00A0                     __pbssBANK1:	
  1823  00A0                     _timer_events:	
  1824  00A0                     	ds	63
  1825  00DF                     receiveMessage@message:	
  1826  00DF                     	ds	10
  1827                           
  1828                           	psect	bssBANK3
  1829  0190                     __pbssBANK3:	
  1830  0190                     _inbound:	
  1831  0190                     	ds	36
  1832  01B4                     _outbound:	
  1833  01B4                     	ds	36
  1834                           
  1835                           	psect	dataBANK3
  1836  01D8                     __pdataBANK3:	
  1837  01D8                     _PumpStateMappings:	
  1838  01D8                     	ds	14
  1839  01E6                     main@F1063:	
  1840  01E6                     	ds	10
  1841                           
  1842                           	psect	inittext
  1843  0C57                     init_fetch0:	
  1844                           ;	Called with low address in FSR and high address in W
  1845                           
  1846  0C57  087E               	movf	126,w
  1847  0C58  008A               	movwf	10
  1848  0C59  087F               	movf	127,w
  1849  0C5A  0082               	movwf	2
  1850  0C5B                     init_ram0:	
  1851                           ;Called with:
  1852                           ;	high address of idata address in btemp 
  1853                           ;	low address of idata address in btemp+1 
  1854                           ;	low address of data in FSR
  1855                           ;	high address + 1 of data in btemp-1
  1856                           
  1857  0C5B  2457  120A  158A   	fcall	init_fetch0
  1858  0C5E  0080               	movwf	0
  1859  0C5F  0A84               	incf	4,f
  1860  0C60  0804               	movf	4,w
  1861  0C61  067D               	xorwf	125,w
  1862  0C62  1903               	btfsc	3,2
  1863  0C63  3400               	retlw	0
  1864  0C64  0AFF               	incf	127,f
  1865  0C65  1903               	btfsc	3,2
  1866  0C66  0AFE               	incf	126,f
  1867  0C67  2C5B               	goto	init_ram0
  1868                           
  1869                           	psect	clrtext
  1870  0BD0                     clear_ram0:	
  1871                           ;	Called with FSR containing the base address, and
  1872                           ;	W with the last address+1
  1873                           
  1874  0BD0  0064               	clrwdt	;clear the watchdog before getting into this loop
  1875  0BD1                     clrloop0:	
  1876  0BD1  0180               	clrf	0	;clear RAM location pointed to by FSR
  1877  0BD2  0A84               	incf	4,f	;increment pointer
  1878  0BD3  0604               	xorwf	4,w	;XOR with final address
  1879  0BD4  1903               	btfsc	3,2	;have we reached the end yet?
  1880  0BD5  3400               	retlw	0	;all done for this memory range, return
  1881  0BD6  0604               	xorwf	4,w	;XOR again to restore value
  1882  0BD7  2BD1               	goto	clrloop0	;do the next byte
  1883                           
  1884                           	psect	cstackCOMMON
  1885  0070                     __pcstackCOMMON:	
  1886  0070                     ?_clear_callback_for_shutdown:	
  1887  0070                     ?_clear_callback:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0070                     ?_ser_int:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0070                     ?_init_event_timer:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0070                     ?_process_event_timer:	
  1897                           ; 1 bytes @ 0x0
  1898                           
  1899  0070                     ?_receiveMessage:	
  1900                           ; 1 bytes @ 0x0
  1901                           
  1902  0070                     ?_process_message:	
  1903                           ; 1 bytes @ 0x0
  1904                           
  1905  0070                     ?_serial_process_loop:	
  1906                           ; 1 bytes @ 0x0
  1907                           
  1908  0070                     ?_process_get_status_message:	
  1909                           ; 1 bytes @ 0x0
  1910                           
  1911  0070                     ?_standby:	
  1912                           ; 1 bytes @ 0x0
  1913                           
  1914  0070                     ?_shutdown:	
  1915                           ; 1 bytes @ 0x0
  1916                           
  1917  0070                     ?_start_pump:	
  1918                           ; 1 bytes @ 0x0
  1919                           
  1920  0070                     ?_start_main:	
  1921                           ; 1 bytes @ 0x0
  1922                           
  1923  0070                     ?_pump_run:	
  1924                           ; 1 bytes @ 0x0
  1925                           
  1926  0070                     ?_monitor_pump_run:	
  1927                           ; 1 bytes @ 0x0
  1928                           
  1929  0070                     ?_EventDumpSolenoidCallBack:	
  1930                           ; 1 bytes @ 0x0
  1931                           
  1932  0070                     ?_EventFaultStateLEDCallBack:	
  1933                           ; 1 bytes @ 0x0
  1934                           
  1935  0070                     ?_EventIdleTimeoutCallBack:	
  1936                           ; 1 bytes @ 0x0
  1937                           
  1938  0070                     ?_EventLowFogPressureCallBack:	
  1939                           ; 1 bytes @ 0x0
  1940                           
  1941  0070                     ?_EventLowWaterLevelCallBack:	
  1942                           ; 1 bytes @ 0x0
  1943                           
  1944  0070                     ?_EventLowWaterPressureCallBack:	
  1945                           ; 1 bytes @ 0x0
  1946                           
  1947  0070                     ?_EventLowWaterPressureDebounceCallBack:	
  1948                           ; 1 bytes @ 0x0
  1949                           
  1950  0070                     ?_EventPODebounceCallBack:	
  1951                           ; 1 bytes @ 0x0
  1952                           
  1953  0070                     ?_EventRunSignalDebounceCallBack:	
  1954                           ; 1 bytes @ 0x0
  1955                           
  1956  0070                     ?_monitor_water_pressure:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0070                     ?_combineZones:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0070                     ?_printPumpState:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0070                     ?_printFaultState:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0070                     ?_init:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0070                     ?_resetPump:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0070                     ?_checkIfShoudReset:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0070                     ?_main:	
  1978                           ; 1 bytes @ 0x0
  1979                           
  1980  0070                     ?_usart_interrupt:	
  1981                           ; 1 bytes @ 0x0
  1982                           
  1983  0070                     ?_putch:	
  1984                           ; 1 bytes @ 0x0
  1985                           
  1986  0070                     ?_output_message:	
  1987                           ; 1 bytes @ 0x0
  1988                           
  1989  0070                     ?_xtochar:	
  1990                           ; 1 bytes @ 0x0
  1991                           
  1992  0070                     ?_chartox:	
  1993                           ; 1 bytes @ 0x0
  1994                           
  1995  0070                     ?_process_set_zones_message:	
  1996                           ; 1 bytes @ 0x0
  1997                           
  1998  0070                     ?_process_set_address_message:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ?_process_reset_pump:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_event_timer_isr:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?i1_putch:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?i1_push:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?i1_pop:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ??i1_pop:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?i1_has_data:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ??i1_has_data:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?i1_not_full:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ??i1_not_full:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     i1push@d:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     i1has_data@buff:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037                           
  2038                           ; 1 bytes @ 0x0
  2039  0070                     	ds	1
  2040  0071                     ??i1_push:	
  2041                           
  2042                           ; 1 bytes @ 0x1
  2043  0071                     	ds	1
  2044  0072                     i1not_full@buff:	
  2045                           
  2046                           ; 1 bytes @ 0x2
  2047  0072                     	ds	2
  2048  0074                     i1push@buff:	
  2049                           
  2050                           ; 1 bytes @ 0x4
  2051  0074                     	ds	1
  2052  0075                     ??i1_putch:	
  2053                           
  2054                           ; 1 bytes @ 0x5
  2055  0075                     	ds	1
  2056  0076                     i1putch@c:	
  2057  0076                     i1pop@d:	
  2058                           ; 1 bytes @ 0x6
  2059                           
  2060                           
  2061                           ; 1 bytes @ 0x6
  2062  0076                     	ds	1
  2063  0077                     ??i1_puts:	
  2064  0077                     i1pop@buff:	
  2065                           ; 1 bytes @ 0x7
  2066                           
  2067  0077                     i1puts@c:	
  2068                           ; 1 bytes @ 0x7
  2069                           
  2070                           
  2071                           ; 2 bytes @ 0x7
  2072  0077                     	ds	2
  2073  0079                     ??_usart_interrupt:	
  2074                           
  2075                           ; 1 bytes @ 0x9
  2076  0079                     	ds	1
  2077  007A                     usart_interrupt@a:	
  2078                           
  2079                           ; 1 bytes @ 0xA
  2080  007A                     	ds	1
  2081                           
  2082                           	psect	cstackBANK0
  2083  0020                     __pcstackBANK0:	
  2084  0020                     ?i1_puts:	
  2085  0020                     i1puts@str:	
  2086                           ; 2 bytes @ 0x0
  2087                           
  2088                           
  2089                           ; 2 bytes @ 0x0
  2090  0020                     	ds	2
  2091  0022                     ??_event_timer_isr:	
  2092                           
  2093                           ; 1 bytes @ 0x2
  2094  0022                     	ds	5
  2095  0027                     ??_ser_int:	
  2096  0027                     ??_has_data:	
  2097                           ; 1 bytes @ 0x7
  2098                           
  2099  0027                     ??_pop:	
  2100                           ; 1 bytes @ 0x7
  2101                           
  2102  0027                     ??_not_full:	
  2103                           ; 1 bytes @ 0x7
  2104                           
  2105  0027                     ?_push:	
  2106                           ; 1 bytes @ 0x7
  2107                           
  2108  0027                     ??_EventDumpSolenoidCallBack:	
  2109                           ; 1 bytes @ 0x7
  2110                           
  2111  0027                     ??_EventLowWaterPressureDebounceCallBack:	
  2112                           ; 1 bytes @ 0x7
  2113                           
  2114  0027                     ??_combineZones:	
  2115                           ; 1 bytes @ 0x7
  2116                           
  2117  0027                     ??_xtochar:	
  2118                           ; 1 bytes @ 0x7
  2119                           
  2120  0027                     ??_chartox:	
  2121                           ; 1 bytes @ 0x7
  2122                           
  2123  0027                     ?___bmul:	
  2124                           ; 1 bytes @ 0x7
  2125                           
  2126  0027                     push@d:	
  2127                           ; 1 bytes @ 0x7
  2128                           
  2129  0027                     has_data@buff:	
  2130                           ; 1 bytes @ 0x7
  2131                           
  2132  0027                     xtochar@x:	
  2133                           ; 1 bytes @ 0x7
  2134                           
  2135  0027                     chartox@c:	
  2136                           ; 1 bytes @ 0x7
  2137                           
  2138  0027                     ___bmul@multiplicand:	
  2139                           ; 1 bytes @ 0x7
  2140                           
  2141                           
  2142                           ; 1 bytes @ 0x7
  2143  0027                     	ds	1
  2144  0028                     ??_push:	
  2145  0028                     ??_init:	
  2146                           ; 1 bytes @ 0x8
  2147                           
  2148  0028                     ?_setBaseMessage:	
  2149                           ; 1 bytes @ 0x8
  2150                           
  2151  0028                     ??___bmul:	
  2152                           ; 1 bytes @ 0x8
  2153                           
  2154  0028                     setBaseMessage@msgAddress:	
  2155                           ; 1 bytes @ 0x8
  2156                           
  2157                           
  2158                           ; 1 bytes @ 0x8
  2159  0028                     	ds	1
  2160  0029                     ??_setBaseMessage:	
  2161  0029                     not_full@buff:	
  2162                           ; 1 bytes @ 0x9
  2163                           
  2164  0029                     ___bmul@product:	
  2165                           ; 1 bytes @ 0x9
  2166                           
  2167                           
  2168                           ; 1 bytes @ 0x9
  2169  0029                     	ds	1
  2170  002A                     ?_has_data:	
  2171  002A                     ?_pop:	
  2172                           ; 1 bytes @ 0xA
  2173                           
  2174  002A                     ?_not_full:	
  2175                           ; 1 bytes @ 0xA
  2176                           
  2177  002A                     ___bmul@multiplier:	
  2178                           ; 1 bytes @ 0xA
  2179                           
  2180                           
  2181                           ; 1 bytes @ 0xA
  2182  002A                     	ds	1
  2183  002B                     ?_enable_callback:	
  2184  002B                     ??_clear_callback:	
  2185                           ; 1 bytes @ 0xB
  2186                           
  2187  002B                     push@buff:	
  2188                           ; 1 bytes @ 0xB
  2189                           
  2190  002B                     enable_callback@time_delay:	
  2191                           ; 1 bytes @ 0xB
  2192                           
  2193                           
  2194                           ; 2 bytes @ 0xB
  2195  002B                     	ds	1
  2196  002C                     ??_putch:	
  2197  002C                     setBaseMessage@messageType:	
  2198                           ; 1 bytes @ 0xC
  2199                           
  2200  002C                     clear_callback@callback:	
  2201                           ; 1 bytes @ 0xC
  2202                           
  2203                           
  2204                           ; 1 bytes @ 0xC
  2205  002C                     	ds	1
  2206  002D                     ??_enable_callback:	
  2207  002D                     ??_clear_callback_for_shutdown:	
  2208                           ; 1 bytes @ 0xD
  2209                           
  2210  002D                     ??_EventLowWaterPressureCallBack:	
  2211                           ; 1 bytes @ 0xD
  2212                           
  2213  002D                     ??_EventPODebounceCallBack:	
  2214                           ; 1 bytes @ 0xD
  2215                           
  2216  002D                     ??_EventRunSignalDebounceCallBack:	
  2217                           ; 1 bytes @ 0xD
  2218                           
  2219  002D                     putch@c:	
  2220                           ; 1 bytes @ 0xD
  2221                           
  2222  002D                     pop@d:	
  2223                           ; 1 bytes @ 0xD
  2224                           
  2225  002D                     setBaseMessage@v:	
  2226                           ; 1 bytes @ 0xD
  2227                           
  2228                           
  2229                           ; 1 bytes @ 0xD
  2230  002D                     	ds	1
  2231  002E                     ??_output_message:	
  2232  002E                     ?_printf:	
  2233                           ; 1 bytes @ 0xE
  2234                           
  2235  002E                     ?_puts:	
  2236                           ; 2 bytes @ 0xE
  2237                           
  2238  002E                     pop@buff:	
  2239                           ; 2 bytes @ 0xE
  2240                           
  2241  002E                     enable_callback@callback:	
  2242                           ; 1 bytes @ 0xE
  2243                           
  2244  002E                     puts@str:	
  2245                           ; 1 bytes @ 0xE
  2246                           
  2247  002E                     printf@f:	
  2248                           ; 2 bytes @ 0xE
  2249                           
  2250                           
  2251                           ; 2 bytes @ 0xE
  2252  002E                     	ds	1
  2253  002F                     ??_init_event_timer:	
  2254  002F                     ??_receiveMessage:	
  2255                           ; 1 bytes @ 0xF
  2256                           
  2257  002F                     ??_standby:	
  2258                           ; 1 bytes @ 0xF
  2259                           
  2260  002F                     ??_shutdown:	
  2261                           ; 1 bytes @ 0xF
  2262                           
  2263  002F                     ??_start_pump:	
  2264                           ; 1 bytes @ 0xF
  2265                           
  2266  002F                     ??_monitor_pump_run:	
  2267                           ; 1 bytes @ 0xF
  2268                           
  2269  002F                     ??_EventFaultStateLEDCallBack:	
  2270                           ; 1 bytes @ 0xF
  2271                           
  2272  002F                     ??_EventIdleTimeoutCallBack:	
  2273                           ; 1 bytes @ 0xF
  2274                           
  2275  002F                     ??_EventLowFogPressureCallBack:	
  2276                           ; 1 bytes @ 0xF
  2277                           
  2278  002F                     ??_EventLowWaterLevelCallBack:	
  2279                           ; 1 bytes @ 0xF
  2280                           
  2281  002F                     ??_monitor_water_pressure:	
  2282                           ; 1 bytes @ 0xF
  2283                           
  2284  002F                     output_message@i:	
  2285                           ; 1 bytes @ 0xF
  2286                           
  2287                           
  2288                           ; 2 bytes @ 0xF
  2289  002F                     	ds	1
  2290  0030                     ??_printf:	
  2291  0030                     ??_start_main:	
  2292                           ; 1 bytes @ 0x10
  2293                           
  2294  0030                     ??_pump_run:	
  2295                           ; 1 bytes @ 0x10
  2296                           
  2297  0030                     ??_puts:	
  2298                           ; 1 bytes @ 0x10
  2299                           
  2300  0030                     ??_resetPump:	
  2301                           ; 1 bytes @ 0x10
  2302                           
  2303  0030                     ??_checkIfShoudReset:	
  2304                           ; 1 bytes @ 0x10
  2305                           
  2306  0030                     receiveMessage@c:	
  2307                           ; 1 bytes @ 0x10
  2308                           
  2309  0030                     puts@c:	
  2310                           ; 1 bytes @ 0x10
  2311                           
  2312                           
  2313                           ; 2 bytes @ 0x10
  2314  0030                     	ds	1
  2315  0031                     output_message@message:	
  2316  0031                     _EventFaultStateLEDCallBack$146:	
  2317                           ; 1 bytes @ 0x11
  2318                           
  2319                           
  2320                           ; 2 bytes @ 0x11
  2321  0031                     	ds	1
  2322  0032                     ??_serial_process_loop:	
  2323  0032                     ??_process_get_status_message:	
  2324                           ; 1 bytes @ 0x12
  2325                           
  2326  0032                     ??_process_set_zones_message:	
  2327                           ; 1 bytes @ 0x12
  2328                           
  2329  0032                     ??_process_set_address_message:	
  2330                           ; 1 bytes @ 0x12
  2331                           
  2332  0032                     ??_process_reset_pump:	
  2333                           ; 1 bytes @ 0x12
  2334                           
  2335                           
  2336                           ; 1 bytes @ 0x12
  2337  0032                     	ds	1
  2338  0033                     serial_process_loop@a:	
  2339  0033                     process_get_status_message@inmessage:	
  2340                           ; 1 bytes @ 0x13
  2341                           
  2342  0033                     process_reset_pump@inmessage:	
  2343                           ; 1 bytes @ 0x13
  2344                           
  2345  0033                     _EventFaultStateLEDCallBack$147:	
  2346                           ; 1 bytes @ 0x13
  2347                           
  2348                           
  2349                           ; 2 bytes @ 0x13
  2350  0033                     	ds	1
  2351  0034                     process_set_zones_message@inmessage:	
  2352  0034                     process_set_address_message@inmessage:	
  2353                           ; 1 bytes @ 0x14
  2354                           
  2355  0034                     printf@ap:	
  2356                           ; 1 bytes @ 0x14
  2357                           
  2358                           
  2359                           ; 1 bytes @ 0x14
  2360  0034                     	ds	1
  2361  0035                     ??_process_message:	
  2362  0035                     _EventFaultStateLEDCallBack$148:	
  2363                           ; 1 bytes @ 0x15
  2364                           
  2365                           
  2366                           ; 2 bytes @ 0x15
  2367  0035                     	ds	1
  2368  0036                     printf@c:	
  2369                           
  2370                           ; 1 bytes @ 0x16
  2371  0036                     	ds	1
  2372  0037                     ??_process_event_timer:	
  2373  0037                     ??_printPumpState:	
  2374                           ; 1 bytes @ 0x17
  2375                           
  2376  0037                     ??_printFaultState:	
  2377                           ; 1 bytes @ 0x17
  2378                           
  2379  0037                     process_message@msgType:	
  2380                           ; 1 bytes @ 0x17
  2381                           
  2382                           
  2383                           ; 1 bytes @ 0x17
  2384  0037                     	ds	2
  2385  0039                     process_message@inmessage:	
  2386                           
  2387                           ; 1 bytes @ 0x19
  2388  0039                     	ds	1
  2389  003A                     _process_event_timer$2111:	
  2390                           
  2391                           ; 1 bytes @ 0x1A
  2392  003A                     	ds	1
  2393  003B                     process_event_timer@i:	
  2394                           
  2395                           ; 1 bytes @ 0x1B
  2396  003B                     	ds	1
  2397  003C                     ??_main:	
  2398                           
  2399                           ; 1 bytes @ 0x1C
  2400  003C                     	ds	4
  2401  0040                     main@sendGetMessageBuffer:	
  2402                           
  2403                           ; 10 bytes @ 0x20
  2404  0040                     	ds	10
  2405  004A                     main@message:	
  2406                           
  2407                           ; 1 bytes @ 0x2A
  2408  004A                     	ds	1
  2409  004B                     main@msg_counter:	
  2410                           
  2411                           ; 2 bytes @ 0x2B
  2412  004B                     	ds	2
  2413                           
  2414                           	psect	maintext
  2415  0241                     __pmaintext:	
  2416 ;;
  2417 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2418 ;;
  2419 ;; *************** function _main *****************
  2420 ;; Defined at:
  2421 ;;		line 294 in file "pump_control.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;		None
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  sendGetMessa   10   32[BANK0 ] unsigned char [10]
  2426 ;;  msg_counter     2   43[BANK0 ] unsigned int 
  2427 ;;  message         1   42[BANK0 ] PTR unsigned char 
  2428 ;;		 -> receiveMessage@message(10), NULL(0), 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : B00/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2438 ;;      Params:         0       0       0       0       0
  2439 ;;      Locals:         0      13       0       0       0
  2440 ;;      Temps:          0       4       0       0       0
  2441 ;;      Totals:         0      17       0       0       0
  2442 ;;Total ram usage:       17 bytes
  2443 ;; Hardware stack levels required when called:   11
  2444 ;; This function calls:
  2445 ;;		_checkIfShoudReset
  2446 ;;		_clear_callback
  2447 ;;		_combineZones
  2448 ;;		_enable_callback
  2449 ;;		_init
  2450 ;;		_init_event_timer
  2451 ;;		_monitor_water_pressure
  2452 ;;		_printFaultState
  2453 ;;		_printPumpState
  2454 ;;		_printf
  2455 ;;		_process_event_timer
  2456 ;;		_process_get_status_message
  2457 ;;		_process_message
  2458 ;;		_pump_run
  2459 ;;		_receiveMessage
  2460 ;;		_ser_int
  2461 ;;		_serial_process_loop
  2462 ;;		_shutdown
  2463 ;;		_standby
  2464 ;;		_start_main
  2465 ;;		_start_pump
  2466 ;; This function is called by:
  2467 ;;		Startup code after reset
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           
  2472                           ;psect for function _main
  2473  0241                     _main:	
  2474                           
  2475                           ;pump_control.c: 295:     char *message;;pump_control.c: 296:     char sendGetMessageBuf
      +                          fer[10] = {'0', '0', '0', '0', '0', '0', '0', '0', '0'};
  2476                           
  2477                           ;incstack = 0
  2478 ;; hardware stack exceeded
  2479                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2480  0241  3040               	movlw	main@sendGetMessageBuffer& (0+255)
  2481  0242  0084               	movwf	4
  2482  0243  30E6               	movlw	low main@F1063
  2483  0244  1283               	bcf	3,5	;RP0=0, select bank0
  2484  0245  1303               	bcf	3,6	;RP1=0, select bank0
  2485  0246  00BC               	movwf	??_main
  2486  0247  0804               	movf	4,w
  2487  0248  00BD               	movwf	??_main+1
  2488  0249  300A               	movlw	10
  2489  024A  00BE               	movwf	??_main+2
  2490  024B                     u2650:	
  2491  024B  083C               	movf	??_main,w
  2492  024C  0084               	movwf	4
  2493  024D  1783               	bsf	3,7	;select IRP bank3
  2494  024E  0800               	movf	0,w
  2495  024F  00BF               	movwf	??_main+3
  2496  0250  0ABC               	incf	??_main,f
  2497  0251  083D               	movf	??_main+1,w
  2498  0252  0084               	movwf	4
  2499  0253  1383               	bcf	3,7	;select IRP bank0
  2500  0254  083F               	movf	??_main+3,w
  2501  0255  0080               	movwf	0
  2502  0256  0ABD               	incf	??_main+1,f
  2503  0257  0BBE               	decfsz	??_main+2,f
  2504  0258  2A4B               	goto	u2650
  2505                           
  2506                           ;pump_control.c: 297:     init();
  2507  0259  120A  118A  2747  120A  118A  	fcall	_init
  2508                           
  2509                           ;pump_control.c: 298:     init_event_timer();
  2510  025E  120A  118A  25BE  120A  118A  	fcall	_init_event_timer
  2511                           
  2512                           ;pump_control.c: 299:     ser_int();
  2513  0263  120A  158A  25B3  120A  118A  	fcall	_ser_int
  2514                           
  2515                           ;pump_control.c: 300:     printf("waitingxxxx \n\r");
  2516  0268  30BE               	movlw	low (STR_18| (0+32768))
  2517  0269  1283               	bcf	3,5	;RP0=0, select bank0
  2518  026A  1303               	bcf	3,6	;RP1=0, select bank0
  2519  026B  00AE               	movwf	printf@f
  2520  026C  3081               	movlw	high (STR_18| (0+32768))
  2521  026D  00AF               	movwf	printf@f+1
  2522  026E  120A  118A  205F  120A  118A  	fcall	_printf
  2523                           
  2524                           ;pump_control.c: 317:     unsigned int msg_counter = 0;
  2525  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2527  0275  01CB               	clrf	main@msg_counter
  2528  0276  01CC               	clrf	main@msg_counter+1
  2529  0277                     l3743:	
  2530                           
  2531                           ;pump_control.c: 319:         combineZones();
  2532  0277  120A  158A  23F4  120A  118A  	fcall	_combineZones
  2533                           
  2534                           ;pump_control.c: 322:         process_event_timer();
  2535  027C  120A  118A  2330  120A  118A  	fcall	_process_event_timer
  2536                           
  2537                           ;pump_control.c: 324:         if ((message = receiveMessage())) {
  2538  0281  120A  118A  2612  120A  118A  	fcall	_receiveMessage
  2539  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0288  00BC               	movwf	??_main
  2542  0289  083C               	movf	??_main,w
  2543  028A  00CA               	movwf	main@message
  2544  028B  084A               	movf	main@message,w
  2545  028C  1903               	btfsc	3,2
  2546  028D  2A94               	goto	l260
  2547                           
  2548                           ;pump_control.c: 326:             process_message(message);
  2549  028E  084A               	movf	main@message,w
  2550  028F  120A  118A  2661  120A  118A  	fcall	_process_message
  2551  0294                     l260:	
  2552                           ;pump_control.c: 327:         }
  2553                           
  2554                           
  2555                           ;pump_control.c: 329:         serial_process_loop();
  2556  0294  120A  118A  20A7  120A  118A  	fcall	_serial_process_loop
  2557                           
  2558                           ;pump_control.c: 331:         msg_counter++;
  2559  0299  3001               	movlw	1
  2560  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2561  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2562  029C  07CB               	addwf	main@msg_counter,f
  2563  029D  1803               	skipnc
  2564  029E  0ACC               	incf	main@msg_counter+1,f
  2565  029F  3000               	movlw	0
  2566  02A0  07CC               	addwf	main@msg_counter+1,f
  2567                           
  2568                           ;pump_control.c: 332:         if (msg_counter >= ((1 << 8))) {
  2569  02A1  3001               	movlw	1
  2570  02A2  024C               	subwf	main@msg_counter+1,w
  2571  02A3  3000               	movlw	0
  2572  02A4  1903               	skipnz
  2573  02A5  024B               	subwf	main@msg_counter,w
  2574  02A6  1C03               	skipc
  2575  02A7  2ABC               	goto	l3759
  2576                           
  2577                           ;pump_control.c: 333:             printPumpState();
  2578  02A8  120A  118A  27FE  120A  118A  	fcall	_printPumpState
  2579                           
  2580                           ;pump_control.c: 334:             printFaultState();
  2581  02AD  120A  118A  27FF  120A  118A  	fcall	_printFaultState
  2582                           
  2583                           ;pump_control.c: 335:             process_get_status_message(sendGetMessageBuffer);
  2584  02B2  3040               	movlw	(low (main@sendGetMessageBuffer| 0))& (0+255)
  2585  02B3  120A  158A  2517  120A  118A  	fcall	_process_get_status_message
  2586                           
  2587                           ;pump_control.c: 337:             msg_counter = 0;
  2588  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2589  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2590  02BA  01CB               	clrf	main@msg_counter
  2591  02BB  01CC               	clrf	main@msg_counter+1
  2592  02BC                     l3759:	
  2593                           
  2594                           ;pump_control.c: 342:         checkIfShoudReset();
  2595  02BC  120A  158A  2468  120A  118A  	fcall	_checkIfShoudReset
  2596                           
  2597                           ;pump_control.c: 343:         monitor_water_pressure();
  2598  02C1  120A  158A  25D6  120A  118A  	fcall	_monitor_water_pressure
  2599                           
  2600                           ;pump_control.c: 344:         if (!( !PORTCbits.RC2)) {
  2601  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2602  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  2603  02C8  1D07               	btfss	7,2	;volatile
  2604  02C9  2AEF               	goto	l3783
  2605                           
  2606                           ;pump_control.c: 345:             clear_callback(EventPODebounce);
  2607  02CA  3008               	movlw	8
  2608  02CB  120A  158A  2426  120A  118A  	fcall	_clear_callback
  2609  02D0  2AEF               	goto	l3783
  2610  02D1                     l3767:	
  2611                           
  2612                           ;pump_control.c: 349:                 standby();
  2613  02D1  120A  158A  2788  120A  118A  	fcall	_standby
  2614                           
  2615                           ;pump_control.c: 350:                 break;
  2616  02D6  2B10               	goto	l3785
  2617  02D7                     l3769:	
  2618                           
  2619                           ;pump_control.c: 352:                 shutdown();
  2620  02D7  120A  158A  2446  120A  118A  	fcall	_shutdown
  2621                           
  2622                           ;pump_control.c: 353:                 break;
  2623  02DC  2B10               	goto	l3785
  2624  02DD                     l3771:	
  2625                           
  2626                           ;pump_control.c: 355:                 start_pump();
  2627  02DD  120A  118A  24D3  120A  118A  	fcall	_start_pump
  2628                           
  2629                           ;pump_control.c: 356:                 break;
  2630  02E2  2B10               	goto	l3785
  2631  02E3                     l3777:	
  2632                           
  2633                           ;pump_control.c: 364:                 start_main();
  2634  02E3  120A  158A  26C4  120A  118A  	fcall	_start_main
  2635                           
  2636                           ;pump_control.c: 365:                 break;
  2637  02E8  2B10               	goto	l3785
  2638  02E9                     l3779:	
  2639                           
  2640                           ;pump_control.c: 367:                 pump_run();
  2641  02E9  120A  158A  2591  120A  118A  	fcall	_pump_run
  2642                           
  2643                           ;pump_control.c: 368:                 break;
  2644  02EE  2B10               	goto	l3785
  2645  02EF                     l3783:	
  2646  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2647  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  2648  02F1  0854               	movf	_state,w
  2649  02F2  00BC               	movwf	??_main
  2650  02F3  01BD               	clrf	??_main+1
  2651                           
  2652                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2653                           ; Switch size 1, requested type "simple"
  2654                           ; Number of cases is 1, Range of values is 0 to 0
  2655                           ; switch strategies available:
  2656                           ; Name         Instructions Cycles
  2657                           ; simple_byte            4     3 (average)
  2658                           ; direct_byte           11     8 (fixed)
  2659                           ; jumptable            260     6 (fixed)
  2660                           ;	Chosen strategy is simple_byte
  2661  02F4  083D               	movf	??_main+1,w
  2662  02F5  3A00               	xorlw	0	; case 0
  2663  02F6  1903               	skipnz
  2664  02F7  2AF9               	goto	l3893
  2665  02F8  2B10               	goto	l3785
  2666  02F9                     l3893:	
  2667                           
  2668                           ; Switch size 1, requested type "simple"
  2669                           ; Number of cases is 7, Range of values is 0 to 6
  2670                           ; switch strategies available:
  2671                           ; Name         Instructions Cycles
  2672                           ; simple_byte           22    12 (average)
  2673                           ; direct_byte           29     8 (fixed)
  2674                           ; jumptable            260     6 (fixed)
  2675                           ;	Chosen strategy is simple_byte
  2676  02F9  083C               	movf	??_main,w
  2677  02FA  3A00               	xorlw	0	; case 0
  2678  02FB  1903               	skipnz
  2679  02FC  2AD1               	goto	l3767
  2680  02FD  3A01               	xorlw	1	; case 1
  2681  02FE  1903               	skipnz
  2682  02FF  2AD7               	goto	l3769
  2683  0300  3A03               	xorlw	3	; case 2
  2684  0301  1903               	skipnz
  2685  0302  2ADD               	goto	l3771
  2686  0303  3A01               	xorlw	1	; case 3
  2687  0304  1903               	skipnz
  2688  0305  2ADD               	goto	l3771
  2689  0306  3A07               	xorlw	7	; case 4
  2690  0307  1903               	skipnz
  2691  0308  2ADD               	goto	l3771
  2692  0309  3A01               	xorlw	1	; case 5
  2693  030A  1903               	skipnz
  2694  030B  2AE3               	goto	l3777
  2695  030C  3A03               	xorlw	3	; case 6
  2696  030D  1903               	skipnz
  2697  030E  2AE9               	goto	l3779
  2698  030F  2B10               	goto	l3785
  2699  0310                     l3785:	
  2700                           
  2701                           ;pump_control.c: 371:         if (state == standbyState) {
  2702  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2703  0311  1303               	bcf	3,6	;RP1=0, select bank0
  2704  0312  0854               	movf	_state,w
  2705  0313  1D03               	btfss	3,2
  2706  0314  2B29               	goto	l3795
  2707                           
  2708                           ;pump_control.c: 372:             if (!timer_events[EventIdleTimeout].active) {
  2709  0315  1683               	bsf	3,5	;RP0=1, select bank1
  2710  0316  1303               	bcf	3,6	;RP1=0, select bank1
  2711  0317  1845               	btfsc	(_timer_events^(0+128)+37),0	;volatile
  2712  0318  2A77               	goto	l3743
  2713                           
  2714                           ;pump_control.c: 373:                 timer_events[EventIdleTimeout].flag_bit = 0;
  2715  0319  10C5               	bcf	(_timer_events^(0+128)+37),1	;volatile
  2716                           
  2717                           ;pump_control.c: 374:                 timer_events[EventIdleTimeout].flag_data = 0;
  2718  031A  01C7               	clrf	(_timer_events^(0+128)+39)	;volatile
  2719  031B  01C8               	clrf	((_timer_events+1)^(0+128)+39)	;volatile
  2720                           
  2721                           ;pump_control.c: 375:                 enable_callback(EventIdleTimeout, (32767));
  2722  031C  30FF               	movlw	255
  2723  031D  1283               	bcf	3,5	;RP0=0, select bank0
  2724  031E  1303               	bcf	3,6	;RP1=0, select bank0
  2725  031F  00AB               	movwf	enable_callback@time_delay
  2726  0320  307F               	movlw	127
  2727  0321  00AC               	movwf	enable_callback@time_delay+1
  2728  0322  3005               	movlw	5
  2729  0323  120A  158A  2753  120A  118A  	fcall	_enable_callback
  2730  0328  2A77               	goto	l3743
  2731  0329                     l3795:	
  2732                           
  2733                           ;pump_control.c: 379:             clear_callback(EventIdleTimeout);
  2734  0329  3005               	movlw	5
  2735  032A  120A  158A  2426  120A  118A  	fcall	_clear_callback
  2736  032F  2A77               	goto	l3743
  2737  0330                     __end_of_main:	
  2738                           
  2739                           	psect	text1
  2740  04D3                     __ptext1:	
  2741 ;; *************** function _start_pump *****************
  2742 ;; Defined at:
  2743 ;;		line 3 in file "start_pump_state.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2757 ;;      Params:         0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0
  2759 ;;      Temps:          0       1       0       0       0
  2760 ;;      Totals:         0       1       0       0       0
  2761 ;;Total ram usage:        1 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    8
  2764 ;; This function calls:
  2765 ;;		_clear_callback
  2766 ;;		_clear_callback_for_shutdown
  2767 ;;		_enable_callback
  2768 ;; This function is called by:
  2769 ;;		_main
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function _start_pump
  2775  04D3                     _start_pump:	
  2776                           
  2777                           ;start_pump_state.c: 8:   if (( PORTAbits.RA4)) {
  2778                           
  2779                           ;incstack = 0
  2780 ;; hardware stack exceeded
  2781                           ; Regs used in _start_pump: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2782  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  2783  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  2784  04D5  1E05               	btfss	5,4	;volatile
  2785  04D6  2CE1               	goto	l3131
  2786                           
  2787                           ;start_pump_state.c: 9:     fault_flags.lwl_fault = 1;
  2788  04D7  144F               	bsf	_fault_flags,0
  2789                           
  2790                           ;start_pump_state.c: 10:     enable_callback (EventLowWaterLevel, (30*(4000000/256/4/256
      +                          )));
  2791  04D8  30C2               	movlw	194
  2792  04D9  00AB               	movwf	enable_callback@time_delay
  2793  04DA  3001               	movlw	1
  2794  04DB  00AC               	movwf	enable_callback@time_delay+1
  2795  04DC  3000               	movlw	0
  2796  04DD  120A  158A  2753   	fcall	_enable_callback
  2797  04E0  0008               	return
  2798  04E1                     l3131:	
  2799                           
  2800                           ;start_pump_state.c: 16:   if (state != startpumpWaitState) {
  2801  04E1  3003               	movlw	3
  2802  04E2  0654               	xorwf	_state,w
  2803  04E3  1903               	btfsc	3,2
  2804  04E4  2CE7               	goto	l646
  2805                           
  2806                           ;start_pump_state.c: 17:     { PORTEbits.RE0 = (1); fault_flags.boostPumpBit = (1);};
  2807  04E5  1409               	bsf	9,0	;volatile
  2808  04E6  174F               	bsf	_fault_flags,6
  2809  04E7                     l646:	
  2810                           ;start_pump_state.c: 18:   }
  2811                           
  2812                           
  2813                           ;start_pump_state.c: 20:   if (!( (!PORTCbits.RC1) || (combinedZones != 0) )) {
  2814  04E7  1C87               	btfss	7,1	;volatile
  2815  04E8  2CF2               	goto	l647
  2816  04E9  085F               	movf	_combinedZones,w
  2817  04EA  1D03               	btfss	3,2
  2818  04EB  2CF2               	goto	l647
  2819                           
  2820                           ;start_pump_state.c: 23:     state = shutdownState;
  2821  04EC  01D4               	clrf	_state
  2822  04ED  0AD4               	incf	_state,f
  2823                           
  2824                           ;start_pump_state.c: 24:      clear_callback_for_shutdown();
  2825  04EE  120A  158A  2648   	fcall	_clear_callback_for_shutdown
  2826  04F1  0008               	return
  2827  04F2                     l647:	
  2828                           ;start_pump_state.c: 27:   else {
  2829                           
  2830                           
  2831                           ;start_pump_state.c: 41:     if (!fault_flags.wpOkBit) {
  2832  04F2  1A4F               	btfsc	_fault_flags,4
  2833  04F3  2D46               	goto	l3175
  2834                           
  2835                           ;start_pump_state.c: 42:       if (state == startpumpInitialState) {
  2836  04F4  3002               	movlw	2
  2837  04F5  0654               	xorwf	_state,w
  2838  04F6  1D03               	btfss	3,2
  2839  04F7  2D0E               	goto	l3155
  2840                           
  2841                           ;start_pump_state.c: 46:  timer_events[EventLowWaterPressure].flag_bit = 0;
  2842  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  2843  04F9  1303               	bcf	3,6	;RP1=0, select bank1
  2844  04FA  10A9               	bcf	(_timer_events^(0+128)+9),1	;volatile
  2845                           
  2846                           ;start_pump_state.c: 47:  timer_events[EventLowWaterPressure].next_state = startpumpWait
      +                          State;
  2847  04FB  3003               	movlw	3
  2848  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2849  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2850  04FE  00AF               	movwf	??_start_pump
  2851  04FF  082F               	movf	??_start_pump,w
  2852  0500  1683               	bsf	3,5	;RP0=1, select bank1
  2853  0501  1303               	bcf	3,6	;RP1=0, select bank1
  2854  0502  00AA               	movwf	(_timer_events^(0+128)+10)	;volatile
  2855                           
  2856                           ;start_pump_state.c: 48:  enable_callback (EventLowWaterPressure, (30*(4000000/256/4/256
      +                          )));
  2857  0503  30C2               	movlw	194
  2858  0504  1283               	bcf	3,5	;RP0=0, select bank0
  2859  0505  1303               	bcf	3,6	;RP1=0, select bank0
  2860  0506  00AB               	movwf	enable_callback@time_delay
  2861  0507  3001               	movlw	1
  2862  0508  00AC               	movwf	enable_callback@time_delay+1
  2863  0509  3001               	movlw	1
  2864  050A  120A  158A  2753   	fcall	_enable_callback
  2865  050D  0008               	return
  2866  050E                     l3155:	
  2867                           
  2868                           ;start_pump_state.c: 52:       if (state == startpumpWaitState) {
  2869  050E  3003               	movlw	3
  2870  050F  0654               	xorwf	_state,w
  2871  0510  1D03               	btfss	3,2
  2872  0511  2D2A               	goto	l3165
  2873                           
  2874                           ;start_pump_state.c: 56:  { PORTEbits.RE0 = (0); fault_flags.boostPumpBit = (0);};
  2875  0512  1009               	bcf	9,0	;volatile
  2876  0513  134F               	bcf	_fault_flags,6
  2877                           
  2878                           ;start_pump_state.c: 58:  timer_events[EventLowWaterPressure].flag_bit = 0;
  2879  0514  1683               	bsf	3,5	;RP0=1, select bank1
  2880  0515  1303               	bcf	3,6	;RP1=0, select bank1
  2881  0516  10A9               	bcf	(_timer_events^(0+128)+9),1	;volatile
  2882                           
  2883                           ;start_pump_state.c: 59:  timer_events[EventLowWaterPressure].next_state = startpumpSeco
      +                          ndLWPCheckState;
  2884  0517  3004               	movlw	4
  2885  0518  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0519  1303               	bcf	3,6	;RP1=0, select bank0
  2887  051A  00AF               	movwf	??_start_pump
  2888  051B  082F               	movf	??_start_pump,w
  2889  051C  1683               	bsf	3,5	;RP0=1, select bank1
  2890  051D  1303               	bcf	3,6	;RP1=0, select bank1
  2891  051E  00AA               	movwf	(_timer_events^(0+128)+10)	;volatile
  2892                           
  2893                           ;start_pump_state.c: 60:  enable_callback (EventLowWaterPressure, (30*(4000000/256/4/256
      +                          )));
  2894  051F  30C2               	movlw	194
  2895  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2897  0522  00AB               	movwf	enable_callback@time_delay
  2898  0523  3001               	movlw	1
  2899  0524  00AC               	movwf	enable_callback@time_delay+1
  2900  0525  3001               	movlw	1
  2901  0526  120A  158A  2753   	fcall	_enable_callback
  2902  0529  0008               	return
  2903  052A                     l3165:	
  2904                           
  2905                           ;start_pump_state.c: 64:       if (state == startpumpSecondLWPCheckState) {
  2906  052A  3004               	movlw	4
  2907  052B  0654               	xorwf	_state,w
  2908  052C  1D03               	btfss	3,2
  2909  052D  2D4A               	goto	l3177
  2910                           
  2911                           ;start_pump_state.c: 68:  { PORTEbits.RE0 = (1); fault_flags.boostPumpBit = (1);};
  2912  052E  1409               	bsf	9,0	;volatile
  2913  052F  174F               	bsf	_fault_flags,6
  2914                           
  2915                           ;start_pump_state.c: 70:  timer_events[EventLowWaterPressure].flag_bit = 1;
  2916  0530  1683               	bsf	3,5	;RP0=1, select bank1
  2917  0531  1303               	bcf	3,6	;RP1=0, select bank1
  2918  0532  14A9               	bsf	(_timer_events^(0+128)+9),1	;volatile
  2919                           
  2920                           ;start_pump_state.c: 71:  timer_events[EventLowWaterPressure].next_state = shutdownState
      +                          ;
  2921  0533  3001               	movlw	1
  2922  0534  1283               	bcf	3,5	;RP0=0, select bank0
  2923  0535  1303               	bcf	3,6	;RP1=0, select bank0
  2924  0536  00AF               	movwf	??_start_pump
  2925  0537  082F               	movf	??_start_pump,w
  2926  0538  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0539  1303               	bcf	3,6	;RP1=0, select bank1
  2928  053A  00AA               	movwf	(_timer_events^(0+128)+10)	;volatile
  2929                           
  2930                           ;start_pump_state.c: 72:  enable_callback (EventLowWaterPressure, (30*(4000000/256/4/256
      +                          )));
  2931  053B  30C2               	movlw	194
  2932  053C  1283               	bcf	3,5	;RP0=0, select bank0
  2933  053D  1303               	bcf	3,6	;RP1=0, select bank0
  2934  053E  00AB               	movwf	enable_callback@time_delay
  2935  053F  3001               	movlw	1
  2936  0540  00AC               	movwf	enable_callback@time_delay+1
  2937  0541  3001               	movlw	1
  2938  0542  120A  158A  2753   	fcall	_enable_callback
  2939  0545  0008               	return
  2940  0546                     l3175:	
  2941                           
  2942                           ;start_pump_state.c: 79:       clear_callback (EventLowWaterPressure);
  2943  0546  3001               	movlw	1
  2944  0547  120A  158A  2426   	fcall	_clear_callback
  2945  054A                     l3177:	
  2946                           
  2947                           ;start_pump_state.c: 83:     state = startmainState;
  2948  054A  3005               	movlw	5
  2949  054B  1283               	bcf	3,5	;RP0=0, select bank0
  2950  054C  1303               	bcf	3,6	;RP1=0, select bank0
  2951  054D  00AF               	movwf	??_start_pump
  2952  054E  082F               	movf	??_start_pump,w
  2953  054F  00D4               	movwf	_state
  2954  0550  0008               	return
  2955  0551                     __end_of_start_pump:	
  2956                           
  2957                           	psect	text2
  2958  0EC4                     __ptext2:	
  2959 ;; *************** function _start_main *****************
  2960 ;; Defined at:
  2961 ;;		line 4 in file "start_main.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;		None
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  1    wreg      void 
  2968 ;; Registers used:
  2969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2975 ;;      Params:         0       0       0       0       0
  2976 ;;      Locals:         0       0       0       0       0
  2977 ;;      Temps:          0       1       0       0       0
  2978 ;;      Totals:         0       1       0       0       0
  2979 ;;Total ram usage:        1 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    8
  2982 ;; This function calls:
  2983 ;;		_clear_callback
  2984 ;;		_enable_callback
  2985 ;;		_monitor_pump_run
  2986 ;; This function is called by:
  2987 ;;		_main
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           
  2992                           ;psect for function _start_main
  2993  0EC4                     _start_main:	
  2994                           
  2995                           ;start_main.c: 12:     { PORTEbits.RE0 = (1); fault_flags.boostPumpBit = (1);};
  2996                           
  2997                           ;incstack = 0
  2998 ;; hardware stack exceeded
  2999                           ; Regs used in _start_main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3000  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  3001  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  3002  0EC6  1409               	bsf	9,0	;volatile
  3003  0EC7  174F               	bsf	_fault_flags,6
  3004                           
  3005                           ;start_main.c: 13:     { PORTAbits.RA1 = (1); fault_flags.mainPumpBit = (1);};
  3006  0EC8  1485               	bsf	5,1	;volatile
  3007  0EC9  16CF               	bsf	_fault_flags,5
  3008                           
  3009                           ;start_main.c: 14:     monitor_pump_run();
  3010  0ECA  120A  118A  244D  120A  158A  	fcall	_monitor_pump_run
  3011                           
  3012                           ;start_main.c: 16:     if (!( PORTAbits.RA5)) {
  3013  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  3014  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  3015  0ED1  1A85               	btfsc	5,5	;volatile
  3016  0ED2  2EDE               	goto	l618
  3017                           
  3018                           ;start_main.c: 17:         clear_callback(EventLowFogPressure);
  3019  0ED3  3003               	movlw	3
  3020  0ED4  120A  158A  2426   	fcall	_clear_callback
  3021                           
  3022                           ;start_main.c: 18:         state = pumprunState;
  3023  0ED7  3006               	movlw	6
  3024  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  3025  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  3026  0EDA  00B0               	movwf	??_start_main
  3027  0EDB  0830               	movf	??_start_main,w
  3028  0EDC  00D4               	movwf	_state
  3029                           
  3030                           ;start_main.c: 19:     } else {
  3031  0EDD  0008               	return
  3032  0EDE                     l618:	
  3033                           
  3034                           ;start_main.c: 20:         if (!timer_events[EventLowFogPressure].active) {
  3035  0EDE  1683               	bsf	3,5	;RP0=1, select bank1
  3036  0EDF  1303               	bcf	3,6	;RP1=0, select bank1
  3037  0EE0  1837               	btfsc	(_timer_events^(0+128)+23),0	;volatile
  3038  0EE1  0008               	return
  3039                           
  3040                           ;start_main.c: 21:             timer_events[EventLowFogPressure].flag_bit = 0;
  3041  0EE2  10B7               	bcf	(_timer_events^(0+128)+23),1	;volatile
  3042                           
  3043                           ;start_main.c: 22:             timer_events[EventLowFogPressure].flag_data = (3*(4000000
      +                          /256/4/256));
  3044  0EE3  3000               	movlw	0
  3045  0EE4  00BA               	movwf	((_timer_events+1)^(0+128)+25)	;volatile
  3046  0EE5  302D               	movlw	45
  3047  0EE6  00B9               	movwf	(_timer_events^(0+128)+25)	;volatile
  3048                           
  3049                           ;start_main.c: 23:             enable_callback(EventLowFogPressure, (30*(4000000/256/4/2
      +                          56)));
  3050  0EE7  30C2               	movlw	194
  3051  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  3052  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  3053  0EEA  00AB               	movwf	enable_callback@time_delay
  3054  0EEB  3001               	movlw	1
  3055  0EEC  00AC               	movwf	enable_callback@time_delay+1
  3056  0EED  3003               	movlw	3
  3057  0EEE  120A  158A  2753   	fcall	_enable_callback
  3058  0EF1  0008               	return
  3059  0EF2                     __end_of_start_main:	
  3060                           
  3061                           	psect	text3
  3062  0F88                     __ptext3:	
  3063 ;; *************** function _standby *****************
  3064 ;; Defined at:
  3065 ;;		line 3 in file "standby_state.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3079 ;;      Params:         0       0       0       0       0
  3080 ;;      Locals:         0       0       0       0       0
  3081 ;;      Temps:          0       1       0       0       0
  3082 ;;      Totals:         0       1       0       0       0
  3083 ;;Total ram usage:        1 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    7
  3086 ;; This function calls:
  3087 ;;		_clear_callback
  3088 ;;		_enable_callback
  3089 ;; This function is called by:
  3090 ;;		_main
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _standby
  3096  0F88                     _standby:	
  3097                           
  3098                           ;standby_state.c: 24:   if (!( PORTAbits.RA4)) {
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _standby: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3102  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  3103  0F89  1303               	bcf	3,6	;RP1=0, select bank0
  3104  0F8A  1A05               	btfsc	5,4	;volatile
  3105  0F8B  2F96               	goto	l593
  3106                           
  3107                           ;standby_state.c: 27:     clear_callback (EventLowWaterLevel);
  3108  0F8C  3000               	movlw	0
  3109  0F8D  120A  158A  2426  120A  158A  	fcall	_clear_callback
  3110                           
  3111                           ;standby_state.c: 28:     fault_flags.lwl_fault = 0;
  3112  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  3113  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  3114  0F94  104F               	bcf	_fault_flags,0
  3115                           
  3116                           ;standby_state.c: 29:   }
  3117  0F95  2FA1               	goto	l3091
  3118  0F96                     l593:	
  3119                           ;standby_state.c: 30:   else {
  3120                           
  3121                           
  3122                           ;standby_state.c: 31:     fault_flags.lwl_fault = 1;
  3123  0F96  144F               	bsf	_fault_flags,0
  3124                           
  3125                           ;standby_state.c: 32:     enable_callback (EventLowWaterLevel, (30*(4000000/256/4/256)))
      +                          ;
  3126  0F97  30C2               	movlw	194
  3127  0F98  00AB               	movwf	enable_callback@time_delay
  3128  0F99  3001               	movlw	1
  3129  0F9A  00AC               	movwf	enable_callback@time_delay+1
  3130  0F9B  3000               	movlw	0
  3131  0F9C  120A  158A  2753  120A  158A  	fcall	_enable_callback
  3132  0FA1                     l3091:	
  3133                           
  3134                           ;standby_state.c: 37:   { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);};
  3135  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3136  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3137  0FA3  1085               	bcf	5,1	;volatile
  3138  0FA4  12CF               	bcf	_fault_flags,5
  3139                           
  3140                           ;standby_state.c: 39:   { PORTEbits.RE0 = (0); fault_flags.boostPumpBit = (0);};
  3141  0FA5  1009               	bcf	9,0	;volatile
  3142  0FA6  134F               	bcf	_fault_flags,6
  3143                           
  3144                           ;standby_state.c: 40:   if (!inIdleDumpHour){
  3145  0FA7  0853               	movf	_inIdleDumpHour,w
  3146  0FA8  1D03               	btfss	3,2
  3147  0FA9  2FAC               	goto	l595
  3148                           
  3149                           ;standby_state.c: 41:      { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  3150  0FAA  1105               	bcf	5,2	;volatile
  3151  0FAB  1050               	bcf	_fault_flags+1,0
  3152  0FAC                     l595:	
  3153                           ;standby_state.c: 42:   }
  3154                           
  3155                           
  3156                           ;standby_state.c: 48:   if (( (!PORTCbits.RC1) || (combinedZones != 0) )
  3157  0FAC  1C87               	btfss	7,1	;volatile
  3158  0FAD  2FB1               	goto	l598
  3159  0FAE  085F               	movf	_combinedZones,w
  3160  0FAF  1903               	btfsc	3,2
  3161  0FB0  0008               	return
  3162  0FB1                     l598:	
  3163  0FB1  184F               	btfsc	_fault_flags,0
  3164  0FB2  0008               	return
  3165  0FB3  18CF               	btfsc	_fault_flags,1
  3166  0FB4  0008               	return
  3167  0FB5  194F               	btfsc	_fault_flags,2
  3168  0FB6  0008               	return
  3169  0FB7  19CF               	btfsc	_fault_flags,3
  3170  0FB8  0008               	return
  3171                           
  3172                           ;standby_state.c: 52:       && !fault_flags.po_fault) {;standby_state.c: 54:     state =
      +                           startpumpInitialState;
  3173  0FB9  3002               	movlw	2
  3174  0FBA  00AF               	movwf	??_standby
  3175  0FBB  082F               	movf	??_standby,w
  3176  0FBC  00D4               	movwf	_state
  3177                           
  3178                           ;standby_state.c: 55:     inIdleDumpHour = 0;
  3179  0FBD  01D3               	clrf	_inIdleDumpHour
  3180                           
  3181                           ;standby_state.c: 56:      { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  3182  0FBE  1105               	bcf	5,2	;volatile
  3183  0FBF  1050               	bcf	_fault_flags+1,0
  3184  0FC0  0008               	return
  3185  0FC1                     __end_of_standby:	
  3186                           
  3187                           	psect	text4
  3188  0C46                     __ptext4:	
  3189 ;; *************** function _shutdown *****************
  3190 ;; Defined at:
  3191 ;;		line 4 in file "shutdown_state.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;		None
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3205 ;;      Params:         0       0       0       0       0
  3206 ;;      Locals:         0       0       0       0       0
  3207 ;;      Temps:          0       0       0       0       0
  3208 ;;      Totals:         0       0       0       0       0
  3209 ;;Total ram usage:        0 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; Hardware stack levels required when called:    7
  3212 ;; This function calls:
  3213 ;;		_enable_callback
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function _shutdown
  3221  0C46                     _shutdown:	
  3222                           
  3223                           ;shutdown_state.c: 14:   { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);};
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _shutdown: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3227  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  3228  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  3229  0C48  1085               	bcf	5,1	;volatile
  3230  0C49  12CF               	bcf	_fault_flags,5
  3231                           
  3232                           ;shutdown_state.c: 15:   { PORTEbits.RE0 = (0); fault_flags.boostPumpBit = (0);};
  3233  0C4A  1009               	bcf	9,0	;volatile
  3234  0C4B  134F               	bcf	_fault_flags,6
  3235                           
  3236                           ;shutdown_state.c: 16:   { PORTAbits.RA2 = (1); fault_flags.dumpSolenoidBit = (1);};
  3237  0C4C  1505               	bsf	5,2	;volatile
  3238  0C4D  1450               	bsf	_fault_flags+1,0
  3239                           
  3240                           ;shutdown_state.c: 20:   enable_callback (EventDumpSolenoid, (2*(4000000/256/4/256)));
  3241  0C4E  301E               	movlw	30
  3242  0C4F  00AB               	movwf	enable_callback@time_delay
  3243  0C50  3000               	movlw	0
  3244  0C51  00AC               	movwf	enable_callback@time_delay+1
  3245  0C52  3006               	movlw	6
  3246  0C53  120A  158A  2753   	fcall	_enable_callback
  3247  0C56  0008               	return
  3248  0C57                     __end_of_shutdown:	
  3249                           
  3250                           	psect	text5
  3251  00A7                     __ptext5:	
  3252 ;; *************** function _serial_process_loop *****************
  3253 ;; Defined at:
  3254 ;;		line 114 in file "serial.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;		None
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  a               1   19[BANK0 ] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3268 ;;      Params:         0       0       0       0       0
  3269 ;;      Locals:         0       1       0       0       0
  3270 ;;      Temps:          0       1       0       0       0
  3271 ;;      Totals:         0       2       0       0       0
  3272 ;;Total ram usage:        2 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    8
  3275 ;; This function calls:
  3276 ;;		_has_data
  3277 ;;		_not_full
  3278 ;;		_pop
  3279 ;;		_push
  3280 ;;		_puts
  3281 ;; This function is called by:
  3282 ;;		_main
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function _serial_process_loop
  3288  00A7                     _serial_process_loop:	
  3289                           
  3290                           ;serial.c: 116:     if (TRMT && has_data(&outbound)) {
  3291                           
  3292                           ;incstack = 0
  3293 ;; hardware stack exceeded
  3294                           ; Regs used in _serial_process_loop: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  3295  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  3296  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  3297  00A9  1C98               	btfss	24,1	;volatile
  3298  00AA  28BD               	goto	l3689
  3299  00AB  30B4               	movlw	(low (_outbound| (0+256)))& (0+255)
  3300  00AC  120A  158A  23E1  120A  118A  	fcall	_has_data
  3301  00B1  3A00               	xorlw	0
  3302  00B2  1903               	skipnz
  3303  00B3  28BD               	goto	l3689
  3304                           
  3305                           ;serial.c: 121:         TXREG = pop(&outbound);
  3306  00B4  30B4               	movlw	(low (_outbound| (0+256)))& (0+255)
  3307  00B5  120A  118A  26FC  120A  118A  	fcall	_pop
  3308  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  3309  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  3310  00BC  0099               	movwf	25	;volatile
  3311  00BD                     l3689:	
  3312                           
  3313                           ;serial.c: 127:     if (RCIF) {
  3314  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  3315  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  3316  00BF  1E8C               	btfss	12,5	;volatile
  3317  00C0  0008               	return
  3318                           
  3319                           ;serial.c: 128:         if (OERR|| FERR) {
  3320  00C1  1898               	btfsc	24,1	;volatile
  3321  00C2  28C5               	goto	l424
  3322  00C3  1D18               	btfss	24,2	;volatile
  3323  00C4  28D0               	goto	l3697
  3324  00C5                     l424:	
  3325                           
  3326                           ;serial.c: 129:             CREN = 0;
  3327  00C5  1218               	bcf	24,4	;volatile
  3328                           
  3329                           ;serial.c: 130:             CREN = 1;
  3330  00C6  1618               	bsf	24,4	;volatile
  3331                           
  3332                           ;serial.c: 131:             puts("serial overflow");
  3333  00C7  309E               	movlw	low (STR_20| (0+32768))
  3334  00C8  00AE               	movwf	puts@str
  3335  00C9  3081               	movlw	high (STR_20| (0+32768))
  3336  00CA  00AF               	movwf	puts@str+1
  3337  00CB  120A  158A  2671  120A  118A  	fcall	_puts
  3338  00D0                     l3697:	
  3339                           
  3340                           ;serial.c: 133:         unsigned char a = RCREG;
  3341  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  3342  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  3343  00D2  081A               	movf	26,w	;volatile
  3344  00D3  00B2               	movwf	??_serial_process_loop
  3345  00D4  0832               	movf	??_serial_process_loop,w
  3346  00D5  00B3               	movwf	serial_process_loop@a
  3347                           
  3348                           ;serial.c: 134:         if (not_full(&inbound)) {
  3349  00D6  3090               	movlw	(low (_inbound| (0+256)))& (0+255)
  3350  00D7  120A  158A  24CE  120A  118A  	fcall	_not_full
  3351  00DC  3A00               	xorlw	0
  3352  00DD  1903               	skipnz
  3353  00DE  0008               	return
  3354                           
  3355                           ;serial.c: 135:             push(&inbound, a);
  3356  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  3357  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  3358  00E1  0833               	movf	serial_process_loop@a,w
  3359  00E2  00B2               	movwf	??_serial_process_loop
  3360  00E3  0832               	movf	??_serial_process_loop,w
  3361  00E4  00A7               	movwf	push@d
  3362  00E5  3090               	movlw	(low (_inbound| (0+256)))& (0+255)
  3363  00E6  120A  158A  256F   	fcall	_push
  3364  00E9  0008               	return
  3365  00EA                     __end_of_serial_process_loop:	
  3366                           
  3367                           	psect	text6
  3368  0E71                     __ptext6:	
  3369 ;; *************** function _puts *****************
  3370 ;; Defined at:
  3371 ;;		line 221 in file "serial.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  str             2   14[BANK0 ] PTR const unsigned char 
  3374 ;;		 -> STR_21(16), STR_20(16), 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  c               2   16[BANK0 ] PTR const unsigned char 
  3377 ;;		 -> STR_21(16), STR_20(16), 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  2   14[BANK0 ] int 
  3380 ;; Registers used:
  3381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3387 ;;      Params:         0       2       0       0       0
  3388 ;;      Locals:         0       2       0       0       0
  3389 ;;      Temps:          0       0       0       0       0
  3390 ;;      Totals:         0       4       0       0       0
  3391 ;;Total ram usage:        4 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    7
  3394 ;; This function calls:
  3395 ;;		_putch
  3396 ;; This function is called by:
  3397 ;;		_serial_process_loop
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           
  3402                           ;psect for function _puts
  3403  0E71                     _puts:	
  3404                           
  3405                           ;serial.c: 222:     for ( const char * c = str; *c != 0; c++){
  3406                           
  3407                           ;incstack = 0
  3408 ;; hardware stack exceeded
  3409                           ; Regs used in _puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3410  0E71  1283               	bcf	3,5	;RP0=0, select bank0
  3411  0E72  1303               	bcf	3,6	;RP1=0, select bank0
  3412  0E73  082E               	movf	puts@str,w
  3413  0E74  00B0               	movwf	puts@c
  3414  0E75  082F               	movf	puts@str+1,w
  3415  0E76  00B1               	movwf	puts@c+1
  3416  0E77                     l3509:	
  3417  0E77  0831               	movf	puts@c+1,w
  3418  0E78  00FF               	movwf	127
  3419  0E79  0830               	movf	puts@c,w
  3420  0E7A  0084               	movwf	4
  3421  0E7B  120A  158A  2000  120A  158A  	fcall	stringtab
  3422  0E80  3A00               	xorlw	0
  3423  0E81  1903               	btfsc	3,2
  3424  0E82  0008               	return
  3425                           
  3426                           ;serial.c: 223:         putch(*c);
  3427  0E83  0831               	movf	puts@c+1,w
  3428  0E84  00FF               	movwf	127
  3429  0E85  0830               	movf	puts@c,w
  3430  0E86  0084               	movwf	4
  3431  0E87  120A  158A  2000  120A  158A  	fcall	stringtab
  3432  0E8C  120A  158A  23FE  120A  158A  	fcall	_putch
  3433                           
  3434                           ;serial.c: 224:     }
  3435  0E91  3001               	movlw	1
  3436  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  3437  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  3438  0E94  07B0               	addwf	puts@c,f
  3439  0E95  1803               	skipnc
  3440  0E96  0AB1               	incf	puts@c+1,f
  3441  0E97  3000               	movlw	0
  3442  0E98  07B1               	addwf	puts@c+1,f
  3443  0E99  2E77               	goto	l3509
  3444  0E9A                     __end_of_puts:	
  3445                           
  3446                           	psect	text7
  3447  0CCE                     __ptext7:	
  3448 ;; *************** function _not_full *****************
  3449 ;; Defined at:
  3450 ;;		line 60 in file "serial_buffer.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  buff            1    wreg     PTR struct .
  3453 ;;		 -> inbound(36), 
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;  buff            1    9[BANK0 ] PTR struct .
  3456 ;;		 -> inbound(36), 
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      unsigned char 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3466 ;;      Params:         0       0       0       0       0
  3467 ;;      Locals:         0       1       0       0       0
  3468 ;;      Temps:          0       2       0       0       0
  3469 ;;      Totals:         0       3       0       0       0
  3470 ;;Total ram usage:        3 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    5
  3473 ;; This function calls:
  3474 ;;		Nothing
  3475 ;; This function is called by:
  3476 ;;		_serial_process_loop
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           
  3481                           ;psect for function _not_full
  3482  0CCE                     _not_full:	
  3483                           
  3484                           ;incstack = 0
  3485                           ; Regs used in _not_full: [wreg-fsr0h+status,2+status,0]
  3486                           ;not_full@buff stored from wreg
  3487  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  3488  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  3489  0CD0  00A9               	movwf	not_full@buff
  3490                           
  3491                           ;serial_buffer.c: 61:     return buff->length < 32;
  3492  0CD1  0829               	movf	not_full@buff,w
  3493  0CD2  3E22               	addlw	34
  3494  0CD3  0084               	movwf	4
  3495  0CD4  1783               	bsf	3,7	;select IRP bank2
  3496  0CD5  0800               	movf	0,w
  3497  0CD6  00A7               	movwf	??_not_full
  3498  0CD7  0A84               	incf	4,f
  3499  0CD8  0800               	movf	0,w
  3500  0CD9  00A8               	movwf	??_not_full+1
  3501  0CDA  3000               	movlw	0
  3502  0CDB  0228               	subwf	??_not_full+1,w
  3503  0CDC  3020               	movlw	32
  3504  0CDD  1903               	skipnz
  3505  0CDE  0227               	subwf	??_not_full,w
  3506  0CDF  1803               	btfsc	3,0
  3507  0CE0  2CE3               	goto	u2370
  3508  0CE1  3001               	movlw	1
  3509  0CE2  0008               	return
  3510  0CE3                     u2370:	
  3511  0CE3  3000               	movlw	0
  3512  0CE4  0008               	return
  3513  0CE5                     __end_of_not_full:	
  3514                           
  3515                           	psect	text8
  3516  0612                     __ptext8:	
  3517 ;; *************** function _receiveMessage *****************
  3518 ;; Defined at:
  3519 ;;		line 230 in file "serial.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;		None
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  c               1   16[BANK0 ] unsigned char 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      PTR unsigned char 
  3526 ;; Registers used:
  3527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3533 ;;      Params:         0       0       0       0       0
  3534 ;;      Locals:         0       1       0       0       0
  3535 ;;      Temps:          0       1       0       0       0
  3536 ;;      Totals:         0       2       0       0       0
  3537 ;;Total ram usage:        2 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    6
  3540 ;; This function calls:
  3541 ;;		_has_data
  3542 ;;		_pop
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           
  3549                           ;psect for function _receiveMessage
  3550  0612                     _receiveMessage:	
  3551                           
  3552                           ;serial.c: 232:   static char message[10];;serial.c: 233:   char c;;serial.c: 234:   sta
      +                          tic int len = 0;;serial.c: 236:   if (!has_data(&inbound)) {
  3553                           
  3554                           ;incstack = 0
  3555                           ; Regs used in _receiveMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3556  0612  3090               	movlw	(low (_inbound| (0+256)))& (0+255)
  3557  0613  120A  158A  23E1  120A  118A  	fcall	_has_data
  3558  0618  3A00               	xorlw	0
  3559  0619  1903               	btfsc	3,2
  3560  061A  2E25               	goto	l3611
  3561  061B  2E27               	goto	l3615
  3562  061C                     l3625:	
  3563  061C  307B               	movlw	123
  3564  061D  0630               	xorwf	receiveMessage@c,w
  3565  061E  1D03               	btfss	3,2
  3566  061F  2E25               	goto	l3611
  3567  0620  2E39               	goto	l3631
  3568  0621                     l3637:	
  3569                           
  3570                           ;serial.c: 257:     len = 0;
  3571  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3572  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3573  0623  01CD               	clrf	receiveMessage@len
  3574  0624  01CE               	clrf	receiveMessage@len+1
  3575  0625                     l3611:	
  3576                           
  3577                           ;serial.c: 237:       return 0;
  3578  0625  3000               	movlw	0
  3579  0626  0008               	return
  3580  0627                     l3615:	
  3581                           
  3582                           ;serial.c: 240:   c = pop(&inbound);
  3583  0627  3090               	movlw	(low (_inbound| (0+256)))& (0+255)
  3584  0628  120A  118A  26FC  120A  118A  	fcall	_pop
  3585  062D  1283               	bcf	3,5	;RP0=0, select bank0
  3586  062E  1303               	bcf	3,6	;RP1=0, select bank0
  3587  062F  00AF               	movwf	??_receiveMessage
  3588  0630  082F               	movf	??_receiveMessage,w
  3589  0631  00B0               	movwf	receiveMessage@c
  3590                           
  3591                           ;serial.c: 242:   if (0 == c) {
  3592  0632  0830               	movf	receiveMessage@c,w
  3593  0633  1903               	btfsc	3,2
  3594  0634  2E25               	goto	l3611
  3595                           
  3596                           ;serial.c: 247:   if ((0 == len) && (c != '{')) {
  3597  0635  084D               	movf	receiveMessage@len,w
  3598  0636  044E               	iorwf	receiveMessage@len+1,w
  3599  0637  1903               	btfsc	3,2
  3600  0638  2E1C               	goto	l3625
  3601  0639                     l3631:	
  3602                           
  3603                           ;serial.c: 252:   message[len] = c;
  3604  0639  0830               	movf	receiveMessage@c,w
  3605  063A  00AF               	movwf	??_receiveMessage
  3606  063B  084D               	movf	receiveMessage@len,w
  3607  063C  3EDF               	addlw	(low (receiveMessage@message| 0))& (0+255)
  3608  063D  0084               	movwf	4
  3609  063E  082F               	movf	??_receiveMessage,w
  3610  063F  1383               	bcf	3,7	;select IRP bank1
  3611  0640  0080               	movwf	0
  3612                           
  3613                           ;serial.c: 254:   len++;
  3614  0641  3001               	movlw	1
  3615  0642  07CD               	addwf	receiveMessage@len,f
  3616  0643  1803               	skipnc
  3617  0644  0ACE               	incf	receiveMessage@len+1,f
  3618  0645  3000               	movlw	0
  3619  0646  07CE               	addwf	receiveMessage@len+1,f
  3620                           
  3621                           ;serial.c: 255:   if (len >= 10) {
  3622  0647  084E               	movf	receiveMessage@len+1,w
  3623  0648  3A80               	xorlw	128
  3624  0649  00FF               	movwf	127
  3625  064A  3080               	movlw	128
  3626  064B  027F               	subwf	127,w
  3627  064C  1D03               	skipz
  3628  064D  2E50               	goto	u2485
  3629  064E  300A               	movlw	10
  3630  064F  024D               	subwf	receiveMessage@len,w
  3631  0650                     u2485:	
  3632  0650  1803               	btfsc	3,0
  3633  0651  2E21               	goto	l3637
  3634                           
  3635                           ;serial.c: 260:   if ('}' == c) {
  3636  0652  307D               	movlw	125
  3637  0653  1283               	bcf	3,5	;RP0=0, select bank0
  3638  0654  1303               	bcf	3,6	;RP1=0, select bank0
  3639  0655  0630               	xorwf	receiveMessage@c,w
  3640  0656  1D03               	btfss	3,2
  3641  0657  2E25               	goto	l3611
  3642                           
  3643                           ;serial.c: 261:     message[len] = 0;
  3644  0658  084D               	movf	receiveMessage@len,w
  3645  0659  3EDF               	addlw	(low (receiveMessage@message| 0))& (0+255)
  3646  065A  0084               	movwf	4
  3647  065B  1383               	bcf	3,7	;select IRP bank1
  3648  065C  0180               	clrf	0
  3649                           
  3650                           ;serial.c: 263:     len = 0;
  3651  065D  01CD               	clrf	receiveMessage@len
  3652  065E  01CE               	clrf	receiveMessage@len+1
  3653                           
  3654                           ;serial.c: 265:     return message;
  3655  065F  30DF               	movlw	(low (receiveMessage@message| 0))& (0+255)
  3656  0660  0008               	return
  3657  0661                     __end_of_receiveMessage:	
  3658                           
  3659                           	psect	text9
  3660  06FC                     __ptext9:	
  3661 ;; *************** function _pop *****************
  3662 ;; Defined at:
  3663 ;;		line 27 in file "serial_buffer.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  buff            1    wreg     PTR struct .
  3666 ;;		 -> inbound(36), outbound(36), 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  buff            1   14[BANK0 ] PTR struct .
  3669 ;;		 -> inbound(36), outbound(36), 
  3670 ;;  d               1   13[BANK0 ] unsigned char 
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      unsigned char 
  3673 ;; Registers used:
  3674 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3680 ;;      Params:         0       0       0       0       0
  3681 ;;      Locals:         0       2       0       0       0
  3682 ;;      Temps:          0       6       0       0       0
  3683 ;;      Totals:         0       8       0       0       0
  3684 ;;Total ram usage:        8 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    5
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_serial_process_loop
  3691 ;;		_receiveMessage
  3692 ;;		_sendChars
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           
  3697                           ;psect for function _pop
  3698  06FC                     _pop:	
  3699                           
  3700                           ;incstack = 0
  3701                           ; Regs used in _pop: [wreg-fsr0h+status,2+status,0]
  3702                           ;pop@buff stored from wreg
  3703  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  3704  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  3705  06FE  00AE               	movwf	pop@buff
  3706                           
  3707                           ;serial_buffer.c: 28:     unsigned char d;;serial_buffer.c: 32:     if (buff->length == 
      +                          0) {
  3708  06FF  082E               	movf	pop@buff,w
  3709  0700  3E22               	addlw	34
  3710  0701  0084               	movwf	4
  3711  0702  1783               	bsf	3,7	;select IRP bank2
  3712  0703  0800               	movf	0,w
  3713  0704  00A7               	movwf	??_pop
  3714  0705  0A84               	incf	4,f
  3715  0706  0800               	movf	0,w
  3716  0707  00A8               	movwf	??_pop+1
  3717  0708  0827               	movf	??_pop,w
  3718  0709  0428               	iorwf	??_pop+1,w
  3719  070A  1D03               	btfss	3,2
  3720  070B  2F0E               	goto	l490
  3721                           
  3722                           ;serial_buffer.c: 34:         return 0;
  3723  070C  3000               	movlw	0
  3724  070D  0008               	return
  3725  070E                     l490:	
  3726                           ;serial_buffer.c: 35:     }
  3727                           
  3728                           
  3729                           ;serial_buffer.c: 37:     GIE = 0;
  3730  070E  138B               	bcf	11,7	;volatile
  3731                           
  3732                           ;serial_buffer.c: 38:     d = buff->data[buff->start];
  3733  070F  082E               	movf	pop@buff,w
  3734  0710  3E20               	addlw	32
  3735  0711  0084               	movwf	4
  3736  0712  0800               	movf	0,w
  3737  0713  072E               	addwf	pop@buff,w
  3738  0714  00A7               	movwf	??_pop
  3739  0715  0827               	movf	??_pop,w
  3740  0716  0084               	movwf	4
  3741  0717  0800               	movf	0,w
  3742  0718  00A8               	movwf	??_pop+1
  3743  0719  0828               	movf	??_pop+1,w
  3744  071A  00AD               	movwf	pop@d
  3745                           
  3746                           ;serial_buffer.c: 39:     buff->length--;
  3747  071B  082E               	movf	pop@buff,w
  3748  071C  3E22               	addlw	34
  3749  071D  0084               	movwf	4
  3750  071E  3001               	movlw	1
  3751  071F  0280               	subwf	0,f
  3752  0720  0F84               	incfsz	4,f
  3753  0721  3000               	movlw	0
  3754  0722  1C03               	skipc
  3755  0723  0380               	decf	0,f
  3756  0724  0280               	subwf	0,f
  3757  0725  0384               	decf	4,f
  3758                           
  3759                           ;serial_buffer.c: 40:     buff->start = (buff->start + 1) % 32;
  3760  0726  082E               	movf	pop@buff,w
  3761  0727  3E20               	addlw	32
  3762  0728  0084               	movwf	4
  3763  0729  0800               	movf	0,w
  3764  072A  00A7               	movwf	??_pop
  3765  072B  0A84               	incf	4,f
  3766  072C  0800               	movf	0,w
  3767  072D  00A8               	movwf	??_pop+1
  3768  072E  0827               	movf	??_pop,w
  3769  072F  3E01               	addlw	1
  3770  0730  00A9               	movwf	??_pop+2
  3771  0731  0828               	movf	??_pop+1,w
  3772  0732  1803               	skipnc
  3773  0733  3E01               	addlw	1
  3774  0734  3E00               	addlw	0
  3775  0735  00AA               	movwf	??_pop+3
  3776  0736  301F               	movlw	31
  3777  0737  0529               	andwf	??_pop+2,w
  3778  0738  00AB               	movwf	??_pop+4
  3779  0739  3000               	movlw	0
  3780  073A  052A               	andwf	??_pop+3,w
  3781  073B  00AC               	movwf	??_pop+5
  3782  073C  082E               	movf	pop@buff,w
  3783  073D  3E20               	addlw	32
  3784  073E  0084               	movwf	4
  3785  073F  082B               	movf	??_pop+4,w
  3786  0740  0080               	movwf	0
  3787  0741  0A84               	incf	4,f
  3788  0742  082C               	movf	??_pop+5,w
  3789  0743  0080               	movwf	0
  3790                           
  3791                           ;serial_buffer.c: 41:     GIE = 1;
  3792  0744  178B               	bsf	11,7	;volatile
  3793                           
  3794                           ;serial_buffer.c: 43:     return d;
  3795  0745  082D               	movf	pop@d,w
  3796  0746  0008               	return
  3797  0747                     __end_of_pop:	
  3798                           
  3799                           	psect	text10
  3800  0BE1                     __ptext10:	
  3801 ;; *************** function _has_data *****************
  3802 ;; Defined at:
  3803 ;;		line 51 in file "serial_buffer.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  buff            1    wreg     PTR struct .
  3806 ;;		 -> inbound(36), outbound(36), 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  buff            1    7[BANK0 ] PTR struct .
  3809 ;;		 -> inbound(36), outbound(36), 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      unsigned char 
  3812 ;; Registers used:
  3813 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3819 ;;      Params:         0       0       0       0       0
  3820 ;;      Locals:         0       1       0       0       0
  3821 ;;      Temps:          0       0       0       0       0
  3822 ;;      Totals:         0       1       0       0       0
  3823 ;;Total ram usage:        1 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    5
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_serial_process_loop
  3830 ;;		_receiveMessage
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           
  3835                           ;psect for function _has_data
  3836  0BE1                     _has_data:	
  3837                           
  3838                           ;incstack = 0
  3839                           ; Regs used in _has_data: [wreg-fsr0h+status,2+status,0]
  3840                           ;has_data@buff stored from wreg
  3841  0BE1  1283               	bcf	3,5	;RP0=0, select bank0
  3842  0BE2  1303               	bcf	3,6	;RP1=0, select bank0
  3843  0BE3  00A7               	movwf	has_data@buff
  3844                           
  3845                           ;serial_buffer.c: 52:     return buff->length;
  3846  0BE4  0827               	movf	has_data@buff,w
  3847  0BE5  3E22               	addlw	34
  3848  0BE6  0084               	movwf	4
  3849  0BE7  1783               	bsf	3,7	;select IRP bank2
  3850  0BE8  0800               	movf	0,w
  3851  0BE9  0008               	return
  3852  0BEA                     __end_of_has_data:	
  3853                           
  3854                           	psect	text11
  3855  0D91                     __ptext11:	
  3856 ;; *************** function _pump_run *****************
  3857 ;; Defined at:
  3858 ;;		line 4 in file "pump_run.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3872 ;;      Params:         0       0       0       0       0
  3873 ;;      Locals:         0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0
  3875 ;;      Totals:         0       0       0       0       0
  3876 ;;Total ram usage:        0 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    8
  3879 ;; This function calls:
  3880 ;;		_clear_callback
  3881 ;;		_enable_callback
  3882 ;;		_monitor_pump_run
  3883 ;; This function is called by:
  3884 ;;		_main
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           
  3889                           ;psect for function _pump_run
  3890  0D91                     _pump_run:	
  3891                           
  3892                           ;pump_run.c: 15:    monitor_pump_run();
  3893                           
  3894                           ;incstack = 0
  3895 ;; hardware stack exceeded
  3896                           ; Regs used in _pump_run: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3897  0D91  120A  118A  244D  120A  158A  	fcall	_monitor_pump_run
  3898                           
  3899                           ;pump_run.c: 17:  if (!( PORTAbits.RA5)) {
  3900  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  3901  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  3902  0D98  1A85               	btfsc	5,5	;volatile
  3903  0D99  2D9F               	goto	l296
  3904                           
  3905                           ;pump_run.c: 18:       clear_callback (EventLowFogPressure);
  3906  0D9A  3003               	movlw	3
  3907  0D9B  120A  158A  2426   	fcall	_clear_callback
  3908                           
  3909                           ;pump_run.c: 19:   } else {
  3910  0D9E  0008               	return
  3911  0D9F                     l296:	
  3912                           
  3913                           ;pump_run.c: 20:     if (!timer_events[EventLowFogPressure].active) {
  3914  0D9F  1683               	bsf	3,5	;RP0=1, select bank1
  3915  0DA0  1303               	bcf	3,6	;RP1=0, select bank1
  3916  0DA1  1837               	btfsc	(_timer_events^(0+128)+23),0	;volatile
  3917  0DA2  0008               	return
  3918                           
  3919                           ;pump_run.c: 21:       timer_events[EventLowFogPressure].flag_bit = 1;
  3920  0DA3  14B7               	bsf	(_timer_events^(0+128)+23),1	;volatile
  3921                           
  3922                           ;pump_run.c: 22:       timer_events[EventLowFogPressure].flag_data = (15*(4000000/256/4/
      +                          256));
  3923  0DA4  3000               	movlw	0
  3924  0DA5  00BA               	movwf	((_timer_events+1)^(0+128)+25)	;volatile
  3925  0DA6  30E1               	movlw	225
  3926  0DA7  00B9               	movwf	(_timer_events^(0+128)+25)	;volatile
  3927                           
  3928                           ;pump_run.c: 23:       enable_callback (EventLowFogPressure, (15*(4000000/256/4/256)));
  3929  0DA8  30E1               	movlw	225
  3930  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  3931  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  3932  0DAB  00AB               	movwf	enable_callback@time_delay
  3933  0DAC  3000               	movlw	0
  3934  0DAD  00AC               	movwf	enable_callback@time_delay+1
  3935  0DAE  3003               	movlw	3
  3936  0DAF  120A  158A  2753   	fcall	_enable_callback
  3937  0DB2  0008               	return
  3938  0DB3                     __end_of_pump_run:	
  3939                           
  3940                           	psect	text12
  3941  044D                     __ptext12:	
  3942 ;; *************** function _monitor_pump_run *****************
  3943 ;; Defined at:
  3944 ;;		line 38 in file "pump_run.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;		None
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;		None
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      void 
  3951 ;; Registers used:
  3952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3958 ;;      Params:         0       0       0       0       0
  3959 ;;      Locals:         0       0       0       0       0
  3960 ;;      Temps:          0       1       0       0       0
  3961 ;;      Totals:         0       1       0       0       0
  3962 ;;Total ram usage:        1 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; Hardware stack levels required when called:    7
  3965 ;; This function calls:
  3966 ;;		_clear_callback
  3967 ;;		_enable_callback
  3968 ;; This function is called by:
  3969 ;;		_pump_run
  3970 ;;		_start_main
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           
  3975                           ;psect for function _monitor_pump_run
  3976  044D                     _monitor_pump_run:	
  3977                           
  3978                           ;pump_run.c: 41:     if (( (!PORTCbits.RC1) || (combinedZones != 0) )) {
  3979                           
  3980                           ;incstack = 0
  3981 ;; hardware stack exceeded
  3982                           ; Regs used in _monitor_pump_run: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3983  044D  1283               	bcf	3,5	;RP0=0, select bank0
  3984  044E  1303               	bcf	3,6	;RP1=0, select bank0
  3985  044F  1C87               	btfss	7,1	;volatile
  3986  0450  2C54               	goto	l2777
  3987  0451  085F               	movf	_combinedZones,w
  3988  0452  1903               	btfsc	3,2
  3989  0453  2C5B               	goto	l302
  3990  0454                     l2777:	
  3991                           
  3992                           ;pump_run.c: 42:       clear_callback (EventRunSignalDebounce);
  3993  0454  3007               	movlw	7
  3994  0455  120A  158A  2426  120A  118A  	fcall	_clear_callback
  3995                           
  3996                           ;pump_run.c: 44:   } else {
  3997  045A  2C74               	goto	l2785
  3998  045B                     l302:	
  3999                           
  4000                           ;pump_run.c: 46:        if (!timer_events[EventRunSignalDebounce].active) {
  4001  045B  1683               	bsf	3,5	;RP0=1, select bank1
  4002  045C  1303               	bcf	3,6	;RP1=0, select bank1
  4003  045D  1853               	btfsc	(_timer_events^(0+128)+51),0	;volatile
  4004  045E  2C74               	goto	l2785
  4005                           
  4006                           ;pump_run.c: 47:       timer_events[EventRunSignalDebounce].flag_bit = 0;
  4007  045F  10D3               	bcf	(_timer_events^(0+128)+51),1	;volatile
  4008                           
  4009                           ;pump_run.c: 48:       timer_events[EventRunSignalDebounce].next_state = shutdownState;
  4010  0460  3001               	movlw	1
  4011  0461  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0462  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0463  00AF               	movwf	??_monitor_pump_run
  4014  0464  082F               	movf	??_monitor_pump_run,w
  4015  0465  1683               	bsf	3,5	;RP0=1, select bank1
  4016  0466  1303               	bcf	3,6	;RP1=0, select bank1
  4017  0467  00D4               	movwf	(_timer_events^(0+128)+52)	;volatile
  4018                           
  4019                           ;pump_run.c: 49:       enable_callback (EventRunSignalDebounce, ((4000000/256/4/256)/2))
      +                          ;
  4020  0468  3007               	movlw	7
  4021  0469  1283               	bcf	3,5	;RP0=0, select bank0
  4022  046A  1303               	bcf	3,6	;RP1=0, select bank0
  4023  046B  00AB               	movwf	enable_callback@time_delay
  4024  046C  3000               	movlw	0
  4025  046D  00AC               	movwf	enable_callback@time_delay+1
  4026  046E  3007               	movlw	7
  4027  046F  120A  158A  2753  120A  118A  	fcall	_enable_callback
  4028  0474                     l2785:	
  4029                           
  4030                           ;pump_run.c: 55:   if (( !PORTCbits.RC2)) {
  4031  0474  1283               	bcf	3,5	;RP0=0, select bank0
  4032  0475  1303               	bcf	3,6	;RP1=0, select bank0
  4033  0476  1907               	btfsc	7,2	;volatile
  4034  0477  2C91               	goto	l2795
  4035                           
  4036                           ;pump_run.c: 57:        if (!timer_events[EventPODebounce].active) {
  4037  0478  1683               	bsf	3,5	;RP0=1, select bank1
  4038  0479  1303               	bcf	3,6	;RP1=0, select bank1
  4039  047A  185A               	btfsc	(_timer_events^(0+128)+58),0	;volatile
  4040  047B  2C91               	goto	l2795
  4041                           
  4042                           ;pump_run.c: 58:       timer_events[EventPODebounce].flag_bit = 0;
  4043  047C  10DA               	bcf	(_timer_events^(0+128)+58),1	;volatile
  4044                           
  4045                           ;pump_run.c: 59:       timer_events[EventPODebounce].next_state = shutdownState;
  4046  047D  3001               	movlw	1
  4047  047E  1283               	bcf	3,5	;RP0=0, select bank0
  4048  047F  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0480  00AF               	movwf	??_monitor_pump_run
  4050  0481  082F               	movf	??_monitor_pump_run,w
  4051  0482  1683               	bsf	3,5	;RP0=1, select bank1
  4052  0483  1303               	bcf	3,6	;RP1=0, select bank1
  4053  0484  00DB               	movwf	(_timer_events^(0+128)+59)	;volatile
  4054                           
  4055                           ;pump_run.c: 60:       enable_callback (EventPODebounce, ((4000000/256/4/256)/2));
  4056  0485  3007               	movlw	7
  4057  0486  1283               	bcf	3,5	;RP0=0, select bank0
  4058  0487  1303               	bcf	3,6	;RP1=0, select bank0
  4059  0488  00AB               	movwf	enable_callback@time_delay
  4060  0489  3000               	movlw	0
  4061  048A  00AC               	movwf	enable_callback@time_delay+1
  4062  048B  3008               	movlw	8
  4063  048C  120A  158A  2753  120A  118A  	fcall	_enable_callback
  4064  0491                     l2795:	
  4065                           
  4066                           ;pump_run.c: 67:   if (!( PORTAbits.RA4)) {
  4067  0491  1283               	bcf	3,5	;RP0=0, select bank0
  4068  0492  1303               	bcf	3,6	;RP1=0, select bank0
  4069  0493  1A05               	btfsc	5,4	;volatile
  4070  0494  2C9F               	goto	l309
  4071                           
  4072                           ;pump_run.c: 68:        clear_callback (EventLowWaterLevel);
  4073  0495  3000               	movlw	0
  4074  0496  120A  158A  2426  120A  118A  	fcall	_clear_callback
  4075                           
  4076                           ;pump_run.c: 69:       fault_flags.lwl_fault = 0;
  4077  049B  1283               	bcf	3,5	;RP0=0, select bank0
  4078  049C  1303               	bcf	3,6	;RP1=0, select bank0
  4079  049D  104F               	bcf	_fault_flags,0
  4080                           
  4081                           ;pump_run.c: 70:   } else {
  4082  049E  2CB2               	goto	l2807
  4083  049F                     l309:	
  4084                           
  4085                           ;pump_run.c: 71:     if (!timer_events[EventLowWaterLevel].active) {
  4086  049F  1683               	bsf	3,5	;RP0=1, select bank1
  4087  04A0  1303               	bcf	3,6	;RP1=0, select bank1
  4088  04A1  1822               	btfsc	(_timer_events^(0+128)+2),0	;volatile
  4089  04A2  2CB2               	goto	l2807
  4090                           
  4091                           ;pump_run.c: 72:       timer_events[EventLowWaterLevel].flag_bit = 1;
  4092  04A3  14A2               	bsf	(_timer_events^(0+128)+2),1	;volatile
  4093                           
  4094                           ;pump_run.c: 73:       timer_events[EventLowWaterLevel].flag_data = 0;
  4095  04A4  01A4               	clrf	(_timer_events^(0+128)+4)	;volatile
  4096  04A5  01A5               	clrf	((_timer_events+1)^(0+128)+4)	;volatile
  4097                           
  4098                           ;pump_run.c: 74:       enable_callback (EventLowWaterLevel, (3*(4000000/256/4/256)));
  4099  04A6  302D               	movlw	45
  4100  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  4101  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  4102  04A9  00AB               	movwf	enable_callback@time_delay
  4103  04AA  3000               	movlw	0
  4104  04AB  00AC               	movwf	enable_callback@time_delay+1
  4105  04AC  3000               	movlw	0
  4106  04AD  120A  158A  2753  120A  118A  	fcall	_enable_callback
  4107  04B2                     l2807:	
  4108                           
  4109                           ;pump_run.c: 79:   if (fault_flags.wpOkBit) {
  4110  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  4111  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  4112  04B4  1E4F               	btfss	_fault_flags,4
  4113  04B5  2CBB               	goto	l312
  4114                           
  4115                           ;pump_run.c: 80:       clear_callback (EventLowWaterPressure);
  4116  04B6  3001               	movlw	1
  4117  04B7  120A  158A  2426   	fcall	_clear_callback
  4118                           
  4119                           ;pump_run.c: 81:   }else {
  4120  04BA  0008               	return
  4121  04BB                     l312:	
  4122                           
  4123                           ;pump_run.c: 82:     if (!timer_events[EventLowWaterPressure].active) {
  4124  04BB  1683               	bsf	3,5	;RP0=1, select bank1
  4125  04BC  1303               	bcf	3,6	;RP1=0, select bank1
  4126  04BD  1829               	btfsc	(_timer_events^(0+128)+9),0	;volatile
  4127  04BE  0008               	return
  4128                           
  4129                           ;pump_run.c: 83:       timer_events[EventLowWaterPressure].flag_bit = 1;
  4130  04BF  14A9               	bsf	(_timer_events^(0+128)+9),1	;volatile
  4131                           
  4132                           ;pump_run.c: 84:       timer_events[EventLowWaterPressure].next_state = shutdownState;
  4133  04C0  3001               	movlw	1
  4134  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  4135  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  4136  04C3  00AF               	movwf	??_monitor_pump_run
  4137  04C4  082F               	movf	??_monitor_pump_run,w
  4138  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  4139  04C6  1303               	bcf	3,6	;RP1=0, select bank1
  4140  04C7  00AA               	movwf	(_timer_events^(0+128)+10)	;volatile
  4141                           
  4142                           ;pump_run.c: 85:       enable_callback (EventLowWaterPressure, (3*(4000000/256/4/256)));
  4143  04C8  302D               	movlw	45
  4144  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  4145  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  4146  04CB  00AB               	movwf	enable_callback@time_delay
  4147  04CC  3000               	movlw	0
  4148  04CD  00AC               	movwf	enable_callback@time_delay+1
  4149  04CE  3001               	movlw	1
  4150  04CF  120A  158A  2753   	fcall	_enable_callback
  4151  04D2  0008               	return
  4152  04D3                     __end_of_monitor_pump_run:	
  4153                           
  4154                           	psect	text13
  4155  0661                     __ptext13:	
  4156 ;; *************** function _process_message *****************
  4157 ;; Defined at:
  4158 ;;		line 104 in file "serial_message.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  inmessage       1    wreg     PTR unsigned char 
  4161 ;;		 -> receiveMessage@message(10), NULL(0), 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  inmessage       1   25[BANK0 ] PTR unsigned char 
  4164 ;;		 -> receiveMessage@message(10), NULL(0), 
  4165 ;;  address         1    0        unsigned char 
  4166 ;;  msgType         1   23[BANK0 ] unsigned char 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4176 ;;      Params:         0       0       0       0       0
  4177 ;;      Locals:         0       3       0       0       0
  4178 ;;      Temps:          0       2       0       0       0
  4179 ;;      Totals:         0       5       0       0       0
  4180 ;;Total ram usage:        5 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:   10
  4183 ;; This function calls:
  4184 ;;		_process_get_status_message
  4185 ;;		_process_reset_pump
  4186 ;;		_process_set_address_message
  4187 ;;		_process_set_zones_message
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _process_message
  4195  0661                     _process_message:	
  4196                           
  4197                           ;incstack = 0
  4198 ;; hardware stack exceeded
  4199                           ; Regs used in _process_message: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4200                           ;process_message@inmessage stored from wreg
  4201  0661  1283               	bcf	3,5	;RP0=0, select bank0
  4202  0662  1303               	bcf	3,6	;RP1=0, select bank0
  4203  0663  00B9               	movwf	process_message@inmessage
  4204                           
  4205                           ;serial_message.c: 112:     if (inmessage[1] == '0' || inmessage[1] == address) {
  4206  0664  0A39               	incf	process_message@inmessage,w
  4207  0665  0084               	movwf	4
  4208  0666  3030               	movlw	48
  4209  0667  1383               	bcf	3,7	;select IRP bank0
  4210  0668  0600               	xorwf	0,w
  4211  0669  1903               	btfsc	3,2
  4212  066A  2E70               	goto	l3663
  4213  066B  0A39               	incf	process_message@inmessage,w
  4214  066C  0084               	movwf	4
  4215  066D  0800               	movf	0,w
  4216  066E  1D03               	btfss	3,2
  4217  066F  0008               	return
  4218  0670                     l3663:	
  4219                           
  4220                           ;serial_message.c: 114:         msgType = inmessage[2];
  4221  0670  0839               	movf	process_message@inmessage,w
  4222  0671  3E02               	addlw	2
  4223  0672  0084               	movwf	4
  4224  0673  0800               	movf	0,w
  4225  0674  00B5               	movwf	??_process_message
  4226  0675  0835               	movf	??_process_message,w
  4227  0676  00B7               	movwf	process_message@msgType
  4228                           
  4229                           ;serial_message.c: 116:         switch(msgType){
  4230  0677  2E8C               	goto	l3675
  4231  0678                     l3665:	
  4232                           
  4233                           ;serial_message.c: 119:                 process_set_zones_message(inmessage);
  4234  0678  0839               	movf	process_message@inmessage,w
  4235  0679  120A  158A  27C1   	fcall	_process_set_zones_message
  4236                           
  4237                           ;serial_message.c: 120:                 break;
  4238  067C  0008               	return
  4239  067D                     l3667:	
  4240                           
  4241                           ;serial_message.c: 124:                 process_get_status_message(inmessage);
  4242  067D  0839               	movf	process_message@inmessage,w
  4243  067E  120A  158A  2517   	fcall	_process_get_status_message
  4244                           
  4245                           ;serial_message.c: 125:                 break;
  4246  0681  0008               	return
  4247  0682                     l3669:	
  4248                           
  4249                           ;serial_message.c: 129:                 process_set_address_message(inmessage);
  4250  0682  0839               	movf	process_message@inmessage,w
  4251  0683  120A  118A  20EA   	fcall	_process_set_address_message
  4252                           
  4253                           ;serial_message.c: 130:                 break;
  4254  0686  0008               	return
  4255  0687                     l3671:	
  4256                           
  4257                           ;serial_message.c: 141:                 process_reset_pump(inmessage);
  4258  0687  0839               	movf	process_message@inmessage,w
  4259  0688  120A  158A  2533   	fcall	_process_reset_pump
  4260                           
  4261                           ;serial_message.c: 142:                 break;
  4262  068B  0008               	return
  4263  068C                     l3675:	
  4264  068C  0837               	movf	process_message@msgType,w
  4265  068D  00B5               	movwf	??_process_message
  4266  068E  01B6               	clrf	??_process_message+1
  4267                           
  4268                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4269                           ; Switch size 1, requested type "simple"
  4270                           ; Number of cases is 1, Range of values is 0 to 0
  4271                           ; switch strategies available:
  4272                           ; Name         Instructions Cycles
  4273                           ; simple_byte            4     3 (average)
  4274                           ; direct_byte           11     8 (fixed)
  4275                           ; jumptable            260     6 (fixed)
  4276                           ;	Chosen strategy is simple_byte
  4277  068F  0836               	movf	??_process_message+1,w
  4278  0690  3A00               	xorlw	0	; case 0
  4279  0691  1903               	skipnz
  4280  0692  2E94               	goto	l3895
  4281  0693  2EAE               	goto	l561
  4282  0694                     l3895:	
  4283                           
  4284                           ; Switch size 1, requested type "simple"
  4285                           ; Number of cases is 8, Range of values is 65 to 115
  4286                           ; switch strategies available:
  4287                           ; Name         Instructions Cycles
  4288                           ; simple_byte           25    13 (average)
  4289                           ; direct_byte          164    11 (fixed)
  4290                           ; jumptable            263     9 (fixed)
  4291                           ;	Chosen strategy is simple_byte
  4292  0694  0835               	movf	??_process_message,w
  4293  0695  3A41               	xorlw	65	; case 65
  4294  0696  1903               	skipnz
  4295  0697  2E82               	goto	l3669
  4296  0698  3A06               	xorlw	6	; case 71
  4297  0699  1903               	skipnz
  4298  069A  2E7D               	goto	l3667
  4299  069B  3A0A               	xorlw	10	; case 77
  4300  069C  1903               	skipnz
  4301  069D  2E87               	goto	l3671
  4302  069E  3A1E               	xorlw	30	; case 83
  4303  069F  1903               	skipnz
  4304  06A0  2E78               	goto	l3665
  4305  06A1  3A32               	xorlw	50	; case 97
  4306  06A2  1903               	skipnz
  4307  06A3  2E82               	goto	l3669
  4308  06A4  3A06               	xorlw	6	; case 103
  4309  06A5  1903               	skipnz
  4310  06A6  2E7D               	goto	l3667
  4311  06A7  3A0A               	xorlw	10	; case 109
  4312  06A8  1903               	skipnz
  4313  06A9  2E87               	goto	l3671
  4314  06AA  3A1E               	xorlw	30	; case 115
  4315  06AB  1903               	skipnz
  4316  06AC  2E78               	goto	l3665
  4317  06AD  2EAE               	goto	l561
  4318  06AE                     l561:	
  4319  06AE  0008               	return
  4320  06AF                     __end_of_process_message:	
  4321                           
  4322                           	psect	text14
  4323  0FC1                     __ptext14:	
  4324 ;; *************** function _process_set_zones_message *****************
  4325 ;; Defined at:
  4326 ;;		line 65 in file "serial_message.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  inmessage       1    wreg     PTR unsigned char 
  4329 ;;		 -> receiveMessage@message(10), NULL(0), 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  inmessage       1   20[BANK0 ] PTR unsigned char 
  4332 ;;		 -> receiveMessage@message(10), NULL(0), 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      void 
  4335 ;; Registers used:
  4336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4342 ;;      Params:         0       0       0       0       0
  4343 ;;      Locals:         0       1       0       0       0
  4344 ;;      Temps:          0       2       0       0       0
  4345 ;;      Totals:         0       3       0       0       0
  4346 ;;Total ram usage:        3 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    8
  4349 ;; This function calls:
  4350 ;;		_combineZones
  4351 ;;		_output_message
  4352 ;;		_setBaseMessage
  4353 ;;		_xtochar
  4354 ;; This function is called by:
  4355 ;;		_process_message
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function _process_set_zones_message
  4361  0FC1                     _process_set_zones_message:	
  4362                           
  4363                           ;incstack = 0
  4364 ;; hardware stack exceeded
  4365                           ; Regs used in _process_set_zones_message: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  4366                           ;process_set_zones_message@inmessage stored from wreg
  4367  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  4368  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  4369  0FC3  00B4               	movwf	process_set_zones_message@inmessage
  4370                           
  4371                           ;serial_message.c: 66:     commsZones = (xtochar(inmessage[3]) << 4) + xtochar(inmessage
      +                          [4]);
  4372  0FC4  0834               	movf	process_set_zones_message@inmessage,w
  4373  0FC5  3E03               	addlw	3
  4374  0FC6  0084               	movwf	4
  4375  0FC7  1383               	bcf	3,7	;select IRP bank0
  4376  0FC8  0800               	movf	0,w
  4377  0FC9  120A  158A  25F9  120A  158A  	fcall	_xtochar
  4378  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  4379  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  4380  0FD0  00B2               	movwf	??_process_set_zones_message
  4381  0FD1  3004               	movlw	4
  4382  0FD2                     u2395:	
  4383  0FD2  1003               	clrc
  4384  0FD3  0DB2               	rlf	??_process_set_zones_message,f
  4385  0FD4  3EFF               	addlw	-1
  4386  0FD5  1D03               	skipz
  4387  0FD6  2FD2               	goto	u2395
  4388  0FD7  0834               	movf	process_set_zones_message@inmessage,w
  4389  0FD8  3E04               	addlw	4
  4390  0FD9  0084               	movwf	4
  4391  0FDA  1383               	bcf	3,7	;select IRP bank0
  4392  0FDB  0800               	movf	0,w
  4393  0FDC  120A  158A  25F9  120A  158A  	fcall	_xtochar
  4394  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  4395  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  4396  0FE3  0732               	addwf	??_process_set_zones_message,w
  4397  0FE4  00B3               	movwf	??_process_set_zones_message+1
  4398  0FE5  0833               	movf	??_process_set_zones_message+1,w
  4399  0FE6  00D2               	movwf	_commsZones
  4400                           
  4401                           ;serial_message.c: 67:     combineZones();
  4402  0FE7  120A  158A  23F4  120A  158A  	fcall	_combineZones
  4403                           
  4404                           ;serial_message.c: 68:     setBaseMessage('s', inmessage[1]);
  4405  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  4406  0FED  1303               	bcf	3,6	;RP1=0, select bank0
  4407  0FEE  0A34               	incf	process_set_zones_message@inmessage,w
  4408  0FEF  0084               	movwf	4
  4409  0FF0  1383               	bcf	3,7	;select IRP bank0
  4410  0FF1  0800               	movf	0,w
  4411  0FF2  00B2               	movwf	??_process_set_zones_message
  4412  0FF3  0832               	movf	??_process_set_zones_message,w
  4413  0FF4  00A8               	movwf	setBaseMessage@msgAddress
  4414  0FF5  3073               	movlw	115
  4415  0FF6  120A  118A  2551  120A  158A  	fcall	_setBaseMessage
  4416                           
  4417                           ;serial_message.c: 71:     output_message(outputMessage);
  4418  0FFB  3055               	movlw	(low (_outputMessage| 0))& (0+255)
  4419  0FFC  120A  158A  2721   	fcall	_output_message
  4420  0FFF  0008               	return
  4421  1000                     __end_of_process_set_zones_message:	
  4422                           
  4423                           	psect	text15
  4424  0DF9                     __ptext15:	
  4425 ;; *************** function _xtochar *****************
  4426 ;; Defined at:
  4427 ;;		line 18 in file "serial_message.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  x               1    wreg     unsigned char 
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;  x               1    7[BANK0 ] unsigned char 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      unsigned char 
  4434 ;; Registers used:
  4435 ;;		wreg, status,2, status,0
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4441 ;;      Params:         0       0       0       0       0
  4442 ;;      Locals:         0       1       0       0       0
  4443 ;;      Temps:          0       0       0       0       0
  4444 ;;      Totals:         0       1       0       0       0
  4445 ;;Total ram usage:        1 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    5
  4448 ;; This function calls:
  4449 ;;		Nothing
  4450 ;; This function is called by:
  4451 ;;		_process_set_zones_message
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function _xtochar
  4457  0DF9                     _xtochar:	
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in _xtochar: [wreg+status,2+status,0]
  4461                           ;xtochar@x stored from wreg
  4462  0DF9  1283               	bcf	3,5	;RP0=0, select bank0
  4463  0DFA  1303               	bcf	3,6	;RP1=0, select bank0
  4464  0DFB  00A7               	movwf	xtochar@x
  4465                           
  4466                           ;serial_message.c: 19:     if ((x >= '0')
  4467  0DFC  3030               	movlw	48
  4468  0DFD  0227               	subwf	xtochar@x,w
  4469  0DFE  1C03               	skipc
  4470  0DFF  2E07               	goto	l2593
  4471  0E00  303A               	movlw	58
  4472  0E01  0227               	subwf	xtochar@x,w
  4473  0E02  1803               	skipnc
  4474  0E03  2E07               	goto	l2593
  4475                           
  4476                           ;serial_message.c: 20:             && (x <= '9')) {;serial_message.c: 21:         return
      +                           (x - '0');
  4477  0E04  0827               	movf	xtochar@x,w
  4478  0E05  3ED0               	addlw	208
  4479  0E06  0008               	return
  4480  0E07                     l2593:	
  4481  0E07  3061               	movlw	97
  4482  0E08  0227               	subwf	xtochar@x,w
  4483  0E09  1C03               	skipc
  4484  0E0A  2E12               	goto	l2603
  4485  0E0B  3067               	movlw	103
  4486  0E0C  0227               	subwf	xtochar@x,w
  4487  0E0D  1803               	skipnc
  4488  0E0E  2E12               	goto	l2603
  4489                           
  4490                           ;serial_message.c: 23:             && (x <= 'f')) {;serial_message.c: 24:         return
      +                           (x) - 'a' + 10;
  4491  0E0F  0827               	movf	xtochar@x,w
  4492  0E10  3EA9               	addlw	169
  4493  0E11  0008               	return
  4494  0E12                     l2603:	
  4495  0E12  3041               	movlw	65
  4496  0E13  0227               	subwf	xtochar@x,w
  4497  0E14  1C03               	skipc
  4498  0E15  2E1D               	goto	l2611
  4499  0E16  3047               	movlw	71
  4500  0E17  0227               	subwf	xtochar@x,w
  4501  0E18  1803               	skipnc
  4502  0E19  2E1D               	goto	l2611
  4503                           
  4504                           ;serial_message.c: 27:             && (x <= 'F')) {;serial_message.c: 28:         return
      +                           (x) - 'F' + 10;
  4505  0E1A  0827               	movf	xtochar@x,w
  4506  0E1B  3EC4               	addlw	196
  4507  0E1C  0008               	return
  4508  0E1D                     l2611:	
  4509                           
  4510                           ;serial_message.c: 30:     return 0;
  4511  0E1D  3000               	movlw	0
  4512  0E1E  0008               	return
  4513  0E1F                     __end_of_xtochar:	
  4514                           
  4515                           	psect	text16
  4516  00EA                     __ptext16:	
  4517 ;; *************** function _process_set_address_message *****************
  4518 ;; Defined at:
  4519 ;;		line 88 in file "serial_message.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  inmessage       1    wreg     PTR unsigned char 
  4522 ;;		 -> receiveMessage@message(10), NULL(0), 
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;  inmessage       1   20[BANK0 ] PTR unsigned char 
  4525 ;;		 -> receiveMessage@message(10), NULL(0), 
  4526 ;;  new_address     1    0        unsigned char 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4536 ;;      Params:         0       0       0       0       0
  4537 ;;      Locals:         0       2       0       0       0
  4538 ;;      Temps:          0       1       0       0       0
  4539 ;;      Totals:         0       3       0       0       0
  4540 ;;Total ram usage:        3 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    8
  4543 ;; This function calls:
  4544 ;;		_output_message
  4545 ;;		_setBaseMessage
  4546 ;; This function is called by:
  4547 ;;		_process_message
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           
  4552                           ;psect for function _process_set_address_message
  4553  00EA                     _process_set_address_message:	
  4554                           
  4555                           ;incstack = 0
  4556 ;; hardware stack exceeded
  4557                           ; Regs used in _process_set_address_message: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h+cstack]
  4558                           ;process_set_address_message@inmessage stored from wreg
  4559  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  4560  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  4561  00EC  00B4               	movwf	process_set_address_message@inmessage
  4562                           
  4563                           ;serial_message.c: 92:     setBaseMessage('a', inmessage[1]);
  4564  00ED  0A34               	incf	process_set_address_message@inmessage,w
  4565  00EE  0084               	movwf	4
  4566  00EF  1383               	bcf	3,7	;select IRP bank0
  4567  00F0  0800               	movf	0,w
  4568  00F1  00B2               	movwf	??_process_set_address_message
  4569  00F2  0832               	movf	??_process_set_address_message,w
  4570  00F3  00A8               	movwf	setBaseMessage@msgAddress
  4571  00F4  3061               	movlw	97
  4572  00F5  120A  118A  2551  120A  118A  	fcall	_setBaseMessage
  4573                           
  4574                           ;serial_message.c: 93:     output_message(outputMessage);
  4575  00FA  3055               	movlw	(low (_outputMessage| 0))& (0+255)
  4576  00FB  120A  158A  2721   	fcall	_output_message
  4577  00FE  0008               	return
  4578  00FF                     __end_of_process_set_address_message:	
  4579                           
  4580                           	psect	text17
  4581  0D33                     __ptext17:	
  4582 ;; *************** function _process_reset_pump *****************
  4583 ;; Defined at:
  4584 ;;		line 97 in file "serial_message.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  inmessage       1    wreg     PTR unsigned char 
  4587 ;;		 -> receiveMessage@message(10), NULL(0), 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;  inmessage       1   19[BANK0 ] PTR unsigned char 
  4590 ;;		 -> receiveMessage@message(10), NULL(0), 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  1    wreg      void 
  4593 ;; Registers used:
  4594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4600 ;;      Params:         0       0       0       0       0
  4601 ;;      Locals:         0       1       0       0       0
  4602 ;;      Temps:          0       1       0       0       0
  4603 ;;      Totals:         0       2       0       0       0
  4604 ;;Total ram usage:        2 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    9
  4607 ;; This function calls:
  4608 ;;		_output_message
  4609 ;;		_resetPump
  4610 ;;		_setBaseMessage
  4611 ;; This function is called by:
  4612 ;;		_process_message
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _process_reset_pump
  4618  0D33                     _process_reset_pump:	
  4619                           
  4620                           ;incstack = 0
  4621 ;; hardware stack exceeded
  4622                           ; Regs used in _process_reset_pump: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4623                           ;process_reset_pump@inmessage stored from wreg
  4624  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  4625  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  4626  0D35  00B3               	movwf	process_reset_pump@inmessage
  4627                           
  4628                           ;serial_message.c: 98:     resetPump();
  4629  0D36  120A  158A  23D8  120A  158A  	fcall	_resetPump
  4630                           
  4631                           ;serial_message.c: 99:     setBaseMessage('m', inmessage[1]);
  4632  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  4633  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  4634  0D3D  0A33               	incf	process_reset_pump@inmessage,w
  4635  0D3E  0084               	movwf	4
  4636  0D3F  1383               	bcf	3,7	;select IRP bank0
  4637  0D40  0800               	movf	0,w
  4638  0D41  00B2               	movwf	??_process_reset_pump
  4639  0D42  0832               	movf	??_process_reset_pump,w
  4640  0D43  00A8               	movwf	setBaseMessage@msgAddress
  4641  0D44  306D               	movlw	109
  4642  0D45  120A  118A  2551  120A  158A  	fcall	_setBaseMessage
  4643                           
  4644                           ;serial_message.c: 100:     output_message(outputMessage);
  4645  0D4A  3055               	movlw	(low (_outputMessage| 0))& (0+255)
  4646  0D4B  120A  158A  2721   	fcall	_output_message
  4647  0D4E  0008               	return
  4648  0D4F                     __end_of_process_reset_pump:	
  4649                           
  4650                           	psect	text18
  4651  0D17                     __ptext18:	
  4652 ;; *************** function _process_get_status_message *****************
  4653 ;; Defined at:
  4654 ;;		line 76 in file "serial_message.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  inmessage       1    wreg     PTR unsigned char 
  4657 ;;		 -> receiveMessage@message(10), NULL(0), main@sendGetMessageBuffer(10), 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  inmessage       1   19[BANK0 ] PTR unsigned char 
  4660 ;;		 -> receiveMessage@message(10), NULL(0), main@sendGetMessageBuffer(10), 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4670 ;;      Params:         0       0       0       0       0
  4671 ;;      Locals:         0       1       0       0       0
  4672 ;;      Temps:          0       1       0       0       0
  4673 ;;      Totals:         0       2       0       0       0
  4674 ;;Total ram usage:        2 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    8
  4677 ;; This function calls:
  4678 ;;		_combineZones
  4679 ;;		_output_message
  4680 ;;		_setBaseMessage
  4681 ;; This function is called by:
  4682 ;;		_main
  4683 ;;		_process_message
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function _process_get_status_message
  4689  0D17                     _process_get_status_message:	
  4690                           
  4691                           ;incstack = 0
  4692 ;; hardware stack exceeded
  4693                           ; Regs used in _process_get_status_message: [wreg-fsr0h+status,2+status,0+btemp+1+pclath
      +                          +cstack]
  4694                           ;process_get_status_message@inmessage stored from wreg
  4695  0D17  1283               	bcf	3,5	;RP0=0, select bank0
  4696  0D18  1303               	bcf	3,6	;RP1=0, select bank0
  4697  0D19  00B3               	movwf	process_get_status_message@inmessage
  4698                           
  4699                           ;serial_message.c: 78:     combineZones();
  4700  0D1A  120A  158A  23F4  120A  158A  	fcall	_combineZones
  4701                           
  4702                           ;serial_message.c: 79:     setBaseMessage('g', inmessage[1]);
  4703  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  4704  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  4705  0D21  0A33               	incf	process_get_status_message@inmessage,w
  4706  0D22  0084               	movwf	4
  4707  0D23  1383               	bcf	3,7	;select IRP bank0
  4708  0D24  0800               	movf	0,w
  4709  0D25  00B2               	movwf	??_process_get_status_message
  4710  0D26  0832               	movf	??_process_get_status_message,w
  4711  0D27  00A8               	movwf	setBaseMessage@msgAddress
  4712  0D28  3067               	movlw	103
  4713  0D29  120A  118A  2551  120A  158A  	fcall	_setBaseMessage
  4714                           
  4715                           ;serial_message.c: 84:     output_message(outputMessage);
  4716  0D2E  3055               	movlw	(low (_outputMessage| 0))& (0+255)
  4717  0D2F  120A  158A  2721   	fcall	_output_message
  4718  0D32  0008               	return
  4719  0D33                     __end_of_process_get_status_message:	
  4720                           
  4721                           	psect	text19
  4722  0551                     __ptext19:	
  4723 ;; *************** function _setBaseMessage *****************
  4724 ;; Defined at:
  4725 ;;		line 42 in file "serial_message.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;  messageType     1    wreg     unsigned char 
  4728 ;;  msgAddress      1    8[BANK0 ] unsigned char 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  messageType     1   12[BANK0 ] unsigned char 
  4731 ;;  v               1   13[BANK0 ] unsigned char 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  1    wreg      void 
  4734 ;; Registers used:
  4735 ;;		wreg, status,2, status,0, pclath, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4741 ;;      Params:         0       1       0       0       0
  4742 ;;      Locals:         0       2       0       0       0
  4743 ;;      Temps:          0       3       0       0       0
  4744 ;;      Totals:         0       6       0       0       0
  4745 ;;Total ram usage:        6 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    6
  4748 ;; This function calls:
  4749 ;;		_chartox
  4750 ;; This function is called by:
  4751 ;;		_process_set_zones_message
  4752 ;;		_process_get_status_message
  4753 ;;		_process_set_address_message
  4754 ;;		_process_reset_pump
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           
  4759                           ;psect for function _setBaseMessage
  4760  0551                     _setBaseMessage:	
  4761                           
  4762                           ;incstack = 0
  4763 ;; hardware stack exceeded
  4764                           ; Regs used in _setBaseMessage: [wreg+status,2+status,0+pclath+cstack]
  4765                           ;setBaseMessage@messageType stored from wreg
  4766  0551  1283               	bcf	3,5	;RP0=0, select bank0
  4767  0552  1303               	bcf	3,6	;RP1=0, select bank0
  4768  0553  00AC               	movwf	setBaseMessage@messageType
  4769                           
  4770                           ;serial_message.c: 43:     outputMessage[0] = '{';
  4771  0554  307B               	movlw	123
  4772  0555  00A9               	movwf	??_setBaseMessage
  4773  0556  0829               	movf	??_setBaseMessage,w
  4774  0557  00D5               	movwf	_outputMessage
  4775                           
  4776                           ;serial_message.c: 45:  outputMessage[1] = msgAddress;
  4777  0558  0828               	movf	setBaseMessage@msgAddress,w
  4778  0559  00A9               	movwf	??_setBaseMessage
  4779  055A  0829               	movf	??_setBaseMessage,w
  4780  055B  00D6               	movwf	_outputMessage+1
  4781                           
  4782                           ;serial_message.c: 46:  outputMessage[2] = messageType;
  4783  055C  082C               	movf	setBaseMessage@messageType,w
  4784  055D  00A9               	movwf	??_setBaseMessage
  4785  055E  0829               	movf	??_setBaseMessage,w
  4786  055F  00D7               	movwf	_outputMessage+2
  4787                           
  4788                           ;serial_message.c: 47:  outputMessage[3] = chartox(combinedZones >>4);
  4789  0560  085F               	movf	_combinedZones,w
  4790  0561  00A9               	movwf	??_setBaseMessage
  4791  0562  3004               	movlw	4
  4792  0563                     u1145:	
  4793  0563  1003               	clrc
  4794  0564  0CA9               	rrf	??_setBaseMessage,f
  4795  0565  3EFF               	addlw	-1
  4796  0566  1D03               	skipz
  4797  0567  2D63               	goto	u1145
  4798  0568  0829               	movf	??_setBaseMessage,w
  4799  0569  120A  158A  240A  120A  118A  	fcall	_chartox
  4800  056E  1283               	bcf	3,5	;RP0=0, select bank0
  4801  056F  1303               	bcf	3,6	;RP1=0, select bank0
  4802  0570  00AA               	movwf	??_setBaseMessage+1
  4803  0571  082A               	movf	??_setBaseMessage+1,w
  4804  0572  00D8               	movwf	_outputMessage+3
  4805                           
  4806                           ;serial_message.c: 48:     outputMessage[4] = chartox((combinedZones &15));
  4807  0573  085F               	movf	_combinedZones,w
  4808  0574  390F               	andlw	15
  4809  0575  120A  158A  240A  120A  118A  	fcall	_chartox
  4810  057A  1283               	bcf	3,5	;RP0=0, select bank0
  4811  057B  1303               	bcf	3,6	;RP1=0, select bank0
  4812  057C  00A9               	movwf	??_setBaseMessage
  4813  057D  0829               	movf	??_setBaseMessage,w
  4814  057E  00D9               	movwf	_outputMessage+4
  4815                           
  4816                           ;serial_message.c: 52:     char v = (fault_flags.value >> 8) &0xf;
  4817  057F  0850               	movf	_fault_flags+1,w
  4818  0580  390F               	andlw	15
  4819  0581  00A9               	movwf	??_setBaseMessage
  4820  0582  0829               	movf	??_setBaseMessage,w
  4821  0583  00AD               	movwf	setBaseMessage@v
  4822                           
  4823                           ;serial_message.c: 53:     outputMessage[5] = chartox(v);
  4824  0584  082D               	movf	setBaseMessage@v,w
  4825  0585  120A  158A  240A  120A  118A  	fcall	_chartox
  4826  058A  1283               	bcf	3,5	;RP0=0, select bank0
  4827  058B  1303               	bcf	3,6	;RP1=0, select bank0
  4828  058C  00A9               	movwf	??_setBaseMessage
  4829  058D  0829               	movf	??_setBaseMessage,w
  4830  058E  00DA               	movwf	_outputMessage+5
  4831                           
  4832                           ;serial_message.c: 55:     v = (fault_flags.value >> 4) &0xf;
  4833  058F  0850               	movf	_fault_flags+1,w
  4834  0590  00AA               	movwf	??_setBaseMessage+1
  4835  0591  084F               	movf	_fault_flags,w
  4836  0592  00A9               	movwf	??_setBaseMessage
  4837  0593  3004               	movlw	4
  4838  0594                     u1155:	
  4839  0594  1003               	clrc
  4840  0595  0CAA               	rrf	??_setBaseMessage+1,f
  4841  0596  0CA9               	rrf	??_setBaseMessage,f
  4842  0597  3EFF               	addlw	-1
  4843  0598  1D03               	skipz
  4844  0599  2D94               	goto	u1155
  4845  059A  0829               	movf	??_setBaseMessage,w
  4846  059B  390F               	andlw	15
  4847  059C  00AB               	movwf	??_setBaseMessage+2
  4848  059D  082B               	movf	??_setBaseMessage+2,w
  4849  059E  00AD               	movwf	setBaseMessage@v
  4850                           
  4851                           ;serial_message.c: 56:     outputMessage[6] = chartox(v);
  4852  059F  082D               	movf	setBaseMessage@v,w
  4853  05A0  120A  158A  240A  120A  118A  	fcall	_chartox
  4854  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  4855  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  4856  05A7  00A9               	movwf	??_setBaseMessage
  4857  05A8  0829               	movf	??_setBaseMessage,w
  4858  05A9  00DB               	movwf	_outputMessage+6
  4859                           
  4860                           ;serial_message.c: 58:     v = (fault_flags.value) &0xf;
  4861  05AA  084F               	movf	_fault_flags,w
  4862  05AB  390F               	andlw	15
  4863  05AC  00A9               	movwf	??_setBaseMessage
  4864  05AD  0829               	movf	??_setBaseMessage,w
  4865  05AE  00AD               	movwf	setBaseMessage@v
  4866                           
  4867                           ;serial_message.c: 59:     outputMessage[7] = chartox(v);
  4868  05AF  082D               	movf	setBaseMessage@v,w
  4869  05B0  120A  158A  240A   	fcall	_chartox
  4870  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  4871  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  4872  05B5  00A9               	movwf	??_setBaseMessage
  4873  05B6  0829               	movf	??_setBaseMessage,w
  4874  05B7  00DC               	movwf	_outputMessage+7
  4875                           
  4876                           ;serial_message.c: 61:     outputMessage[8] = '}';
  4877  05B8  307D               	movlw	125
  4878  05B9  00A9               	movwf	??_setBaseMessage
  4879  05BA  0829               	movf	??_setBaseMessage,w
  4880  05BB  00DD               	movwf	_outputMessage+8
  4881                           
  4882                           ;serial_message.c: 62:     outputMessage[9] = 0;
  4883  05BC  01DE               	clrf	_outputMessage+9
  4884  05BD  0008               	return
  4885  05BE                     __end_of_setBaseMessage:	
  4886                           
  4887                           	psect	text20
  4888  0C0A                     __ptext20:	
  4889 ;; *************** function _chartox *****************
  4890 ;; Defined at:
  4891 ;;		line 33 in file "serial_message.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  c               1    wreg     unsigned char 
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  c               1    7[BANK0 ] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  1    wreg      unsigned char 
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4905 ;;      Params:         0       0       0       0       0
  4906 ;;      Locals:         0       1       0       0       0
  4907 ;;      Temps:          0       0       0       0       0
  4908 ;;      Totals:         0       1       0       0       0
  4909 ;;Total ram usage:        1 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    5
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_setBaseMessage
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function _chartox
  4921  0C0A                     _chartox:	
  4922                           
  4923                           ;incstack = 0
  4924 ;; hardware stack exceeded
  4925                           ; Regs used in _chartox: [wreg+status,2+status,0]
  4926                           ;chartox@c stored from wreg
  4927  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  4928  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  4929  0C0C  00A7               	movwf	chartox@c
  4930                           
  4931                           ;serial_message.c: 34:     if (c > 9) {
  4932  0C0D  300A               	movlw	10
  4933  0C0E  0227               	subwf	chartox@c,w
  4934  0C0F  1C03               	skipc
  4935  0C10  2C14               	goto	l2553
  4936                           
  4937                           ;serial_message.c: 35:         return 'a' + (c - 10);
  4938  0C11  0827               	movf	chartox@c,w
  4939  0C12  3E57               	addlw	87
  4940  0C13  0008               	return
  4941  0C14                     l2553:	
  4942                           
  4943                           ;serial_message.c: 37:         return '0' + c;
  4944  0C14  0827               	movf	chartox@c,w
  4945  0C15  3E30               	addlw	48
  4946  0C16  0008               	return
  4947  0C17                     __end_of_chartox:	
  4948                           
  4949                           	psect	text21
  4950  0F21                     __ptext21:	
  4951 ;; *************** function _output_message *****************
  4952 ;; Defined at:
  4953 ;;		line 277 in file "serial.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;  message         1    wreg     PTR unsigned char 
  4956 ;;		 -> outputMessage(10), 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  message         1   17[BANK0 ] PTR unsigned char 
  4959 ;;		 -> outputMessage(10), 
  4960 ;;  i               2   15[BANK0 ] int 
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      void 
  4963 ;; Registers used:
  4964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4970 ;;      Params:         0       0       0       0       0
  4971 ;;      Locals:         0       3       0       0       0
  4972 ;;      Temps:          0       1       0       0       0
  4973 ;;      Totals:         0       4       0       0       0
  4974 ;;Total ram usage:        4 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    7
  4977 ;; This function calls:
  4978 ;;		_putch
  4979 ;; This function is called by:
  4980 ;;		_process_set_zones_message
  4981 ;;		_process_get_status_message
  4982 ;;		_process_set_address_message
  4983 ;;		_process_reset_pump
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           
  4988                           ;psect for function _output_message
  4989  0F21                     _output_message:	
  4990                           
  4991                           ;incstack = 0
  4992 ;; hardware stack exceeded
  4993                           ; Regs used in _output_message: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4994                           ;output_message@message stored from wreg
  4995  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  4996  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  4997  0F23  00B1               	movwf	output_message@message
  4998                           
  4999                           ;serial.c: 277: output_message (char *message);serial.c: 278: {;serial.c: 279:   if ((0)
      +                           == message) {
  5000  0F24  0831               	movf	output_message@message,w
  5001  0F25  1903               	btfsc	3,2
  5002  0F26  0008               	return
  5003                           
  5004                           ;serial.c: 283:   for (int i = 0; (i < 10) && (0 != message[i]); i++) {
  5005  0F27  01AF               	clrf	output_message@i
  5006  0F28  01B0               	clrf	output_message@i+1
  5007  0F29                     l3453:	
  5008  0F29  0830               	movf	output_message@i+1,w
  5009  0F2A  3A80               	xorlw	128
  5010  0F2B  00FF               	movwf	127
  5011  0F2C  3080               	movlw	128
  5012  0F2D  027F               	subwf	127,w
  5013  0F2E  1D03               	skipz
  5014  0F2F  2F32               	goto	u2315
  5015  0F30  300A               	movlw	10
  5016  0F31  022F               	subwf	output_message@i,w
  5017  0F32                     u2315:	
  5018  0F32  1803               	skipnc
  5019  0F33  0008               	return
  5020  0F34  1283               	bcf	3,5	;RP0=0, select bank0
  5021  0F35  1303               	bcf	3,6	;RP1=0, select bank0
  5022  0F36  082F               	movf	output_message@i,w
  5023  0F37  0731               	addwf	output_message@message,w
  5024  0F38  00AE               	movwf	??_output_message
  5025  0F39  082E               	movf	??_output_message,w
  5026  0F3A  0084               	movwf	4
  5027  0F3B  1383               	bcf	3,7	;select IRP bank0
  5028  0F3C  0800               	movf	0,w
  5029  0F3D  1903               	btfsc	3,2
  5030  0F3E  0008               	return
  5031                           
  5032                           ;serial.c: 284:     putch (message[i]);
  5033  0F3F  082F               	movf	output_message@i,w
  5034  0F40  0731               	addwf	output_message@message,w
  5035  0F41  00AE               	movwf	??_output_message
  5036  0F42  082E               	movf	??_output_message,w
  5037  0F43  0084               	movwf	4
  5038  0F44  0800               	movf	0,w
  5039  0F45  120A  158A  23FE  120A  158A  	fcall	_putch
  5040                           
  5041                           ;serial.c: 285:   }
  5042  0F4A  3001               	movlw	1
  5043  0F4B  1283               	bcf	3,5	;RP0=0, select bank0
  5044  0F4C  1303               	bcf	3,6	;RP1=0, select bank0
  5045  0F4D  07AF               	addwf	output_message@i,f
  5046  0F4E  1803               	skipnc
  5047  0F4F  0AB0               	incf	output_message@i+1,f
  5048  0F50  3000               	movlw	0
  5049  0F51  07B0               	addwf	output_message@i+1,f
  5050  0F52  2F29               	goto	l3453
  5051  0F53                     __end_of_output_message:	
  5052                           
  5053                           	psect	text22
  5054  0330                     __ptext22:	
  5055 ;; *************** function _process_event_timer *****************
  5056 ;; Defined at:
  5057 ;;		line 82 in file "timer_event.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;		None
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  i               1   27[BANK0 ] char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  1    wreg      void 
  5064 ;; Registers used:
  5065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5071 ;;      Params:         0       0       0       0       0
  5072 ;;      Locals:         0       2       0       0       0
  5073 ;;      Temps:          0       3       0       0       0
  5074 ;;      Totals:         0       5       0       0       0
  5075 ;;Total ram usage:        5 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    9
  5078 ;; This function calls:
  5079 ;;		_EventDumpSolenoidCallBack
  5080 ;;		_EventFaultStateLEDCallBack
  5081 ;;		_EventIdleTimeoutCallBack
  5082 ;;		_EventLowFogPressureCallBack
  5083 ;;		_EventLowWaterLevelCallBack
  5084 ;;		_EventLowWaterPressureCallBack
  5085 ;;		_EventLowWaterPressureDebounceCallBack
  5086 ;;		_EventPODebounceCallBack
  5087 ;;		_EventRunSignalDebounceCallBack
  5088 ;;		___bmul
  5089 ;; This function is called by:
  5090 ;;		_main
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _process_event_timer
  5096  0330                     _process_event_timer:	
  5097                           
  5098                           ;timer_event.c: 83:     TMR0IE = 0;
  5099                           
  5100                           ;incstack = 0
  5101 ;; hardware stack exceeded
  5102                           ; Regs used in _process_event_timer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  5103  0330  128B               	bcf	11,5	;volatile
  5104  0331                     l2987:	
  5105                           ;timer_event.c: 84:     while (timer_count > 0) {
  5106                           
  5107                           
  5108                           ;timer_event.c: 84:     while (timer_count > 0) {
  5109  0331  1283               	bcf	3,5	;RP0=0, select bank0
  5110  0332  1303               	bcf	3,6	;RP1=0, select bank0
  5111  0333  0851               	movf	_timer_count,w	;volatile
  5112  0334  1903               	btfsc	3,2
  5113  0335  2BC3               	goto	l712
  5114                           
  5115                           ;timer_event.c: 86:         timer_count--;
  5116  0336  3001               	movlw	1
  5117  0337  02D1               	subwf	_timer_count,f	;volatile
  5118                           
  5119                           ;timer_event.c: 89:         for (signed char i = 0; i < EventTotalNumber; i++) {
  5120  0338  01BB               	clrf	process_event_timer@i
  5121  0339                     l2973:	
  5122                           
  5123                           ;timer_event.c: 90:             if (timer_events[i].active) {
  5124  0339  3007               	movlw	7
  5125  033A  00B7               	movwf	??_process_event_timer
  5126  033B  0837               	movf	??_process_event_timer,w
  5127  033C  00A7               	movwf	___bmul@multiplicand
  5128  033D  083B               	movf	process_event_timer@i,w
  5129  033E  120A  158A  247A  120A  118A  	fcall	___bmul
  5130  0343  3EA2               	addlw	(low ((_timer_events| 0+2)))& (0+255)
  5131  0344  0084               	movwf	4
  5132  0345  1383               	bcf	3,7	;select IRP bank1
  5133  0346  1C00               	btfss	0,0
  5134  0347  2BB7               	goto	l2983
  5135                           
  5136                           ;timer_event.c: 91:                 timer_events[i].time_left--;
  5137  0348  3007               	movlw	7
  5138  0349  1283               	bcf	3,5	;RP0=0, select bank0
  5139  034A  1303               	bcf	3,6	;RP1=0, select bank0
  5140  034B  00B7               	movwf	??_process_event_timer
  5141  034C  0837               	movf	??_process_event_timer,w
  5142  034D  00A7               	movwf	___bmul@multiplicand
  5143  034E  083B               	movf	process_event_timer@i,w
  5144  034F  120A  158A  247A  120A  118A  	fcall	___bmul
  5145  0354  3EA0               	addlw	(low (_timer_events| 0))& (0+255)
  5146  0355  0084               	movwf	4
  5147  0356  30FF               	movlw	255
  5148  0357  1383               	bcf	3,7	;select IRP bank1
  5149  0358  0780               	addwf	0,f
  5150  0359  0F84               	incfsz	4,f
  5151  035A  0800               	movf	0,w
  5152  035B  1803               	skipnc
  5153  035C  0A00               	incf	0,w
  5154  035D  00FF               	movwf	127
  5155  035E  30FF               	movlw	255
  5156  035F  077F               	addwf	127,w
  5157  0360  0080               	movwf	0
  5158  0361  0384               	decf	4,f
  5159                           
  5160                           ;timer_event.c: 93:                 if (timer_events[i].time_left == 0) {
  5161  0362  3007               	movlw	7
  5162  0363  1283               	bcf	3,5	;RP0=0, select bank0
  5163  0364  1303               	bcf	3,6	;RP1=0, select bank0
  5164  0365  00B7               	movwf	??_process_event_timer
  5165  0366  0837               	movf	??_process_event_timer,w
  5166  0367  00A7               	movwf	___bmul@multiplicand
  5167  0368  083B               	movf	process_event_timer@i,w
  5168  0369  120A  158A  247A  120A  118A  	fcall	___bmul
  5169  036E  3EA0               	addlw	(low (_timer_events| 0))& (0+255)
  5170  036F  0084               	movwf	4
  5171  0370  1383               	bcf	3,7	;select IRP bank1
  5172  0371  0800               	movf	0,w
  5173  0372  1283               	bcf	3,5	;RP0=0, select bank0
  5174  0373  1303               	bcf	3,6	;RP1=0, select bank0
  5175  0374  00B8               	movwf	??_process_event_timer+1
  5176  0375  0A84               	incf	4,f
  5177  0376  0800               	movf	0,w
  5178  0377  00B9               	movwf	??_process_event_timer+2
  5179  0378  0838               	movf	??_process_event_timer+1,w
  5180  0379  0439               	iorwf	??_process_event_timer+2,w
  5181  037A  1D03               	btfss	3,2
  5182  037B  2BB7               	goto	l2983
  5183                           
  5184                           ;timer_event.c: 94:                     timer_events[i].active = 0;
  5185  037C  3007               	movlw	7
  5186  037D  00B7               	movwf	??_process_event_timer
  5187  037E  0837               	movf	??_process_event_timer,w
  5188  037F  00A7               	movwf	___bmul@multiplicand
  5189  0380  083B               	movf	process_event_timer@i,w
  5190  0381  120A  158A  247A  120A  118A  	fcall	___bmul
  5191  0386  3EA2               	addlw	(low ((_timer_events| 0+2)))& (0+255)
  5192  0387  0084               	movwf	4
  5193  0388  1383               	bcf	3,7	;select IRP bank1
  5194  0389  1000               	bcf	0,0
  5195                           
  5196                           ;timer_event.c: 95:                     if (timer_events[i].callback) {
  5197  038A  3007               	movlw	7
  5198  038B  1283               	bcf	3,5	;RP0=0, select bank0
  5199  038C  1303               	bcf	3,6	;RP1=0, select bank0
  5200  038D  00B7               	movwf	??_process_event_timer
  5201  038E  0837               	movf	??_process_event_timer,w
  5202  038F  00A7               	movwf	___bmul@multiplicand
  5203  0390  083B               	movf	process_event_timer@i,w
  5204  0391  120A  158A  247A  120A  118A  	fcall	___bmul
  5205  0396  3EA6               	addlw	(low ((_timer_events| 0+6)))& (0+255)
  5206  0397  0084               	movwf	4
  5207  0398  1383               	bcf	3,7	;select IRP bank1
  5208  0399  0800               	movf	0,w
  5209  039A  1903               	btfsc	3,2
  5210  039B  2BB7               	goto	l2983
  5211                           
  5212                           ;timer_event.c: 97:                         (*timer_events[i].callback) ();
  5213  039C  3007               	movlw	7
  5214  039D  1283               	bcf	3,5	;RP0=0, select bank0
  5215  039E  1303               	bcf	3,6	;RP1=0, select bank0
  5216  039F  00B7               	movwf	??_process_event_timer
  5217  03A0  0837               	movf	??_process_event_timer,w
  5218  03A1  00A7               	movwf	___bmul@multiplicand
  5219  03A2  083B               	movf	process_event_timer@i,w
  5220  03A3  120A  158A  247A  120A  118A  	fcall	___bmul
  5221  03A8  3EA6               	addlw	(low ((_timer_events| 0+6)))& (0+255)
  5222  03A9  0084               	movwf	4
  5223  03AA  1383               	bcf	3,7	;select IRP bank1
  5224  03AB  0800               	movf	0,w
  5225  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  5226  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  5227  03AE  00B8               	movwf	??_process_event_timer+1
  5228  03AF  0838               	movf	??_process_event_timer+1,w
  5229  03B0  00BA               	movwf	_process_event_timer$2111	;volatile
  5230                           
  5231                           ;timer_event.c: 97:                         (*timer_events[i].callback) ();
  5232  03B1  083A               	movf	_process_event_timer$2111,w	;volatile
  5233  03B2  120A  118A  203E  120A  118A  	fcall	fptable
  5234  03B7                     l2983:	
  5235                           
  5236                           ;timer_event.c: 102:         }
  5237  03B7  3001               	movlw	1
  5238  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  5239  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  5240  03BA  00B7               	movwf	??_process_event_timer
  5241  03BB  0837               	movf	??_process_event_timer,w
  5242  03BC  07BB               	addwf	process_event_timer@i,f
  5243  03BD  083B               	movf	process_event_timer@i,w
  5244  03BE  3A80               	xorlw	128
  5245  03BF  3E77               	addlw	-137
  5246  03C0  1803               	btfsc	3,0
  5247  03C1  2B31               	goto	l2987
  5248  03C2  2B39               	goto	l2973
  5249  03C3                     l712:	
  5250                           
  5251                           ;timer_event.c: 104:     TMR0IE = 1;
  5252  03C3  168B               	bsf	11,5	;volatile
  5253  03C4  0008               	return
  5254  03C5                     __end_of_process_event_timer:	
  5255                           
  5256                           	psect	text23
  5257  0C36                     __ptext23:	
  5258 ;; *************** function _EventPODebounceCallBack *****************
  5259 ;; Defined at:
  5260 ;;		line 3 in file "EventPODebounce.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;		None
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;		None
  5265 ;; Return value:  Size  Location     Type
  5266 ;;                  1    wreg      void 
  5267 ;; Registers used:
  5268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5274 ;;      Params:         0       0       0       0       0
  5275 ;;      Locals:         0       0       0       0       0
  5276 ;;      Temps:          0       1       0       0       0
  5277 ;;      Totals:         0       1       0       0       0
  5278 ;;Total ram usage:        1 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    8
  5281 ;; This function calls:
  5282 ;;		_clear_callback_for_shutdown
  5283 ;; This function is called by:
  5284 ;;		_init_event_timer
  5285 ;;		_process_event_timer
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           
  5290                           ;psect for function _EventPODebounceCallBack
  5291  0C36                     _EventPODebounceCallBack:	
  5292                           
  5293                           ;EventPODebounce.c: 9:     state = timer_events[EventPODebounce].next_state;
  5294                           
  5295                           ;incstack = 0
  5296 ;; hardware stack exceeded
  5297                           ; Regs used in _EventPODebounceCallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5298  0C36  1683               	bsf	3,5	;RP0=1, select bank1
  5299  0C37  1303               	bcf	3,6	;RP1=0, select bank1
  5300  0C38  085B               	movf	(_timer_events^(0+128)+59),w	;volatile
  5301  0C39  1283               	bcf	3,5	;RP0=0, select bank0
  5302  0C3A  1303               	bcf	3,6	;RP1=0, select bank0
  5303  0C3B  00AD               	movwf	??_EventPODebounceCallBack
  5304  0C3C  082D               	movf	??_EventPODebounceCallBack,w
  5305  0C3D  00D4               	movwf	_state
  5306                           
  5307                           ;EventPODebounce.c: 10:     fault_flags.po_fault = 1;
  5308  0C3E  15CF               	bsf	_fault_flags,3
  5309                           
  5310                           ;EventPODebounce.c: 11:     if (shutdownState == state) {
  5311  0C3F  0354               	decf	_state,w
  5312  0C40  1D03               	btfss	3,2
  5313  0C41  0008               	return
  5314                           
  5315                           ;EventPODebounce.c: 13:         clear_callback_for_shutdown();
  5316  0C42  120A  158A  2648   	fcall	_clear_callback_for_shutdown
  5317  0C45  0008               	return
  5318  0C46                     __end_of_EventPODebounceCallBack:	
  5319                           
  5320                           	psect	text24
  5321  0CA2                     __ptext24:	
  5322 ;; *************** function _EventLowWaterPressureDebounceCallBack *****************
  5323 ;; Defined at:
  5324 ;;		line 32 in file "EventLowWaterPressure.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		status,0
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5338 ;;      Params:         0       0       0       0       0
  5339 ;;      Locals:         0       0       0       0       0
  5340 ;;      Temps:          0       0       0       0       0
  5341 ;;      Totals:         0       0       0       0       0
  5342 ;;Total ram usage:        0 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    5
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_init_event_timer
  5349 ;;		_process_event_timer
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           
  5354                           ;psect for function _EventLowWaterPressureDebounceCallBack
  5355  0CA2                     _EventLowWaterPressureDebounceCallBack:	
  5356                           
  5357                           ;EventLowWaterPressure.c: 44:     { PORTAbits.RA0 = (!( PORTCbits.RC0)); fault_flags.wpO
      +                          kBit = (!( PORTCbits.RC0));};
  5358                           
  5359                           ;incstack = 0
  5360                           ; Regs used in _EventLowWaterPressureDebounceCallBack: [status,0]
  5361  0CA2  1003               	clrc
  5362  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  5363  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  5364  0CA5  1C07               	btfss	7,0	;volatile
  5365  0CA6  1403               	setc
  5366  0CA7  1C03               	btfss	3,0
  5367  0CA8  2CAD               	goto	u1350
  5368  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  5369  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  5370  0CAB  1405               	bsf	5,0	;volatile
  5371  0CAC  2CB0               	goto	u1364
  5372  0CAD                     u1350:	
  5373  0CAD  1283               	bcf	3,5	;RP0=0, select bank0
  5374  0CAE  1303               	bcf	3,6	;RP1=0, select bank0
  5375  0CAF  1005               	bcf	5,0	;volatile
  5376  0CB0                     u1364:	
  5377  0CB0  1003               	clrc
  5378  0CB1  1C07               	btfss	7,0	;volatile
  5379  0CB2  1403               	setc
  5380  0CB3  124F               	bcf	_fault_flags,4
  5381  0CB4  1803               	btfsc	3,0
  5382  0CB5  164F               	bsf	_fault_flags,4
  5383  0CB6  0008               	return
  5384  0CB7                     __end_of_EventLowWaterPressureDebounceCallBack:	
  5385                           
  5386                           	psect	text25
  5387  0E9A                     __ptext25:	
  5388 ;; *************** function _EventLowWaterPressureCallBack *****************
  5389 ;; Defined at:
  5390 ;;		line 4 in file "EventLowWaterPressure.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5404 ;;      Params:         0       0       0       0       0
  5405 ;;      Locals:         0       0       0       0       0
  5406 ;;      Temps:          0       1       0       0       0
  5407 ;;      Totals:         0       1       0       0       0
  5408 ;;Total ram usage:        1 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    8
  5411 ;; This function calls:
  5412 ;;		_clear_callback_for_shutdown
  5413 ;; This function is called by:
  5414 ;;		_init_event_timer
  5415 ;;		_process_event_timer
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           
  5420                           ;psect for function _EventLowWaterPressureCallBack
  5421  0E9A                     _EventLowWaterPressureCallBack:	
  5422                           
  5423                           ;EventLowWaterPressure.c: 16:     { PORTAbits.RA0 = (!( PORTCbits.RC0)); fault_flags.wpO
      +                          kBit = (!( PORTCbits.RC0));};
  5424                           
  5425                           ;incstack = 0
  5426 ;; hardware stack exceeded
  5427                           ; Regs used in _EventLowWaterPressureCallBack: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  5428  0E9A  1003               	clrc
  5429  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  5430  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  5431  0E9D  1C07               	btfss	7,0	;volatile
  5432  0E9E  1403               	setc
  5433  0E9F  1C03               	btfss	3,0
  5434  0EA0  2EA5               	goto	u1300
  5435  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  5436  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  5437  0EA3  1405               	bsf	5,0	;volatile
  5438  0EA4  2EA8               	goto	u1314
  5439  0EA5                     u1300:	
  5440  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  5441  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  5442  0EA7  1005               	bcf	5,0	;volatile
  5443  0EA8                     u1314:	
  5444  0EA8  1003               	clrc
  5445  0EA9  1C07               	btfss	7,0	;volatile
  5446  0EAA  1403               	setc
  5447  0EAB  124F               	bcf	_fault_flags,4
  5448  0EAC  1803               	btfsc	3,0
  5449  0EAD  164F               	bsf	_fault_flags,4
  5450                           
  5451                           ;EventLowWaterPressure.c: 18:     if (timer_events[EventLowWaterPressure].flag_bit) {
  5452  0EAE  1683               	bsf	3,5	;RP0=1, select bank1
  5453  0EAF  1303               	bcf	3,6	;RP1=0, select bank1
  5454  0EB0  1CA9               	btfss	(_timer_events^(0+128)+9),1	;volatile
  5455  0EB1  2EB5               	goto	l2725
  5456                           
  5457                           ;EventLowWaterPressure.c: 20:         fault_flags.lwp_fault = 1;
  5458  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  5459  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  5460  0EB4  14CF               	bsf	_fault_flags,1
  5461  0EB5                     l2725:	
  5462                           
  5463                           ;EventLowWaterPressure.c: 23:     state = timer_events[EventLowWaterPressure].next_state
      +                          ;
  5464  0EB5  1683               	bsf	3,5	;RP0=1, select bank1
  5465  0EB6  1303               	bcf	3,6	;RP1=0, select bank1
  5466  0EB7  082A               	movf	(_timer_events^(0+128)+10),w	;volatile
  5467  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  5468  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  5469  0EBA  00AD               	movwf	??_EventLowWaterPressureCallBack
  5470  0EBB  082D               	movf	??_EventLowWaterPressureCallBack,w
  5471  0EBC  00D4               	movwf	_state
  5472                           
  5473                           ;EventLowWaterPressure.c: 24:  if (shutdownState == state) {
  5474  0EBD  0354               	decf	_state,w
  5475  0EBE  1D03               	btfss	3,2
  5476  0EBF  0008               	return
  5477                           
  5478                           ;EventLowWaterPressure.c: 26:         clear_callback_for_shutdown();
  5479  0EC0  120A  158A  2648   	fcall	_clear_callback_for_shutdown
  5480  0EC3  0008               	return
  5481  0EC4                     __end_of_EventLowWaterPressureCallBack:	
  5482                           
  5483                           	psect	text26
  5484  0CB7                     __ptext26:	
  5485 ;; *************** function _EventLowWaterLevelCallBack *****************
  5486 ;; Defined at:
  5487 ;;		line 4 in file "EventLowWaterLevel.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;		None
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5501 ;;      Params:         0       0       0       0       0
  5502 ;;      Locals:         0       0       0       0       0
  5503 ;;      Temps:          0       0       0       0       0
  5504 ;;      Totals:         0       0       0       0       0
  5505 ;;Total ram usage:        0 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    8
  5508 ;; This function calls:
  5509 ;;		_clear_callback_for_shutdown
  5510 ;;		_enable_callback
  5511 ;; This function is called by:
  5512 ;;		_init_event_timer
  5513 ;;		_process_event_timer
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           
  5518                           ;psect for function _EventLowWaterLevelCallBack
  5519  0CB7                     _EventLowWaterLevelCallBack:	
  5520                           
  5521                           ;EventLowWaterLevel.c: 10:     if (!fault_flags.lwl_fault) {
  5522                           
  5523                           ;incstack = 0
  5524 ;; hardware stack exceeded
  5525                           ; Regs used in _EventLowWaterLevelCallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5526  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  5527  0CB8  1303               	bcf	3,6	;RP1=0, select bank0
  5528  0CB9  184F               	btfsc	_fault_flags,0
  5529  0CBA  2CC5               	goto	l2713
  5530                           
  5531                           ;EventLowWaterLevel.c: 14:         fault_flags.lwl_fault = 1;
  5532  0CBB  144F               	bsf	_fault_flags,0
  5533                           
  5534                           ;EventLowWaterLevel.c: 15:         enable_callback(EventLowWaterLevel, (30*(4000000/256/
      +                          4/256)));
  5535  0CBC  30C2               	movlw	194
  5536  0CBD  00AB               	movwf	enable_callback@time_delay
  5537  0CBE  3001               	movlw	1
  5538  0CBF  00AC               	movwf	enable_callback@time_delay+1
  5539  0CC0  3000               	movlw	0
  5540  0CC1  120A  158A  2753   	fcall	_enable_callback
  5541                           
  5542                           ;EventLowWaterLevel.c: 16:     } else {
  5543  0CC4  0008               	return
  5544  0CC5                     l2713:	
  5545                           
  5546                           ;EventLowWaterLevel.c: 20:         if (state != standbyState) {
  5547  0CC5  0854               	movf	_state,w
  5548  0CC6  1903               	btfsc	3,2
  5549  0CC7  0008               	return
  5550                           
  5551                           ;EventLowWaterLevel.c: 21:             state = shutdownState;
  5552  0CC8  01D4               	clrf	_state
  5553  0CC9  0AD4               	incf	_state,f
  5554                           
  5555                           ;EventLowWaterLevel.c: 23:             clear_callback_for_shutdown();
  5556  0CCA  120A  158A  2648   	fcall	_clear_callback_for_shutdown
  5557  0CCD  0008               	return
  5558  0CCE                     __end_of_EventLowWaterLevelCallBack:	
  5559                           
  5560                           	psect	text27
  5561  07DB                     __ptext27:	
  5562 ;; *************** function _EventLowFogPressureCallBack *****************
  5563 ;; Defined at:
  5564 ;;		line 4 in file "EventLowFogPressure.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;		None
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;		None
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  1    wreg      void 
  5571 ;; Registers used:
  5572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5578 ;;      Params:         0       0       0       0       0
  5579 ;;      Locals:         0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0
  5581 ;;      Totals:         0       0       0       0       0
  5582 ;;Total ram usage:        0 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    8
  5585 ;; This function calls:
  5586 ;;		_clear_callback_for_shutdown
  5587 ;;		_enable_callback
  5588 ;; This function is called by:
  5589 ;;		_init_event_timer
  5590 ;;		_process_event_timer
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           
  5595                           ;psect for function _EventLowFogPressureCallBack
  5596  07DB                     _EventLowFogPressureCallBack:	
  5597                           
  5598                           ;EventLowFogPressure.c: 15:     if (timer_events[EventLowFogPressure].flag_data) {
  5599                           
  5600                           ;incstack = 0
  5601 ;; hardware stack exceeded
  5602                           ; Regs used in _EventLowFogPressureCallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  5603  07DB  1683               	bsf	3,5	;RP0=1, select bank1
  5604  07DC  1303               	bcf	3,6	;RP1=0, select bank1
  5605  07DD  0839               	movf	(_timer_events^(0+128)+25),w	;volatile
  5606  07DE  043A               	iorwf	((_timer_events+1)^(0+128)+25),w	;volatile
  5607  07DF  1903               	btfsc	3,2
  5608  07E0  2FF5               	goto	l67
  5609                           
  5610                           ;EventLowFogPressure.c: 16:     enable_callback (EventLowFogPressure, timer_events[Event
      +                          LowFogPressure].flag_data);
  5611  07E1  083A               	movf	((_timer_events+1)^(0+128)+25),w	;volatile
  5612  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  5613  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  5614  07E4  00AC               	movwf	enable_callback@time_delay+1
  5615  07E5  1683               	bsf	3,5	;RP0=1, select bank1
  5616  07E6  1303               	bcf	3,6	;RP1=0, select bank1
  5617  07E7  0839               	movf	(_timer_events^(0+128)+25),w	;volatile
  5618  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  5619  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  5620  07EA  00AB               	movwf	enable_callback@time_delay
  5621  07EB  3003               	movlw	3
  5622  07EC  120A  158A  2753   	fcall	_enable_callback
  5623                           
  5624                           ;EventLowFogPressure.c: 17:         timer_events[EventLowFogPressure].flag_data = 0;
  5625  07EF  1683               	bsf	3,5	;RP0=1, select bank1
  5626  07F0  1303               	bcf	3,6	;RP1=0, select bank1
  5627  07F1  01B9               	clrf	(_timer_events^(0+128)+25)	;volatile
  5628  07F2  01BA               	clrf	((_timer_events+1)^(0+128)+25)	;volatile
  5629                           
  5630                           ;EventLowFogPressure.c: 18:         timer_events[EventLowFogPressure].flag_bit = 1;
  5631  07F3  14B7               	bsf	(_timer_events^(0+128)+23),1	;volatile
  5632                           
  5633                           ;EventLowFogPressure.c: 19:   }
  5634  07F4  0008               	return
  5635  07F5                     l67:	
  5636                           ;EventLowFogPressure.c: 20:   else {
  5637                           
  5638                           
  5639                           ;EventLowFogPressure.c: 21:         fault_flags.lfp_fault = 1;
  5640  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  5641  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  5642  07F7  154F               	bsf	_fault_flags,2
  5643                           
  5644                           ;EventLowFogPressure.c: 22:         state = shutdownState;
  5645  07F8  01D4               	clrf	_state
  5646  07F9  0AD4               	incf	_state,f
  5647                           
  5648                           ;EventLowFogPressure.c: 23:         clear_callback_for_shutdown();
  5649  07FA  120A  158A  2648   	fcall	_clear_callback_for_shutdown
  5650  07FD  0008               	return
  5651  07FE                     __end_of_EventLowFogPressureCallBack:	
  5652                           
  5653                           	psect	text28
  5654  0EF2                     __ptext28:	
  5655 ;; *************** function _EventIdleTimeoutCallBack *****************
  5656 ;; Defined at:
  5657 ;;		line 5 in file "EventIdleTimeout.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5671 ;;      Params:         0       0       0       0       0
  5672 ;;      Locals:         0       0       0       0       0
  5673 ;;      Temps:          0       0       0       0       0
  5674 ;;      Totals:         0       0       0       0       0
  5675 ;;Total ram usage:        0 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    7
  5678 ;; This function calls:
  5679 ;;		_enable_callback
  5680 ;; This function is called by:
  5681 ;;		_init_event_timer
  5682 ;;		_process_event_timer
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           
  5687                           ;psect for function _EventIdleTimeoutCallBack
  5688  0EF2                     _EventIdleTimeoutCallBack:	
  5689                           
  5690                           ;EventIdleTimeout.c: 7:   if (!timer_events[EventIdleTimeout].flag_bit) {
  5691                           
  5692                           ;incstack = 0
  5693 ;; hardware stack exceeded
  5694                           ; Regs used in _EventIdleTimeoutCallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5695  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  5696  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
  5697  0EF4  18C5               	btfsc	(_timer_events^(0+128)+37),1	;volatile
  5698  0EF5  2F0C               	goto	l52
  5699                           
  5700                           ;EventIdleTimeout.c: 11:     { PORTAbits.RA2 = (1); fault_flags.dumpSolenoidBit = (1);};
  5701  0EF6  1283               	bcf	3,5	;RP0=0, select bank0
  5702  0EF7  1303               	bcf	3,6	;RP1=0, select bank0
  5703  0EF8  1505               	bsf	5,2	;volatile
  5704  0EF9  1450               	bsf	_fault_flags+1,0
  5705                           
  5706                           ;EventIdleTimeout.c: 12:     inIdleDumpHour = 1;
  5707  0EFA  01D3               	clrf	_inIdleDumpHour
  5708  0EFB  0AD3               	incf	_inIdleDumpHour,f
  5709                           
  5710                           ;EventIdleTimeout.c: 17:     timer_events[EventIdleTimeout].flag_bit = 1;
  5711  0EFC  1683               	bsf	3,5	;RP0=1, select bank1
  5712  0EFD  1303               	bcf	3,6	;RP1=0, select bank1
  5713  0EFE  14C5               	bsf	(_timer_events^(0+128)+37),1	;volatile
  5714                           
  5715                           ;EventIdleTimeout.c: 18:     timer_events[EventIdleTimeout].flag_data = 0;
  5716  0EFF  01C7               	clrf	(_timer_events^(0+128)+39)	;volatile
  5717  0F00  01C8               	clrf	((_timer_events+1)^(0+128)+39)	;volatile
  5718                           
  5719                           ;EventIdleTimeout.c: 19:     enable_callback (EventIdleTimeout, (32767));
  5720  0F01  30FF               	movlw	255
  5721  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  5722  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  5723  0F04  00AB               	movwf	enable_callback@time_delay
  5724  0F05  307F               	movlw	127
  5725  0F06  00AC               	movwf	enable_callback@time_delay+1
  5726  0F07  3005               	movlw	5
  5727  0F08  120A  158A  2753   	fcall	_enable_callback
  5728                           
  5729                           ;EventIdleTimeout.c: 21:   }
  5730  0F0B  0008               	return
  5731  0F0C                     l52:	
  5732                           ;EventIdleTimeout.c: 22:   else {
  5733                           
  5734                           
  5735                           ;EventIdleTimeout.c: 26:     { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  5736  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  5737  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  5738  0F0E  1105               	bcf	5,2	;volatile
  5739  0F0F  1050               	bcf	_fault_flags+1,0
  5740                           
  5741                           ;EventIdleTimeout.c: 27:     inIdleDumpHour = 0;
  5742  0F10  01D3               	clrf	_inIdleDumpHour
  5743                           
  5744                           ;EventIdleTimeout.c: 30:     timer_events[EventIdleTimeout].flag_bit = 1;
  5745  0F11  1683               	bsf	3,5	;RP0=1, select bank1
  5746  0F12  1303               	bcf	3,6	;RP1=0, select bank1
  5747  0F13  14C5               	bsf	(_timer_events^(0+128)+37),1	;volatile
  5748                           
  5749                           ;EventIdleTimeout.c: 31:     timer_events[EventIdleTimeout].flag_data = 0;
  5750  0F14  01C7               	clrf	(_timer_events^(0+128)+39)	;volatile
  5751  0F15  01C8               	clrf	((_timer_events+1)^(0+128)+39)	;volatile
  5752                           
  5753                           ;EventIdleTimeout.c: 32:     enable_callback (EventIdleTimeout, (32767));
  5754  0F16  30FF               	movlw	255
  5755  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  5756  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  5757  0F19  00AB               	movwf	enable_callback@time_delay
  5758  0F1A  307F               	movlw	127
  5759  0F1B  00AC               	movwf	enable_callback@time_delay+1
  5760  0F1C  3005               	movlw	5
  5761  0F1D  120A  158A  2753   	fcall	_enable_callback
  5762  0F20  0008               	return
  5763  0F21                     __end_of_EventIdleTimeoutCallBack:	
  5764                           
  5765                           	psect	text29
  5766  03C5                     __ptext29:	
  5767 ;; *************** function _EventFaultStateLEDCallBack *****************
  5768 ;; Defined at:
  5769 ;;		line 3 in file "EventFaultStateLed.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5783 ;;      Params:         0       0       0       0       0
  5784 ;;      Locals:         0       6       0       0       0
  5785 ;;      Temps:          0       2       0       0       0
  5786 ;;      Totals:         0       8       0       0       0
  5787 ;;Total ram usage:        8 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    7
  5790 ;; This function calls:
  5791 ;;		_enable_callback
  5792 ;; This function is called by:
  5793 ;;		_init_event_timer
  5794 ;;		_process_event_timer
  5795 ;; This function uses a non-reentrant model
  5796 ;;
  5797                           
  5798                           
  5799                           ;psect for function _EventFaultStateLEDCallBack
  5800  03C5                     _EventFaultStateLEDCallBack:	
  5801                           
  5802                           ;EventFaultStateLed.c: 13:   if (!(fault_flags.lwl_fault
  5803                           
  5804                           ;incstack = 0
  5805 ;; hardware stack exceeded
  5806                           ; Regs used in _EventFaultStateLEDCallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5807  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  5808  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  5809  03C7  1C4F               	btfss	_fault_flags,0
  5810  03C8  18CF               	btfsc	_fault_flags,1
  5811  03C9  2BDE               	goto	l20
  5812  03CA  1D4F               	btfss	_fault_flags,2
  5813  03CB  19CF               	btfsc	_fault_flags,3
  5814  03CC  2BDE               	goto	l20
  5815                           
  5816                           ;EventFaultStateLed.c: 16:     || fault_flags.po_fault )) {;EventFaultStateLed.c: 18:   
      +                            { PORTAbits.RA3 = (0);};
  5817  03CD  1185               	bcf	5,3	;volatile
  5818                           
  5819                           ;EventFaultStateLed.c: 19:     timer_events[EventFaultStateLED].flag_bit = 0;
  5820  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  5821  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  5822  03D0  10BE               	bcf	(_timer_events^(0+128)+30),1	;volatile
  5823                           
  5824                           ;EventFaultStateLed.c: 20:     timer_events[EventFaultStateLED].flag_data = 0;
  5825  03D1  01C0               	clrf	(_timer_events^(0+128)+32)	;volatile
  5826  03D2  01C1               	clrf	((_timer_events+1)^(0+128)+32)	;volatile
  5827                           
  5828                           ;EventFaultStateLed.c: 21:     enable_callback (EventFaultStateLED, ((4000000/256/4/256)
      +                          /4));
  5829  03D3  3003               	movlw	3
  5830  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  5831  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  5832  03D6  00AB               	movwf	enable_callback@time_delay
  5833  03D7  3000               	movlw	0
  5834  03D8  00AC               	movwf	enable_callback@time_delay+1
  5835  03D9  3004               	movlw	4
  5836  03DA  120A  158A  2753   	fcall	_enable_callback
  5837                           
  5838                           ;EventFaultStateLed.c: 22:   }
  5839  03DD  0008               	return
  5840  03DE                     l20:	
  5841                           ;EventFaultStateLed.c: 23:   else {
  5842                           
  5843                           
  5844                           ;EventFaultStateLed.c: 29:     if (timer_events[EventFaultStateLED].flag_bit) {
  5845  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  5846  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  5847  03E0  1CBE               	btfss	(_timer_events^(0+128)+30),1	;volatile
  5848  03E1  2C32               	goto	l22
  5849                           
  5850                           ;EventFaultStateLed.c: 31:       { PORTAbits.RA3 = (0);};
  5851  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  5852  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  5853  03E4  1185               	bcf	5,3	;volatile
  5854                           
  5855                           ;EventFaultStateLed.c: 32:       timer_events[EventFaultStateLED].flag_bit = 0;
  5856  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  5857  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  5858  03E7  10BE               	bcf	(_timer_events^(0+128)+30),1	;volatile
  5859                           
  5860                           ;EventFaultStateLed.c: 34:       if (timer_events[EventFaultStateLED].flag_data) {
  5861  03E8  0840               	movf	(_timer_events^(0+128)+32),w	;volatile
  5862  03E9  0441               	iorwf	((_timer_events+1)^(0+128)+32),w	;volatile
  5863  03EA  1903               	btfsc	3,2
  5864  03EB  2BF7               	goto	l23
  5865                           
  5866                           ;EventFaultStateLed.c: 36:  enable_callback (EventFaultStateLED, ((4000000/256/4/256)/4)
      +                          );
  5867  03EC  3003               	movlw	3
  5868  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  5869  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  5870  03EF  00AB               	movwf	enable_callback@time_delay
  5871  03F0  3000               	movlw	0
  5872  03F1  00AC               	movwf	enable_callback@time_delay+1
  5873  03F2  3004               	movlw	4
  5874  03F3  120A  158A  2753   	fcall	_enable_callback
  5875                           
  5876                           ;EventFaultStateLed.c: 37:       }
  5877  03F6  0008               	return
  5878  03F7                     l23:	
  5879                           ;EventFaultStateLed.c: 38:       else {
  5880                           
  5881                           
  5882                           ;EventFaultStateLed.c: 43:  timer_events[EventFaultStateLED].flag_data =
  5883  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  5884  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  5885  03F9  19CF               	btfsc	_fault_flags,3
  5886  03FA  2C19               	goto	l2673
  5887  03FB  194F               	btfsc	_fault_flags,2
  5888  03FC  2C10               	goto	l2671
  5889  03FD  18CF               	btfsc	_fault_flags,1
  5890  03FE  2C07               	goto	l2669
  5891  03FF  084F               	movf	_fault_flags,w
  5892  0400  3901               	andlw	1
  5893  0401  00AF               	movwf	??_EventFaultStateLEDCallBack
  5894  0402  01B0               	clrf	??_EventFaultStateLEDCallBack+1
  5895  0403  082F               	movf	??_EventFaultStateLEDCallBack,w
  5896  0404  00B5               	movwf	_EventFaultStateLEDCallBack$148
  5897  0405  0830               	movf	??_EventFaultStateLEDCallBack+1,w
  5898  0406  2C0A               	goto	L1
  5899  0407                     l2669:	
  5900  0407  3002               	movlw	2
  5901  0408  00B5               	movwf	_EventFaultStateLEDCallBack$148
  5902  0409  3000               	movlw	0
  5903  040A                     L1:	
  5904  040A  00B6               	movwf	_EventFaultStateLEDCallBack$148+1
  5905  040B  0836               	movf	_EventFaultStateLEDCallBack$148+1,w
  5906  040C  00B4               	movwf	_EventFaultStateLEDCallBack$147+1
  5907  040D  0835               	movf	_EventFaultStateLEDCallBack$148,w
  5908  040E  00B3               	movwf	_EventFaultStateLEDCallBack$147
  5909  040F  2C14               	goto	l32
  5910  0410                     l2671:	
  5911  0410  3003               	movlw	3
  5912  0411  00B3               	movwf	_EventFaultStateLEDCallBack$147
  5913  0412  3000               	movlw	0
  5914  0413  00B4               	movwf	_EventFaultStateLEDCallBack$147+1
  5915  0414                     l32:	
  5916  0414  0834               	movf	_EventFaultStateLEDCallBack$147+1,w
  5917  0415  00B2               	movwf	_EventFaultStateLEDCallBack$146+1
  5918  0416  0833               	movf	_EventFaultStateLEDCallBack$147,w
  5919  0417  00B1               	movwf	_EventFaultStateLEDCallBack$146
  5920  0418  2C1D               	goto	l28
  5921  0419                     l2673:	
  5922  0419  3004               	movlw	4
  5923  041A  00B1               	movwf	_EventFaultStateLEDCallBack$146
  5924  041B  3000               	movlw	0
  5925  041C  00B2               	movwf	_EventFaultStateLEDCallBack$146+1
  5926  041D                     l28:	
  5927  041D  0832               	movf	_EventFaultStateLEDCallBack$146+1,w
  5928  041E  1683               	bsf	3,5	;RP0=1, select bank1
  5929  041F  1303               	bcf	3,6	;RP1=0, select bank1
  5930  0420  00C1               	movwf	((_timer_events+1)^(0+128)+32)	;volatile
  5931  0421  1283               	bcf	3,5	;RP0=0, select bank0
  5932  0422  1303               	bcf	3,6	;RP1=0, select bank0
  5933  0423  0831               	movf	_EventFaultStateLEDCallBack$146,w
  5934  0424  1683               	bsf	3,5	;RP0=1, select bank1
  5935  0425  1303               	bcf	3,6	;RP1=0, select bank1
  5936  0426  00C0               	movwf	(_timer_events^(0+128)+32)	;volatile
  5937                           
  5938                           ;EventFaultStateLed.c: 50:  enable_callback (EventFaultStateLED, ((4000000/256/4/256)*1)
      +                          );
  5939  0427  300F               	movlw	15
  5940  0428  1283               	bcf	3,5	;RP0=0, select bank0
  5941  0429  1303               	bcf	3,6	;RP1=0, select bank0
  5942  042A  00AB               	movwf	enable_callback@time_delay
  5943  042B  3000               	movlw	0
  5944  042C  00AC               	movwf	enable_callback@time_delay+1
  5945  042D  3004               	movlw	4
  5946  042E  120A  158A  2753   	fcall	_enable_callback
  5947  0431  0008               	return
  5948  0432                     l22:	
  5949                           ;EventFaultStateLed.c: 53:     else {
  5950                           
  5951                           
  5952                           ;EventFaultStateLed.c: 55:       { PORTAbits.RA3 = (1);};
  5953  0432  1283               	bcf	3,5	;RP0=0, select bank0
  5954  0433  1303               	bcf	3,6	;RP1=0, select bank0
  5955  0434  1585               	bsf	5,3	;volatile
  5956                           
  5957                           ;EventFaultStateLed.c: 56:       timer_events[EventFaultStateLED].flag_bit = 1;
  5958  0435  1683               	bsf	3,5	;RP0=1, select bank1
  5959  0436  1303               	bcf	3,6	;RP1=0, select bank1
  5960  0437  14BE               	bsf	(_timer_events^(0+128)+30),1	;volatile
  5961                           
  5962                           ;EventFaultStateLed.c: 57:       if (timer_events[EventFaultStateLED].flag_data) {
  5963  0438  0840               	movf	(_timer_events^(0+128)+32),w	;volatile
  5964  0439  0441               	iorwf	((_timer_events+1)^(0+128)+32),w	;volatile
  5965  043A  1903               	btfsc	3,2
  5966  043B  2C42               	goto	l2681
  5967                           
  5968                           ;EventFaultStateLed.c: 58:  timer_events[EventFaultStateLED].flag_data--;
  5969  043C  3001               	movlw	1
  5970  043D  02C0               	subwf	(_timer_events^(0+128)+32),f	;volatile
  5971  043E  3000               	movlw	0
  5972  043F  1C03               	skipc
  5973  0440  03C1               	decf	((_timer_events+1)^(0+128)+32),f	;volatile
  5974  0441  02C1               	subwf	((_timer_events+1)^(0+128)+32),f	;volatile
  5975  0442                     l2681:	
  5976                           
  5977                           ;EventFaultStateLed.c: 60:       enable_callback (EventFaultStateLED, ((4000000/256/4/25
      +                          6)/4));
  5978  0442  3003               	movlw	3
  5979  0443  1283               	bcf	3,5	;RP0=0, select bank0
  5980  0444  1303               	bcf	3,6	;RP1=0, select bank0
  5981  0445  00AB               	movwf	enable_callback@time_delay
  5982  0446  3000               	movlw	0
  5983  0447  00AC               	movwf	enable_callback@time_delay+1
  5984  0448  3004               	movlw	4
  5985  0449  120A  158A  2753   	fcall	_enable_callback
  5986  044C  0008               	return
  5987  044D                     __end_of_EventFaultStateLEDCallBack:	
  5988                           
  5989                           	psect	text30
  5990  0BC3                     __ptext30:	
  5991 ;; *************** function _EventDumpSolenoidCallBack *****************
  5992 ;; Defined at:
  5993 ;;		line 3 in file "EventDumpsolenoid.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		status,2
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6007 ;;      Params:         0       0       0       0       0
  6008 ;;      Locals:         0       0       0       0       0
  6009 ;;      Temps:          0       0       0       0       0
  6010 ;;      Totals:         0       0       0       0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    5
  6014 ;; This function calls:
  6015 ;;		Nothing
  6016 ;; This function is called by:
  6017 ;;		_init_event_timer
  6018 ;;		_process_event_timer
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _EventDumpSolenoidCallBack
  6024  0BC3                     _EventDumpSolenoidCallBack:	
  6025                           
  6026                           ;EventDumpsolenoid.c: 5:   { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidBit = (0);};
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _EventDumpSolenoidCallBack: [status,2]
  6030  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  6031  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  6032  0BC5  1105               	bcf	5,2	;volatile
  6033  0BC6  1050               	bcf	_fault_flags+1,0
  6034                           
  6035                           ;EventDumpsolenoid.c: 7:   state = standbyState;
  6036  0BC7  01D4               	clrf	_state
  6037  0BC8  0008               	return
  6038  0BC9                     __end_of_EventDumpSolenoidCallBack:	
  6039                           
  6040                           	psect	text31
  6041  0C17                     __ptext31:	
  6042 ;; *************** function _EventRunSignalDebounceCallBack *****************
  6043 ;; Defined at:
  6044 ;;		line 4 in file "EventRunSignalDebounce.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;		None
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;		None
  6049 ;; Return value:  Size  Location     Type
  6050 ;;                  1    wreg      void 
  6051 ;; Registers used:
  6052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6058 ;;      Params:         0       0       0       0       0
  6059 ;;      Locals:         0       0       0       0       0
  6060 ;;      Temps:          0       1       0       0       0
  6061 ;;      Totals:         0       1       0       0       0
  6062 ;;Total ram usage:        1 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    8
  6065 ;; This function calls:
  6066 ;;		_clear_callback_for_shutdown
  6067 ;; This function is called by:
  6068 ;;		_init_event_timer
  6069 ;;		_process_event_timer
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           
  6074                           ;psect for function _EventRunSignalDebounceCallBack
  6075  0C17                     _EventRunSignalDebounceCallBack:	
  6076                           
  6077                           ;EventRunSignalDebounce.c: 9:     state = timer_events[EventRunSignalDebounce].next_stat
      +                          e;
  6078                           
  6079                           ;incstack = 0
  6080 ;; hardware stack exceeded
  6081                           ; Regs used in _EventRunSignalDebounceCallBack: [wreg-fsr0h+status,2+status,0+pclath+cst
      +                          ack]
  6082  0C17  1683               	bsf	3,5	;RP0=1, select bank1
  6083  0C18  1303               	bcf	3,6	;RP1=0, select bank1
  6084  0C19  0854               	movf	(_timer_events^(0+128)+52),w	;volatile
  6085  0C1A  1283               	bcf	3,5	;RP0=0, select bank0
  6086  0C1B  1303               	bcf	3,6	;RP1=0, select bank0
  6087  0C1C  00AD               	movwf	??_EventRunSignalDebounceCallBack
  6088  0C1D  082D               	movf	??_EventRunSignalDebounceCallBack,w
  6089  0C1E  00D4               	movwf	_state
  6090                           
  6091                           ;EventRunSignalDebounce.c: 10:     if (shutdownState == state) {
  6092  0C1F  0354               	decf	_state,w
  6093  0C20  1D03               	btfss	3,2
  6094  0C21  0008               	return
  6095                           
  6096                           ;EventRunSignalDebounce.c: 12:         clear_callback_for_shutdown();
  6097  0C22  120A  158A  2648   	fcall	_clear_callback_for_shutdown
  6098  0C25  0008               	return
  6099  0C26                     __end_of_EventRunSignalDebounceCallBack:	
  6100                           
  6101                           	psect	text32
  6102  0E48                     __ptext32:	
  6103 ;; *************** function _clear_callback_for_shutdown *****************
  6104 ;; Defined at:
  6105 ;;		line 30 in file "timer_event.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      void 
  6112 ;; Registers used:
  6113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6119 ;;      Params:         0       0       0       0       0
  6120 ;;      Locals:         0       0       0       0       0
  6121 ;;      Temps:          0       0       0       0       0
  6122 ;;      Totals:         0       0       0       0       0
  6123 ;;Total ram usage:        0 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    7
  6126 ;; This function calls:
  6127 ;;		_clear_callback
  6128 ;; This function is called by:
  6129 ;;		_EventLowFogPressureCallBack
  6130 ;;		_EventLowWaterLevelCallBack
  6131 ;;		_EventLowWaterPressureCallBack
  6132 ;;		_EventPODebounceCallBack
  6133 ;;		_EventRunSignalDebounceCallBack
  6134 ;;		_start_pump
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function _clear_callback_for_shutdown
  6140  0E48                     _clear_callback_for_shutdown:	
  6141                           
  6142                           ;timer_event.c: 31:     clear_callback(EventLowWaterLevel);
  6143                           
  6144                           ;incstack = 0
  6145 ;; hardware stack exceeded
  6146                           ; Regs used in _clear_callback_for_shutdown: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  6147  0E48  3000               	movlw	0
  6148  0E49  120A  158A  2426  120A  158A  	fcall	_clear_callback
  6149                           
  6150                           ;timer_event.c: 32:     clear_callback(EventLowWaterPressure);
  6151  0E4E  3001               	movlw	1
  6152  0E4F  120A  158A  2426  120A  158A  	fcall	_clear_callback
  6153                           
  6154                           ;timer_event.c: 33:     clear_callback(EventLowWaterPressureDebounce);
  6155  0E54  3002               	movlw	2
  6156  0E55  120A  158A  2426  120A  158A  	fcall	_clear_callback
  6157                           
  6158                           ;timer_event.c: 34:     clear_callback(EventLowFogPressure);
  6159  0E5A  3003               	movlw	3
  6160  0E5B  120A  158A  2426  120A  158A  	fcall	_clear_callback
  6161                           
  6162                           ;timer_event.c: 35:     clear_callback(EventDumpSolenoid);
  6163  0E60  3006               	movlw	6
  6164  0E61  120A  158A  2426  120A  158A  	fcall	_clear_callback
  6165                           
  6166                           ;timer_event.c: 36:     clear_callback(EventPODebounce);
  6167  0E66  3008               	movlw	8
  6168  0E67  120A  158A  2426  120A  158A  	fcall	_clear_callback
  6169                           
  6170                           ;timer_event.c: 37:     clear_callback(EventRunSignalDebounce);
  6171  0E6C  3007               	movlw	7
  6172  0E6D  120A  158A  2426   	fcall	_clear_callback
  6173  0E70  0008               	return
  6174  0E71                     __end_of_clear_callback_for_shutdown:	
  6175                           
  6176                           	psect	text33
  6177  07FE                     __ptext33:	
  6178 ;; *************** function _printPumpState *****************
  6179 ;; Defined at:
  6180 ;;		line 128 in file "pump_control.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;		None
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;		None
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      void 
  6187 ;; Registers used:
  6188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6194 ;;      Params:         0       0       0       0       0
  6195 ;;      Locals:         0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0
  6197 ;;      Totals:         0       0       0       0       0
  6198 ;;Total ram usage:        0 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    8
  6201 ;; This function calls:
  6202 ;;		_printf
  6203 ;; This function is called by:
  6204 ;;		_main
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function _printPumpState
  6210  07FE                     _printPumpState:	
  6211                           
  6212                           ;pump_control.c: 129:     return;
  6213                           
  6214                           ;incstack = 0
  6215 ;; hardware stack exceeded
  6216                           ; Regs used in _printPumpState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6217  07FE  0008               	return
  6218  07FF                     __end_of_printPumpState:	
  6219                           
  6220                           	psect	text34
  6221  07FF                     __ptext34:	
  6222 ;; *************** function _printFaultState *****************
  6223 ;; Defined at:
  6224 ;;		line 133 in file "pump_control.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;		None
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;		None
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      void 
  6231 ;; Registers used:
  6232 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6238 ;;      Params:         0       0       0       0       0
  6239 ;;      Locals:         0       0       0       0       0
  6240 ;;      Temps:          0       0       0       0       0
  6241 ;;      Totals:         0       0       0       0       0
  6242 ;;Total ram usage:        0 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    8
  6245 ;; This function calls:
  6246 ;;		_printf
  6247 ;; This function is called by:
  6248 ;;		_main
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function _printFaultState
  6254  07FF                     _printFaultState:	
  6255                           
  6256                           ;pump_control.c: 134:     return;
  6257                           
  6258                           ;incstack = 0
  6259 ;; hardware stack exceeded
  6260                           ; Regs used in _printFaultState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6261  07FF  0008               	return
  6262  0800                     __end_of_printFaultState:	
  6263                           
  6264                           	psect	text35
  6265  005F                     __ptext35:	
  6266 ;; *************** function _printf *****************
  6267 ;; Defined at:
  6268 ;;		line 472 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6271 ;;		 -> STR_18(15), STR_17(18), STR_16(18), STR_15(15), 
  6272 ;;		 -> STR_14(14), STR_13(10), STR_12(11), STR_11(12), 
  6273 ;;		 -> STR_10(12), STR_9(12), STR_8(15), STR_7(15), 
  6274 ;;		 -> STR_6(17), STR_5(31), STR_4(21), STR_3(24), 
  6275 ;;		 -> STR_2(16), STR_1(15), 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  tmpval          4    0        struct .
  6278 ;;  cp              2    0        PTR const unsigned char 
  6279 ;;  len             2    0        unsigned int 
  6280 ;;  val             2    0        unsigned int 
  6281 ;;  c               1   22[BANK0 ] unsigned char 
  6282 ;;  flag            1    0        unsigned char 
  6283 ;;  ap              1   20[BANK0 ] PTR void [1]
  6284 ;;		 -> ?_printf(2), 
  6285 ;;  prec            1    0        char 
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  2   14[BANK0 ] int 
  6288 ;; Registers used:
  6289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6295 ;;      Params:         0       2       0       0       0
  6296 ;;      Locals:         0       3       0       0       0
  6297 ;;      Temps:          0       4       0       0       0
  6298 ;;      Totals:         0       9       0       0       0
  6299 ;;Total ram usage:        9 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    7
  6302 ;; This function calls:
  6303 ;;		_putch
  6304 ;; This function is called by:
  6305 ;;		_printPumpState
  6306 ;;		_printFaultState
  6307 ;;		_main
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           
  6312                           ;psect for function _printf
  6313  005F                     _printf:	
  6314                           
  6315                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 472: printf
      +                          (const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\
      +                          doprnt.c: 473: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprn
      +                          t.c: 474:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common
      +                          \doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\comm
      +                          on\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 520:  unsigned char flag;
  6316                           
  6317                           ;incstack = 0
  6318 ;; using string table level
  6319                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6320  005F  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6321  0060  1283               	bcf	3,5	;RP0=0, select bank0
  6322  0061  1303               	bcf	3,6	;RP1=0, select bank0
  6323  0062  00B0               	movwf	??_printf
  6324  0063  0830               	movf	??_printf,w
  6325  0064  00B4               	movwf	printf@ap
  6326  0065                     l3473:	
  6327                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  6328                           
  6329                           
  6330                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  6331  0065  1283               	bcf	3,5	;RP0=0, select bank0
  6332  0066  1303               	bcf	3,6	;RP1=0, select bank0
  6333  0067  082F               	movf	printf@f+1,w
  6334  0068  00B1               	movwf	??_printf+1
  6335  0069  082E               	movf	printf@f,w
  6336  006A  00B0               	movwf	??_printf
  6337  006B  0AAE               	incf	printf@f,f
  6338  006C  1903               	skipnz
  6339  006D  0AAF               	incf	printf@f+1,f
  6340  006E  0831               	movf	??_printf+1,w
  6341  006F  00FF               	movwf	127
  6342  0070  0830               	movf	??_printf,w
  6343  0071  0084               	movwf	4
  6344  0072  120A  158A  2000  120A  118A  	fcall	stringtab
  6345  0077  00B2               	movwf	??_printf+2
  6346  0078  0832               	movf	??_printf+2,w
  6347  0079  00B6               	movwf	printf@c
  6348  007A  0836               	movf	printf@c,w
  6349  007B  1903               	btfsc	3,2
  6350  007C  0008               	return
  6351                           
  6352                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  6353  007D  3025               	movlw	37
  6354  007E  0636               	xorwf	printf@c,w
  6355  007F  1903               	btfsc	3,2
  6356  0080  2888               	goto	l3471
  6357  0081                     l3467:	
  6358                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  6359                           
  6360                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  6361                           
  6362                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    (putch
      +                          (c) );
  6363                           
  6364                           
  6365                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 828:    (pu
      +                          tch(c) );
  6366  0081  0836               	movf	printf@c,w
  6367  0082  120A  158A  23FE  120A  118A  	fcall	_putch
  6368                           
  6369                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 829:    con
      +                          tinue;
  6370  0087  2865               	goto	l3473
  6371  0088                     l3471:	
  6372  0088  082F               	movf	printf@f+1,w
  6373  0089  00B1               	movwf	??_printf+1
  6374  008A  082E               	movf	printf@f,w
  6375  008B  00B0               	movwf	??_printf
  6376  008C  0AAE               	incf	printf@f,f
  6377  008D  1903               	skipnz
  6378  008E  0AAF               	incf	printf@f+1,f
  6379  008F  0831               	movf	??_printf+1,w
  6380  0090  00FF               	movwf	127
  6381  0091  0830               	movf	??_printf,w
  6382  0092  0084               	movwf	4
  6383  0093  120A  158A  2000  120A  118A  	fcall	stringtab
  6384  0098  00B6               	movwf	printf@c
  6385  0099  00B2               	movwf	??_printf+2
  6386  009A  01B3               	clrf	??_printf+3
  6387                           
  6388                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6389                           ; Switch size 1, requested type "simple"
  6390                           ; Number of cases is 1, Range of values is 0 to 0
  6391                           ; switch strategies available:
  6392                           ; Name         Instructions Cycles
  6393                           ; simple_byte            4     3 (average)
  6394                           ; direct_byte           11     8 (fixed)
  6395                           ; jumptable            260     6 (fixed)
  6396                           ;	Chosen strategy is simple_byte
  6397  009B  0833               	movf	??_printf+3,w
  6398  009C  3A00               	xorlw	0	; case 0
  6399  009D  1903               	skipnz
  6400  009E  28A0               	goto	l3897
  6401  009F  2881               	goto	l3467
  6402  00A0                     l3897:	
  6403                           
  6404                           ; Switch size 1, requested type "simple"
  6405                           ; Number of cases is 1, Range of values is 0 to 0
  6406                           ; switch strategies available:
  6407                           ; Name         Instructions Cycles
  6408                           ; simple_byte            4     3 (average)
  6409                           ; direct_byte           11     8 (fixed)
  6410                           ; jumptable            260     6 (fixed)
  6411                           ;	Chosen strategy is simple_byte
  6412  00A0  0832               	movf	??_printf+2,w
  6413  00A1  3A00               	xorlw	0	; case 0
  6414  00A2  1903               	skipnz
  6415  00A3  28A6               	goto	l811
  6416  00A4  2881               	goto	l3467
  6417  00A5  2865               	goto	l3473
  6418  00A6                     l811:	
  6419  00A6  0008               	return
  6420  00A7                     __end_of_printf:	
  6421                           
  6422                           	psect	text36
  6423  0BFE                     __ptext36:	
  6424 ;; *************** function _putch *****************
  6425 ;; Defined at:
  6426 ;;		line 217 in file "serial.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  c               1    wreg     unsigned char 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  c               1   13[BANK0 ] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      void 
  6433 ;; Registers used:
  6434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6440 ;;      Params:         0       0       0       0       0
  6441 ;;      Locals:         0       1       0       0       0
  6442 ;;      Temps:          0       1       0       0       0
  6443 ;;      Totals:         0       2       0       0       0
  6444 ;;Total ram usage:        2 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    6
  6447 ;; This function calls:
  6448 ;;		_push
  6449 ;; This function is called by:
  6450 ;;		_puts
  6451 ;;		_output_message
  6452 ;;		_printf
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           
  6457                           ;psect for function _putch
  6458  0BFE                     _putch:	
  6459                           
  6460                           ;incstack = 0
  6461 ;; hardware stack exceeded
  6462                           ; Regs used in _putch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6463                           ;putch@c stored from wreg
  6464  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  6465  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  6466  0C00  00AD               	movwf	putch@c
  6467                           
  6468                           ;serial.c: 218:     push(&outbound, c);
  6469  0C01  082D               	movf	putch@c,w
  6470  0C02  00AC               	movwf	??_putch
  6471  0C03  082C               	movf	??_putch,w
  6472  0C04  00A7               	movwf	push@d
  6473  0C05  30B4               	movlw	(low (_outbound| (0+256)))& (0+255)
  6474  0C06  120A  158A  256F   	fcall	_push
  6475  0C09  0008               	return
  6476  0C0A                     __end_of_putch:	
  6477                           
  6478                           	psect	text37
  6479  0D6F                     __ptext37:	
  6480 ;; *************** function _push *****************
  6481 ;; Defined at:
  6482 ;;		line 10 in file "serial_buffer.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  buff            1    wreg     PTR struct .
  6485 ;;		 -> inbound(36), outbound(36), 
  6486 ;;  d               1    7[BANK0 ] unsigned char 
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;  buff            1   11[BANK0 ] PTR struct .
  6489 ;;		 -> inbound(36), outbound(36), 
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      void 
  6492 ;; Registers used:
  6493 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6499 ;;      Params:         0       1       0       0       0
  6500 ;;      Locals:         0       1       0       0       0
  6501 ;;      Temps:          0       3       0       0       0
  6502 ;;      Totals:         0       5       0       0       0
  6503 ;;Total ram usage:        5 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    5
  6506 ;; This function calls:
  6507 ;;		Nothing
  6508 ;; This function is called by:
  6509 ;;		_serial_process_loop
  6510 ;;		_putch
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           
  6515                           ;psect for function _push
  6516  0D6F                     _push:	
  6517                           
  6518                           ;incstack = 0
  6519 ;; hardware stack exceeded
  6520                           ; Regs used in _push: [wreg-fsr0h+status,2+status,0]
  6521                           ;push@buff stored from wreg
  6522  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  6523  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  6524  0D71  00AB               	movwf	push@buff
  6525                           
  6526                           ;serial_buffer.c: 14:     GIE = 0;
  6527  0D72  138B               	bcf	11,7	;volatile
  6528                           
  6529                           ;serial_buffer.c: 15:     buff->data[(buff->start + buff->length) % 32] = d;
  6530  0D73  0827               	movf	push@d,w
  6531  0D74  00A8               	movwf	??_push
  6532  0D75  082B               	movf	push@buff,w
  6533  0D76  3E22               	addlw	34
  6534  0D77  0084               	movwf	4
  6535  0D78  1783               	bsf	3,7	;select IRP bank2
  6536  0D79  0800               	movf	0,w
  6537  0D7A  00A9               	movwf	??_push+1
  6538  0D7B  082B               	movf	push@buff,w
  6539  0D7C  3E20               	addlw	32
  6540  0D7D  0084               	movwf	4
  6541  0D7E  0800               	movf	0,w
  6542  0D7F  0729               	addwf	??_push+1,w
  6543  0D80  391F               	andlw	31
  6544  0D81  072B               	addwf	push@buff,w
  6545  0D82  00AA               	movwf	??_push+2
  6546  0D83  082A               	movf	??_push+2,w
  6547  0D84  0084               	movwf	4
  6548  0D85  0828               	movf	??_push,w
  6549  0D86  0080               	movwf	0
  6550                           
  6551                           ;serial_buffer.c: 16:     buff->length++;
  6552  0D87  082B               	movf	push@buff,w
  6553  0D88  3E22               	addlw	34
  6554  0D89  0084               	movwf	4
  6555  0D8A  3001               	movlw	1
  6556  0D8B  0780               	addwf	0,f
  6557  0D8C  0A84               	incf	4,f
  6558  0D8D  1803               	skipnc
  6559  0D8E  0A80               	incf	0,f
  6560                           
  6561                           ;serial_buffer.c: 17:     GIE = 1;
  6562  0D8F  178B               	bsf	11,7	;volatile
  6563  0D90  0008               	return
  6564  0D91                     __end_of_push:	
  6565                           
  6566                           	psect	text38
  6567  0DD6                     __ptext38:	
  6568 ;; *************** function _monitor_water_pressure *****************
  6569 ;; Defined at:
  6570 ;;		line 4 in file "MonitorWaterPressure.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;		None
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;		None
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      void 
  6577 ;; Registers used:
  6578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6584 ;;      Params:         0       0       0       0       0
  6585 ;;      Locals:         0       0       0       0       0
  6586 ;;      Temps:          0       1       0       0       0
  6587 ;;      Totals:         0       1       0       0       0
  6588 ;;Total ram usage:        1 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    7
  6591 ;; This function calls:
  6592 ;;		_clear_callback
  6593 ;;		_enable_callback
  6594 ;; This function is called by:
  6595 ;;		_main
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _monitor_water_pressure
  6601  0DD6                     _monitor_water_pressure:	
  6602                           
  6603                           ;MonitorWaterPressure.c: 8:   if (( PORTCbits.RC0) == fault_flags.wpOkBit){
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _monitor_water_pressure: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6607  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  6608  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  6609  0DD8  1E4F               	btfss	_fault_flags,4
  6610  0DD9  2DDC               	goto	u1600
  6611  0DDA  3001               	movlw	1
  6612  0DDB  2DDD               	goto	u1602
  6613  0DDC                     u1600:	
  6614  0DDC  3000               	movlw	0
  6615  0DDD                     u1602:	
  6616  0DDD  00AF               	movwf	??_monitor_water_pressure
  6617  0DDE  1C07               	btfss	7,0	;volatile
  6618  0DDF  2DE2               	goto	u1610
  6619  0DE0  3001               	movlw	1
  6620  0DE1  2DE3               	goto	u1612
  6621  0DE2                     u1610:	
  6622  0DE2  3000               	movlw	0
  6623  0DE3                     u1612:	
  6624  0DE3  062F               	xorwf	??_monitor_water_pressure,w
  6625  0DE4  1D03               	skipz
  6626  0DE5  2DF4               	goto	l2901
  6627                           
  6628                           ;MonitorWaterPressure.c: 12:        timer_events[EventLowWaterPressureDebounce].flag_bit
      +                           = 0;
  6629  0DE6  1683               	bsf	3,5	;RP0=1, select bank1
  6630  0DE7  1303               	bcf	3,6	;RP1=0, select bank1
  6631  0DE8  10B0               	bcf	(_timer_events^(0+128)+16),1	;volatile
  6632                           
  6633                           ;MonitorWaterPressure.c: 14:     enable_callback (EventLowWaterPressureDebounce, (3*(400
      +                          0000/256/4/256)));
  6634  0DE9  302D               	movlw	45
  6635  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  6636  0DEB  1303               	bcf	3,6	;RP1=0, select bank0
  6637  0DEC  00AB               	movwf	enable_callback@time_delay
  6638  0DED  3000               	movlw	0
  6639  0DEE  00AC               	movwf	enable_callback@time_delay+1
  6640  0DEF  3002               	movlw	2
  6641  0DF0  120A  158A  2753   	fcall	_enable_callback
  6642                           
  6643                           ;MonitorWaterPressure.c: 15:   } else{
  6644  0DF3  0008               	return
  6645  0DF4                     l2901:	
  6646                           
  6647                           ;MonitorWaterPressure.c: 17:     clear_callback(EventLowWaterPressureDebounce);
  6648  0DF4  3002               	movlw	2
  6649  0DF5  120A  158A  2426   	fcall	_clear_callback
  6650  0DF8  0008               	return
  6651  0DF9                     __end_of_monitor_water_pressure:	
  6652                           
  6653                           	psect	text39
  6654  0C26                     __ptext39:	
  6655 ;; *************** function _clear_callback *****************
  6656 ;; Defined at:
  6657 ;;		line 25 in file "timer_event.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  callback        1    wreg     unsigned char 
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;  callback        1   12[BANK0 ] unsigned char 
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      void 
  6664 ;; Registers used:
  6665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6671 ;;      Params:         0       0       0       0       0
  6672 ;;      Locals:         0       1       0       0       0
  6673 ;;      Temps:          0       1       0       0       0
  6674 ;;      Totals:         0       2       0       0       0
  6675 ;;Total ram usage:        2 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    6
  6678 ;; This function calls:
  6679 ;;		___bmul
  6680 ;; This function is called by:
  6681 ;;		_monitor_water_pressure
  6682 ;;		_main
  6683 ;;		_pump_run
  6684 ;;		_monitor_pump_run
  6685 ;;		_standby
  6686 ;;		_start_main
  6687 ;;		_start_pump
  6688 ;;		_clear_callback_for_shutdown
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           
  6693                           ;psect for function _clear_callback
  6694  0C26                     _clear_callback:	
  6695                           
  6696                           ;incstack = 0
  6697 ;; hardware stack exceeded
  6698                           ; Regs used in _clear_callback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6699                           ;clear_callback@callback stored from wreg
  6700  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  6701  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  6702  0C28  00AC               	movwf	clear_callback@callback
  6703                           
  6704                           ;timer_event.c: 26:     timer_events[callback].active = 0;
  6705  0C29  3007               	movlw	7
  6706  0C2A  00AB               	movwf	??_clear_callback
  6707  0C2B  082B               	movf	??_clear_callback,w
  6708  0C2C  00A7               	movwf	___bmul@multiplicand
  6709  0C2D  082C               	movf	clear_callback@callback,w
  6710  0C2E  120A  158A  247A   	fcall	___bmul
  6711  0C31  3EA2               	addlw	(low ((_timer_events| 0+2)))& (0+255)
  6712  0C32  0084               	movwf	4
  6713  0C33  1383               	bcf	3,7	;select IRP bank1
  6714  0C34  1000               	bcf	0,0
  6715  0C35  0008               	return
  6716  0C36                     __end_of_clear_callback:	
  6717                           
  6718                           	psect	text40
  6719  0C68                     __ptext40:	
  6720 ;; *************** function _checkIfShoudReset *****************
  6721 ;; Defined at:
  6722 ;;		line 257 in file "pump_control.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      void 
  6729 ;; Registers used:
  6730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6736 ;;      Params:         0       0       0       0       0
  6737 ;;      Locals:         0       0       0       0       0
  6738 ;;      Temps:          0       0       0       0       0
  6739 ;;      Totals:         0       0       0       0       0
  6740 ;;Total ram usage:        0 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    9
  6743 ;; This function calls:
  6744 ;;		_resetPump
  6745 ;; This function is called by:
  6746 ;;		_main
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function _checkIfShoudReset
  6752  0C68                     _checkIfShoudReset:	
  6753                           
  6754                           ;pump_control.c: 259:     if (!( (!PORTCbits.RC1) || (combinedZones != 0) )
  6755                           
  6756                           ;incstack = 0
  6757 ;; hardware stack exceeded
  6758                           ; Regs used in _checkIfShoudReset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6759  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  6760  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  6761  0C6A  1C87               	btfss	7,1	;volatile
  6762  0C6B  0008               	return
  6763  0C6C  085F               	movf	_combinedZones,w
  6764  0C6D  1D03               	btfss	3,2
  6765  0C6E  0008               	return
  6766  0C6F  1C4F               	btfss	_fault_flags,0
  6767  0C70  18CF               	btfsc	_fault_flags,1
  6768  0C71  2C76               	goto	l2961
  6769  0C72  194F               	btfsc	_fault_flags,2
  6770  0C73  2C76               	goto	l2961
  6771  0C74  1DCF               	btfss	_fault_flags,3
  6772  0C75  0008               	return
  6773  0C76                     l2961:	
  6774                           
  6775                           ;pump_control.c: 264:             ) {;pump_control.c: 266:         resetPump();
  6776  0C76  120A  158A  23D8   	fcall	_resetPump
  6777  0C79  0008               	return
  6778  0C7A                     __end_of_checkIfShoudReset:	
  6779                           
  6780                           	psect	text41
  6781  0BD8                     __ptext41:	
  6782 ;; *************** function _resetPump *****************
  6783 ;; Defined at:
  6784 ;;		line 245 in file "pump_control.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;		None
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  1    wreg      void 
  6791 ;; Registers used:
  6792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6798 ;;      Params:         0       0       0       0       0
  6799 ;;      Locals:         0       0       0       0       0
  6800 ;;      Temps:          0       0       0       0       0
  6801 ;;      Totals:         0       0       0       0       0
  6802 ;;Total ram usage:        0 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    8
  6805 ;; This function calls:
  6806 ;;		_init
  6807 ;;		_init_event_timer
  6808 ;; This function is called by:
  6809 ;;		_checkIfShoudReset
  6810 ;;		_process_reset_pump
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           
  6815                           ;psect for function _resetPump
  6816  0BD8                     _resetPump:	
  6817                           
  6818                           ;pump_control.c: 246:     init();
  6819                           
  6820                           ;incstack = 0
  6821 ;; hardware stack exceeded
  6822                           ; Regs used in _resetPump: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6823  0BD8  120A  118A  2747  120A  158A  	fcall	_init
  6824                           
  6825                           ;pump_control.c: 247:     init_event_timer();
  6826  0BDD  120A  118A  25BE   	fcall	_init_event_timer
  6827  0BE0  0008               	return
  6828  0BE1                     __end_of_resetPump:	
  6829                           
  6830                           	psect	text42
  6831  05BE                     __ptext42:	
  6832 ;; *************** function _init_event_timer *****************
  6833 ;; Defined at:
  6834 ;;		line 41 in file "timer_event.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;		None
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1    wreg      void 
  6841 ;; Registers used:
  6842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6848 ;;      Params:         0       0       0       0       0
  6849 ;;      Locals:         0       0       0       0       0
  6850 ;;      Temps:          0       1       0       0       0
  6851 ;;      Totals:         0       1       0       0       0
  6852 ;;Total ram usage:        1 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    7
  6855 ;; This function calls:
  6856 ;;		_enable_callback
  6857 ;; This function is called by:
  6858 ;;		_resetPump
  6859 ;;		_main
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function _init_event_timer
  6865  05BE                     _init_event_timer:	
  6866                           
  6867                           ;timer_event.c: 45:     timer_events[EventLowWaterLevel].callback = EventLowWaterLevelCa
      +                          llBack;;
  6868                           
  6869                           ;incstack = 0
  6870 ;; hardware stack exceeded
  6871                           ; Regs used in _init_event_timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6872  05BE  3019               	movlw	(low (fp__EventLowWaterLevelCallBack-fpbase))& (0+255)
  6873  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  6874  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  6875  05C1  00AF               	movwf	??_init_event_timer
  6876  05C2  082F               	movf	??_init_event_timer,w
  6877  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  6878  05C4  1303               	bcf	3,6	;RP1=0, select bank1
  6879  05C5  00A6               	movwf	(low ((_timer_events| 0+6)))^(0+128)	;volatile
  6880                           
  6881                           ;timer_event.c: 47:     timer_events[EventLowWaterPressure].callback = EventLowWaterPres
      +                          sureCallBack;;
  6882  05C6  3016               	movlw	(low (fp__EventLowWaterPressureCallBack-fpbase))& (0+255)
  6883  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  6884  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  6885  05C9  00AF               	movwf	??_init_event_timer
  6886  05CA  082F               	movf	??_init_event_timer,w
  6887  05CB  1683               	bsf	3,5	;RP0=1, select bank1
  6888  05CC  1303               	bcf	3,6	;RP1=0, select bank1
  6889  05CD  00AD               	movwf	(low ((_timer_events| 0+13)))^(0+128)	;volatile
  6890                           
  6891                           ;timer_event.c: 48:     timer_events[EventLowWaterPressureDebounce].callback = EventLowW
      +                          aterPressureDebounceCallBack;;
  6892  05CE  3013               	movlw	(low (fp__EventLowWaterPressureDebounceCallBack-fpbase))& (0+255)
  6893  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  6894  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  6895  05D1  00AF               	movwf	??_init_event_timer
  6896  05D2  082F               	movf	??_init_event_timer,w
  6897  05D3  1683               	bsf	3,5	;RP0=1, select bank1
  6898  05D4  1303               	bcf	3,6	;RP1=0, select bank1
  6899  05D5  00B4               	movwf	(low ((_timer_events| 0+20)))^(0+128)	;volatile
  6900                           
  6901                           ;timer_event.c: 50:     timer_events[EventLowFogPressure].callback = EventLowFogPressure
      +                          CallBack;;
  6902  05D6  3010               	movlw	(low (fp__EventLowFogPressureCallBack-fpbase))& (0+255)
  6903  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  6904  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  6905  05D9  00AF               	movwf	??_init_event_timer
  6906  05DA  082F               	movf	??_init_event_timer,w
  6907  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  6908  05DC  1303               	bcf	3,6	;RP1=0, select bank1
  6909  05DD  00BB               	movwf	(low ((_timer_events| 0+27)))^(0+128)	;volatile
  6910                           
  6911                           ;timer_event.c: 51:     timer_events[EventFaultStateLED].callback = EventFaultStateLEDCa
      +                          llBack;;
  6912  05DE  300D               	movlw	(low (fp__EventFaultStateLEDCallBack-fpbase))& (0+255)
  6913  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  6914  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  6915  05E1  00AF               	movwf	??_init_event_timer
  6916  05E2  082F               	movf	??_init_event_timer,w
  6917  05E3  1683               	bsf	3,5	;RP0=1, select bank1
  6918  05E4  1303               	bcf	3,6	;RP1=0, select bank1
  6919  05E5  00C2               	movwf	(low ((_timer_events| 0+34)))^(0+128)	;volatile
  6920                           
  6921                           ;timer_event.c: 52:     enable_callback(EventFaultStateLED, 1);
  6922  05E6  3001               	movlw	1
  6923  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  6924  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  6925  05E9  00AB               	movwf	enable_callback@time_delay
  6926  05EA  3000               	movlw	0
  6927  05EB  00AC               	movwf	enable_callback@time_delay+1
  6928  05EC  3004               	movlw	4
  6929  05ED  120A  158A  2753   	fcall	_enable_callback
  6930                           
  6931                           ;timer_event.c: 53:     timer_events[EventIdleTimeout].callback = EventIdleTimeoutCallBa
      +                          ck;;
  6932  05F0  300A               	movlw	(low (fp__EventIdleTimeoutCallBack-fpbase))& (0+255)
  6933  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  6934  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  6935  05F3  00AF               	movwf	??_init_event_timer
  6936  05F4  082F               	movf	??_init_event_timer,w
  6937  05F5  1683               	bsf	3,5	;RP0=1, select bank1
  6938  05F6  1303               	bcf	3,6	;RP1=0, select bank1
  6939  05F7  00C9               	movwf	(low ((_timer_events| 0+41)))^(0+128)	;volatile
  6940                           
  6941                           ;timer_event.c: 54:     timer_events[EventDumpSolenoid].callback = EventDumpSolenoidCall
      +                          Back;;
  6942  05F8  3007               	movlw	(low (fp__EventDumpSolenoidCallBack-fpbase))& (0+255)
  6943  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  6944  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  6945  05FB  00AF               	movwf	??_init_event_timer
  6946  05FC  082F               	movf	??_init_event_timer,w
  6947  05FD  1683               	bsf	3,5	;RP0=1, select bank1
  6948  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  6949  05FF  00D0               	movwf	(low ((_timer_events| 0+48)))^(0+128)	;volatile
  6950                           
  6951                           ;timer_event.c: 55:     timer_events[EventPODebounce].callback = EventPODebounceCallBack
      +                          ;;
  6952  0600  3004               	movlw	(low (fp__EventPODebounceCallBack-fpbase))& (0+255)
  6953  0601  1283               	bcf	3,5	;RP0=0, select bank0
  6954  0602  1303               	bcf	3,6	;RP1=0, select bank0
  6955  0603  00AF               	movwf	??_init_event_timer
  6956  0604  082F               	movf	??_init_event_timer,w
  6957  0605  1683               	bsf	3,5	;RP0=1, select bank1
  6958  0606  1303               	bcf	3,6	;RP1=0, select bank1
  6959  0607  00DE               	movwf	(low ((_timer_events| 0+62)))^(0+128)	;volatile
  6960                           
  6961                           ;timer_event.c: 56:     timer_events[EventRunSignalDebounce].callback = EventRunSignalDe
      +                          bounceCallBack;;
  6962  0608  3001               	movlw	(low (fp__EventRunSignalDebounceCallBack-fpbase))& (0+255)
  6963  0609  1283               	bcf	3,5	;RP0=0, select bank0
  6964  060A  1303               	bcf	3,6	;RP1=0, select bank0
  6965  060B  00AF               	movwf	??_init_event_timer
  6966  060C  082F               	movf	??_init_event_timer,w
  6967  060D  1683               	bsf	3,5	;RP0=1, select bank1
  6968  060E  1303               	bcf	3,6	;RP1=0, select bank1
  6969  060F  00D7               	movwf	(low ((_timer_events| 0+55)))^(0+128)	;volatile
  6970                           
  6971                           ;timer_event.c: 58:     TMR0IE = 1;
  6972  0610  168B               	bsf	11,5	;volatile
  6973  0611  0008               	return
  6974  0612                     __end_of_init_event_timer:	
  6975                           
  6976                           	psect	text43
  6977  0F53                     __ptext43:	
  6978 ;; *************** function _enable_callback *****************
  6979 ;; Defined at:
  6980 ;;		line 16 in file "timer_event.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  callback        1    wreg     unsigned char 
  6983 ;;  time_delay      2   11[BANK0 ] int 
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;  callback        1   14[BANK0 ] unsigned char 
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  1    wreg      void 
  6988 ;; Registers used:
  6989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6995 ;;      Params:         0       2       0       0       0
  6996 ;;      Locals:         0       1       0       0       0
  6997 ;;      Temps:          0       1       0       0       0
  6998 ;;      Totals:         0       4       0       0       0
  6999 ;;Total ram usage:        4 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; Hardware stack levels required when called:    6
  7002 ;; This function calls:
  7003 ;;		___bmul
  7004 ;; This function is called by:
  7005 ;;		_EventFaultStateLEDCallBack
  7006 ;;		_EventIdleTimeoutCallBack
  7007 ;;		_EventLowFogPressureCallBack
  7008 ;;		_EventLowWaterLevelCallBack
  7009 ;;		_monitor_water_pressure
  7010 ;;		_main
  7011 ;;		_pump_run
  7012 ;;		_monitor_pump_run
  7013 ;;		_shutdown
  7014 ;;		_standby
  7015 ;;		_start_main
  7016 ;;		_start_pump
  7017 ;;		_init_event_timer
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           
  7022                           ;psect for function _enable_callback
  7023  0F53                     _enable_callback:	
  7024                           
  7025                           ;incstack = 0
  7026                           ; Regs used in _enable_callback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7027                           ;enable_callback@callback stored from wreg
  7028  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  7029  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  7030  0F55  00AE               	movwf	enable_callback@callback
  7031                           
  7032                           ;timer_event.c: 17:     if (!timer_events[callback].active) {
  7033  0F56  3007               	movlw	7
  7034  0F57  00AD               	movwf	??_enable_callback
  7035  0F58  082D               	movf	??_enable_callback,w
  7036  0F59  00A7               	movwf	___bmul@multiplicand
  7037  0F5A  082E               	movf	enable_callback@callback,w
  7038  0F5B  120A  158A  247A  120A  158A  	fcall	___bmul
  7039  0F60  3EA2               	addlw	(low ((_timer_events| 0+2)))& (0+255)
  7040  0F61  0084               	movwf	4
  7041  0F62  1383               	bcf	3,7	;select IRP bank1
  7042  0F63  1800               	btfsc	0,0
  7043  0F64  0008               	return
  7044                           
  7045                           ;timer_event.c: 18:         timer_events[callback].time_left = time_delay;
  7046  0F65  3007               	movlw	7
  7047  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  7048  0F67  1303               	bcf	3,6	;RP1=0, select bank0
  7049  0F68  00AD               	movwf	??_enable_callback
  7050  0F69  082D               	movf	??_enable_callback,w
  7051  0F6A  00A7               	movwf	___bmul@multiplicand
  7052  0F6B  082E               	movf	enable_callback@callback,w
  7053  0F6C  120A  158A  247A  120A  158A  	fcall	___bmul
  7054  0F71  3EA0               	addlw	(low (_timer_events| 0))& (0+255)
  7055  0F72  0084               	movwf	4
  7056  0F73  1283               	bcf	3,5	;RP0=0, select bank0
  7057  0F74  1303               	bcf	3,6	;RP1=0, select bank0
  7058  0F75  082B               	movf	enable_callback@time_delay,w
  7059  0F76  1383               	bcf	3,7	;select IRP bank1
  7060  0F77  0080               	movwf	0
  7061  0F78  0A84               	incf	4,f
  7062  0F79  082C               	movf	enable_callback@time_delay+1,w
  7063  0F7A  0080               	movwf	0
  7064                           
  7065                           ;timer_event.c: 19:         timer_events[callback].active = 1;
  7066  0F7B  3007               	movlw	7
  7067  0F7C  00AD               	movwf	??_enable_callback
  7068  0F7D  082D               	movf	??_enable_callback,w
  7069  0F7E  00A7               	movwf	___bmul@multiplicand
  7070  0F7F  082E               	movf	enable_callback@callback,w
  7071  0F80  120A  158A  247A   	fcall	___bmul
  7072  0F83  3EA2               	addlw	(low ((_timer_events| 0+2)))& (0+255)
  7073  0F84  0084               	movwf	4
  7074  0F85  1383               	bcf	3,7	;select IRP bank1
  7075  0F86  1400               	bsf	0,0
  7076  0F87  0008               	return
  7077  0F88                     __end_of_enable_callback:	
  7078                           
  7079                           	psect	text44
  7080  0C7A                     __ptext44:	
  7081 ;; *************** function ___bmul *****************
  7082 ;; Defined at:
  7083 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;  multiplier      1    wreg     unsigned char 
  7086 ;;  multiplicand    1    7[BANK0 ] unsigned char 
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;  multiplier      1   10[BANK0 ] unsigned char 
  7089 ;;  product         1    9[BANK0 ] unsigned char 
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      unsigned char 
  7092 ;; Registers used:
  7093 ;;		wreg, status,2, status,0
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7099 ;;      Params:         0       1       0       0       0
  7100 ;;      Locals:         0       2       0       0       0
  7101 ;;      Temps:          0       1       0       0       0
  7102 ;;      Totals:         0       4       0       0       0
  7103 ;;Total ram usage:        4 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    5
  7106 ;; This function calls:
  7107 ;;		Nothing
  7108 ;; This function is called by:
  7109 ;;		_enable_callback
  7110 ;;		_clear_callback
  7111 ;;		_process_event_timer
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           
  7116                           ;psect for function ___bmul
  7117  0C7A                     ___bmul:	
  7118                           
  7119                           ;incstack = 0
  7120                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7121                           ;___bmul@multiplier stored from wreg
  7122  0C7A  1283               	bcf	3,5	;RP0=0, select bank0
  7123  0C7B  1303               	bcf	3,6	;RP1=0, select bank0
  7124  0C7C  00AA               	movwf	___bmul@multiplier
  7125  0C7D  01A9               	clrf	___bmul@product
  7126  0C7E                     l2385:	
  7127  0C7E  1C2A               	btfss	___bmul@multiplier,0
  7128  0C7F  2C84               	goto	l2389
  7129  0C80  0827               	movf	___bmul@multiplicand,w
  7130  0C81  00A8               	movwf	??___bmul
  7131  0C82  0828               	movf	??___bmul,w
  7132  0C83  07A9               	addwf	___bmul@product,f
  7133  0C84                     l2389:	
  7134  0C84  1003               	clrc
  7135  0C85  0DA7               	rlf	___bmul@multiplicand,f
  7136  0C86  1003               	clrc
  7137  0C87  0CAA               	rrf	___bmul@multiplier,f
  7138  0C88  082A               	movf	___bmul@multiplier,w
  7139  0C89  1D03               	btfss	3,2
  7140  0C8A  2C7E               	goto	l2385
  7141  0C8B  0829               	movf	___bmul@product,w
  7142  0C8C  0008               	return
  7143  0C8D                     __end_of___bmul:	
  7144                           
  7145                           	psect	text45
  7146  0747                     __ptext45:	
  7147 ;; *************** function _init *****************
  7148 ;; Defined at:
  7149 ;;		line 169 in file "pump_control.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;		None
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;		None
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  1    wreg      void 
  7156 ;; Registers used:
  7157 ;;		wreg, status,2, status,0, pclath, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7163 ;;      Params:         0       0       0       0       0
  7164 ;;      Locals:         0       0       0       0       0
  7165 ;;      Temps:          0       0       0       0       0
  7166 ;;      Totals:         0       0       0       0       0
  7167 ;;Total ram usage:        0 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    6
  7170 ;; This function calls:
  7171 ;;		_combineZones
  7172 ;;		_ser_int
  7173 ;; This function is called by:
  7174 ;;		_resetPump
  7175 ;;		_main
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           
  7180                           ;psect for function _init
  7181  0747                     _init:	
  7182                           
  7183                           ;pump_control.c: 174:     T0CS = 0;
  7184                           
  7185                           ;incstack = 0
  7186 ;; hardware stack exceeded
  7187                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
  7188  0747  1683               	bsf	3,5	;RP0=1, select bank1
  7189  0748  1303               	bcf	3,6	;RP1=0, select bank1
  7190  0749  1281               	bcf	1,5	;volatile
  7191                           
  7192                           ;pump_control.c: 176:     ADCON1 = 0x7f;
  7193  074A  307F               	movlw	127
  7194  074B  009F               	movwf	31	;volatile
  7195                           
  7196                           ;pump_control.c: 180:     PCFG3 = 1;
  7197  074C  159F               	bsf	31,3	;volatile
  7198                           
  7199                           ;pump_control.c: 206:     PORTA = 0;
  7200  074D  1283               	bcf	3,5	;RP0=0, select bank0
  7201  074E  1303               	bcf	3,6	;RP1=0, select bank0
  7202  074F  0185               	clrf	5	;volatile
  7203                           
  7204                           ;pump_control.c: 207:     PORTB = 0;
  7205  0750  0186               	clrf	6	;volatile
  7206                           
  7207                           ;pump_control.c: 208:     TRISA = 0;
  7208  0751  1683               	bsf	3,5	;RP0=1, select bank1
  7209  0752  1303               	bcf	3,6	;RP1=0, select bank1
  7210  0753  0185               	clrf	5	;volatile
  7211                           
  7212                           ;pump_control.c: 209:     TRISB = 0;
  7213  0754  0186               	clrf	6	;volatile
  7214                           
  7215                           ;pump_control.c: 212:     { PORTAbits.RA3 = (0);}; { PORTAbits.RA0 = (0); fault_flags.wp
      +                          OkBit = (0);}; { PORTAbits.RA1 = (0); fault_flags.mainPumpBit = (0);}; { PORTEbits.RE0 =
      +                           (0); fault_flags.boostPumpBit = (0);}; { PORTAbits.RA2 = (0); fault_flags.dumpSolenoidB
      +                          it = (0);}; { PORTEbits.RE1 = (0);}; TRISD = 0; PORTD = 0x00; TRISAbits.TRISA0 = 0; TRIS
      +                          Abits.TRISA1 = 0; TRISAbits.TRISA2 = 0; TRISAbits.TRISA3 = 0; TRISEbits.TRISE0 = 0; TRIS
      +                          Ebits.TRISE1 = 0;;
  7216  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7217  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7218  0757  1185               	bcf	5,3	;volatile
  7219  0758  1005               	bcf	5,0	;volatile
  7220  0759  124F               	bcf	_fault_flags,4
  7221  075A  1085               	bcf	5,1	;volatile
  7222  075B  12CF               	bcf	_fault_flags,5
  7223  075C  1009               	bcf	9,0	;volatile
  7224  075D  134F               	bcf	_fault_flags,6
  7225  075E  1105               	bcf	5,2	;volatile
  7226  075F  1050               	bcf	_fault_flags+1,0
  7227  0760  1089               	bcf	9,1	;volatile
  7228  0761  1683               	bsf	3,5	;RP0=1, select bank1
  7229  0762  1303               	bcf	3,6	;RP1=0, select bank1
  7230  0763  0188               	clrf	8	;volatile
  7231  0764  1283               	bcf	3,5	;RP0=0, select bank0
  7232  0765  1303               	bcf	3,6	;RP1=0, select bank0
  7233  0766  0188               	clrf	8	;volatile
  7234  0767  1683               	bsf	3,5	;RP0=1, select bank1
  7235  0768  1303               	bcf	3,6	;RP1=0, select bank1
  7236  0769  1005               	bcf	5,0	;volatile
  7237  076A  1085               	bcf	5,1	;volatile
  7238  076B  1105               	bcf	5,2	;volatile
  7239  076C  1185               	bcf	5,3	;volatile
  7240  076D  1009               	bcf	9,0	;volatile
  7241  076E  1089               	bcf	9,1	;volatile
  7242                           
  7243                           ;pump_control.c: 213:     TRISCbits.TRISC0 = 1; TRISCbits.TRISC1 = 1; TRISAbits.TRISA4 =
      +                           1; TRISAbits.TRISA5 = 1; TRISCbits.TRISC2 = 1; TRISB = 1;
  7244  076F  1407               	bsf	7,0	;volatile
  7245  0770  1487               	bsf	7,1	;volatile
  7246  0771  1605               	bsf	5,4	;volatile
  7247  0772  1685               	bsf	5,5	;volatile
  7248  0773  1507               	bsf	7,2	;volatile
  7249  0774  3001               	movlw	1
  7250  0775  0086               	movwf	6	;volatile
  7251                           
  7252                           ;pump_control.c: 216:     fault_flags.boostPumpBit = 0;
  7253  0776  1283               	bcf	3,5	;RP0=0, select bank0
  7254  0777  1303               	bcf	3,6	;RP1=0, select bank0
  7255  0778  134F               	bcf	_fault_flags,6
  7256                           
  7257                           ;pump_control.c: 217:     fault_flags.lwl_fault = 0;
  7258  0779  104F               	bcf	_fault_flags,0
  7259                           
  7260                           ;pump_control.c: 218:     fault_flags.lwp_fault = 0;
  7261  077A  10CF               	bcf	_fault_flags,1
  7262                           
  7263                           ;pump_control.c: 219:     fault_flags.lfp_fault = 0;
  7264  077B  114F               	bcf	_fault_flags,2
  7265                           
  7266                           ;pump_control.c: 220:     fault_flags.po_fault = 0;
  7267  077C  11CF               	bcf	_fault_flags,3
  7268                           
  7269                           ;pump_control.c: 222:     fault_flags.wpOkBit = 0;
  7270  077D  124F               	bcf	_fault_flags,4
  7271                           
  7272                           ;pump_control.c: 223:     fault_flags.mainPumpBit = 0;
  7273  077E  12CF               	bcf	_fault_flags,5
  7274                           
  7275                           ;pump_control.c: 224:     fault_flags.boostPumpBit = 0;
  7276  077F  134F               	bcf	_fault_flags,6
  7277                           
  7278                           ;pump_control.c: 225:     fault_flags.pumpOverloadBit = 0;
  7279  0780  13CF               	bcf	_fault_flags,7
  7280                           
  7281                           ;pump_control.c: 226:     fault_flags.dumpSolenoidBit = 0;
  7282  0781  1050               	bcf	_fault_flags+1,0
  7283                           
  7284                           ;pump_control.c: 230:     GIE = 1;
  7285  0782  178B               	bsf	11,7	;volatile
  7286                           
  7287                           ;pump_control.c: 231:     state = standbyState;
  7288  0783  01D4               	clrf	_state
  7289                           
  7290                           ;pump_control.c: 232:     commsZones = 0;
  7291  0784  01D2               	clrf	_commsZones
  7292                           
  7293                           ;pump_control.c: 233:     combinedZones = 0;
  7294  0785  01DF               	clrf	_combinedZones
  7295                           
  7296                           ;pump_control.c: 234:     combineZones();
  7297  0786  120A  158A  23F4  120A  118A  	fcall	_combineZones
  7298                           
  7299                           ;pump_control.c: 235:     inIdleDumpHour = 0;
  7300  078B  1283               	bcf	3,5	;RP0=0, select bank0
  7301  078C  1303               	bcf	3,6	;RP1=0, select bank0
  7302  078D  01D3               	clrf	_inIdleDumpHour
  7303                           
  7304                           ;pump_control.c: 240:     ser_int();
  7305  078E  120A  158A  25B3   	fcall	_ser_int
  7306  0791  0008               	return
  7307  0792                     __end_of_init:	
  7308                           
  7309                           	psect	text46
  7310  0DB3                     __ptext46:	
  7311 ;; *************** function _ser_int *****************
  7312 ;; Defined at:
  7313 ;;		line 55 in file "serial.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;		None
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;		None
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  1    wreg      void 
  7320 ;; Registers used:
  7321 ;;		wreg
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7327 ;;      Params:         0       0       0       0       0
  7328 ;;      Locals:         0       0       0       0       0
  7329 ;;      Temps:          0       0       0       0       0
  7330 ;;      Totals:         0       0       0       0       0
  7331 ;;Total ram usage:        0 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:    5
  7334 ;; This function calls:
  7335 ;;		Nothing
  7336 ;; This function is called by:
  7337 ;;		_init
  7338 ;;		_main
  7339 ;;		_mainserial3
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _ser_int
  7345  0DB3                     _ser_int:	
  7346                           
  7347                           ;serial.c: 56:     RCSTA = 0X90;
  7348                           
  7349                           ;incstack = 0
  7350                           ; Regs used in _ser_int: [wreg]
  7351  0DB3  3090               	movlw	144
  7352  0DB4  1283               	bcf	3,5	;RP0=0, select bank0
  7353  0DB5  1303               	bcf	3,6	;RP1=0, select bank0
  7354  0DB6  0098               	movwf	24	;volatile
  7355                           
  7356                           ;serial.c: 57:     TRISC6 = 0;
  7357  0DB7  1683               	bsf	3,5	;RP0=1, select bank1
  7358  0DB8  1303               	bcf	3,6	;RP1=0, select bank1
  7359  0DB9  1307               	bcf	7,6	;volatile
  7360                           
  7361                           ;serial.c: 58:     TRISC7 = 1;
  7362  0DBA  1787               	bsf	7,7	;volatile
  7363                           
  7364                           ;serial.c: 59:     TXSTA = 0x24;
  7365  0DBB  3024               	movlw	36
  7366  0DBC  0098               	movwf	24	;volatile
  7367                           
  7368                           ;serial.c: 60:     SYNC = 0;
  7369  0DBD  1218               	bcf	24,4	;volatile
  7370                           
  7371                           ;serial.c: 61:     SPEN = 1;
  7372  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  7373  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  7374  0DC0  1798               	bsf	24,7	;volatile
  7375                           
  7376                           ;serial.c: 62:     TX9 = 0;
  7377  0DC1  1683               	bsf	3,5	;RP0=1, select bank1
  7378  0DC2  1303               	bcf	3,6	;RP1=0, select bank1
  7379  0DC3  1318               	bcf	24,6	;volatile
  7380                           
  7381                           ;serial.c: 64:     RCSTA = 0b10010000;
  7382  0DC4  3090               	movlw	144
  7383  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  7384  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  7385  0DC7  0098               	movwf	24	;volatile
  7386                           
  7387                           ;serial.c: 68:      SPBRG = 103;
  7388  0DC8  3067               	movlw	103
  7389  0DC9  1683               	bsf	3,5	;RP0=1, select bank1
  7390  0DCA  1303               	bcf	3,6	;RP1=0, select bank1
  7391  0DCB  0099               	movwf	25	;volatile
  7392                           
  7393                           ;serial.c: 71:     CREN = 1;
  7394  0DCC  1283               	bcf	3,5	;RP0=0, select bank0
  7395  0DCD  1303               	bcf	3,6	;RP1=0, select bank0
  7396  0DCE  1618               	bsf	24,4	;volatile
  7397                           
  7398                           ;serial.c: 72:     TXIE = 0;
  7399  0DCF  1683               	bsf	3,5	;RP0=1, select bank1
  7400  0DD0  1303               	bcf	3,6	;RP1=0, select bank1
  7401  0DD1  120C               	bcf	12,4	;volatile
  7402                           
  7403                           ;serial.c: 73:     RCIE = 0;
  7404  0DD2  128C               	bcf	12,5	;volatile
  7405                           
  7406                           ;serial.c: 74:     GIE = 1;
  7407  0DD3  178B               	bsf	11,7	;volatile
  7408                           
  7409                           ;serial.c: 75:     PEIE = 1;
  7410  0DD4  170B               	bsf	11,6	;volatile
  7411  0DD5  0008               	return
  7412  0DD6                     __end_of_ser_int:	
  7413                           
  7414                           	psect	text47
  7415  0BF4                     __ptext47:	
  7416 ;; *************** function _combineZones *****************
  7417 ;; Defined at:
  7418 ;;		line 114 in file "pump_control.c"
  7419 ;; Parameters:    Size  Location     Type
  7420 ;;		None
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;		None
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  1    wreg      void 
  7425 ;; Registers used:
  7426 ;;		wreg, status,2, status,0
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7432 ;;      Params:         0       0       0       0       0
  7433 ;;      Locals:         0       0       0       0       0
  7434 ;;      Temps:          0       1       0       0       0
  7435 ;;      Totals:         0       1       0       0       0
  7436 ;;Total ram usage:        1 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    5
  7439 ;; This function calls:
  7440 ;;		Nothing
  7441 ;; This function is called by:
  7442 ;;		_init
  7443 ;;		_main
  7444 ;;		_process_set_zones_message
  7445 ;;		_process_get_status_message
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function _combineZones
  7451  0BF4                     _combineZones:	
  7452                           
  7453                           ;pump_control.c: 115:     combinedZones = commsZones | PORTB;
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _combineZones: [wreg+status,2+status,0]
  7457  0BF4  1283               	bcf	3,5	;RP0=0, select bank0
  7458  0BF5  1303               	bcf	3,6	;RP1=0, select bank0
  7459  0BF6  0852               	movf	_commsZones,w
  7460  0BF7  0406               	iorwf	6,w	;volatile
  7461  0BF8  00A7               	movwf	??_combineZones
  7462  0BF9  0827               	movf	??_combineZones,w
  7463  0BFA  00DF               	movwf	_combinedZones
  7464                           
  7465                           ;pump_control.c: 116:     PORTD = combinedZones;
  7466  0BFB  085F               	movf	_combinedZones,w
  7467  0BFC  0088               	movwf	8	;volatile
  7468  0BFD  0008               	return
  7469  0BFE                     __end_of_combineZones:	
  7470                           
  7471                           	psect	text48
  7472  0CFD                     __ptext48:	
  7473 ;; *************** function _event_timer_isr *****************
  7474 ;; Defined at:
  7475 ;;		line 64 in file "timer_event.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;		None
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;		None
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      void 
  7482 ;; Registers used:
  7483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7489 ;;      Params:         0       0       0       0       0
  7490 ;;      Locals:         0       0       0       0       0
  7491 ;;      Temps:          0       5       0       0       0
  7492 ;;      Totals:         0       5       0       0       0
  7493 ;;Total ram usage:        5 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    4
  7496 ;; This function calls:
  7497 ;;		_usart_interrupt
  7498 ;; This function is called by:
  7499 ;;		Interrupt level 1
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           
  7504                           ;psect for function _event_timer_isr
  7505  0CFD                     _event_timer_isr:	
  7506                           
  7507                           ;timer_event.c: 65:     if ((TMR0IE) && (TMR0IF)) {
  7508  0CFD  1A8B               	btfsc	11,5	;volatile
  7509  0CFE  1D0B               	btfss	11,2	;volatile
  7510  0CFF  2D05               	goto	i1l3821
  7511                           
  7512                           ;timer_event.c: 66:         timer_count++;
  7513  0D00  3001               	movlw	1
  7514  0D01  00A2               	movwf	??_event_timer_isr
  7515  0D02  0822               	movf	??_event_timer_isr,w
  7516  0D03  07D1               	addwf	_timer_count,f	;volatile
  7517                           
  7518                           ;timer_event.c: 68:         TMR0IF = 0;
  7519  0D04  110B               	bcf	11,2	;volatile
  7520  0D05                     i1l3821:	
  7521                           
  7522                           ;timer_event.c: 70:     usart_interrupt();
  7523  0D05  120A  118A  26AF  120A  158A  	fcall	_usart_interrupt
  7524  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  7525  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  7526  0D0C  0826               	movf	??_event_timer_isr+4,w
  7527  0D0D  00FF               	movwf	127
  7528  0D0E  0825               	movf	??_event_timer_isr+3,w
  7529  0D0F  008A               	movwf	10
  7530  0D10  0824               	movf	??_event_timer_isr+2,w
  7531  0D11  0084               	movwf	4
  7532  0D12  0E23               	swapf	(??_event_timer_isr+1)^0,w
  7533  0D13  0083               	movwf	3
  7534  0D14  0EFE               	swapf	126,f
  7535  0D15  0E7E               	swapf	126,w
  7536  0D16  0009               	retfie
  7537  0D17                     __end_of_event_timer_isr:	
  7538                           
  7539                           	psect	intentry
  7540  0004                     __pintentry:	
  7541                           ;incstack = 0
  7542 ;; hardware stack exceeded
  7543                           ; Regs used in _event_timer_isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7544                           
  7545  0004                     interrupt_function:	
  7546  007E                     saved_w	set	btemp
  7547  0004  00FE               	movwf	btemp
  7548  0005  0E03               	swapf	3,w
  7549  0006  1283               	bcf	3,5	;RP0=0, select bank0
  7550  0007  1303               	bcf	3,6	;RP1=0, select bank0
  7551  0008  00A3               	movwf	??_event_timer_isr+1
  7552  0009  0804               	movf	4,w
  7553  000A  00A4               	movwf	??_event_timer_isr+2
  7554  000B  080A               	movf	10,w
  7555  000C  00A5               	movwf	??_event_timer_isr+3
  7556  000D  087F               	movf	btemp+1,w
  7557  000E  00A6               	movwf	??_event_timer_isr+4
  7558  000F  120A  158A  2CFD   	ljmp	_event_timer_isr
  7559                           
  7560                           	psect	text49
  7561  06AF                     __ptext49:	
  7562 ;; *************** function _usart_interrupt *****************
  7563 ;; Defined at:
  7564 ;;		line 144 in file "serial.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;		None
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;  a               1   10[COMMON] unsigned char 
  7569 ;; Return value:  Size  Location     Type
  7570 ;;                  1    wreg      void 
  7571 ;; Registers used:
  7572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7578 ;;      Params:         0       0       0       0       0
  7579 ;;      Locals:         1       0       0       0       0
  7580 ;;      Temps:          1       0       0       0       0
  7581 ;;      Totals:         2       0       0       0       0
  7582 ;;Total ram usage:        2 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    3
  7585 ;; This function calls:
  7586 ;;		i1_has_data
  7587 ;;		i1_not_full
  7588 ;;		i1_pop
  7589 ;;		i1_push
  7590 ;;		i1_puts
  7591 ;; This function is called by:
  7592 ;;		_event_timer_isr
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           
  7597                           ;psect for function _usart_interrupt
  7598  06AF                     _usart_interrupt:	
  7599                           
  7600                           ;serial.c: 146:     if (TXIE && TXIF) {
  7601                           
  7602                           ;incstack = 0
  7603 ;; hardware stack exceeded
  7604                           ; Regs used in _usart_interrupt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7605  06AF  1683               	bsf	3,5	;RP0=1, select bank1
  7606  06B0  1303               	bcf	3,6	;RP1=0, select bank1
  7607  06B1  1E0C               	btfss	12,4	;volatile
  7608  06B2  2ECF               	goto	i1l3715
  7609  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  7610  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  7611  06B5  1E0C               	btfss	12,4	;volatile
  7612  06B6  2ECF               	goto	i1l3715
  7613                           
  7614                           ;serial.c: 147:         TXIE = 0;
  7615  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  7616  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  7617  06B9  120C               	bcf	12,4	;volatile
  7618                           
  7619                           ;serial.c: 148:         if ( has_data(&outbound)) {
  7620  06BA  30B4               	movlw	(low (_outbound| (0+256)))& (0+255)
  7621  06BB  120A  158A  23C9  120A  118A  	fcall	i1_has_data
  7622  06C0  3A00               	xorlw	0
  7623  06C1  1903               	skipnz
  7624  06C2  2ECF               	goto	i1l3715
  7625                           
  7626                           ;serial.c: 149:             TXREG = pop(&outbound);
  7627  06C3  30B4               	movlw	(low (_outbound| (0+256)))& (0+255)
  7628  06C4  120A  118A  2792  120A  118A  	fcall	i1_pop
  7629  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  7630  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  7631  06CB  0099               	movwf	25	;volatile
  7632                           
  7633                           ;serial.c: 150:             TXIE = 1;
  7634  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  7635  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  7636  06CE  160C               	bsf	12,4	;volatile
  7637  06CF                     i1l3715:	
  7638                           
  7639                           ;serial.c: 153:     if (RCIE && RCIF) {
  7640  06CF  1683               	bsf	3,5	;RP0=1, select bank1
  7641  06D0  1303               	bcf	3,6	;RP1=0, select bank1
  7642  06D1  1E8C               	btfss	12,5	;volatile
  7643  06D2  0008               	return
  7644  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  7645  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  7646  06D5  1E8C               	btfss	12,5	;volatile
  7647  06D6  0008               	return
  7648                           
  7649                           ;serial.c: 154:         if (OERR) {
  7650  06D7  1C98               	btfss	24,1	;volatile
  7651  06D8  2EE4               	goto	i1l3725
  7652                           
  7653                           ;serial.c: 155:             CREN = 0;
  7654  06D9  1218               	bcf	24,4	;volatile
  7655                           
  7656                           ;serial.c: 156:             CREN = 1;
  7657  06DA  1618               	bsf	24,4	;volatile
  7658                           
  7659                           ;serial.c: 157:              puts("serial overflow");
  7660  06DB  309E               	movlw	low (STR_20| (0+32768))
  7661  06DC  00A0               	movwf	i1puts@str
  7662  06DD  3081               	movlw	high (STR_20| (0+32768))
  7663  06DE  00A1               	movwf	i1puts@str+1
  7664  06DF  120A  158A  261F  120A  118A  	fcall	i1_puts
  7665  06E4                     i1l3725:	
  7666                           
  7667                           ;serial.c: 159:         unsigned char a = RCREG;
  7668  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  7669  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  7670  06E6  081A               	movf	26,w	;volatile
  7671  06E7  00F9               	movwf	??_usart_interrupt
  7672  06E8  0879               	movf	??_usart_interrupt,w
  7673  06E9  00FA               	movwf	usart_interrupt@a
  7674                           
  7675                           ;serial.c: 160:         if (not_full(&inbound)) {
  7676  06EA  3090               	movlw	(low (_inbound| (0+256)))& (0+255)
  7677  06EB  120A  158A  248D  120A  118A  	fcall	i1_not_full
  7678  06F0  3A00               	xorlw	0
  7679  06F1  1903               	skipnz
  7680  06F2  0008               	return
  7681                           
  7682                           ;serial.c: 161:             push(&inbound, a);
  7683  06F3  087A               	movf	usart_interrupt@a,w
  7684  06F4  00F9               	movwf	??_usart_interrupt
  7685  06F5  0879               	movf	??_usart_interrupt,w
  7686  06F6  00F0               	movwf	i1push@d
  7687  06F7  3090               	movlw	(low (_inbound| (0+256)))& (0+255)
  7688  06F8  120A  158A  254F   	fcall	i1_push
  7689  06FB  0008               	return
  7690  06FC                     __end_of_usart_interrupt:	
  7691                           
  7692                           	psect	text50
  7693  0E1F                     __ptext50:	
  7694 ;; *************** function i1_puts *****************
  7695 ;; Defined at:
  7696 ;;		line 221 in file "serial.c"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;  str             2    0[BANK0 ] PTR const unsigned char 
  7699 ;;		 -> STR_21(16), STR_20(16), 
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;  puts            2    7[COMMON] PTR const unsigned char 
  7702 ;;		 -> STR_21(16), STR_20(16), 
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  2    0[BANK0 ] int 
  7705 ;; Registers used:
  7706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7712 ;;      Params:         0       2       0       0       0
  7713 ;;      Locals:         2       0       0       0       0
  7714 ;;      Temps:          0       0       0       0       0
  7715 ;;      Totals:         2       2       0       0       0
  7716 ;;Total ram usage:        4 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    2
  7719 ;; This function calls:
  7720 ;;		i1_putch
  7721 ;; This function is called by:
  7722 ;;		_usart_interrupt
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           
  7727                           ;psect for function i1_puts
  7728  0E1F                     i1_puts:	
  7729                           
  7730                           ;serial.c: 222:     for ( const char * c = str; *c != 0; c++){
  7731                           
  7732                           ;incstack = 0
  7733 ;; hardware stack exceeded
  7734                           ; Regs used in i1_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7735  0E1F  1283               	bcf	3,5	;RP0=0, select bank0
  7736  0E20  1303               	bcf	3,6	;RP1=0, select bank0
  7737  0E21  0820               	movf	i1puts@str,w
  7738  0E22  00F7               	movwf	i1puts@c
  7739  0E23  0821               	movf	i1puts@str+1,w
  7740  0E24  00F8               	movwf	i1puts@c+1
  7741  0E25                     i1l3539:	
  7742  0E25  0878               	movf	i1puts@c+1,w
  7743  0E26  1283               	bcf	3,5	;RP0=0, select bank0
  7744  0E27  1303               	bcf	3,6	;RP1=0, select bank0
  7745  0E28  00FF               	movwf	127
  7746  0E29  0877               	movf	i1puts@c,w
  7747  0E2A  0084               	movwf	4
  7748  0E2B  120A  158A  2000  120A  158A  	fcall	stringtab
  7749  0E30  3A00               	xorlw	0
  7750  0E31  1903               	btfsc	3,2
  7751  0E32  0008               	return
  7752                           
  7753                           ;serial.c: 223:         putch(*c);
  7754  0E33  0878               	movf	i1puts@c+1,w
  7755  0E34  00FF               	movwf	127
  7756  0E35  0877               	movf	i1puts@c,w
  7757  0E36  0084               	movwf	4
  7758  0E37  120A  158A  2000  120A  158A  	fcall	stringtab
  7759  0E3C  120A  158A  23EA  120A  158A  	fcall	i1_putch
  7760                           
  7761                           ;serial.c: 224:     }
  7762  0E41  3001               	movlw	1
  7763  0E42  07F7               	addwf	i1puts@c,f
  7764  0E43  1803               	skipnc
  7765  0E44  0AF8               	incf	i1puts@c+1,f
  7766  0E45  3000               	movlw	0
  7767  0E46  07F8               	addwf	i1puts@c+1,f
  7768  0E47  2E25               	goto	i1l3539
  7769  0E48                     __end_ofi1_puts:	
  7770                           
  7771                           	psect	text51
  7772  0BEA                     __ptext51:	
  7773 ;; *************** function i1_putch *****************
  7774 ;; Defined at:
  7775 ;;		line 217 in file "serial.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;  c               1    wreg     unsigned char 
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;  c               1    6[COMMON] unsigned char 
  7780 ;; Return value:  Size  Location     Type
  7781 ;;                  1    wreg      void 
  7782 ;; Registers used:
  7783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7784 ;; Tracked objects:
  7785 ;;		On entry : 0/0
  7786 ;;		On exit  : 0/0
  7787 ;;		Unchanged: 0/0
  7788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7789 ;;      Params:         0       0       0       0       0
  7790 ;;      Locals:         1       0       0       0       0
  7791 ;;      Temps:          1       0       0       0       0
  7792 ;;      Totals:         2       0       0       0       0
  7793 ;;Total ram usage:        2 bytes
  7794 ;; Hardware stack levels used:    1
  7795 ;; Hardware stack levels required when called:    1
  7796 ;; This function calls:
  7797 ;;		i1_push
  7798 ;; This function is called by:
  7799 ;;		i1_puts
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           
  7804                           ;psect for function i1_putch
  7805  0BEA                     i1_putch:	
  7806                           
  7807                           ;incstack = 0
  7808 ;; hardware stack exceeded
  7809                           ; Regs used in i1_putch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7810                           ;i1putch@c stored from wreg
  7811  0BEA  00F6               	movwf	i1putch@c
  7812                           
  7813                           ;serial.c: 218:     push(&outbound, c);
  7814  0BEB  0876               	movf	i1putch@c,w
  7815  0BEC  00F5               	movwf	??i1_putch
  7816  0BED  0875               	movf	??i1_putch,w
  7817  0BEE  00F0               	movwf	i1push@d
  7818  0BEF  30B4               	movlw	(low (_outbound| (0+256)))& (0+255)
  7819  0BF0  120A  158A  254F   	fcall	i1_push
  7820  0BF3  0008               	return
  7821  0BF4                     __end_ofi1_putch:	
  7822                           
  7823                           	psect	text52
  7824  0D4F                     __ptext52:	
  7825 ;; *************** function i1_push *****************
  7826 ;; Defined at:
  7827 ;;		line 10 in file "serial_buffer.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;  buff            1    wreg     PTR struct .
  7830 ;;		 -> inbound(36), outbound(36), 
  7831 ;;  d               1    0[COMMON] unsigned char 
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  buff            1    4[COMMON] PTR struct .
  7834 ;;		 -> inbound(36), outbound(36), 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7844 ;;      Params:         1       0       0       0       0
  7845 ;;      Locals:         1       0       0       0       0
  7846 ;;      Temps:          3       0       0       0       0
  7847 ;;      Totals:         5       0       0       0       0
  7848 ;;Total ram usage:        5 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; This function calls:
  7851 ;;		Nothing
  7852 ;; This function is called by:
  7853 ;;		_usart_interrupt
  7854 ;;		i1_putch
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           
  7859                           ;psect for function i1_push
  7860  0D4F                     i1_push:	
  7861                           
  7862                           ;incstack = 0
  7863 ;; hardware stack exceeded
  7864                           ; Regs used in i1_push: [wreg-fsr0h+status,2+status,0]
  7865                           ;i1push@buff stored from wreg
  7866  0D4F  00F4               	movwf	i1push@buff
  7867                           
  7868                           ;serial_buffer.c: 14:     GIE = 0;
  7869  0D50  138B               	bcf	11,7	;volatile
  7870                           
  7871                           ;serial_buffer.c: 15:     buff->data[(buff->start + buff->length) % 32] = d;
  7872  0D51  0870               	movf	i1push@d,w
  7873  0D52  00F1               	movwf	??i1_push
  7874  0D53  0874               	movf	i1push@buff,w
  7875  0D54  3E22               	addlw	34
  7876  0D55  0084               	movwf	4
  7877  0D56  1783               	bsf	3,7	;select IRP bank2
  7878  0D57  0800               	movf	0,w
  7879  0D58  00F2               	movwf	??i1_push+1
  7880  0D59  0874               	movf	i1push@buff,w
  7881  0D5A  3E20               	addlw	32
  7882  0D5B  0084               	movwf	4
  7883  0D5C  0800               	movf	0,w
  7884  0D5D  0772               	addwf	??i1_push+1,w
  7885  0D5E  391F               	andlw	31
  7886  0D5F  0774               	addwf	i1push@buff,w
  7887  0D60  00F3               	movwf	??i1_push+2
  7888  0D61  0873               	movf	??i1_push+2,w
  7889  0D62  0084               	movwf	4
  7890  0D63  0871               	movf	??i1_push,w
  7891  0D64  0080               	movwf	0
  7892                           
  7893                           ;serial_buffer.c: 16:     buff->length++;
  7894  0D65  0874               	movf	i1push@buff,w
  7895  0D66  3E22               	addlw	34
  7896  0D67  0084               	movwf	4
  7897  0D68  3001               	movlw	1
  7898  0D69  0780               	addwf	0,f
  7899  0D6A  0A84               	incf	4,f
  7900  0D6B  1803               	skipnc
  7901  0D6C  0A80               	incf	0,f
  7902                           
  7903                           ;serial_buffer.c: 17:     GIE = 1;
  7904  0D6D  178B               	bsf	11,7	;volatile
  7905  0D6E  0008               	return
  7906  0D6F                     __end_ofi1_push:	
  7907                           
  7908                           	psect	text53
  7909  0792                     __ptext53:	
  7910 ;; *************** function i1_pop *****************
  7911 ;; Defined at:
  7912 ;;		line 27 in file "serial_buffer.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  buff            1    wreg     PTR struct .
  7915 ;;		 -> inbound(36), outbound(36), 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  buff            1    7[COMMON] PTR struct .
  7918 ;;		 -> inbound(36), outbound(36), 
  7919 ;;  pop             1    6[COMMON] unsigned char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      unsigned char 
  7922 ;; Registers used:
  7923 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7929 ;;      Params:         0       0       0       0       0
  7930 ;;      Locals:         2       0       0       0       0
  7931 ;;      Temps:          6       0       0       0       0
  7932 ;;      Totals:         8       0       0       0       0
  7933 ;;Total ram usage:        8 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; This function calls:
  7936 ;;		Nothing
  7937 ;; This function is called by:
  7938 ;;		_usart_interrupt
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           
  7943                           ;psect for function i1_pop
  7944  0792                     i1_pop:	
  7945                           
  7946                           ;incstack = 0
  7947 ;; hardware stack exceeded
  7948                           ; Regs used in i1_pop: [wreg-fsr0h+status,2+status,0]
  7949                           ;i1pop@buff stored from wreg
  7950  0792  00F7               	movwf	i1pop@buff
  7951                           
  7952                           ;serial_buffer.c: 28:     unsigned char d;;serial_buffer.c: 32:     if (buff->length == 
      +                          0) {
  7953  0793  0877               	movf	i1pop@buff,w
  7954  0794  3E22               	addlw	34
  7955  0795  0084               	movwf	4
  7956  0796  1783               	bsf	3,7	;select IRP bank2
  7957  0797  0800               	movf	0,w
  7958  0798  00F0               	movwf	??i1_pop
  7959  0799  0A84               	incf	4,f
  7960  079A  0800               	movf	0,w
  7961  079B  00F1               	movwf	??i1_pop+1
  7962  079C  0870               	movf	??i1_pop,w
  7963  079D  0471               	iorwf	??i1_pop+1,w
  7964  079E  1D03               	btfss	3,2
  7965  079F  2FA2               	goto	i1l490
  7966                           
  7967                           ;serial_buffer.c: 34:         return 0;
  7968  07A0  3000               	movlw	0
  7969  07A1  0008               	return
  7970  07A2                     i1l490:	
  7971                           ;serial_buffer.c: 35:     }
  7972                           
  7973                           
  7974                           ;serial_buffer.c: 37:     GIE = 0;
  7975  07A2  138B               	bcf	11,7	;volatile
  7976                           
  7977                           ;serial_buffer.c: 38:     d = buff->data[buff->start];
  7978  07A3  0877               	movf	i1pop@buff,w
  7979  07A4  3E20               	addlw	32
  7980  07A5  0084               	movwf	4
  7981  07A6  0800               	movf	0,w
  7982  07A7  0777               	addwf	i1pop@buff,w
  7983  07A8  00F0               	movwf	??i1_pop
  7984  07A9  0870               	movf	??i1_pop,w
  7985  07AA  0084               	movwf	4
  7986  07AB  0800               	movf	0,w
  7987  07AC  00F1               	movwf	??i1_pop+1
  7988  07AD  0871               	movf	??i1_pop+1,w
  7989  07AE  00F6               	movwf	i1pop@d
  7990                           
  7991                           ;serial_buffer.c: 39:     buff->length--;
  7992  07AF  0877               	movf	i1pop@buff,w
  7993  07B0  3E22               	addlw	34
  7994  07B1  0084               	movwf	4
  7995  07B2  3001               	movlw	1
  7996  07B3  0280               	subwf	0,f
  7997  07B4  0F84               	incfsz	4,f
  7998  07B5  3000               	movlw	0
  7999  07B6  1C03               	skipc
  8000  07B7  0380               	decf	0,f
  8001  07B8  0280               	subwf	0,f
  8002  07B9  0384               	decf	4,f
  8003                           
  8004                           ;serial_buffer.c: 40:     buff->start = (buff->start + 1) % 32;
  8005  07BA  0877               	movf	i1pop@buff,w
  8006  07BB  3E20               	addlw	32
  8007  07BC  0084               	movwf	4
  8008  07BD  0800               	movf	0,w
  8009  07BE  00F0               	movwf	??i1_pop
  8010  07BF  0A84               	incf	4,f
  8011  07C0  0800               	movf	0,w
  8012  07C1  00F1               	movwf	??i1_pop+1
  8013  07C2  0870               	movf	??i1_pop,w
  8014  07C3  3E01               	addlw	1
  8015  07C4  00F2               	movwf	??i1_pop+2
  8016  07C5  0871               	movf	??i1_pop+1,w
  8017  07C6  1803               	skipnc
  8018  07C7  3E01               	addlw	1
  8019  07C8  3E00               	addlw	0
  8020  07C9  00F3               	movwf	??i1_pop+3
  8021  07CA  301F               	movlw	31
  8022  07CB  0572               	andwf	??i1_pop+2,w
  8023  07CC  00F4               	movwf	??i1_pop+4
  8024  07CD  3000               	movlw	0
  8025  07CE  0573               	andwf	??i1_pop+3,w
  8026  07CF  00F5               	movwf	??i1_pop+5
  8027  07D0  0877               	movf	i1pop@buff,w
  8028  07D1  3E20               	addlw	32
  8029  07D2  0084               	movwf	4
  8030  07D3  0874               	movf	??i1_pop+4,w
  8031  07D4  0080               	movwf	0
  8032  07D5  0A84               	incf	4,f
  8033  07D6  0875               	movf	??i1_pop+5,w
  8034  07D7  0080               	movwf	0
  8035                           
  8036                           ;serial_buffer.c: 41:     GIE = 1;
  8037  07D8  178B               	bsf	11,7	;volatile
  8038                           
  8039                           ;serial_buffer.c: 43:     return d;
  8040  07D9  0876               	movf	i1pop@d,w
  8041  07DA  0008               	return
  8042  07DB                     __end_ofi1_pop:	
  8043                           
  8044                           	psect	text54
  8045  0C8D                     __ptext54:	
  8046 ;; *************** function i1_not_full *****************
  8047 ;; Defined at:
  8048 ;;		line 60 in file "serial_buffer.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;  buff            1    wreg     PTR struct .
  8051 ;;		 -> inbound(36), 
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;  buff            1    2[COMMON] PTR struct .
  8054 ;;		 -> inbound(36), 
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      unsigned char 
  8057 ;; Registers used:
  8058 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8064 ;;      Params:         0       0       0       0       0
  8065 ;;      Locals:         1       0       0       0       0
  8066 ;;      Temps:          2       0       0       0       0
  8067 ;;      Totals:         3       0       0       0       0
  8068 ;;Total ram usage:        3 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; This function calls:
  8071 ;;		Nothing
  8072 ;; This function is called by:
  8073 ;;		_usart_interrupt
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           
  8078                           ;psect for function i1_not_full
  8079  0C8D                     i1_not_full:	
  8080                           
  8081                           ;incstack = 0
  8082 ;; hardware stack exceeded
  8083                           ; Regs used in i1_not_full: [wreg-fsr0h+status,2+status,0]
  8084                           ;i1not_full@buff stored from wreg
  8085  0C8D  00F2               	movwf	i1not_full@buff
  8086                           
  8087                           ;serial_buffer.c: 61:     return buff->length < 32;
  8088  0C8E  0872               	movf	i1not_full@buff,w
  8089  0C8F  3E22               	addlw	34
  8090  0C90  0084               	movwf	4
  8091  0C91  1783               	bsf	3,7	;select IRP bank2
  8092  0C92  0800               	movf	0,w
  8093  0C93  00F0               	movwf	??i1_not_full
  8094  0C94  0A84               	incf	4,f
  8095  0C95  0800               	movf	0,w
  8096  0C96  00F1               	movwf	??i1_not_full+1
  8097  0C97  3000               	movlw	0
  8098  0C98  0271               	subwf	??i1_not_full+1,w
  8099  0C99  3020               	movlw	32
  8100  0C9A  1903               	skipnz
  8101  0C9B  0270               	subwf	??i1_not_full,w
  8102  0C9C  1803               	btfsc	3,0
  8103  0C9D  2CA0               	goto	u242_20
  8104  0C9E  3001               	movlw	1
  8105  0C9F  0008               	return
  8106  0CA0                     u242_20:	
  8107  0CA0  3000               	movlw	0
  8108  0CA1  0008               	return
  8109  0CA2                     __end_ofi1_not_full:	
  8110                           
  8111                           	psect	text55
  8112  0BC9                     __ptext55:	
  8113 ;; *************** function i1_has_data *****************
  8114 ;; Defined at:
  8115 ;;		line 51 in file "serial_buffer.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;  buff            1    wreg     PTR struct .
  8118 ;;		 -> inbound(36), outbound(36), 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  buff            1    0[COMMON] PTR struct .
  8121 ;;		 -> inbound(36), outbound(36), 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  1    wreg      unsigned char 
  8124 ;; Registers used:
  8125 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8131 ;;      Params:         0       0       0       0       0
  8132 ;;      Locals:         1       0       0       0       0
  8133 ;;      Temps:          0       0       0       0       0
  8134 ;;      Totals:         1       0       0       0       0
  8135 ;;Total ram usage:        1 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; This function calls:
  8138 ;;		Nothing
  8139 ;; This function is called by:
  8140 ;;		_usart_interrupt
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           
  8145                           ;psect for function i1_has_data
  8146  0BC9                     i1_has_data:	
  8147                           
  8148                           ;incstack = 0
  8149 ;; hardware stack exceeded
  8150                           ; Regs used in i1_has_data: [wreg-fsr0h+status,2+status,0]
  8151                           ;i1has_data@buff stored from wreg
  8152  0BC9  00F0               	movwf	i1has_data@buff
  8153                           
  8154                           ;serial_buffer.c: 52:     return buff->length;
  8155  0BCA  0870               	movf	i1has_data@buff,w
  8156  0BCB  3E22               	addlw	34
  8157  0BCC  0084               	movwf	4
  8158  0BCD  1783               	bsf	3,7	;select IRP bank2
  8159  0BCE  0800               	movf	0,w
  8160  0BCF  0008               	return
  8161  0BD0                     __end_ofi1_has_data:	
  8162  0012                     
  8163                           	psect	functab
  8164  003E                     __pfunctab:	
  8165  003E                     __fptable:	
  8166  003E                     fptable:	
  8167  003E  00FF               	movwf	(btemp+1)& (0+127)
  8168  003F  3000               	movlw	high fptable
  8169  0040  008A               	movwf	10
  8170  0041  087F               	movf	(btemp+1)& (0+127),w
  8171  0042  0782               	addwf	2,f
  8172  0043                     fpbase:	
  8173  0043  2843               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  8174  0044                     fp__EventRunSignalDebounceCallBack:	
  8175  0044  120A  158A  2C17   	ljmp	_EventRunSignalDebounceCallBack
  8176  0047                     fp__EventPODebounceCallBack:	
  8177  0047  120A  158A  2C36   	ljmp	_EventPODebounceCallBack
  8178  004A                     fp__EventDumpSolenoidCallBack:	
  8179  004A  120A  158A  2BC3   	ljmp	_EventDumpSolenoidCallBack
  8180  004D                     fp__EventIdleTimeoutCallBack:	
  8181  004D  120A  158A  2EF2   	ljmp	_EventIdleTimeoutCallBack
  8182  0050                     fp__EventFaultStateLEDCallBack:	
  8183  0050  120A  118A  2BC5   	ljmp	_EventFaultStateLEDCallBack
  8184  0053                     fp__EventLowFogPressureCallBack:	
  8185  0053  120A  118A  2FDB   	ljmp	_EventLowFogPressureCallBack
  8186  0056                     fp__EventLowWaterPressureDebounceCallBack:	
  8187  0056  120A  158A  2CA2   	ljmp	_EventLowWaterPressureDebounceCallBack
  8188  0059                     fp__EventLowWaterPressureCallBack:	
  8189  0059  120A  158A  2E9A   	ljmp	_EventLowWaterPressureCallBack
  8190  005C                     fp__EventLowWaterLevelCallBack:	
  8191  005C  120A  158A  2CB7   	ljmp	_EventLowWaterLevelCallBack
  8192  005F                     __end_of__fptable:	
  8193  007E                     btemp	set	126	;btemp
  8194  007E                     wtemp0	set	126


Data Sizes:
    Strings     321
    Constant    0
    Data        24
    BSS         163
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     45      64
    BANK1            80      0      73
    BANK3            96      0      96
    BANK2            96      0       0

Pointer List with Targets:

    process_event_timer$2111	volatile PTR FTN()void  size(1) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 

    process_event_timer$2077	volatile PTR FTN()void  size(1) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 

    printf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_18(CODE[15]), STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[15]), 
		 -> STR_14(CODE[14]), STR_13(CODE[10]), STR_12(CODE[11]), STR_11(CODE[12]), 
		 -> STR_10(CODE[12]), STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), STR_3(CODE[24]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_message@inmessage	PTR unsigned char  size(1) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_reset_pump@inmessage	PTR unsigned char  size(1) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_set_address_message@inmessage	PTR unsigned char  size(1) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    process_get_status_message@inmessage	PTR unsigned char  size(1) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), main@sendGetMessageBuffer(BANK0[10]), 

    process_set_zones_message@inmessage	PTR unsigned char  size(1) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    not_full@buff	PTR struct . size(1) Largest target is 36
		 -> inbound(BANK3[36]), 

    has_data@buff	PTR struct . size(1) Largest target is 36
		 -> inbound(BANK3[36]), outbound(BANK3[36]), 

    pop@buff	PTR struct . size(1) Largest target is 36
		 -> inbound(BANK3[36]), outbound(BANK3[36]), 

    push@buff	PTR struct . size(1) Largest target is 36
		 -> inbound(BANK3[36]), outbound(BANK3[36]), 

    output_message@message	PTR unsigned char  size(1) Largest target is 10
		 -> outputMessage(BANK0[10]), 

    puts@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_21(CODE[16]), STR_20(CODE[16]), 

    puts@c	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_21(CODE[16]), STR_20(CODE[16]), 

    sp__receiveMessage	PTR unsigned char  size(1) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    main@message	PTR unsigned char  size(1) Largest target is 10
		 -> receiveMessage@message(BANK1[10]), NULL(NULL[0]), 

    PumpStateMappings	PTR unsigned char [7] size(2) Largest target is 31
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[31]), STR_4(CODE[21]), 
		 -> STR_3(CODE[24]), STR_2(CODE[16]), STR_1(CODE[15]), 

    S114timer_event$callback	PTR FTN()void  size(1) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 

    timer_events.callback	PTR FTN()void  size(1) Largest target is 1
		 -> EventRunSignalDebounceCallBack(), EventPODebounceCallBack(), EventLowWaterPressureDebounceCallBack(), EventLowWaterPressureCallBack(), 
		 -> EventLowWaterLevelCallBack(), EventLowFogPressureCallBack(), EventIdleTimeoutCallBack(), EventFaultStateLEDCallBack(), 
		 -> EventDumpSolenoidCallBack(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _event_timer_isr in COMMON

    _event_timer_isr->_usart_interrupt
    _usart_interrupt->i1_puts
    i1_puts->i1_putch
    i1_putch->i1_push

Critical Paths under _main in BANK0

    _main->_process_event_timer
    _start_pump->_enable_callback
    _start_main->_monitor_pump_run
    _standby->_enable_callback
    _shutdown->_enable_callback
    _serial_process_loop->_puts
    _puts->_putch
    _receiveMessage->_pop
    _pump_run->_monitor_pump_run
    _monitor_pump_run->_enable_callback
    _process_message->_process_set_address_message
    _process_message->_process_set_zones_message
    _process_set_zones_message->_output_message
    _process_set_address_message->_output_message
    _process_reset_pump->_output_message
    _process_get_status_message->_output_message
    _setBaseMessage->_chartox
    _output_message->_putch
    _process_event_timer->_EventFaultStateLEDCallBack
    _EventLowWaterLevelCallBack->_enable_callback
    _EventLowFogPressureCallBack->_enable_callback
    _clear_callback_for_shutdown->_clear_callback
    _EventIdleTimeoutCallBack->_enable_callback
    _EventFaultStateLEDCallBack->_enable_callback
    _printPumpState->_printf
    _printFaultState->_printf
    _printf->_putch
    _putch->_push
    _monitor_water_pressure->_enable_callback
    _clear_callback->___bmul
    _resetPump->_init_event_timer
    _init_event_timer->_enable_callback
    _enable_callback->___bmul
    _init->_combineZones

Critical Paths under _event_timer_isr in BANK0

    _usart_interrupt->i1_puts

Critical Paths under _main in BANK1

    None.

Critical Paths under _event_timer_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _event_timer_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _event_timer_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   58446
                                             28 BANK0     17    17      0
                  _checkIfShoudReset
                     _clear_callback
                       _combineZones
                    _enable_callback
                               _init
                   _init_event_timer
             _monitor_water_pressure
                    _printFaultState
                     _printPumpState
                             _printf
                _process_event_timer
         _process_get_status_message
                    _process_message
                           _pump_run
                     _receiveMessage
                            _ser_int
                _serial_process_loop
                           _shutdown
                            _standby
                         _start_main
                         _start_pump
 ---------------------------------------------------------------------------------
 (1) _start_pump                                           1     1      0    2936
                                             15 BANK0      1     1      0
                     _clear_callback
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _start_main                                           1     1      0    5124
                                             16 BANK0      1     1      0
                     _clear_callback
                    _enable_callback
                   _monitor_pump_run
 ---------------------------------------------------------------------------------
 (1) _standby                                              1     1      0    2562
                                             15 BANK0      1     1      0
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _shutdown                                             0     0      0    2188
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _serial_process_loop                                  2     2      0    2506
                                             18 BANK0      2     2      0
                           _has_data
                           _not_full
                                _pop
                               _push
                               _puts
 ---------------------------------------------------------------------------------
 (2) _puts                                                 4     2      2     892
                                             14 BANK0      4     2      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _not_full                                             3     3      0     172
                                              7 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _receiveMessage                                       2     2      0     918
                                             15 BANK0      2     2      0
                           _has_data
                                _pop
 ---------------------------------------------------------------------------------
 (2) _pop                                                  8     8      0     533
                                              7 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _has_data                                             1     1      0     258
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _pump_run                                             0     0      0    5124
                     _clear_callback
                    _enable_callback
                   _monitor_pump_run
 ---------------------------------------------------------------------------------
 (2) _monitor_pump_run                                     1     1      0    2562
                                             15 BANK0      1     1      0
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (1) _process_message                                      5     5      0    8975
                                             21 BANK0      5     5      0
         _process_get_status_message
                 _process_reset_pump
        _process_set_address_message
          _process_set_zones_message
 ---------------------------------------------------------------------------------
 (2) _process_set_zones_message                            3     3      0    1794
                                             18 BANK0      3     3      0
                       _combineZones
                     _output_message
                     _setBaseMessage
                            _xtochar
 ---------------------------------------------------------------------------------
 (3) _xtochar                                              1     1      0     198
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _process_set_address_message                          3     3      0    1568
                                             18 BANK0      3     3      0
                     _output_message
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (2) _process_reset_pump                                   2     2      0    3722
                                             18 BANK0      2     2      0
                     _output_message
                          _resetPump
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (2) _process_get_status_message                           2     2      0    1570
                                             18 BANK0      2     2      0
                       _combineZones
                     _output_message
                     _setBaseMessage
 ---------------------------------------------------------------------------------
 (3) _setBaseMessage                                       6     5      1     483
                                              8 BANK0      6     5      1
                            _chartox
 ---------------------------------------------------------------------------------
 (4) _chartox                                              1     1      0      66
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _output_message                                       4     4      0     984
                                             14 BANK0      4     4      0
                              _putch
 ---------------------------------------------------------------------------------
 (1) _process_event_timer                                  5     5      0   11247
                                             23 BANK0      5     5      0
          _EventDumpSolenoidCallBack *
         _EventFaultStateLEDCallBack *
           _EventIdleTimeoutCallBack *
        _EventLowFogPressureCallBack *
         _EventLowWaterLevelCallBack *
      _EventLowWaterPressureCallBack *
_EventLowWaterPressureDebounceCallBa *
            _EventPODebounceCallBack *
     _EventRunSignalDebounceCallBack *
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _EventRunSignalDebounceCallBack                       1     1      0     374
                                             13 BANK0      1     1      0
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventPODebounceCallBack                              1     1      0     374
                                             13 BANK0      1     1      0
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterPressureDebounceCallBack                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterPressureCallBack                        1     1      0     374
                                             13 BANK0      1     1      0
        _clear_callback_for_shutdown
 ---------------------------------------------------------------------------------
 (2) _EventLowWaterLevelCallBack                           0     0      0    2562
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventLowFogPressureCallBack                          0     0      0    2562
        _clear_callback_for_shutdown
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _clear_callback_for_shutdown                          0     0      0     374
                     _clear_callback
 ---------------------------------------------------------------------------------
 (2) _EventIdleTimeoutCallBack                             0     0      0    2188
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventFaultStateLEDCallBack                           8     8      0    2260
                                             15 BANK0      8     8      0
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _EventDumpSolenoidCallBack                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printPumpState                                       0     0      0    1895
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printFaultState                                      0     0      0    1895
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    18      2    1895
                                             14 BANK0      9     7      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                2     2      0     648
                                             12 BANK0      2     2      0
                               _push
 ---------------------------------------------------------------------------------
 (4) _push                                                 5     4      1     617
                                              7 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _monitor_water_pressure                               1     1      0    2562
                                             15 BANK0      1     1      0
                     _clear_callback
                    _enable_callback
 ---------------------------------------------------------------------------------
 (3) _clear_callback                                       2     2      0     374
                                             11 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _checkIfShoudReset                                    0     0      0    2188
                          _resetPump
 ---------------------------------------------------------------------------------
 (3) _resetPump                                            0     0      0    2188
                               _init
                   _init_event_timer
 ---------------------------------------------------------------------------------
 (4) _init_event_timer                                     1     1      0    2188
                                             15 BANK0      1     1      0
                    _enable_callback
 ---------------------------------------------------------------------------------
 (2) _enable_callback                                      4     2      2    2188
                                             11 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     352
                                              7 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _init                                                 0     0      0       0
                       _combineZones
                            _ser_int
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _combineZones                                         1     1      0       0
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _event_timer_isr                                      5     5      0    1148
                                              2 BANK0      5     5      0
                    _usart_interrupt
 ---------------------------------------------------------------------------------
 (8) _usart_interrupt                                      2     2      0    1148
                                              9 COMMON     2     2      0
                         i1_has_data
                         i1_not_full
                              i1_pop
                             i1_push
                             i1_puts
 ---------------------------------------------------------------------------------
 (9) i1_puts                                               4     2      2     452
                                              7 COMMON     2     2      0
                                              0 BANK0      2     0      2
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             2     2      0     318
                                              5 COMMON     2     2      0
                             i1_push
 ---------------------------------------------------------------------------------
 (11) i1_push                                              5     4      1     287
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (9) i1_pop                                                8     8      0     251
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (9) i1_not_full                                           3     3      0      62
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (9) i1_has_data                                           1     1      0      62
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkIfShoudReset
     _resetPump
       _init
         _combineZones
         _ser_int
       _init_event_timer
         _enable_callback
           ___bmul
   _clear_callback
     ___bmul
   _combineZones
   _enable_callback
     ___bmul
   _init
     _combineZones
     _ser_int
   _init_event_timer
     _enable_callback
       ___bmul
   _monitor_water_pressure
     _clear_callback
       ___bmul
     _enable_callback
       ___bmul
   _printFaultState
     _printf
       _putch
         _push
   _printPumpState
     _printf
       _putch
         _push
   _printf
     _putch
       _push
   _process_event_timer
     _EventDumpSolenoidCallBack *
     _EventFaultStateLEDCallBack *
       _enable_callback
         ___bmul
     _EventIdleTimeoutCallBack *
       _enable_callback
         ___bmul
     _EventLowFogPressureCallBack *
       _clear_callback_for_shutdown
         _clear_callback
           ___bmul
       _enable_callback
         ___bmul
     _EventLowWaterLevelCallBack *
       _clear_callback_for_shutdown
         _clear_callback
           ___bmul
       _enable_callback
         ___bmul
     _EventLowWaterPressureCallBack *
       _clear_callback_for_shutdown
         _clear_callback
           ___bmul
     _EventLowWaterPressureDebounceCallBack *
     _EventPODebounceCallBack *
       _clear_callback_for_shutdown
         _clear_callback
           ___bmul
     _EventRunSignalDebounceCallBack *
       _clear_callback_for_shutdown
         _clear_callback
           ___bmul
     ___bmul *
   _process_get_status_message
     _combineZones
     _output_message
       _putch
         _push
     _setBaseMessage
       _chartox
   _process_message
     _process_get_status_message
       _combineZones
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
     _process_reset_pump
       _output_message
         _putch
           _push
       _resetPump
         _init
           _combineZones
           _ser_int
         _init_event_timer
           _enable_callback
             ___bmul
       _setBaseMessage
         _chartox
     _process_set_address_message
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
     _process_set_zones_message
       _combineZones
       _output_message
         _putch
           _push
       _setBaseMessage
         _chartox
       _xtochar
   _pump_run
     _clear_callback
       ___bmul
     _enable_callback
       ___bmul
     _monitor_pump_run
       _clear_callback
         ___bmul
       _enable_callback
         ___bmul
   _receiveMessage
     _has_data
     _pop
   _ser_int
   _serial_process_loop
     _has_data
     _not_full
     _pop
     _push
     _puts
       _putch
         _push
   _shutdown
     _enable_callback
       ___bmul
   _standby
     _clear_callback
       ___bmul
     _enable_callback
       ___bmul
   _start_main
     _clear_callback
       ___bmul
     _enable_callback
       ___bmul
     _monitor_pump_run
       _clear_callback
         ___bmul
       _enable_callback
         ___bmul
   _start_pump
     _clear_callback
       ___bmul
     _clear_callback_for_shutdown
       _clear_callback
         ___bmul
     _enable_callback
       ___bmul

 _event_timer_isr (ROOT)
   _usart_interrupt
     i1_has_data
     i1_not_full
     i1_pop
     i1_push
     i1_puts
       i1_putch
         i1_push

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      49       7       91.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2D      40       5       80.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      F4      12        0.0%
ABS                  0      0      F4       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Feb 12 12:47:06 2025

                   __size_of_process_reset_pump 001C                                               pc 0002  
                                ___bmul@product 0029                                     __CFG_CP$OFF 0000  
                                            l20 03DE                                              l22 0432  
                                            l23 03F7                                              l32 0414  
                                            l28 041D                                              l52 0F0C  
                                            l67 07F5                                              fsr 0004  
                                   __CFG_LVP$ON 0000                        _EventIdleTimeoutCallBack 0EF2  
                                           l302 045B                                             l312 04BB  
                                           l260 0294                                             l309 049F  
                                           l424 00C5                                             l712 03C3  
                                           l296 0D9F                                             l561 06AE  
                                           l490 070E                                             l618 0EDE  
                                           l811 00A6                                             l646 04E7  
                                           l647 04F2                                             l593 0F96  
                                           l595 0FAC                                             l598 0FB1  
                                           _GIE 005F                     fp__EventIdleTimeoutCallBack 004D  
                                  __CFG_CPD$OFF 0000                                             _TX9 04C6  
                                           _pop 06FC                                             fsr0 0004  
                               ?_setBaseMessage 0028                                             indf 0000  
                                    i1_has_data 0BC9                                    __CFG_FOSC$HS 0000  
                                ??_combineZones 0027                                            l3131 04E1  
                                          l2611 0E1D                                            l2603 0E12  
                                          l3091 0FA1                                            l3155 050E  
                                          l3165 052A                                            l3175 0546  
                                          l2385 0C7E                                            l2713 0CC5  
                                          l2553 0C14                                            l3177 054A  
                                          l3611 0625                                            l2389 0C84  
                                          l2901 0DF4                                            l2725 0EB5  
                                          l3453 0F29                                            l3509 0E77  
                                          l3471 0088                                            l2671 0410  
                                          l2807 04B2                                            l3631 0639  
                                          l3615 0627                                            l3473 0065  
                                          l2681 0442                                            l2673 0419  
                                          l2593 0E07                                            l3625 061C  
                                          l3467 0081                                            l2669 0407  
                                          l3637 0621                                            l3671 0687  
                                          l3663 0670                                            l3743 0277  
                                          l2961 0C76                                            l3665 0678  
                                          l2785 0474                                            l2777 0454  
                                          l3667 067D                                            l3675 068C  
                                          l2795 0491                                            l3771 02DD  
                                          l2973 0339                                            l3669 0682  
                                          l2983 03B7                                            l3767 02D1  
                                          l3783 02EF                                            l3759 02BC  
                                          l3697 00D0                                            l3689 00BD  
                                          l3777 02E3                                            l3769 02D7  
                                          l3785 0310                                            l2987 0331  
                                          l3795 0329                                            l3779 02E9  
                                          l3893 02F9                                            l3895 0694  
                                          l3897 00A0                                            ?_pop 002A  
                                          STR_1 01DC                                            STR_2 01AE  
                                          STR_3 013C                                            STR_4 0154  
                                          STR_5 0100                                            STR_6 018D  
                                          STR_7 01CD                                            STR_8 01EB  
                                          STR_9 0208                                            _CREN 00C4  
                                          _T0CS 040D                                            _FERR 00C2  
                                          u1300 0EA5                                            u1145 0563  
                                          u1314 0EA8                                            u1155 0594  
                                          u1350 0CAD                                            u1600 0DDC  
                                          u1610 0DE2                                            u1602 0DDD  
                                          u2315 0F32                                            u1612 0DE3  
                                          u1364 0CB0                                            u2370 0CE3  
                                          u2650 024B                                            u2395 0FD2  
                                          u2485 0650                                            _PEIE 005E  
                                          _RCIE 0465                                            _RCIF 0065  
                                          _OERR 00C1                                            _SPEN 00C7  
                                          _TRMT 04C1                                            _TXIE 0464  
                                          _TXEN 04C5                                            _TXIF 0064  
                                          _SYNC 04C4                                     main@message 004A  
                                  __CFG_WRT$OFF 0000                                            _main 0241  
                                          _init 0747                                            _push 0D6F  
                                          btemp 007E                                            _puts 0E71  
                                 __CFG_BOREN$ON 0000                                            pop@d 002D  
                                    i1_not_full 0C8D                                            start 0012  
            __size_of_EventDumpSolenoidCallBack 0006                                 _event_timer_isr 0CFD  
                               __end_ofi1_putch 0BF4                            process_event_timer@i 003B  
                             ___bmul@multiplier 002A                        ??_monitor_water_pressure 002F  
               ??_EventLowWaterPressureCallBack 002D                                           ??_pop 0027  
                              ?_usart_interrupt 0070                                           ?_main 0070  
                                         ?_init 0070                                           STR_10 0220  
                                         STR_11 0214                                           STR_12 022C  
                                         STR_20 019E                                           STR_21 019E  
                                         STR_13 0237                                           STR_14 01FA  
                                         STR_16 0169                                           STR_17 017B  
                                 __CFG_WDTE$OFF 0000                                           STR_18 01BE  
                                         STR_19 011F                                           ?_push 0027  
                                         ?_puts 002E                                           _PCFG3 04FB  
                                         i1l490 07A2                                           _RCREG 001A  
                                         _RCSTA 0018                                           _SPBRG 0099  
                                         _PORTA 0005                                           _PORTB 0006  
                                         _PORTD 0008                                           _TRISA 0085  
                                         _TRISB 0086                                           _TRISD 0088  
                                         _TXREG 0019                                           _TXSTA 0098  
                                         i1_pop 0792                                 __end_of_chartox 0C17  
                       __size_of_clear_callback 0010                                 _enable_callback 0F53  
                         receiveMessage@message 00DF                                           _state 0054  
                                         _putch 0BFE                                           fpbase 0043  
                      __size_of_printFaultState 0001                                 __end_of_ser_int 0DD6  
                                         pclath 000A                                           push@d 0027  
                               __end_of_standby 0FC1                                           puts@c 0030  
                                         status 0003                                           wtemp0 007E  
                           _process_event_timer 0330                                 __end_of_xtochar 0E1F  
                  ?_clear_callback_for_shutdown 0070                               receiveMessage@len 004D  
                               __initialization 0015                                      i1push@buff 0074  
                                  __end_of_main 0330                                    __end_of_init 0792  
                                  __end_of_push 0D91                                    __end_of_puts 0E9A  
                                        ??_main 003C                                          ??_init 0028  
                                        ??_push 0028                                          ??_puts 0030  
                          ?_process_event_timer 0070                  fp__EventLowFogPressureCallBack 0053  
                                        ?i1_pop 0070                                     ?i1_has_data 0070  
                                        _ADCON1 009F                                          ?_putch 0070  
                                        i1l3539 0E25                                          i1l3715 06CF  
                                        i1l3725 06E4                                          i1l3821 0D05  
                       __end_of_event_timer_isr 0D17                                          u242_20 0CA0  
                                     ??i1_putch 0075                                          _TMR0IE 005D  
                                        _TMR0IF 005A                               ?_monitor_pump_run 0070  
                                        _TRISC6 043E                                          _TRISC7 043F  
                              __end_of__fptable 005F                                   _outputMessage 0055  
                                        i1_push 0D4F                                     ?i1_not_full 0070  
                                        i1_puts 0E1F                              ??_monitor_pump_run 002F  
                                        i1pop@d 0076                                  __CFG_PWRTE$OFF 0000  
                              __end_of_has_data 0BEA                     __end_of_serial_process_loop 00EA  
                                        ___bmul 0C7A                 __size_of_monitor_water_pressure 0023  
                              ??_printPumpState 0037                            __end_of_combineZones 0BFE  
                                     ??_chartox 0027                                          _printf 005F  
                       __size_of_output_message 0032                           ??_process_event_timer 0037  
                   ?_EventLowWaterLevelCallBack 0070           __end_of_EventLowWaterPressureCallBack 0EC4  
        __size_of_EventLowWaterPressureCallBack 002A                   _EventLowWaterPressureCallBack 0E9A  
          process_set_address_message@inmessage 0034                         __end_of_enable_callback 0F88  
                                        fptable 003E                                          fptotal 0012  
                              __end_of_not_full 0CE5                     ??_process_set_zones_message 0032  
                                        saved_w 007E                                       ??_ser_int 0027  
                             _checkIfShoudReset 0C68                                __end_of_shutdown 0C57  
                                        putch@c 002D                                       ??_standby 002F  
                              __end_of_pump_run 0DB3                                ??_receiveMessage 002F  
                            ?_checkIfShoudReset 0070                                       ??_xtochar 0027  
                       __end_of__initialization 003A                    fp__EventDumpSolenoidCallBack 004A  
                      ?_EventPODebounceCallBack 0070                        main@sendGetMessageBuffer 0040  
                           ??_checkIfShoudReset 0030                               ??_printFaultState 0037  
                           ___bmul@multiplicand 0027                                   __end_ofi1_pop 07DB  
                           __size_ofi1_has_data 0007                      ??_EventIdleTimeoutCallBack 002F  
                                __pcstackCOMMON 0070                                    __pidataBANK3 0CE5  
                  ??_EventFaultStateLEDCallBack 002F                                ??_setBaseMessage 0029  
                     __size_of_init_event_timer 0054                                   __end_of_putch 0C0A  
                                _inIdleDumpHour 0053                       __end_of_checkIfShoudReset 0C7A  
                                       ??i1_pop 0070                             __size_ofi1_not_full 0015  
          __size_of_clear_callback_for_shutdown 0029                                  _clear_callback 0C26  
                        _monitor_water_pressure 0DD6                        __size_of_process_message 004E  
                                       ??_putch 002C                                      __pbssBANK0 004D  
                                    __pbssBANK1 00A0                                      __pbssBANK3 0190  
                              ?_event_timer_isr 0070                       setBaseMessage@messageType 002C  
                  ??_process_get_status_message 0032                                         ?i1_push 0070  
                     _process_set_zones_message 0FC1                                         ?i1_puts 0020  
                    __end_of_process_reset_pump 0D4F             __end_of_EventLowFogPressureCallBack 07FE  
                   _EventLowFogPressureCallBack 07DB                                      __pmaintext 0241  
                                       ?___bmul 0027                                      __pintentry 0004  
                            __size_of_resetPump 0009                                         ?_printf 002E  
                              ?_enable_callback 002B                        process_message@inmessage 0039  
                        __end_of_clear_callback 0C36                   fp__EventLowWaterLevelCallBack 005C  
                                     ?_has_data 002A             __size_of_process_get_status_message 001C  
                                    _commsZones 0052                                      __stringtab 0800  
               __end_of_EventPODebounceCallBack 0C46                                         i1_putch 0BEA  
                                       i1push@d 0070                                         i1puts@c 0077  
           __size_of_EventLowWaterLevelCallBack 0017                                 __size_ofi1_push 0020  
                               __size_ofi1_puts 0029                           __size_of_combineZones 000A  
                                     ?_not_full 002A                                 __size_of___bmul 0013  
                                     ?_shutdown 0070                                       ?_pump_run 0070  
                                       _chartox 0C0A                                  _output_message 0F21  
                                       __ptext1 04D3                                         __ptext2 0EC4  
                                       __ptext3 0F88                                         __ptext4 0C46  
                                       __ptext5 00A7                                         __ptext6 0E71  
                                       __ptext7 0CCE                                         __ptext8 0612  
                                       __ptext9 06FC                                 __size_of_printf 0048  
                                       _inbound 0190                                 ?_clear_callback 0070  
                                  __size_of_pop 004B                      __size_of_checkIfShoudReset 0012  
                                  ??i1_has_data 0070                                         _ser_int 0DB3  
                      __size_of_usart_interrupt 004D                                      ??_has_data 0027  
                                       _standby 0F88                                         clrloop0 0BD1  
                        clear_callback@callback 002C                            end_of_initialization 003A  
                                  _combineZones 0BF4                                         _xtochar 0DF9  
                             __end_of_resetPump 0BE1                               ??_process_message 0035  
                                  ??i1_not_full 0070                                         pop@buff 002E  
                  ?_process_set_address_message 0070                                      ??_not_full 0027  
                                       printf@c 0036                                         printf@f 002E  
                            __end_ofi1_has_data 0BD0              __end_of_EventFaultStateLEDCallBack 044D  
                    _EventFaultStateLEDCallBack 03C5                          __end_of_output_message 0F53  
                    ?_EventDumpSolenoidCallBack 0070                                      ??_shutdown 002F  
                                       puts@str 002E                                    __pstringtext 0100  
                                    ??_pump_run 0030                                _init_event_timer 05BE  
                              usart_interrupt@a 007A                       __size_of_monitor_pump_run 0086  
                                     _PORTAbits 0005                                       _PORTCbits 0007  
                                     _PORTEbits 0009                                       _TRISAbits 0085  
                                     _TRISCbits 0087                                       _TRISEbits 0089  
                            __end_ofi1_not_full 0CA2                                 _printFaultState 07FF  
                                    _start_main 0EC4                                      _start_pump 04D3  
            __end_of_process_get_status_message 0D33                      _process_get_status_message 0D17  
                       enable_callback@callback 002E               fp__EventRunSignalDebounceCallBack 0044  
              ??_EventRunSignalDebounceCallBack 002D                 ?_EventRunSignalDebounceCallBack 0070  
                                __end_ofi1_push 0D6F                   ??_process_set_address_message 0032  
                                __end_ofi1_puts 0E48                                 receiveMessage@c 0030  
                   __end_of_process_event_timer 03C5                                 ?_output_message 0070  
                                __end_of___bmul 0C8D               __end_of_EventDumpSolenoidCallBack 0BC9  
            __size_of_process_set_zones_message 003F                    __size_of_serial_process_loop 0043  
              __size_of_EventPODebounceCallBack 0010                                       i1pop@buff 0077  
                             _PumpStateMappings 01D8                         ?_monitor_water_pressure 0070  
                                __end_of_printf 00A7                             start_initialization 0015  
      fp__EventLowWaterPressureDebounceCallBack 0056   __end_of_EventLowWaterPressureDebounceCallBack 0CB7  
__size_of_EventLowWaterPressureDebounceCallBack 0015         ??_EventLowWaterPressureDebounceCallBack 0027  
        ?_EventLowWaterPressureDebounceCallBack 0070           _EventLowWaterPressureDebounceCallBack 0CA2  
                                   __end_of_pop 0747                                       i1puts@str 0020  
                   process_reset_pump@inmessage 0033                               ??_usart_interrupt 0079  
                                      ??i1_push 0071                                        ??i1_puts 0077  
           __end_of_clear_callback_for_shutdown 0E71                     _clear_callback_for_shutdown 0E48  
                                      ??___bmul 0028                                      init_fetch0 0C57  
                                   __pdataBANK3 01D8                   ??_clear_callback_for_shutdown 002D  
                __end_of_monitor_water_pressure 0DF9                                        ??_printf 0030  
                            _process_reset_pump 0D33               __end_of_process_set_zones_message 1000  
          __size_of_EventLowFogPressureCallBack 0023                         __end_of_printFaultState 0800  
          __size_of_process_set_address_message 0015                         __size_of_printPumpState 0001  
                                     ___latbits 0002               __size_of_EventIdleTimeoutCallBack 002F  
                                 __pcstackBANK0 0020                       ?_EventIdleTimeoutCallBack 0070  
                           ?_process_reset_pump 0070                               __size_of__fptable 0021  
                                   ?_start_main 0070                               __size_of_has_data 0009  
                                   ?_start_pump 0070                                        ?i1_putch 0070  
                                     __pnvBANK0 005F                         __size_of_receiveMessage 004F  
                          ??_process_reset_pump 0032                        __size_of_event_timer_isr 001A  
                                     __pfunctab 003E                               __size_of_not_full 0017  
                              ??_clear_callback 002B                                _monitor_pump_run 044D  
                                      ?_chartox 0070                                       __pstrings 0800  
                               setBaseMessage@v 002D                               __size_of_shutdown 0011  
                             __size_of_pump_run 0022                                  __size_ofi1_pop 0049  
                               _process_message 0661                                        ?_ser_int 0070  
                         output_message@message 0031                         __size_of_setBaseMessage 006D  
                                      ?_standby 0070                            serial_process_loop@a 0033  
                                __size_of_putch 000C                        __size_of_enable_callback 0035  
                                      ?_xtochar 0070                        __end_of_init_event_timer 0612  
                                   _fault_flags 004F             process_get_status_message@inmessage 0033  
                             interrupt_function 0004                                       clear_ram0 0BD0  
                                     _resetPump 0BD8                                       main@F1063 01E6  
            process_set_zones_message@inmessage 0034                     ?_EventFaultStateLEDCallBack 0070  
                   ??_EventDumpSolenoidCallBack 0027                                 output_message@i 002F  
                       _EventPODebounceCallBack 0C36                      fp__EventPODebounceCallBack 0047  
                           __size_of_start_main 002E                             __size_of_start_pump 007E  
                                   __stringbase 0812                    ??_EventLowWaterLevelCallBack 002F  
                              ?_printFaultState 0070                fp__EventLowWaterPressureCallBack 0059  
                ?_EventLowWaterPressureCallBack 0070                                        i1putch@c 0076  
                           _serial_process_loop 00A7                     ?_process_get_status_message 0070  
                              __size_ofi1_putch 000A                                ??_output_message 002E  
                _EventFaultStateLEDCallBack$146 0031                  _EventFaultStateLEDCallBack$147 0033  
                _EventFaultStateLEDCallBack$148 0035                                      ?_resetPump 0070  
                       __end_of_process_message 06AF                            ?_serial_process_loop 0070  
                            __end_of__stringtab 0812                               ??_event_timer_isr 0022  
                              __size_of_chartox 000D                                  _printPumpState 07FE  
        __end_of_EventRunSignalDebounceCallBack 0C26         __size_of_EventRunSignalDebounceCallBack 000F  
                _EventRunSignalDebounceCallBack 0C17                                        __fptable 003E  
                               main@msg_counter 004B                                 _usart_interrupt 06AF  
                                      __ptext10 0BE1                                        __ptext11 0D91  
                                      __ptext20 0C0A                                        __ptext12 044D  
                                      __ptext21 0F21                                        __ptext13 0661  
                                      __ptext30 0BC3                                        __ptext22 0330  
                                      __ptext14 0FC1                                        __ptext31 0C17  
                                      __ptext23 0C36                                        __ptext15 0DF9  
                                      __ptext40 0C68                                        __ptext32 0E48  
                                      __ptext24 0CA2                                        __ptext16 00EA  
                                      __ptext41 0BD8                                        __ptext33 07FE  
                                      __ptext25 0E9A                                        __ptext17 0D33  
                                      __ptext50 0E1F                                        __ptext42 05BE  
                                      __ptext34 07FF                                        __ptext26 0CB7  
                                      __ptext18 0D17                                        __ptext51 0BEA  
                                      __ptext43 0F53                                        __ptext35 005F  
                                      __ptext27 07DB                                        __ptext19 0551  
                                      __ptext52 0D4F                                        __ptext44 0C7A  
                                      __ptext36 0BFE                                        __ptext28 0EF2  
                                      __ptext53 0792                                        __ptext45 0747  
                                      __ptext37 0D6F                                        __ptext29 03C5  
                                      _has_data 0BE1                                        __ptext54 0C8D  
                                      __ptext46 0DB3                                        __ptext38 0DD6  
                                      __ptext55 0BC9                                        __ptext47 0BF4  
                                      __ptext39 0C26                                        __ptext48 0CFD  
                                      __ptext49 06AF                                __size_of_ser_int 0023  
                     _EventDumpSolenoidCallBack 0BC3                                __size_of_standby 0039  
                        process_message@msgType 0037                                __size_of_xtochar 0026  
                      setBaseMessage@msgAddress 0028                                   __size_of_main 00EF  
                                 __size_of_init 004B                                   __size_of_push 0022  
                                 __size_of_puts 0029                                        chartox@c 0027  
                             ??_enable_callback 002D                                  _receiveMessage 0612  
                  ?_EventLowFogPressureCallBack 0070                                        _not_full 0CCE  
                                  not_full@buff 0029                       ??_EventPODebounceCallBack 002D  
              __end_of_EventIdleTimeoutCallBack 0F21                                        _shutdown 0C46  
                     enable_callback@time_delay 002B                                        _outbound 01B4  
                                      _pump_run 0D91                           ??_serial_process_loop 0032  
                        __end_of_printPumpState 07FF                   fp__EventFaultStateLEDCallBack 0050  
                  __size_of_process_event_timer 0095                                   _combinedZones 005F  
                                _setBaseMessage 0551                                        init_ram0 0C5B  
                                  ??_start_main 0030                                        intlevel1 003E  
                                  ??_start_pump 002F             __size_of_EventFaultStateLEDCallBack 0088  
                      __end_of_monitor_pump_run 04D3             __end_of_process_set_address_message 00FF  
                   _process_set_address_message 00EA                          __end_of_receiveMessage 0661  
                                  has_data@buff 0027                                       stringcode 080A  
                      _process_event_timer$2111 003A                                     ??_resetPump 0030  
                 ??_EventLowFogPressureCallBack 002F                                        printf@ap 0034  
                                  _timer_events 00A0                                        push@buff 002B  
                                i1not_full@buff 0072                         __end_of_usart_interrupt 06FC  
                              ?_process_message 0070              __end_of_EventLowWaterLevelCallBack 0CCE  
                    _EventLowWaterLevelCallBack 0CB7                                 ?_printPumpState 0070  
                            __end_of_start_main 0EF2                              __end_of_start_pump 0551  
                    ?_process_set_zones_message 0070                          __end_of_setBaseMessage 05BE  
                                      stringtab 0800                                     _timer_count 0051  
                                 ?_combineZones 0070                                        xtochar@x 0027  
                             ?_init_event_timer 0070                                 ?_receiveMessage 0070  
                            ??_init_event_timer 002F                                  i1has_data@buff 0070  
